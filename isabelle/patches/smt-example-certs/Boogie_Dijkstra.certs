9d6b81d96fb21c8c08e3f1fd649ce37bdafb5f92 3015 0
unsat
((set-logic AUFLIA)
(declare-fun ?v0!19 () B_Vertex$)
(declare-fun ?v1!18 () B_Vertex$)
(declare-fun ?v0!20 () B_Vertex$)
(declare-fun ?v0!17 () B_Vertex$)
(declare-fun ?v1!16 () B_Vertex$)
(declare-fun ?v0!15 () B_Vertex$)
(declare-fun ?v0!14 () B_Vertex$)
(declare-fun ?v0!13 () B_Vertex$)
(declare-fun ?v0!12 () B_Vertex$)
(declare-fun ?v0!11 () B_Vertex$)
(declare-fun ?v1!10 () B_Vertex$)
(declare-fun ?v1!9 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!8 () B_Vertex$)
(declare-fun ?v1!7 (B_Vertex$) B_Vertex$)
(declare-fun ?v1!6 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!5 () B_Vertex$)
(declare-fun ?v0!4 () B_Vertex$)
(declare-fun ?v1!3 () B_Vertex$)
(declare-fun ?v0!2 () B_Vertex$)
(declare-fun ?v1!1 () B_Vertex$)
(declare-fun ?v0!0 () B_Vertex$)
(proof
(let ((?x1893 (v_b_SP_G_2$ ?v0!19)))
(let ((?x1894 (* (- 1) ?x1893)))
(let ((?x1892 (v_b_SP_G_2$ ?v1!18)))
(let ((?x1884 (pair$ ?v1!18 ?v0!19)))
(let ((?x1885 (b_G$ ?x1884)))
(let (($x1896 (>= (+ ?x1885 ?x1892 ?x1894) 0)))
(let (($x1888 (<= (+ b_Infinity$ (* (- 1) ?x1885)) 0)))
(let (($x1883 (fun_app$ v_b_Visited_G_2$ ?v1!18)))
(let (($x2791 (not $x1883)))
(let (($x2806 (or $x2791 $x1888 $x1896)))
(let (($x2811 (not $x2806)))
(let (($x3729 (forall ((?v1 B_Vertex$) )(! (let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x2242 (= (+ ?x273 ?x1912 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(or (>= (+ ?x273 ?x1912) 0) $x300 (not $x2242)))))))) :pattern ( (v_b_SP_G_2$ ?v1) ) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!20) ) :qid k!42))
))
(let (($x3734 (not $x3729)))
(let (($x1914 (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?v0!20))) 0)))
(let (($x1909 (= ?v0!20 b_Source$)))
(let (($x3720 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1282 (>= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(or $x300 $x922 $x1282))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!42))
))
(let (($x3725 (not $x3720)))
(let (($x3737 (or $x3725 $x1909 $x1914 $x3734)))
(let ((?x4393 (fun_app$c v_b_SP_G_1$ ?v0!20)))
(let ((?x4418 (* (- 1) ?x4393)))
(let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x4419 (+ ?x1911 ?x4418)))
(let (($x5977 (>= ?x4419 0)))
(let (($x4400 (= ?x1911 ?x4393)))
(let ((?x4434 (pair$ v_b_v_G_1$ ?v0!20)))
(let ((?x4435 (b_G$ ?x4434)))
(let ((?x4436 (* (- 1) ?x4435)))
(let ((?x3104 (v_b_SP_G_2$ v_b_v_G_1$)))
(let ((?x3105 (* (- 1) ?x3104)))
(let ((?x4546 (+ ?x1911 ?x3105 ?x4436)))
(let (($x4569 (<= ?x4546 0)))
(let (($x3740 (not $x3737)))
(let ((@x4391 (hypothesis $x3740)))
(let ((@x3222 (def-axiom (or $x3737 $x3720))))
(let (($x4161 (>= ?x3104 0)))
(let (($x3703 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(>= ?x273 0)) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!42))
))
(let (($x3743 (or $x2811 $x3740)))
(let (($x3746 (not $x3743)))
(let (($x3712 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1262 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x2768 (not (fun_app$ v_b_Visited_G_2$ ?v0))))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x291 $x2768 $x1262)))) :pattern ( (v_b_SP_G_2$ ?v1) (v_b_SP_G_2$ ?v0) ) :qid k!42))
))
(let (($x3717 (not $x3712)))
(let (($x3749 (or $x3717 $x3746)))
(let (($x3752 (not $x3749)))
(let (($x1869 (>= (+ (v_b_SP_G_2$ ?v1!16) (* (- 1) (v_b_SP_G_2$ ?v0!17))) 0)))
(let (($x1862 (fun_app$ v_b_Visited_G_2$ ?v0!17)))
(let (($x2745 (not $x1862)))
(let (($x1860 (fun_app$ v_b_Visited_G_2$ ?v1!16)))
(let (($x2760 (or $x1860 $x2745 $x1869)))
(let (($x2765 (not $x2760)))
(let (($x3755 (or $x2765 $x3752)))
(let (($x3758 (not $x3755)))
(let (($x3708 (not $x3703)))
(let (($x3761 (or $x3708 $x3758)))
(let (($x3764 (not $x3761)))
(let ((?x1846 (v_b_SP_G_2$ ?v0!15)))
(let (($x1847 (>= ?x1846 0)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x3904 (>= ?x257 0)))
(let (($x3556 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(>= ?x174 0)) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :qid k!42))
))
(let (($x1848 (not $x1847)))
(let (($x3767 (or $x1848 $x3764)))
(let (($x3770 (not $x3767)))
(let ((?x296 (v_b_SP_G_2$ b_Source$)))
(let (($x297 (= ?x296 0)))
(let (($x773 (not $x297)))
(let (($x3773 (or $x773 $x3770)))
(let (($x3776 (not $x3773)))
(let (($x3779 (or $x773 $x3776)))
(let (($x3782 (not $x3779)))
(let (($x3695 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x300 (not $x291)))
(or $x300 $x278)))))) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :qid k!42))
))
(let (($x3700 (not $x3695)))
(let (($x3785 (or $x3700 $x3782)))
(let (($x3788 (not $x3785)))
(let ((?x1827 (fun_app$c v_b_SP_G_1$ ?v0!14)))
(let ((?x1826 (v_b_SP_G_2$ ?v0!14)))
(let (($x1828 (= ?x1826 ?x1827)))
(let (($x1829 (or (not (fun_app$ v_b_Visited_G_2$ ?v0!14)) $x1828)))
(let (($x1830 (not $x1829)))
(let (($x3791 (or $x1830 $x3788)))
(let (($x3794 (not $x3791)))
(let (($x3686 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$c v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!42))
))
(let (($x3691 (not $x3686)))
(let (($x3797 (or $x3691 $x3794)))
(let (($x3800 (not $x3797)))
(let ((?x1809 (v_b_SP_G_2$ ?v0!13)))
(let ((?x1810 (* (- 1) ?x1809)))
(let ((?x1808 (fun_app$c v_b_SP_G_1$ ?v0!13)))
(let ((?x1811 (+ ?x1808 ?x1810)))
(let (($x1812 (>= ?x1811 0)))
(let (($x1813 (not $x1812)))
(let (($x3803 (or $x1813 $x3800)))
(let (($x3806 (not $x3803)))
(let (($x3678 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1173 (* (- 1) ?x257)))
(let (($x1175 (<= (+ ?x174 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2717 (or $x1169 $x1175)))
(let (($x2718 (not $x2717)))
(or $x2718 $x278)))))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!42))
))
(let (($x3683 (not $x3678)))
(let (($x3670 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(let ((?x1186 (* (- 1) ?x273)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1185 (= (+ ?x257 ?x268 ?x1186) 0)))
(let (($x1175 (<= (+ (fun_app$c v_b_SP_G_1$ ?v0) (* (- 1) ?x257) (* (- 1) ?x268)) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) ?x268)) 0)))
(or $x1169 $x1175 $x1185)))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!42))
))
(let (($x3675 (not $x3670)))
(let ((?x263 (fun_upd$ v_b_Visited_G_1$)))
(let ((?x264 (fun_app$b ?x263 v_b_v_G_1$)))
(let ((?x265 (fun_app$a ?x264 true)))
(let (($x266 (= v_b_Visited_G_2$ ?x265)))
(let (($x2935 (not $x266)))
(let (($x3660 (forall ((?v0 B_Vertex$) )(! (let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1173 (* (- 1) ?x257)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x178 (>= (+ ?x174 ?x1173) 0)))))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :qid k!42))
))
(let (($x3665 (not $x3660)))
(let ((?x1173 (* (- 1) ?x257)))
(let ((?x1212 (+ b_Infinity$ ?x1173)))
(let (($x1213 (<= ?x1212 0)))
(let (($x255 (fun_app$ v_b_Visited_G_1$ v_b_v_G_1$)))
(let ((?x1775 (fun_app$c v_b_SP_G_1$ ?v0!12)))
(let ((?x1776 (* (- 1) ?x1775)))
(let ((?x1777 (+ b_Infinity$ ?x1776)))
(let (($x1778 (<= ?x1777 0)))
(let (($x1773 (fun_app$ v_b_Visited_G_1$ ?v0!12)))
(let (($x3809 (or $x1773 $x1778 $x255 $x1213 $x3665 $x2935 $x3675 $x3683 $x3806)))
(let (($x3812 (not $x3809)))
(let ((?x245 (fun_app$c v_b_SP_G_3$ b_Source$)))
(let (($x246 (= ?x245 0)))
(let (($x3622 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1140 (>= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(or $x1099 $x922 $x1140)))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!42))
))
(let (($x3627 (not $x3622)))
(let (($x3630 (or $x3627 $x246)))
(let (($x3633 (not $x3630)))
(let ((?x1734 (fun_app$c v_b_SP_G_3$ ?v0!11)))
(let ((?x1735 (* (- 1) ?x1734)))
(let ((?x1726 (pair$ ?v1!10 ?v0!11)))
(let ((?x1727 (b_G$ ?x1726)))
(let ((?x1721 (fun_app$c v_b_SP_G_3$ ?v1!10)))
(let ((?x2206 (+ ?x1721 ?x1727 ?x1735)))
(let (($x2209 (>= ?x2206 0)))
(let (($x1730 (<= (+ b_Infinity$ (* (- 1) ?x1727)) 0)))
(let (($x1724 (<= (+ b_Infinity$ (* (- 1) ?x1721)) 0)))
(let (($x2645 (or $x1724 $x1730 $x2209)))
(let (($x2650 (not $x2645)))
(let (($x3636 (or $x2650 $x3633)))
(let (($x3639 (not $x3636)))
(let (($x3614 (forall ((?v0 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let ((?x2191 (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2192 (= ?x2191 0)))
(let (($x2176 (<= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2617 (not (or $x2176 (not $x2192)))))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x1099 $x2617)))))))) :pattern ( (fun_app$c v_b_SP_G_3$ ?v0) ) :qid k!42))
))
(let (($x3619 (not $x3614)))
(let (($x3642 (or $x3619 $x3639)))
(let (($x3645 (not $x3642)))
(let (($x3600 (forall ((?v1 B_Vertex$) )(! (let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let (($x2148 (= (+ ?x230 ?x1662 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x230 ?x1662) 0) (not $x2148)))))) :pattern ( (fun_app$c v_b_SP_G_3$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!8) ) :qid k!42))
))
(let (($x3605 (not $x3600)))
(let (($x1664 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0!8))) 0)))
(let (($x1659 (= ?v0!8 b_Source$)))
(let (($x3608 (or $x1659 $x1664 $x3605)))
(let (($x3611 (not $x3608)))
(let (($x3648 (or $x3611 $x3645)))
(let (($x3651 (not $x3648)))
(let (($x220 (= v_b_oldSP_G_1$ v_b_oldSP_G_0$)))
(let (($x2709 (not $x220)))
(let (($x217 (= v_b_SP_G_3$ v_b_SP_G_1$)))
(let (($x2708 (not $x217)))
(let (($x215 (= v_b_v_G_2$ v_b_v_G_0$)))
(let (($x2707 (not $x215)))
(let (($x212 (= v_b_Visited_G_3$ v_b_Visited_G_1$)))
(let (($x2706 (not $x212)))
(let (($x3590 (forall ((?v0 B_Vertex$) )(! (let (($x1002 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0))) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x178 $x1002))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :qid k!42))
))
(let (($x3595 (not $x3590)))
(let (($x3654 (or $x3595 $x2706 $x2707 $x2708 $x2709 $x3651)))
(let (($x3657 (not $x3654)))
(let (($x3815 (or $x3657 $x3812)))
(let (($x3818 (not $x3815)))
(let (($x3581 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x2128 (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2129 (= ?x2128 0)))
(let (($x2113 (<= (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2551 (not (or $x2113 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2129)))))
(let (($x1002 (<= (+ b_Infinity$ (* (- 1) ?x174)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x1002 $x2551)))))))) :pattern ( (fun_app$c v_b_SP_G_1$ ?v0) ) :qid k!42))
))
(let (($x3586 (not $x3581)))
(let (($x3573 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x990 (>= (+ ?x155 ?x174 ?x991) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x179 (not $x178)))
(or $x179 $x922 $x990))))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!42))
))
(let (($x3578 (not $x3573)))
(let (($x3565 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let (($x1015 (>= (+ ?x174 ?x991) 0)))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x2492 (not $x180)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x178 $x2492 $x1015)))))))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v1) (fun_app$ v_b_Visited_G_1$ ?v0) ) :qid k!42))
))
(let (($x3570 (not $x3565)))
(let (($x3561 (not $x3556)))
(let ((?x172 (fun_app$c v_b_SP_G_1$ b_Source$)))
(let (($x173 (= ?x172 0)))
(let (($x2952 (not $x173)))
(let (($x3547 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(let ((?x2090 (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2091 (= ?x2090 0)))
(let (($x2075 (<= (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2478 (not (or $x2075 (not (v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2091)))))
(let (($x947 (<= (+ b_Infinity$ (* (- 1) ?x128)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x947 $x2478)))))))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!42))
))
(let (($x3552 (not $x3547)))
(let (($x3821 (or $x3552 $x2952 $x3561 $x3570 $x3578 $x3586 $x3818)))
(let (($x3824 (not $x3821)))
(let (($x3533 (forall ((?v1 B_Vertex$) )(! (let ((?x1540 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1541 (* (- 1) ?x1540)))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(or (>= (+ ?x128 ?x1541) 0) $x137 (not (= (+ ?x128 ?x1541 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :pattern ( (v_b_SP_G_0$ ?v1) ) :pattern ( (v_b_Visited_G_0$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!5) ) :qid k!42))
))
(let (($x3538 (not $x3533)))
(let ((?x1540 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1541 (* (- 1) ?x1540)))
(let ((?x1542 (+ b_Infinity$ ?x1541)))
(let (($x1543 (<= ?x1542 0)))
(let (($x1538 (= ?v0!5 b_Source$)))
(let (($x3541 (or $x1538 $x1543 $x3538)))
(let (($x1539 (not $x1538)))
(let ((@x6246 (unit-resolution (def-axiom (or $x3541 $x1539)) (hypothesis (not $x3541)) $x1539)))
(let (($x5625 (= b_Infinity$ ?x1540)))
(let (($x6457 (not $x5625)))
(let (($x1544 (not $x1543)))
(let ((@x6514 (unit-resolution (def-axiom (or $x3541 $x1544)) (hypothesis (not $x3541)) $x1544)))
(let ((@x5778 (symm (commutativity (= $x5625 (= ?x1540 b_Infinity$))) (= (= ?x1540 b_Infinity$) $x5625))))
(let (($x5616 (= ?x1540 b_Infinity$)))
(let (($x3493 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(or $x127 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!42))
))
(let (($x360 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(or $x127 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :qid k!42))
))
(let (($x127 (= ?0 b_Source$)))
(let (($x357 (or $x127 (= (v_b_SP_G_0$ ?0) b_Infinity$))))
(let (($x138 (forall ((?v0 B_Vertex$) )(! (let (($x136 (v_b_Visited_G_0$ ?v0)))
(not $x136)) :qid k!42))
))
(let (($x354 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(or $x132 (= (v_b_SP_G_0$ ?v0) 0)))) :qid k!42))
))
(let (($x890 (and $x354 $x360 $x138)))
(let (($x1329 (forall ((?v0 B_Vertex$) )(! (let (($x1323 (exists ((?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1306 (= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1262 (>= (+ ?x273 (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x1309 (not $x1262)))
(and $x1309 $x291 $x1306))))))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1300 (and $x132 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))))
(or (not $x1300) $x1323))))) :qid k!42))
))
(let (($x1289 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1282 (>= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x923 (not $x922)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1276 (and $x291 $x923)))
(let (($x1279 (not $x1276)))
(or $x1279 $x1282))))))))) :qid k!42))
))
(let (($x1292 (not $x1289)))
(let (($x1332 (or $x1292 $x1329)))
(let (($x1335 (and $x1289 $x1332)))
(let (($x1270 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1262 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(let (($x302 (and $x300 (fun_app$ v_b_Visited_G_2$ ?v0))))
(let (($x664 (not $x302)))
(or $x664 $x1262)))))) :qid k!42))
))
(let (($x1273 (not $x1270)))
(let (($x1338 (or $x1273 $x1335)))
(let (($x1341 (and $x1270 $x1338)))
(let (($x1256 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(>= ?x273 0)) :qid k!42))
))
(let (($x1259 (not $x1256)))
(let (($x1344 (or $x1259 $x1341)))
(let (($x1347 (and $x1256 $x1344)))
(let (($x1350 (or $x773 $x1347)))
(let (($x1353 (and $x297 $x1350)))
(let (($x652 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x300 (not $x291)))
(or $x300 $x278)))))) :qid k!42))
))
(let (($x785 (not $x652)))
(let (($x1356 (or $x785 $x1353)))
(let (($x1359 (and $x652 $x1356)))
(let (($x1247 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$c v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :qid k!42))
))
(let (($x1250 (not $x1247)))
(let (($x1362 (or $x1250 $x1359)))
(let (($x1365 (and $x1247 $x1362)))
(let (($x1199 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1173 (* (- 1) ?x257)))
(let (($x1175 (<= (+ ?x174 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1179 (and (not $x1169) (not $x1175))))
(or $x1179 $x278))))))))) :qid k!42))
))
(let (($x1193 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(let ((?x1186 (* (- 1) ?x273)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1185 (= (+ ?x257 ?x268 ?x1186) 0)))
(let (($x1175 (<= (+ (fun_app$c v_b_SP_G_1$ ?v0) (* (- 1) ?x257) (* (- 1) ?x268)) 0)))
(let (($x1179 (and (not (<= (+ b_Infinity$ (* (- 1) ?x268)) 0)) (not $x1175))))
(let (($x1182 (not $x1179)))
(or $x1182 $x1185))))))))) :qid k!42))
))
(let (($x1209 (forall ((?v0 B_Vertex$) )(! (let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1173 (* (- 1) ?x257)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x178 (>= (+ ?x174 ?x1173) 0)))))) :qid k!42))
))
(let (($x1214 (not $x1213)))
(let (($x256 (not $x255)))
(let (($x1080 (exists ((?v0 B_Vertex$) )(! (let (($x1002 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0))) 0)))
(let (($x1003 (not $x1002)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x179 (not $x178)))
(and $x179 $x1003))))) :qid k!42))
))
(let (($x1235 (and $x1080 $x256 $x1214 $x1209 $x266 $x1193 $x1199)))
(let (($x1240 (not $x1235)))
(let (($x1368 (or $x1240 $x1365)))
(let (($x1146 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1140 (>= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x923 (not $x922)))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(let (($x1100 (not $x1099)))
(let (($x1134 (and $x1100 $x923)))
(let (($x1137 (not $x1134)))
(or $x1137 $x1140)))))))))) :qid k!42))
))
(let (($x1149 (not $x1146)))
(let (($x1152 (or $x1149 $x246)))
(let (($x1155 (and $x1146 $x1152)))
(let (($x1128 (forall ((?v0 B_Vertex$) )(! (let (($x1122 (exists ((?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(and (not (>= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)) (= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)))) :qid k!42))
))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)))
(let (($x1100 (not $x1099)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1103 (and $x132 $x1100)))
(let (($x1106 (not $x1103)))
(or $x1106 $x1122)))))))) :qid k!42))
))
(let (($x1131 (not $x1128)))
(let (($x1158 (or $x1131 $x1155)))
(let (($x1161 (and $x1128 $x1158)))
(let (($x1083 (not $x1080)))
(let (($x1089 (and $x1083 $x212 $x215 $x217 $x220)))
(let (($x1094 (not $x1089)))
(let (($x1164 (or $x1094 $x1161)))
(let (($x1371 (and $x1164 $x1368)))
(let (($x1037 (forall ((?v0 B_Vertex$) )(! (let (($x1031 (exists ((?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1012 (= (+ ?x155 ?x174 ?x991) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1015 (>= (+ ?x174 ?x991) 0)))
(let (($x1017 (not $x1015)))
(and $x1017 $x178 $x1012))))))))) :qid k!42))
))
(let (($x1002 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0))) 0)))
(let (($x1003 (not $x1002)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1006 (and $x132 $x1003)))
(let (($x1009 (not $x1006)))
(or $x1009 $x1031)))))))) :qid k!42))
))
(let (($x997 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x990 (>= (+ ?x155 ?x174 ?x991) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x923 (not $x922)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x983 (and $x178 $x923)))
(let (($x986 (not $x983)))
(or $x986 $x990))))))))))) :qid k!42))
))
(let (($x1045 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let (($x1015 (>= (+ ?x174 ?x991) 0)))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x179 (not $x178)))
(let (($x181 (and $x179 $x180)))
(let (($x403 (not $x181)))
(or $x403 $x1015)))))))))) :qid k!42))
))
(let (($x1051 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(>= ?x174 0)) :qid k!42))
))
(let (($x980 (forall ((?v0 B_Vertex$) )(! (let (($x974 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x957 (= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x155) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x907 (>= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x960 (not $x907)))
(and $x960 $x136 $x957))))))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x951 (and $x132 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))))
(let (($x954 (not $x951)))
(or $x954 $x974)))))) :qid k!42))
))
(let (($x1069 (and $x980 $x173 $x1051 $x1045 $x997 $x1037)))
(let (($x1074 (not $x1069)))
(let (($x1374 (or $x1074 $x1371)))
(let (($x1377 (and $x980 $x1374)))
(let (($x939 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x933 (>= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x155) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x923 (not $x922)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x926 (and $x136 $x923)))
(let (($x929 (not $x926)))
(or $x929 $x933))))))))) :qid k!42))
))
(let (($x942 (not $x939)))
(let (($x1380 (or $x942 $x1377)))
(let (($x1383 (and $x939 $x1380)))
(let (($x914 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x907 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x148 (v_b_Visited_G_0$ ?v0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(let (($x149 (and $x137 $x148)))
(let (($x382 (not $x149)))
(or $x382 $x907))))))) :qid k!42))
))
(let (($x917 (not $x914)))
(let (($x1386 (or $x917 $x1383)))
(let (($x1389 (and $x914 $x1386)))
(let (($x899 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(>= ?x128 0)) :qid k!42))
))
(let (($x902 (not $x899)))
(let (($x1392 (or $x902 $x1389)))
(let (($x1395 (and $x899 $x1392)))
(let ((?x144 (v_b_SP_G_0$ b_Source$)))
(let (($x145 (= ?x144 0)))
(let (($x869 (not $x145)))
(let (($x1398 (or $x869 $x1395)))
(let (($x1401 (and $x145 $x1398)))
(let (($x1407 (not (or (not $x890) $x1401))))
(let (($x320 (forall ((?v0 B_Vertex$) )(! (let (($x318 (exists ((?v1 B_Vertex$) )(! (let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x316 (and $x291 (= (v_b_SP_G_2$ ?v0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x314 (< ?x273 ?x303)))
(and $x314 $x316)))))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x313 (and $x132 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(=> $x313 $x318))))) :qid k!42))
))
(let (($x321 (and $x320 false)))
(let (($x322 (=> $x321 true)))
(let (($x323 (and $x320 $x322)))
(let (($x311 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x308 (+ ?x273 ?x155)))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x307 (and $x291 $x156)))
(=> $x307 (<= ?x303 ?x308))))))))) :qid k!42))
))
(let (($x324 (=> $x311 $x323)))
(let (($x306 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let (($x304 (<= ?x303 ?x273)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(let (($x302 (and $x300 (fun_app$ v_b_Visited_G_2$ ?v0))))
(=> $x302 $x304))))))) :qid k!42))
))
(let (($x326 (=> $x306 (and $x311 $x324))))
(let (($x299 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(<= 0 ?x273)) :qid k!42))
))
(let (($x328 (=> $x299 (and $x306 $x326))))
(let (($x330 (=> $x297 (and $x299 $x328))))
(let (($x293 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v0)))
(=> $x291 $x278))))) :qid k!42))
))
(let (($x295 (and $x293 (and true true))))
(let (($x332 (=> $x295 (and $x297 $x330))))
(let (($x290 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(<= ?x273 ?x174))) :qid k!42))
))
(let (($x334 (=> $x290 (and $x293 $x332))))
(let (($x280 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x270 (+ ?x257 ?x268)))
(let (($x272 (and (< ?x268 b_Infinity$) (< ?x270 ?x174))))
(let (($x277 (not $x272)))
(=> $x277 $x278))))))))) :qid k!42))
))
(let (($x276 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x270 (+ ?x257 ?x268)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x274 (= ?x273 ?x270)))
(let (($x272 (and (< ?x268 b_Infinity$) (< ?x270 (fun_app$c v_b_SP_G_1$ ?v0)))))
(=> $x272 $x274))))))) :qid k!42))
))
(let (($x261 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x259 (<= ?x257 ?x174)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x179 (not $x178)))
(=> $x179 $x259)))))) :qid k!42))
))
(let (($x258 (< ?x257 b_Infinity$)))
(let (($x209 (exists ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x191 (< ?x174 b_Infinity$)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x179 (not $x178)))
(and $x179 $x191))))) :qid k!42))
))
(let (($x286 (and $x209 (and $x256 (and $x258 (and $x261 (and $x266 (and $x276 $x280))))))))
(let (($x287 (and true $x286)))
(let (($x288 (and true $x287)))
(let (($x336 (=> $x288 (and $x290 $x334))))
(let (($x248 (and $x246 (=> $x246 true))))
(let (($x244 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x235 (+ ?x230 ?x155)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x231 (< ?x230 b_Infinity$)))
(let (($x241 (and $x231 $x156)))
(=> $x241 (<= ?x233 ?x235))))))))) :qid k!42))
))
(let (($x249 (=> $x244 $x248)))
(let (($x240 (forall ((?v0 B_Vertex$) )(! (let (($x238 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x235 (+ ?x230 ?x155)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x234 (< ?x230 ?x233)))
(and $x234 (= ?x233 ?x235))))))) :qid k!42))
))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x231 (< ?x230 b_Infinity$)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x232 (and $x132 $x231)))
(=> $x232 $x238))))))) :qid k!42))
))
(let (($x251 (=> $x240 (and $x244 $x249))))
(let (($x225 (and true (and $x212 (and $x215 (and $x217 (and $x220 true)))))))
(let (($x226 (and true $x225)))
(let (($x210 (not $x209)))
(let (($x228 (and true (and $x210 $x226))))
(let (($x229 (and true $x228)))
(let (($x253 (=> $x229 (and $x240 $x251))))
(let (($x199 (forall ((?v0 B_Vertex$) )(! (let (($x197 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x187 (+ ?x174 ?x155)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x193 (< ?x174 ?x182)))
(and $x193 (and $x178 (= ?x182 ?x187))))))))) :qid k!42))
))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x191 (< ?x174 b_Infinity$)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x192 (and $x132 $x191)))
(=> $x192 $x197))))))) :qid k!42))
))
(let (($x200 (and $x199 true)))
(let (($x190 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x187 (+ ?x174 ?x155)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x186 (and $x178 $x156)))
(=> $x186 (<= ?x182 ?x187))))))))) :qid k!42))
))
(let (($x185 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x183 (<= ?x182 ?x174)))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x179 (not $x178)))
(let (($x181 (and $x179 $x180)))
(=> $x181 $x183)))))))) :qid k!42))
))
(let (($x176 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(<= 0 ?x174)) :qid k!42))
))
(let (($x205 (and true (and $x173 (and $x176 (and $x185 (and $x190 $x200)))))))
(let (($x206 (and true $x205)))
(let (($x170 (forall ((?v0 B_Vertex$) )(! (let (($x168 (exists ((?v1 B_Vertex$) )(! (let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x166 (and $x136 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x166))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x163 (and $x132 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(=> $x163 $x168))))) :qid k!42))
))
(let (($x338 (=> (and $x170 $x206) (and $x253 $x336))))
(let (($x161 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x150 (v_b_SP_G_0$ ?v0)))
(let (($x159 (<= ?x150 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x157 (and $x136 $x156)))
(=> $x157 $x159))))))) :qid k!42))
))
(let (($x340 (=> $x161 (and $x170 $x338))))
(let (($x153 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v1)))
(let ((?x150 (v_b_SP_G_0$ ?v0)))
(let (($x151 (<= ?x150 ?x128)))
(let (($x148 (v_b_Visited_G_0$ ?v0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(let (($x149 (and $x137 $x148)))
(=> $x149 $x151)))))))) :qid k!42))
))
(let (($x342 (=> $x153 (and $x161 $x340))))
(let (($x147 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(<= 0 ?x128)) :qid k!42))
))
(let (($x344 (=> $x147 (and $x153 $x342))))
(let (($x346 (=> $x145 (and $x147 $x344))))
(let (($x135 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(=> $x132 (= (v_b_SP_G_0$ ?v0) b_Infinity$)))) :qid k!42))
))
(let (($x131 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(=> $x127 (= (v_b_SP_G_0$ ?v0) 0))) :qid k!42))
))
(let (($x142 (and true (and $x131 (and $x135 (and $x138 true))))))
(let (($x143 (and true $x142)))
(let (($x348 (=> $x143 (and $x145 $x346))))
(let (($x349 (not $x348)))
(let (($x710 (forall ((?v0 B_Vertex$) )(! (let (($x698 (exists ((?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x671 (+ ?x155 ?x273)))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let (($x689 (= ?x303 ?x671)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x692 (and $x291 $x689)))
(let (($x314 (< ?x273 ?x303)))
(and $x314 $x692))))))))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x313 (and $x132 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(or (not $x313) $x698))))) :qid k!42))
))
(let (($x686 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x671 (+ ?x155 ?x273)))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let (($x674 (<= ?x303 ?x671)))
(or (not (and (fun_app$ v_b_Visited_G_2$ ?v1) (< ?x155 b_Infinity$))) $x674)))))) :qid k!42))
))
(let (($x738 (or (not $x686) $x710)))
(let (($x743 (and $x686 $x738)))
(let (($x668 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x303 (v_b_SP_G_2$ ?v0)))
(let (($x304 (<= ?x303 ?x273)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(let (($x302 (and $x300 (fun_app$ v_b_Visited_G_2$ ?v0))))
(let (($x664 (not $x302)))
(or $x664 $x304)))))))) :qid k!42))
))
(let (($x750 (or (not $x668) $x743)))
(let (($x755 (and $x668 $x750)))
(let (($x762 (or (not $x299) $x755)))
(let (($x767 (and $x299 $x762)))
(let (($x774 (or $x773 $x767)))
(let (($x779 (and $x297 $x774)))
(let (($x786 (or $x785 $x779)))
(let (($x791 (and $x652 $x786)))
(let (($x798 (or (not $x290) $x791)))
(let (($x803 (and $x290 $x798)))
(let (($x617 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x270 (+ ?x257 ?x268)))
(let (($x272 (and (< ?x268 b_Infinity$) (< ?x270 ?x174))))
(or $x272 $x278)))))))) :qid k!42))
))
(let (($x611 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x270 (+ ?x257 ?x268)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x274 (= ?x273 ?x270)))
(let (($x272 (and (< ?x268 b_Infinity$) (< ?x270 (fun_app$c v_b_SP_G_1$ ?v0)))))
(let (($x277 (not $x272)))
(or $x277 $x274)))))))) :qid k!42))
))
(let (($x620 (and $x611 $x617)))
(let (($x623 (and $x266 $x620)))
(let (($x605 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x259 (<= ?x257 ?x174)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x178 $x259))))) :qid k!42))
))
(let (($x626 (and $x605 $x623)))
(let (($x629 (and $x258 $x626)))
(let (($x632 (and $x256 $x629)))
(let (($x635 (and $x209 $x632)))
(let (($x810 (or (not $x635) $x803)))
(let (($x557 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x521 (+ ?x155 ?x230)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x545 (<= ?x233 ?x521)))
(or (not (and (< ?x230 b_Infinity$) (< ?x155 b_Infinity$))) $x545)))))) :qid k!42))
))
(let (($x573 (or (not $x557) $x246)))
(let (($x578 (and $x557 $x573)))
(let (($x542 (forall ((?v0 B_Vertex$) )(! (let (($x530 (exists ((?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x521 (+ ?x155 ?x230)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x524 (= ?x233 ?x521)))
(let (($x234 (< ?x230 ?x233)))
(and $x234 $x524))))))) :qid k!42))
))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let (($x231 (< ?x230 b_Infinity$)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x232 (and $x132 $x231)))
(or (not $x232) $x530))))))) :qid k!42))
))
(let (($x585 (or (not $x542) $x578)))
(let (($x590 (and $x542 $x585)))
(let (($x597 (or (not (and $x210 (and $x212 (and $x215 (and $x217 $x220))))) $x590)))
(let (($x815 (and $x597 $x810)))
(let (($x449 (forall ((?v0 B_Vertex$) )(! (let (($x437 (exists ((?v1 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x410 (+ ?x155 ?x174)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x428 (= ?x182 ?x410)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x431 (and $x178 $x428)))
(let (($x193 (< ?x174 ?x182)))
(and $x193 $x431))))))))) :qid k!42))
))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x191 (< ?x174 b_Infinity$)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x192 (and $x132 $x191)))
(or (not $x192) $x437))))))) :qid k!42))
))
(let (($x425 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x410 (+ ?x155 ?x174)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x413 (<= ?x182 ?x410)))
(or (not (and (fun_app$ v_b_Visited_G_1$ ?v1) (< ?x155 b_Infinity$))) $x413)))))) :qid k!42))
))
(let (($x459 (and $x425 $x449)))
(let (($x407 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let (($x183 (<= ?x182 ?x174)))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x179 (not $x178)))
(let (($x181 (and $x179 $x180)))
(let (($x403 (not $x181)))
(or $x403 $x183))))))))) :qid k!42))
))
(let (($x462 (and $x407 $x459)))
(let (($x465 (and $x176 $x462)))
(let (($x468 (and $x173 $x465)))
(let (($x400 (forall ((?v0 B_Vertex$) )(! (let (($x168 (exists ((?v1 B_Vertex$) )(! (let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x166 (and $x136 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x166))) :qid k!42))
))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x163 (and $x132 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(or (not $x163) $x168))))) :qid k!42))
))
(let (($x482 (and $x400 $x468)))
(let (($x822 (or (not $x482) $x815)))
(let (($x827 (and $x400 $x822)))
(let (($x393 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x150 (v_b_SP_G_0$ ?v0)))
(let (($x159 (<= ?x150 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x157 (and $x136 $x156)))
(or (not $x157) $x159))))))) :qid k!42))
))
(let (($x834 (or (not $x393) $x827)))
(let (($x839 (and $x393 $x834)))
(let (($x386 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v1)))
(let ((?x150 (v_b_SP_G_0$ ?v0)))
(let (($x151 (<= ?x150 ?x128)))
(let (($x148 (v_b_Visited_G_0$ ?v0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(let (($x149 (and $x137 $x148)))
(let (($x382 (not $x149)))
(or $x382 $x151))))))))) :qid k!42))
))
(let (($x846 (or (not $x386) $x839)))
(let (($x851 (and $x386 $x846)))
(let (($x858 (or (not $x147) $x851)))
(let (($x863 (and $x147 $x858)))
(let (($x870 (or $x869 $x863)))
(let (($x875 (and $x145 $x870)))
(let (($x882 (or (not (and $x354 (and $x360 $x138))) $x875)))
(let (($x1323 (exists ((?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let (($x1306 (= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?0))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1262 (>= (+ ?x273 (* (- 1) (v_b_SP_G_2$ ?0))) 0)))
(let (($x1309 (not $x1262)))
(and $x1309 $x291 $x1306))))))) :qid k!42))
))
(let (($x132 (not $x127)))
(let (($x1300 (and $x132 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?0))) 0)))))
(let (($x698 (exists ((?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x671 (+ ?x155 ?x273)))
(let ((?x303 (v_b_SP_G_2$ ?0)))
(let (($x689 (= ?x303 ?x671)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x692 (and $x291 $x689)))
(let (($x314 (< ?x273 ?x303)))
(and $x314 $x692))))))))) :qid k!42))
))
(let (($x705 (or (not (and $x132 (< (v_b_SP_G_2$ ?0) b_Infinity$))) $x698)))
(let ((?x273 (v_b_SP_G_2$ ?0)))
(let ((?x155 (b_G$ (pair$ ?0 ?1))))
(let (($x1306 (= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?1))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?0)))
(let (($x1262 (>= (+ ?x273 (* (- 1) (v_b_SP_G_2$ ?1))) 0)))
(let (($x1309 (not $x1262)))
(let (($x1318 (and $x1309 $x291 $x1306)))
(let ((?x671 (+ ?x155 ?x273)))
(let ((?x303 (v_b_SP_G_2$ ?1)))
(let (($x689 (= ?x303 ?x671)))
(let (($x692 (and $x291 $x689)))
(let (($x314 (< ?x273 ?x303)))
(let (($x695 (and $x314 $x692)))
(let ((@x1317 (monotonicity (rewrite (= $x314 $x1309)) (monotonicity (rewrite (= $x689 $x1306)) (= $x692 (and $x291 $x1306))) (= $x695 (and $x1309 (and $x291 $x1306))))))
(let ((@x1322 (trans @x1317 (rewrite (= (and $x1309 (and $x291 $x1306)) $x1318)) (= $x695 $x1318))))
(let (($x1298 (= (< ?x273 b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) ?x273)) 0)))))
(let ((@x1302 (monotonicity (rewrite $x1298) (= (and $x132 (< ?x273 b_Infinity$)) $x1300))))
(let ((@x1305 (monotonicity @x1302 (= (not (and $x132 (< ?x273 b_Infinity$))) (not $x1300)))))
(let ((@x1328 (monotonicity @x1305 (quant-intro @x1322 (= $x698 $x1323)) (= $x705 (or (not $x1300) $x1323)))))
(let (($x1282 (>= (+ ?x155 ?x273 (* (- 1) ?x303)) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x923 (not $x922)))
(let (($x1276 (and $x291 $x923)))
(let (($x1279 (not $x1276)))
(let (($x1286 (or $x1279 $x1282)))
(let (($x674 (<= ?x303 ?x671)))
(let (($x681 (or (not (and $x291 (< ?x155 b_Infinity$))) $x674)))
(let ((@x925 (rewrite (= (< ?x155 b_Infinity$) $x923))))
(let ((@x1281 (monotonicity (monotonicity @x925 (= (and $x291 (< ?x155 b_Infinity$)) $x1276)) (= (not (and $x291 (< ?x155 b_Infinity$))) $x1279))))
(let ((@x1291 (quant-intro (monotonicity @x1281 (rewrite (= $x674 $x1282)) (= $x681 $x1286)) (= $x686 $x1289))))
(let ((@x1334 (monotonicity (monotonicity @x1291 (= (not $x686) $x1292)) (quant-intro @x1328 (= $x710 $x1329)) (= $x738 $x1332))))
(let (($x300 (not $x291)))
(let (($x302 (and $x300 (fun_app$ v_b_Visited_G_2$ ?1))))
(let (($x664 (not $x302)))
(let (($x1267 (or $x664 $x1262)))
(let (($x304 (<= ?x303 ?x273)))
(let (($x665 (or $x664 $x304)))
(let ((@x1272 (quant-intro (monotonicity (rewrite (= $x304 $x1262)) (= $x665 $x1267)) (= $x668 $x1270))))
(let ((@x1340 (monotonicity (monotonicity @x1272 (= (not $x668) $x1273)) (monotonicity @x1291 @x1334 (= $x743 $x1335)) (= $x750 $x1338))))
(let ((@x1258 (quant-intro (rewrite (= (<= 0 ?x273) (>= ?x273 0))) (= $x299 $x1256))))
(let ((@x1346 (monotonicity (monotonicity @x1258 (= (not $x299) $x1259)) (monotonicity @x1272 @x1340 (= $x755 $x1341)) (= $x762 $x1344))))
(let ((@x1352 (monotonicity (monotonicity @x1258 @x1346 (= $x767 $x1347)) (= $x774 $x1350))))
(let ((@x1361 (monotonicity (monotonicity (monotonicity @x1352 (= $x779 $x1353)) (= $x786 $x1356)) (= $x791 $x1359))))
(let (($x1243 (>= (+ (fun_app$c v_b_SP_G_1$ ?0) (* (- 1) ?x273)) 0)))
(let ((@x1249 (quant-intro (rewrite (= (<= ?x273 (fun_app$c v_b_SP_G_1$ ?0)) $x1243)) (= $x290 $x1247))))
(let ((@x1364 (monotonicity (monotonicity @x1249 (= (not $x290) $x1250)) @x1361 (= $x798 $x1362))))
(let (($x1232 (and $x1080 (and $x256 (and $x1214 (and $x1209 (and $x266 (and $x1193 $x1199))))))))
(let (($x1230 (= $x632 (and $x256 (and $x1214 (and $x1209 (and $x266 (and $x1193 $x1199))))))))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?0)))
(let (($x278 (= ?x273 ?x174)))
(let (($x1175 (<= (+ ?x174 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1179 (and (not $x1169) (not $x1175))))
(let (($x1196 (or $x1179 $x278)))
(let (($x272 (and (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (< (+ ?x257 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x174))))
(let (($x614 (or $x272 $x278)))
(let ((@x1178 (rewrite (= (< (+ ?x257 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x174) (not $x1175)))))
(let ((@x1172 (rewrite (= (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (not $x1169)))))
(let ((@x1198 (monotonicity (monotonicity @x1172 @x1178 (= $x272 $x1179)) (= $x614 $x1196))))
(let (($x1185 (= (+ ?x257 (b_G$ (pair$ v_b_v_G_1$ ?0)) (* (- 1) ?x273)) 0)))
(let (($x1182 (not $x1179)))
(let (($x1190 (or $x1182 $x1185)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?0))))
(let ((?x270 (+ ?x257 ?x268)))
(let (($x274 (= ?x273 ?x270)))
(let (($x277 (not $x272)))
(let (($x608 (or $x277 $x274)))
(let ((@x1184 (monotonicity (monotonicity @x1172 @x1178 (= $x272 $x1179)) (= $x277 $x1182))))
(let ((@x1195 (quant-intro (monotonicity @x1184 (rewrite (= $x274 $x1185)) (= $x608 $x1190)) (= $x611 $x1193))))
(let ((@x1219 (monotonicity @x1195 (quant-intro @x1198 (= $x617 $x1199)) (= $x620 (and $x1193 $x1199)))))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?0)))
(let (($x1206 (or $x178 (>= (+ ?x174 ?x1173) 0))))
(let (($x259 (<= ?x257 ?x174)))
(let (($x602 (or $x178 $x259)))
(let ((@x1208 (monotonicity (rewrite (= $x259 (>= (+ ?x174 ?x1173) 0))) (= $x602 $x1206))))
(let ((@x1225 (monotonicity (quant-intro @x1208 (= $x605 $x1209)) (monotonicity @x1219 (= $x623 (and $x266 (and $x1193 $x1199)))) (= $x626 (and $x1209 (and $x266 (and $x1193 $x1199)))))))
(let ((@x1228 (monotonicity (rewrite (= $x258 $x1214)) @x1225 (= $x629 (and $x1214 (and $x1209 (and $x266 (and $x1193 $x1199))))))))
(let (($x1002 (<= (+ b_Infinity$ (* (- 1) ?x174)) 0)))
(let (($x1003 (not $x1002)))
(let (($x179 (not $x178)))
(let (($x1077 (and $x179 $x1003)))
(let ((@x1079 (monotonicity (rewrite (= (< ?x174 b_Infinity$) $x1003)) (= (and $x179 (< ?x174 b_Infinity$)) $x1077))))
(let ((@x1234 (monotonicity (quant-intro @x1079 (= $x209 $x1080)) (monotonicity @x1228 $x1230) (= $x635 $x1232))))
(let ((@x1242 (monotonicity (trans @x1234 (rewrite (= $x1232 $x1235)) (= $x635 $x1235)) (= (not $x635) $x1240))))
(let ((@x1370 (monotonicity @x1242 (monotonicity @x1249 @x1364 (= $x803 $x1365)) (= $x810 $x1368))))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?0)))
(let (($x1140 (>= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?1))) 0)))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(let (($x1100 (not $x1099)))
(let (($x1134 (and $x1100 $x923)))
(let (($x1137 (not $x1134)))
(let (($x1143 (or $x1137 $x1140)))
(let ((?x521 (+ ?x155 ?x230)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?1)))
(let (($x545 (<= ?x233 ?x521)))
(let (($x552 (or (not (and (< ?x230 b_Infinity$) (< ?x155 b_Infinity$))) $x545)))
(let ((@x1136 (monotonicity (rewrite (= (< ?x230 b_Infinity$) $x1100)) @x925 (= (and (< ?x230 b_Infinity$) (< ?x155 b_Infinity$)) $x1134))))
(let ((@x1139 (monotonicity @x1136 (= (not (and (< ?x230 b_Infinity$) (< ?x155 b_Infinity$))) $x1137))))
(let ((@x1148 (quant-intro (monotonicity @x1139 (rewrite (= $x545 $x1140)) (= $x552 $x1143)) (= $x557 $x1146))))
(let ((@x1154 (monotonicity (monotonicity @x1148 (= (not $x557) $x1149)) (= $x573 $x1152))))
(let (($x1122 (exists ((?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(and (not (>= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?0))) 0)) (= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?0))) 0)))) :qid k!42))
))
(let (($x1103 (and $x132 $x1100)))
(let (($x1106 (not $x1103)))
(let (($x1125 (or $x1106 $x1122)))
(let (($x530 (exists ((?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x521 (+ ?x155 ?x230)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?0)))
(let (($x524 (= ?x233 ?x521)))
(let (($x234 (< ?x230 ?x233)))
(and $x234 $x524))))))) :qid k!42))
))
(let (($x537 (or (not (and $x132 (< ?x230 b_Infinity$))) $x530)))
(let (($x1119 (and (not (>= (+ ?x230 (* (- 1) ?x233)) 0)) (= (+ ?x155 ?x230 (* (- 1) ?x233)) 0))))
(let (($x524 (= ?x233 ?x521)))
(let (($x234 (< ?x230 ?x233)))
(let (($x527 (and $x234 $x524)))
(let ((@x1121 (monotonicity (rewrite (= $x234 (not (>= (+ ?x230 (* (- 1) ?x233)) 0)))) (rewrite (= $x524 (= (+ ?x155 ?x230 (* (- 1) ?x233)) 0))) (= $x527 $x1119))))
(let ((@x1105 (monotonicity (rewrite (= (< ?x230 b_Infinity$) $x1100)) (= (and $x132 (< ?x230 b_Infinity$)) $x1103))))
(let ((@x1127 (monotonicity (monotonicity @x1105 (= (not (and $x132 (< ?x230 b_Infinity$))) $x1106)) (quant-intro @x1121 (= $x530 $x1122)) (= $x537 $x1125))))
(let ((@x1133 (monotonicity (quant-intro @x1127 (= $x542 $x1128)) (= (not $x542) $x1131))))
(let ((@x1160 (monotonicity @x1133 (monotonicity @x1148 @x1154 (= $x578 $x1155)) (= $x585 $x1158))))
(let ((@x1091 (rewrite (= (and $x1083 (and $x212 (and $x215 (and $x217 $x220)))) $x1089))))
(let (($x493 (and $x212 (and $x215 (and $x217 $x220)))))
(let (($x507 (and $x210 $x493)))
(let ((@x1088 (monotonicity (monotonicity (quant-intro @x1079 (= $x209 $x1080)) (= $x210 $x1083)) (= $x507 (and $x1083 $x493)))))
(let ((@x1096 (monotonicity (trans @x1088 @x1091 (= $x507 $x1089)) (= (not $x507) $x1094))))
(let ((@x1166 (monotonicity @x1096 (monotonicity (quant-intro @x1127 (= $x542 $x1128)) @x1160 (= $x590 $x1161)) (= $x597 $x1164))))
(let (($x1070 (= (and $x980 (and $x173 (and $x1051 (and $x1045 (and $x997 $x1037))))) $x1069)))
(let (($x1067 (= $x482 (and $x980 (and $x173 (and $x1051 (and $x1045 (and $x997 $x1037))))))))
(let (($x1031 (exists ((?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let (($x1012 (= (+ ?x155 ?x174 ?x991) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1015 (>= (+ ?x174 ?x991) 0)))
(let (($x1017 (not $x1015)))
(and $x1017 $x178 $x1012))))))))) :qid k!42))
))
(let (($x1006 (and $x132 $x1003)))
(let (($x1009 (not $x1006)))
(let (($x1034 (or $x1009 $x1031)))
(let (($x437 (exists ((?v1 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x410 (+ ?x155 ?x174)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?0)))
(let (($x428 (= ?x182 ?x410)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x431 (and $x178 $x428)))
(let (($x193 (< ?x174 ?x182)))
(and $x193 $x431))))))))) :qid k!42))
))
(let (($x444 (or (not (and $x132 (< ?x174 b_Infinity$))) $x437)))
(let (($x1012 (= (+ ?x155 ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ ?1))) 0)))
(let (($x1015 (>= (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ ?1))) 0)))
(let (($x1017 (not $x1015)))
(let (($x1026 (and $x1017 $x178 $x1012)))
(let ((?x410 (+ ?x155 ?x174)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?1)))
(let (($x428 (= ?x182 ?x410)))
(let (($x431 (and $x178 $x428)))
(let (($x193 (< ?x174 ?x182)))
(let (($x434 (and $x193 $x431)))
(let ((@x1025 (monotonicity (rewrite (= $x193 $x1017)) (monotonicity (rewrite (= $x428 $x1012)) (= $x431 (and $x178 $x1012))) (= $x434 (and $x1017 (and $x178 $x1012))))))
(let ((@x1030 (trans @x1025 (rewrite (= (and $x1017 (and $x178 $x1012)) $x1026)) (= $x434 $x1026))))
(let ((@x1008 (monotonicity (rewrite (= (< ?x174 b_Infinity$) $x1003)) (= (and $x132 (< ?x174 b_Infinity$)) $x1006))))
(let ((@x1036 (monotonicity (monotonicity @x1008 (= (not (and $x132 (< ?x174 b_Infinity$))) $x1009)) (quant-intro @x1030 (= $x437 $x1031)) (= $x444 $x1034))))
(let (($x990 (>= (+ ?x155 ?x174 (* (- 1) ?x182)) 0)))
(let (($x983 (and $x178 $x923)))
(let (($x986 (not $x983)))
(let (($x994 (or $x986 $x990)))
(let (($x413 (<= ?x182 ?x410)))
(let (($x420 (or (not (and $x178 (< ?x155 b_Infinity$))) $x413)))
(let ((@x988 (monotonicity (monotonicity @x925 (= (and $x178 (< ?x155 b_Infinity$)) $x983)) (= (not (and $x178 (< ?x155 b_Infinity$))) $x986))))
(let ((@x999 (quant-intro (monotonicity @x988 (rewrite (= $x413 $x990)) (= $x420 $x994)) (= $x425 $x997))))
(let ((@x1056 (monotonicity @x999 (quant-intro @x1036 (= $x449 $x1037)) (= $x459 (and $x997 $x1037)))))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?1)))
(let (($x181 (and $x179 $x180)))
(let (($x403 (not $x181)))
(let (($x1042 (or $x403 $x1015)))
(let (($x183 (<= ?x182 ?x174)))
(let (($x404 (or $x403 $x183)))
(let ((@x1047 (quant-intro (monotonicity (rewrite (= $x183 $x1015)) (= $x404 $x1042)) (= $x407 $x1045))))
(let ((@x1053 (quant-intro (rewrite (= (<= 0 ?x174) (>= ?x174 0))) (= $x176 $x1051))))
(let ((@x1062 (monotonicity @x1053 (monotonicity @x1047 @x1056 (= $x462 (and $x1045 (and $x997 $x1037)))) (= $x465 (and $x1051 (and $x1045 (and $x997 $x1037)))))))
(let ((@x1065 (monotonicity @x1062 (= $x468 (and $x173 (and $x1051 (and $x1045 (and $x997 $x1037))))))))
(let (($x974 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x957 (= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?0)) ?x155) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x907 (>= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?0))) 0)))
(let (($x960 (not $x907)))
(and $x960 $x136 $x957))))))) :qid k!42))
))
(let (($x951 (and $x132 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let (($x954 (not $x951)))
(let (($x977 (or $x954 $x974)))
(let (($x168 (exists ((?v1 B_Vertex$) )(! (let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x166 (and $x136 (= (v_b_SP_G_0$ ?0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?0)) $x166))) :qid k!42))
))
(let (($x397 (or (not (and $x132 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x168)))
(let (($x957 (= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x155) 0)))
(let (($x136 (v_b_Visited_G_0$ ?0)))
(let (($x907 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1))) 0)))
(let (($x960 (not $x907)))
(let (($x969 (and $x960 $x136 $x957)))
(let (($x167 (and (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) (and $x136 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x155))))))
(let (($x964 (= (and $x136 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x155))) (and $x136 $x957))))
(let ((@x959 (rewrite (= (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x155)) $x957))))
(let ((@x968 (monotonicity (rewrite (= (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) $x960)) (monotonicity @x959 $x964) (= $x167 (and $x960 (and $x136 $x957))))))
(let ((@x973 (trans @x968 (rewrite (= (and $x960 (and $x136 $x957)) $x969)) (= $x167 $x969))))
(let (($x949 (= (< (v_b_SP_G_0$ ?0) b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let ((@x953 (monotonicity (rewrite $x949) (= (and $x132 (< (v_b_SP_G_0$ ?0) b_Infinity$)) $x951))))
(let ((@x956 (monotonicity @x953 (= (not (and $x132 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x954))))
(let ((@x982 (quant-intro (monotonicity @x956 (quant-intro @x973 (= $x168 $x974)) (= $x397 $x977)) (= $x400 $x980))))
(let ((@x1076 (monotonicity (trans (monotonicity @x982 @x1065 $x1067) (rewrite $x1070) (= $x482 $x1069)) (= (not $x482) $x1074))))
(let ((@x1376 (monotonicity @x1076 (monotonicity @x1166 @x1370 (= $x815 $x1371)) (= $x822 $x1374))))
(let (($x933 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x155) 0)))
(let (($x926 (and $x136 $x923)))
(let (($x929 (not $x926)))
(let (($x936 (or $x929 $x933)))
(let ((?x150 (v_b_SP_G_0$ ?1)))
(let (($x159 (<= ?x150 (+ (v_b_SP_G_0$ ?0) ?x155))))
(let (($x390 (or (not (and $x136 (< ?x155 b_Infinity$))) $x159)))
(let ((@x931 (monotonicity (monotonicity @x925 (= (and $x136 (< ?x155 b_Infinity$)) $x926)) (= (not (and $x136 (< ?x155 b_Infinity$))) $x929))))
(let ((@x941 (quant-intro (monotonicity @x931 (rewrite (= $x159 $x933)) (= $x390 $x936)) (= $x393 $x939))))
(let ((@x1382 (monotonicity (monotonicity @x941 (= (not $x393) $x942)) (monotonicity @x982 @x1376 (= $x827 $x1377)) (= $x834 $x1380))))
(let (($x148 (v_b_Visited_G_0$ ?1)))
(let (($x137 (not $x136)))
(let (($x149 (and $x137 $x148)))
(let (($x382 (not $x149)))
(let (($x911 (or $x382 $x907)))
(let ((?x128 (v_b_SP_G_0$ ?0)))
(let (($x151 (<= ?x150 ?x128)))
(let (($x383 (or $x382 $x151)))
(let ((@x916 (quant-intro (monotonicity (rewrite (= $x151 $x907)) (= $x383 $x911)) (= $x386 $x914))))
(let ((@x1388 (monotonicity (monotonicity @x916 (= (not $x386) $x917)) (monotonicity @x941 @x1382 (= $x839 $x1383)) (= $x846 $x1386))))
(let ((@x901 (quant-intro (rewrite (= (<= 0 ?x128) (>= ?x128 0))) (= $x147 $x899))))
(let ((@x1394 (monotonicity (monotonicity @x901 (= (not $x147) $x902)) (monotonicity @x916 @x1388 (= $x851 $x1389)) (= $x858 $x1392))))
(let ((@x1400 (monotonicity (monotonicity @x901 @x1394 (= $x863 $x1395)) (= $x870 $x1398))))
(let ((@x895 (monotonicity (rewrite (= (and $x354 (and $x360 $x138)) $x890)) (= (not (and $x354 (and $x360 $x138))) (not $x890)))))
(let ((@x1406 (monotonicity @x895 (monotonicity @x1400 (= $x875 $x1401)) (= $x882 (or (not $x890) $x1401)))))
(let (($x318 (exists ((?v1 B_Vertex$) )(! (let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x316 (and $x291 (= (v_b_SP_G_2$ ?0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(let ((?x303 (v_b_SP_G_2$ ?0)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x314 (< ?x273 ?x303)))
(and $x314 $x316)))))) :qid k!42))
))
(let (($x313 (and $x132 (< ?x273 b_Infinity$))))
(let (($x319 (=> $x313 $x318)))
(let ((@x691 (monotonicity (rewrite (= (+ ?x273 ?x155) ?x671)) (= (= ?x303 (+ ?x273 ?x155)) $x689))))
(let ((@x697 (monotonicity (monotonicity @x691 (= (and $x291 (= ?x303 (+ ?x273 ?x155))) $x692)) (= (and $x314 (and $x291 (= ?x303 (+ ?x273 ?x155)))) $x695))))
(let ((@x703 (monotonicity (quant-intro @x697 (= $x318 $x698)) (= $x319 (=> $x313 $x698)))))
(let ((@x712 (quant-intro (trans @x703 (rewrite (= (=> $x313 $x698) $x705)) (= $x319 $x705)) (= $x320 $x710))))
(let ((@x719 (trans (monotonicity @x712 (= $x321 (and $x710 false))) (rewrite (= (and $x710 false) false)) (= $x321 false))))
(let ((@x726 (trans (monotonicity @x719 (= $x322 (=> false true))) (rewrite (= (=> false true) true)) (= $x322 true))))
(let ((@x733 (trans (monotonicity @x712 @x726 (= $x323 (and $x710 true))) (rewrite (= (and $x710 true) $x710)) (= $x323 $x710))))
(let (($x156 (< ?x155 b_Infinity$)))
(let (($x307 (and $x291 $x156)))
(let (($x310 (=> $x307 (<= ?x303 (+ ?x273 ?x155)))))
(let ((@x676 (monotonicity (rewrite (= (+ ?x273 ?x155) ?x671)) (= (<= ?x303 (+ ?x273 ?x155)) $x674))))
(let ((@x685 (trans (monotonicity @x676 (= $x310 (=> $x307 $x674))) (rewrite (= (=> $x307 $x674) $x681)) (= $x310 $x681))))
(let ((@x736 (monotonicity (quant-intro @x685 (= $x311 $x686)) @x733 (= $x324 (=> $x686 $x710)))))
(let ((@x745 (monotonicity (quant-intro @x685 (= $x311 $x686)) (trans @x736 (rewrite (= (=> $x686 $x710) $x738)) (= $x324 $x738)) (= (and $x311 $x324) $x743))))
(let ((@x748 (monotonicity (quant-intro (rewrite (= (=> $x302 $x304) $x665)) (= $x306 $x668)) @x745 (= $x326 (=> $x668 $x743)))))
(let ((@x757 (monotonicity (quant-intro (rewrite (= (=> $x302 $x304) $x665)) (= $x306 $x668)) (trans @x748 (rewrite (= (=> $x668 $x743) $x750)) (= $x326 $x750)) (= (and $x306 $x326) $x755))))
(let ((@x766 (trans (monotonicity @x757 (= $x328 (=> $x299 $x755))) (rewrite (= (=> $x299 $x755) $x762)) (= $x328 $x762))))
(let ((@x772 (monotonicity (monotonicity @x766 (= (and $x299 $x328) $x767)) (= $x330 (=> $x297 $x767)))))
(let ((@x781 (monotonicity (trans @x772 (rewrite (= (=> $x297 $x767) $x774)) (= $x330 $x774)) (= (and $x297 $x330) $x779))))
(let ((@x654 (quant-intro (rewrite (= (=> $x291 $x278) (or $x300 $x278))) (= $x293 $x652))))
(let ((@x659 (monotonicity @x654 (rewrite (= (and true true) true)) (= $x295 (and $x652 true)))))
(let ((@x784 (monotonicity (trans @x659 (rewrite (= (and $x652 true) $x652)) (= $x295 $x652)) @x781 (= $x332 (=> $x652 $x779)))))
(let ((@x793 (monotonicity @x654 (trans @x784 (rewrite (= (=> $x652 $x779) $x786)) (= $x332 $x786)) (= (and $x293 $x332) $x791))))
(let ((@x802 (trans (monotonicity @x793 (= $x334 (=> $x290 $x791))) (rewrite (= (=> $x290 $x791) $x798)) (= $x334 $x798))))
(let (($x633 (= (and $x256 (and $x258 (and $x261 (and $x266 (and $x276 $x280))))) $x632)))
(let ((@x622 (monotonicity (quant-intro (rewrite (= (=> $x272 $x274) $x608)) (= $x276 $x611)) (quant-intro (rewrite (= (=> $x277 $x278) $x614)) (= $x280 $x617)) (= (and $x276 $x280) $x620))))
(let ((@x628 (monotonicity (quant-intro (rewrite (= (=> $x179 $x259) $x602)) (= $x261 $x605)) (monotonicity @x622 (= (and $x266 (and $x276 $x280)) $x623)) (= (and $x261 (and $x266 (and $x276 $x280))) $x626))))
(let ((@x631 (monotonicity @x628 (= (and $x258 (and $x261 (and $x266 (and $x276 $x280)))) $x629))))
(let ((@x640 (monotonicity (monotonicity (monotonicity @x631 $x633) (= $x286 $x635)) (= $x287 (and true $x635)))))
(let ((@x646 (monotonicity (trans @x640 (rewrite (= (and true $x635) $x635)) (= $x287 $x635)) (= $x288 (and true $x635)))))
(let ((@x808 (monotonicity (trans @x646 (rewrite (= (and true $x635) $x635)) (= $x288 $x635)) (monotonicity @x802 (= (and $x290 $x334) $x803)) (= $x336 (=> $x635 $x803)))))
(let ((@x564 (monotonicity (rewrite (= (=> $x246 true) true)) (= $x248 (and $x246 true)))))
(let (($x231 (< ?x230 b_Infinity$)))
(let (($x241 (and $x231 $x156)))
(let (($x243 (=> $x241 (<= ?x233 (+ ?x230 ?x155)))))
(let ((@x547 (monotonicity (rewrite (= (+ ?x230 ?x155) ?x521)) (= (<= ?x233 (+ ?x230 ?x155)) $x545))))
(let ((@x556 (trans (monotonicity @x547 (= $x243 (=> $x241 $x545))) (rewrite (= (=> $x241 $x545) $x552)) (= $x243 $x552))))
(let ((@x571 (monotonicity (quant-intro @x556 (= $x244 $x557)) (trans @x564 (rewrite (= (and $x246 true) $x246)) (= $x248 $x246)) (= $x249 (=> $x557 $x246)))))
(let ((@x580 (monotonicity (quant-intro @x556 (= $x244 $x557)) (trans @x571 (rewrite (= (=> $x557 $x246) $x573)) (= $x249 $x573)) (= (and $x244 $x249) $x578))))
(let (($x238 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x235 (+ ?x230 ?x155)))
(let ((?x233 (fun_app$c v_b_SP_G_3$ ?0)))
(let (($x234 (< ?x230 ?x233)))
(and $x234 (= ?x233 ?x235))))))) :qid k!42))
))
(let (($x232 (and $x132 $x231)))
(let (($x239 (=> $x232 $x238)))
(let ((@x526 (monotonicity (rewrite (= (+ ?x230 ?x155) ?x521)) (= (= ?x233 (+ ?x230 ?x155)) $x524))))
(let ((@x532 (quant-intro (monotonicity @x526 (= (and $x234 (= ?x233 (+ ?x230 ?x155))) $x527)) (= $x238 $x530))))
(let ((@x541 (trans (monotonicity @x532 (= $x239 (=> $x232 $x530))) (rewrite (= (=> $x232 $x530) $x537)) (= $x239 $x537))))
(let ((@x583 (monotonicity (quant-intro @x541 (= $x240 $x542)) @x580 (= $x251 (=> $x542 $x578)))))
(let ((@x592 (monotonicity (quant-intro @x541 (= $x240 $x542)) (trans @x583 (rewrite (= (=> $x542 $x578) $x585)) (= $x251 $x585)) (= (and $x240 $x251) $x590))))
(let (($x491 (= (and $x215 (and $x217 (and $x220 true))) (and $x215 (and $x217 $x220)))))
(let ((@x489 (monotonicity (rewrite (= (and $x220 true) $x220)) (= (and $x217 (and $x220 true)) (and $x217 $x220)))))
(let ((@x495 (monotonicity (monotonicity @x489 $x491) (= (and $x212 (and $x215 (and $x217 (and $x220 true)))) $x493))))
(let ((@x502 (trans (monotonicity @x495 (= $x225 (and true $x493))) (rewrite (= (and true $x493) $x493)) (= $x225 $x493))))
(let ((@x506 (trans (monotonicity @x502 (= $x226 (and true $x493))) (rewrite (= (and true $x493) $x493)) (= $x226 $x493))))
(let ((@x512 (monotonicity (monotonicity @x506 (= (and $x210 $x226) $x507)) (= $x228 (and true $x507)))))
(let ((@x518 (monotonicity (trans @x512 (rewrite (= (and true $x507) $x507)) (= $x228 $x507)) (= $x229 (and true $x507)))))
(let ((@x595 (monotonicity (trans @x518 (rewrite (= (and true $x507) $x507)) (= $x229 $x507)) @x592 (= $x253 (=> $x507 $x590)))))
(let ((@x817 (monotonicity (trans @x595 (rewrite (= (=> $x507 $x590) $x597)) (= $x253 $x597)) (trans @x808 (rewrite (= (=> $x635 $x803) $x810)) (= $x336 $x810)) (= (and $x253 $x336) $x815))))
(let (($x197 (exists ((?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?0))))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x187 (+ ?x174 ?x155)))
(let ((?x182 (fun_app$c v_b_SP_G_1$ ?0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x193 (< ?x174 ?x182)))
(and $x193 (and $x178 (= ?x182 ?x187))))))))) :qid k!42))
))
(let (($x191 (< ?x174 b_Infinity$)))
(let (($x192 (and $x132 $x191)))
(let (($x198 (=> $x192 $x197)))
(let ((@x430 (monotonicity (rewrite (= (+ ?x174 ?x155) ?x410)) (= (= ?x182 (+ ?x174 ?x155)) $x428))))
(let ((@x436 (monotonicity (monotonicity @x430 (= (and $x178 (= ?x182 (+ ?x174 ?x155))) $x431)) (= (and $x193 (and $x178 (= ?x182 (+ ?x174 ?x155)))) $x434))))
(let ((@x442 (monotonicity (quant-intro @x436 (= $x197 $x437)) (= $x198 (=> $x192 $x437)))))
(let ((@x451 (quant-intro (trans @x442 (rewrite (= (=> $x192 $x437) $x444)) (= $x198 $x444)) (= $x199 $x449))))
(let ((@x458 (trans (monotonicity @x451 (= $x200 (and $x449 true))) (rewrite (= (and $x449 true) $x449)) (= $x200 $x449))))
(let (($x186 (and $x178 $x156)))
(let (($x189 (=> $x186 (<= ?x182 (+ ?x174 ?x155)))))
(let ((@x415 (monotonicity (rewrite (= (+ ?x174 ?x155) ?x410)) (= (<= ?x182 (+ ?x174 ?x155)) $x413))))
(let ((@x424 (trans (monotonicity @x415 (= $x189 (=> $x186 $x413))) (rewrite (= (=> $x186 $x413) $x420)) (= $x189 $x420))))
(let ((@x461 (monotonicity (quant-intro @x424 (= $x190 $x425)) @x458 (= (and $x190 $x200) $x459))))
(let ((@x464 (monotonicity (quant-intro (rewrite (= (=> $x181 $x183) $x404)) (= $x185 $x407)) @x461 (= (and $x185 (and $x190 $x200)) $x462))))
(let ((@x470 (monotonicity (monotonicity @x464 (= (and $x176 (and $x185 (and $x190 $x200))) $x465)) (= (and $x173 (and $x176 (and $x185 (and $x190 $x200)))) $x468))))
(let ((@x477 (trans (monotonicity @x470 (= $x205 (and true $x468))) (rewrite (= (and true $x468) $x468)) (= $x205 $x468))))
(let ((@x481 (trans (monotonicity @x477 (= $x206 (and true $x468))) (rewrite (= (and true $x468) $x468)) (= $x206 $x468))))
(let ((@x402 (quant-intro (rewrite (= (=> (and $x132 (< ?x128 b_Infinity$)) $x168) $x397)) (= $x170 $x400))))
(let ((@x820 (monotonicity (monotonicity @x402 @x481 (= (and $x170 $x206) $x482)) @x817 (= $x338 (=> $x482 $x815)))))
(let ((@x829 (monotonicity @x402 (trans @x820 (rewrite (= (=> $x482 $x815) $x822)) (= $x338 $x822)) (= (and $x170 $x338) $x827))))
(let ((@x395 (quant-intro (rewrite (= (=> (and $x136 $x156) $x159) $x390)) (= $x161 $x393))))
(let ((@x838 (trans (monotonicity @x395 @x829 (= $x340 (=> $x393 $x827))) (rewrite (= (=> $x393 $x827) $x834)) (= $x340 $x834))))
(let ((@x844 (monotonicity (quant-intro (rewrite (= (=> $x149 $x151) $x383)) (= $x153 $x386)) (monotonicity @x395 @x838 (= (and $x161 $x340) $x839)) (= $x342 (=> $x386 $x839)))))
(let ((@x853 (monotonicity (quant-intro (rewrite (= (=> $x149 $x151) $x383)) (= $x153 $x386)) (trans @x844 (rewrite (= (=> $x386 $x839) $x846)) (= $x342 $x846)) (= (and $x153 $x342) $x851))))
(let ((@x862 (trans (monotonicity @x853 (= $x344 (=> $x147 $x851))) (rewrite (= (=> $x147 $x851) $x858)) (= $x344 $x858))))
(let ((@x868 (monotonicity (monotonicity @x862 (= (and $x147 $x344) $x863)) (= $x346 (=> $x145 $x863)))))
(let ((@x877 (monotonicity (trans @x868 (rewrite (= (=> $x145 $x863) $x870)) (= $x346 $x870)) (= (and $x145 $x346) $x875))))
(let (($x368 (and $x354 (and $x360 $x138))))
(let (($x371 (and true $x368)))
(let ((@x362 (quant-intro (rewrite (= (=> $x132 (= ?x128 b_Infinity$)) $x357)) (= $x135 $x360))))
(let ((@x367 (monotonicity @x362 (rewrite (= (and $x138 true) $x138)) (= (and $x135 (and $x138 true)) (and $x360 $x138)))))
(let ((@x356 (quant-intro (rewrite (= (=> $x127 (= ?x128 0)) (or $x132 (= ?x128 0)))) (= $x131 $x354))))
(let ((@x370 (monotonicity @x356 @x367 (= (and $x131 (and $x135 (and $x138 true))) $x368))))
(let ((@x377 (trans (monotonicity @x370 (= $x142 $x371)) (rewrite (= $x371 $x368)) (= $x142 $x368))))
(let ((@x381 (trans (monotonicity @x377 (= $x143 $x371)) (rewrite (= $x371 $x368)) (= $x143 $x368))))
(let ((@x886 (trans (monotonicity @x381 @x877 (= $x348 (=> $x368 $x875))) (rewrite (= (=> $x368 $x875) $x882)) (= $x348 $x882))))
(let ((@x1411 (trans (monotonicity @x886 (= $x349 (not $x882))) (monotonicity @x1406 (= (not $x882) $x1407)) (= $x349 $x1407))))
(let ((@x1413 (not-or-elim (mp (asserted $x349) @x1411 $x1407) $x890)))
(let ((@x1463 (mp~ (and-elim @x1413 $x360) (nnf-pos (refl (~ $x357 $x357)) (~ $x360 $x360)) $x360)))
(let ((@x3498 (mp @x1463 (quant-intro (refl (= $x357 $x357)) (= $x360 $x3493)) $x3493)))
(let ((@x6489 (rewrite (= (or (not $x3493) (or $x1538 $x5616)) (or (not $x3493) $x1538 $x5616)))))
(let ((@x5602 (mp ((_ quant-inst ?v0!5) (or (not $x3493) (or $x1538 $x5616))) @x6489 (or (not $x3493) $x1538 $x5616))))
(let ((@x5777 (unit-resolution (hypothesis $x6457) (mp (unit-resolution @x5602 @x3498 (hypothesis $x1539) $x5616) @x5778 $x5625) false)))
(let ((@x5735 (unit-resolution (lemma @x5777 (or $x5625 $x1538)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x6457 $x1543)) @x6514 $x6457) @x6246 false)))
(let (($x3544 (not $x3541)))
(let (($x3827 (or $x3544 $x3824)))
(let (($x3830 (not $x3827)))
(let (($x3524 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x933 (>= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x155) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(or $x137 $x922 $x933))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!42))
))
(let (($x3529 (not $x3524)))
(let (($x3833 (or $x3529 $x3830)))
(let (($x3836 (not $x3833)))
(let ((?x1522 (v_b_SP_G_0$ ?v0!4)))
(let ((?x1523 (* (- 1) ?x1522)))
(let ((?x1521 (v_b_SP_G_0$ ?v1!3)))
(let ((?x1513 (pair$ ?v1!3 ?v0!4)))
(let ((?x1514 (b_G$ ?x1513)))
(let ((?x2045 (+ ?x1514 ?x1521 ?x1523)))
(let (($x2048 (>= ?x2045 0)))
(let (($x1517 (<= (+ b_Infinity$ (* (- 1) ?x1514)) 0)))
(let (($x1512 (v_b_Visited_G_0$ ?v1!3)))
(let (($x2394 (not $x1512)))
(let (($x2409 (or $x2394 $x1517 $x2048)))
(let (($x3500 (forall ((?v0 B_Vertex$) )(! (let (($x136 (v_b_Visited_G_0$ ?v0)))
(not $x136)) :pattern ( (v_b_Visited_G_0$ ?v0) ) :qid k!42))
))
(let ((@x1468 (mp~ (and-elim @x1413 $x138) (nnf-pos (refl (~ $x137 $x137)) (~ $x138 $x138)) $x138)))
(let ((@x3505 (mp @x1468 (quant-intro (refl (= $x137 $x137)) (= $x138 $x3500)) $x3500)))
(let ((@x3073 (unit-resolution ((_ quant-inst ?v1!3) (or (not $x3500) $x2394)) @x3505 (hypothesis $x1512) false)))
(let (($x2414 (not $x2409)))
(let (($x3839 (or $x2414 $x3836)))
(let (($x3842 (not $x3839)))
(let (($x3515 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x907 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(or $x136 (not (v_b_Visited_G_0$ ?v0)) $x907))) :pattern ( (v_b_Visited_G_0$ ?v1) (v_b_Visited_G_0$ ?v0) ) :qid k!42))
))
(let (($x3520 (not $x3515)))
(let (($x3845 (or $x3520 $x3842)))
(let (($x3848 (not $x3845)))
(let (($x1498 (>= (+ (v_b_SP_G_0$ ?v1!1) (* (- 1) (v_b_SP_G_0$ ?v0!2))) 0)))
(let (($x1491 (v_b_Visited_G_0$ ?v0!2)))
(let (($x2348 (not $x1491)))
(let (($x1489 (v_b_Visited_G_0$ ?v1!1)))
(let (($x2363 (or $x1489 $x2348 $x1498)))
(let (($x2368 (not $x2363)))
(let (($x3851 (or $x2368 $x3848)))
(let (($x3854 (not $x3851)))
(let (($x3506 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(>= ?x128 0)) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!42))
))
(let (($x3511 (not $x3506)))
(let (($x3857 (or $x3511 $x3854)))
(let (($x3860 (not $x3857)))
(let ((?x1475 (v_b_SP_G_0$ ?v0!0)))
(let (($x1476 (>= ?x1475 0)))
(let (($x1477 (not $x1476)))
(let ((@x5848 (hypothesis $x1477)))
(let (($x5440 (<= ?x1475 0)))
(let (($x86 (<= b_Infinity$ 0)))
(let (($x87 (not $x86)))
(let ((@x90 (mp (asserted (< 0 b_Infinity$)) (rewrite (= (< 0 b_Infinity$) $x87)) $x87)))
(let (($x5734 (= b_Infinity$ ?x1475)))
(let ((@x4994 (symm (commutativity (= $x5734 (= ?x1475 b_Infinity$))) (= (= ?x1475 b_Infinity$) $x5734))))
(let (($x5461 (= ?x1475 b_Infinity$)))
(let (($x5589 (= ?v0!0 b_Source$)))
(let (($x4695 (not $x5589)))
(let ((@x5096 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1475 0)) $x1476)) @x5848 (not (= ?x1475 0)))))
(let (($x3487 (forall ((?v0 B_Vertex$) )(! (let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(or $x132 (= (v_b_SP_G_0$ ?v0) 0)))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!42))
))
(let ((@x3491 (quant-intro (refl (= (or $x132 (= ?x128 0)) (or $x132 (= ?x128 0)))) (= $x354 $x3487))))
(let ((@x1457 (nnf-pos (refl (~ (or $x132 (= ?x128 0)) (or $x132 (= ?x128 0)))) (~ $x354 $x354))))
(let ((@x3492 (mp (mp~ (and-elim @x1413 $x354) @x1457 $x354) @x3491 $x3487)))
(let (($x5571 (= (or (not $x3487) (or $x4695 (= ?x1475 0))) (or (not $x3487) $x4695 (= ?x1475 0)))))
(let ((@x5058 (mp ((_ quant-inst ?v0!0) (or (not $x3487) (or $x4695 (= ?x1475 0)))) (rewrite $x5571) (or (not $x3487) $x4695 (= ?x1475 0)))))
(let ((@x5156 (rewrite (= (or (not $x3493) (or $x5589 $x5461)) (or (not $x3493) $x5589 $x5461)))))
(let ((@x5542 (mp ((_ quant-inst ?v0!0) (or (not $x3493) (or $x5589 $x5461))) @x5156 (or (not $x3493) $x5589 $x5461))))
(let ((@x5003 (mp (unit-resolution @x5542 @x3498 (unit-resolution @x5058 @x3492 @x5096 $x4695) $x5461) @x4994 $x5734)))
(let ((@x5457 ((_ th-lemma arith triangle-eq) (or (not $x5734) (<= (+ b_Infinity$ (* (- 1) ?x1475)) 0)))))
(let ((@x5462 (unit-resolution @x5457 @x5003 (<= (+ b_Infinity$ (* (- 1) ?x1475)) 0))))
(let ((@x5446 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x5440) @x5462 @x90 false) (or (not $x5440) $x1476))))
(let ((@x6353 (unit-resolution @x5446 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x5440 $x1476)) @x5848 $x5440) @x5848 false)))
(let (($x3863 (or $x1477 $x3860)))
(let (($x3866 (not $x3863)))
(let (($x3869 (or $x869 $x3866)))
(let (($x3872 (not $x3869)))
(let (($x5983 (not $x3487)))
(let (($x3194 (or $x5983 $x145)))
(let ((@x5448 (monotonicity (rewrite (= (= b_Source$ b_Source$) true)) (= (not (= b_Source$ b_Source$)) (not true)))))
(let ((@x5820 (trans @x5448 (rewrite (= (not true) false)) (= (not (= b_Source$ b_Source$)) false))))
(let ((@x5657 (monotonicity @x5820 (= (or (not (= b_Source$ b_Source$)) $x145) (or false $x145)))))
(let ((@x5707 (trans @x5657 (rewrite (= (or false $x145) $x145)) (= (or (not (= b_Source$ b_Source$)) $x145) $x145))))
(let ((@x5373 (monotonicity @x5707 (= (or $x5983 (or (not (= b_Source$ b_Source$)) $x145)) $x3194))))
(let ((@x5431 (trans @x5373 (rewrite (= $x3194 $x3194)) (= (or $x5983 (or (not (= b_Source$ b_Source$)) $x145)) $x3194))))
(let ((@x5763 (mp ((_ quant-inst b_Source$) (or $x5983 (or (not (= b_Source$ b_Source$)) $x145))) @x5431 $x3194)))
(let (($x3875 (or $x869 $x3872)))
(let (($x2848 (forall ((?v1 B_Vertex$) )(! (let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x2242 (= (+ ?x273 ?x1912 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(or (>= (+ ?x273 ?x1912) 0) $x300 (not $x2242)))))))) :qid k!42))
))
(let (($x2833 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1282 (>= (+ ?x155 ?x273 (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x300 (not $x291)))
(or $x300 $x922 $x1282))))))) :qid k!42))
))
(let (($x2857 (not (or (not $x2833) $x1909 $x1914 (not $x2848)))))
(let (($x2862 (or $x2811 $x2857)))
(let (($x2788 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1262 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x2768 (not (fun_app$ v_b_Visited_G_2$ ?v0))))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x291 $x2768 $x1262)))) :qid k!42))
))
(let (($x2871 (not (or (not $x2788) (not $x2862)))))
(let (($x2876 (or $x2765 $x2871)))
(let (($x2884 (not (or $x1259 (not $x2876)))))
(let (($x2889 (or $x1848 $x2884)))
(let (($x2897 (not (or $x773 (not $x2889)))))
(let (($x2902 (or $x773 $x2897)))
(let (($x2910 (not (or $x785 (not $x2902)))))
(let (($x2915 (or $x1830 $x2910)))
(let (($x2923 (not (or $x1250 (not $x2915)))))
(let (($x2928 (or $x1813 $x2923)))
(let (($x2742 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x273 (v_b_SP_G_2$ ?v0)))
(let (($x278 (= ?x273 ?x174)))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1173 (* (- 1) ?x257)))
(let (($x1175 (<= (+ ?x174 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2717 (or $x1169 $x1175)))
(let (($x2718 (not $x2717)))
(or $x2718 $x278)))))))))) :qid k!42))
))
(let (($x2736 (forall ((?v0 B_Vertex$) )(! (let ((?x273 (v_b_SP_G_2$ ?v0)))
(let ((?x1186 (* (- 1) ?x273)))
(let ((?x268 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x257 (fun_app$c v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1185 (= (+ ?x257 ?x268 ?x1186) 0)))
(let (($x1175 (<= (+ (fun_app$c v_b_SP_G_1$ ?v0) (* (- 1) ?x257) (* (- 1) ?x268)) 0)))
(let (($x1169 (<= (+ b_Infinity$ (* (- 1) ?x268)) 0)))
(or $x1169 $x1175 $x1185)))))))) :qid k!42))
))
(let (($x2939 (or $x1773 $x1778 $x255 $x1213 (not $x1209) $x2935 (not $x2736) (not $x2742) (not $x2928))))
(let (($x2940 (not $x2939)))
(let (($x2672 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1140 (>= (+ ?x155 ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ ?v0))) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(or $x1099 $x922 $x1140)))))) :qid k!42))
))
(let (($x2680 (not (or (not $x2672) $x246))))
(let (($x2685 (or $x2650 $x2680)))
(let (($x2628 (forall ((?v0 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let ((?x2191 (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2192 (= ?x2191 0)))
(let (($x2176 (<= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2617 (not (or $x2176 (not $x2192)))))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x1099 $x2617)))))))) :qid k!42))
))
(let (($x2694 (not (or (not $x2628) (not $x2685)))))
(let (($x2591 (forall ((?v1 B_Vertex$) )(! (let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let (($x2148 (= (+ ?x230 ?x1662 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x230 ?x1662) 0) (not $x2148)))))) :qid k!42))
))
(let (($x2599 (not (or $x1659 $x1664 (not $x2591)))))
(let (($x2699 (or $x2599 $x2694)))
(let (($x2576 (forall ((?v0 B_Vertex$) )(! (let (($x1002 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0))) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x178 $x1002))) :qid k!42))
))
(let (($x2712 (not (or (not $x2576) $x2706 $x2707 $x2708 $x2709 (not $x2699)))))
(let (($x2945 (or $x2712 $x2940)))
(let (($x2562 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x2128 (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2129 (= ?x2128 0)))
(let (($x2113 (<= (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2551 (not (or $x2113 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2129)))))
(let (($x1002 (<= (+ b_Infinity$ (* (- 1) ?x174)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x1002 $x2551)))))))) :qid k!42))
))
(let (($x2534 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let (($x990 (>= (+ ?x155 ?x174 ?x991) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x179 (not $x178)))
(or $x179 $x922 $x990))))))))) :qid k!42))
))
(let (($x2512 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x182 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x991 (* (- 1) ?x182)))
(let ((?x174 (fun_app$c v_b_SP_G_1$ ?v1)))
(let (($x1015 (>= (+ ?x174 ?x991) 0)))
(let (($x180 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x2492 (not $x180)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x178 $x2492 $x1015)))))))) :qid k!42))
))
(let (($x2489 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(let ((?x2090 (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2091 (= ?x2090 0)))
(let (($x2075 (<= (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2478 (not (or $x2075 (not (v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2091)))))
(let (($x947 (<= (+ b_Infinity$ (* (- 1) ?x128)) 0)))
(let (($x127 (= ?v0 b_Source$)))
(or $x127 $x947 $x2478)))))))) :qid k!42))
))
(let (($x2958 (or (not $x2489) $x2952 (not $x1051) (not $x2512) (not $x2534) (not $x2562) (not $x2945))))
(let (($x2959 (not $x2958)))
(let (($x2451 (forall ((?v1 B_Vertex$) )(! (let ((?x1540 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1541 (* (- 1) ?x1540)))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(or (>= (+ ?x128 ?x1541) 0) $x137 (not (= (+ ?x128 ?x1541 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :qid k!42))
))
(let (($x2459 (not (or $x1538 $x1543 (not $x2451)))))
(let (($x2964 (or $x2459 $x2959)))
(let (($x2436 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x155 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x933 (>= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x155) 0)))
(let (($x922 (<= (+ b_Infinity$ (* (- 1) ?x155)) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x137 (not $x136)))
(or $x137 $x922 $x933))))))) :qid k!42))
))
(let (($x2973 (not (or (not $x2436) (not $x2964)))))
(let (($x2978 (or $x2414 $x2973)))
(let (($x2391 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x907 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(or $x136 (not (v_b_Visited_G_0$ ?v0)) $x907))) :qid k!42))
))
(let (($x2987 (not (or (not $x2391) (not $x2978)))))
(let (($x2992 (or $x2368 $x2987)))
(let (($x3000 (not (or $x902 (not $x2992)))))
(let (($x3005 (or $x1477 $x3000)))
(let (($x3013 (not (or $x869 (not $x3005)))))
(let (($x3018 (or $x869 $x3013)))
(let (($x2837 (or (>= (+ ?x273 (* (- 1) ?x1911)) 0) $x300 (not (= (+ ?x273 (* (- 1) ?x1911) (b_G$ (pair$ ?0 ?v0!20))) 0)))))
(let ((@x3736 (monotonicity (quant-intro (refl (= $x2837 $x2837)) (= $x2848 $x3729)) (= (not $x2848) $x3734))))
(let ((@x3724 (quant-intro (refl (= (or $x300 $x922 $x1282) (or $x300 $x922 $x1282))) (= $x2833 $x3720))))
(let ((@x3739 (monotonicity (monotonicity @x3724 (= (not $x2833) $x3725)) @x3736 (= (or (not $x2833) $x1909 $x1914 (not $x2848)) $x3737))))
(let ((@x3748 (monotonicity (monotonicity (monotonicity @x3739 (= $x2857 $x3740)) (= $x2862 $x3743)) (= (not $x2862) $x3746))))
(let (($x2768 (not (fun_app$ v_b_Visited_G_2$ ?1))))
(let (($x2783 (or $x291 $x2768 $x1262)))
(let ((@x3719 (monotonicity (quant-intro (refl (= $x2783 $x2783)) (= $x2788 $x3712)) (= (not $x2788) $x3717))))
(let ((@x3754 (monotonicity (monotonicity @x3719 @x3748 (= (or (not $x2788) (not $x2862)) $x3749)) (= $x2871 $x3752))))
(let ((@x3760 (monotonicity (monotonicity @x3754 (= $x2876 $x3755)) (= (not $x2876) $x3758))))
(let ((@x3707 (quant-intro (refl (= (>= ?x273 0) (>= ?x273 0))) (= $x1256 $x3703))))
(let ((@x3763 (monotonicity (monotonicity @x3707 (= $x1259 $x3708)) @x3760 (= (or $x1259 (not $x2876)) $x3761))))
(let ((@x3772 (monotonicity (monotonicity (monotonicity @x3763 (= $x2884 $x3764)) (= $x2889 $x3767)) (= (not $x2889) $x3770))))
(let ((@x3778 (monotonicity (monotonicity @x3772 (= (or $x773 (not $x2889)) $x3773)) (= $x2897 $x3776))))
(let ((@x3784 (monotonicity (monotonicity @x3778 (= $x2902 $x3779)) (= (not $x2902) $x3782))))
(let ((@x3699 (quant-intro (refl (= (or $x300 $x278) (or $x300 $x278))) (= $x652 $x3695))))
(let ((@x3787 (monotonicity (monotonicity @x3699 (= $x785 $x3700)) @x3784 (= (or $x785 (not $x2902)) $x3785))))
(let ((@x3796 (monotonicity (monotonicity (monotonicity @x3787 (= $x2910 $x3788)) (= $x2915 $x3791)) (= (not $x2915) $x3794))))
(let ((@x3693 (monotonicity (quant-intro (refl (= $x1243 $x1243)) (= $x1247 $x3686)) (= $x1250 $x3691))))
(let ((@x3802 (monotonicity (monotonicity @x3693 @x3796 (= (or $x1250 (not $x2915)) $x3797)) (= $x2923 $x3800))))
(let ((@x3808 (monotonicity (monotonicity @x3802 (= $x2928 $x3803)) (= (not $x2928) $x3806))))
(let ((@x3680 (refl (= (or (not (or $x1169 $x1175)) $x278) (or (not (or $x1169 $x1175)) $x278)))))
(let ((@x3685 (monotonicity (quant-intro @x3680 (= $x2742 $x3678)) (= (not $x2742) $x3683))))
(let ((@x3674 (quant-intro (refl (= (or $x1169 $x1175 $x1185) (or $x1169 $x1175 $x1185))) (= $x2736 $x3670))))
(let ((@x3667 (monotonicity (quant-intro (refl (= $x1206 $x1206)) (= $x1209 $x3660)) (= (not $x1209) $x3665))))
(let ((@x3811 (monotonicity @x3667 (monotonicity @x3674 (= (not $x2736) $x3675)) @x3685 @x3808 (= $x2939 $x3809))))
(let ((@x3626 (quant-intro (refl (= (or $x1099 $x922 $x1140) (or $x1099 $x922 $x1140))) (= $x2672 $x3622))))
(let ((@x3632 (monotonicity (monotonicity @x3626 (= (not $x2672) $x3627)) (= (or (not $x2672) $x246) $x3630))))
(let ((@x3641 (monotonicity (monotonicity (monotonicity @x3632 (= $x2680 $x3633)) (= $x2685 $x3636)) (= (not $x2685) $x3639))))
(let ((?x2191 (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?0) ?0))))))
(let (($x2192 (= ?x2191 0)))
(let (($x2176 (<= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?0)))) 0)))
(let (($x2617 (not (or $x2176 (not $x2192)))))
(let (($x2623 (or $x127 $x1099 $x2617)))
(let ((@x3621 (monotonicity (quant-intro (refl (= $x2623 $x2623)) (= $x2628 $x3614)) (= (not $x2628) $x3619))))
(let ((@x3647 (monotonicity (monotonicity @x3621 @x3641 (= (or (not $x2628) (not $x2685)) $x3642)) (= $x2694 $x3645))))
(let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let (($x2148 (= (+ ?x230 ?x1662 (b_G$ (pair$ ?0 ?v0!8))) 0)))
(let (($x2580 (or (>= (+ ?x230 ?x1662) 0) (not $x2148))))
(let ((@x3607 (monotonicity (quant-intro (refl (= $x2580 $x2580)) (= $x2591 $x3600)) (= (not $x2591) $x3605))))
(let ((@x3613 (monotonicity (monotonicity @x3607 (= (or $x1659 $x1664 (not $x2591)) $x3608)) (= $x2599 $x3611))))
(let ((@x3653 (monotonicity (monotonicity @x3613 @x3647 (= $x2699 $x3648)) (= (not $x2699) $x3651))))
(let ((@x3594 (quant-intro (refl (= (or $x178 $x1002) (or $x178 $x1002))) (= $x2576 $x3590))))
(let ((@x3656 (monotonicity (monotonicity @x3594 (= (not $x2576) $x3595)) @x3653 (= (or (not $x2576) $x2706 $x2707 $x2708 $x2709 (not $x2699)) $x3654))))
(let ((@x3817 (monotonicity (monotonicity @x3656 (= $x2712 $x3657)) (monotonicity @x3811 (= $x2940 $x3812)) (= $x2945 $x3815))))
(let ((?x2128 (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?0) ?0))))))
(let (($x2129 (= ?x2128 0)))
(let (($x2113 (<= (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?0)))) 0)))
(let (($x2551 (not (or $x2113 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?0))) (not $x2129)))))
(let (($x2557 (or $x127 $x1002 $x2551)))
(let ((@x3588 (monotonicity (quant-intro (refl (= $x2557 $x2557)) (= $x2562 $x3581)) (= (not $x2562) $x3586))))
(let ((@x3577 (quant-intro (refl (= (or $x179 $x922 $x990) (or $x179 $x922 $x990))) (= $x2534 $x3573))))
(let ((@x3569 (quant-intro (refl (= (or $x178 (not $x180) $x1015) (or $x178 (not $x180) $x1015))) (= $x2512 $x3565))))
(let ((@x3560 (quant-intro (refl (= (>= ?x174 0) (>= ?x174 0))) (= $x1051 $x3556))))
(let ((?x2090 (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?0) ?0))))))
(let (($x2091 (= ?x2090 0)))
(let (($x2075 (<= (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0)))) 0)))
(let (($x2478 (not (or $x2075 (not (v_b_Visited_G_0$ (?v1!6 ?0))) (not $x2091)))))
(let (($x947 (<= (+ b_Infinity$ (* (- 1) ?x128)) 0)))
(let (($x2484 (or $x127 $x947 $x2478)))
(let ((@x3554 (monotonicity (quant-intro (refl (= $x2484 $x2484)) (= $x2489 $x3547)) (= (not $x2489) $x3552))))
(let ((@x3823 (monotonicity @x3554 (monotonicity @x3560 (= (not $x1051) $x3561)) (monotonicity @x3569 (= (not $x2512) $x3570)) (monotonicity @x3577 (= (not $x2534) $x3578)) @x3588 (monotonicity @x3817 (= (not $x2945) $x3818)) (= $x2958 $x3821))))
(let (($x2440 (or (>= (+ ?x128 ?x1541) 0) $x137 (not (= (+ ?x128 ?x1541 (b_G$ (pair$ ?0 ?v0!5))) 0)))))
(let ((@x3540 (monotonicity (quant-intro (refl (= $x2440 $x2440)) (= $x2451 $x3533)) (= (not $x2451) $x3538))))
(let ((@x3546 (monotonicity (monotonicity @x3540 (= (or $x1538 $x1543 (not $x2451)) $x3541)) (= $x2459 $x3544))))
(let ((@x3829 (monotonicity @x3546 (monotonicity @x3823 (= $x2959 $x3824)) (= $x2964 $x3827))))
(let ((@x3528 (quant-intro (refl (= (or $x137 $x922 $x933) (or $x137 $x922 $x933))) (= $x2436 $x3524))))
(let ((@x3835 (monotonicity (monotonicity @x3528 (= (not $x2436) $x3529)) (monotonicity @x3829 (= (not $x2964) $x3830)) (= (or (not $x2436) (not $x2964)) $x3833))))
(let ((@x3844 (monotonicity (monotonicity (monotonicity @x3835 (= $x2973 $x3836)) (= $x2978 $x3839)) (= (not $x2978) $x3842))))
(let ((@x3519 (quant-intro (refl (= (or $x136 (not $x148) $x907) (or $x136 (not $x148) $x907))) (= $x2391 $x3515))))
(let ((@x3847 (monotonicity (monotonicity @x3519 (= (not $x2391) $x3520)) @x3844 (= (or (not $x2391) (not $x2978)) $x3845))))
(let ((@x3856 (monotonicity (monotonicity (monotonicity @x3847 (= $x2987 $x3848)) (= $x2992 $x3851)) (= (not $x2992) $x3854))))
(let ((@x3510 (quant-intro (refl (= (>= ?x128 0) (>= ?x128 0))) (= $x899 $x3506))))
(let ((@x3859 (monotonicity (monotonicity @x3510 (= $x902 $x3511)) @x3856 (= (or $x902 (not $x2992)) $x3857))))
(let ((@x3868 (monotonicity (monotonicity (monotonicity @x3859 (= $x3000 $x3860)) (= $x3005 $x3863)) (= (not $x3005) $x3866))))
(let ((@x3874 (monotonicity (monotonicity @x3868 (= (or $x869 (not $x3005)) $x3869)) (= $x3013 $x3872))))
(let (($x2251 (forall ((?v1 B_Vertex$) )(! (let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x2242 (= (+ ?x273 ?x1912 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x2245 (and (not (>= (+ ?x273 ?x1912) 0)) $x291 $x2242)))
(not $x2245))))))) :qid k!42))
))
(let (($x1915 (not $x1914)))
(let (($x1910 (not $x1909)))
(let (($x2260 (and $x1289 $x1910 $x1915 $x2251)))
(let (($x1891 (not (and $x1883 (not $x1888)))))
(let (($x1897 (or $x1891 $x1896)))
(let (($x1898 (not $x1897)))
(let (($x2265 (or $x1898 $x2260)))
(let (($x2268 (and $x1270 $x2265)))
(let (($x1864 (not (and (not $x1860) $x1862))))
(let (($x1870 (or $x1864 $x1869)))
(let (($x1871 (not $x1870)))
(let (($x2271 (or $x1871 $x2268)))
(let (($x2274 (and $x1256 $x2271)))
(let (($x2277 (or $x1848 $x2274)))
(let (($x2280 (and $x297 $x2277)))
(let (($x2283 (or $x773 $x2280)))
(let (($x2286 (and $x652 $x2283)))
(let (($x2289 (or $x1830 $x2286)))
(let (($x2292 (and $x1247 $x2289)))
(let (($x2295 (or $x1813 $x2292)))
(let (($x1779 (not $x1778)))
(let (($x1774 (not $x1773)))
(let (($x2301 (and $x1774 $x1779 $x256 $x1214 $x1209 $x266 $x1193 $x1199 $x2295)))
(let (($x1749 (not $x246)))
(let (($x1752 (and $x1146 $x1749)))
(let (($x1733 (not (and (not $x1724) (not $x1730)))))
(let (($x2212 (or $x1733 $x2209)))
(let (($x2215 (not $x2212)))
(let (($x2218 (or $x2215 $x1752)))
(let (($x2203 (forall ((?v0 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let ((?x2191 (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2192 (= ?x2191 0)))
(let (($x2176 (<= (+ ?x230 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2197 (and (not $x2176) $x2192)))
(let (($x1099 (<= (+ b_Infinity$ (* (- 1) ?x230)) 0)))
(let (($x1100 (not $x1099)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1103 (and $x132 $x1100)))
(let (($x1106 (not $x1103)))
(or $x1106 $x2197)))))))))))) :qid k!42))
))
(let (($x2221 (and $x2203 $x2218)))
(let (($x2157 (forall ((?v1 B_Vertex$) )(! (let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let (($x2148 (= (+ ?x230 ?x1662 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(let (($x2151 (and (not (>= (+ ?x230 ?x1662) 0)) $x2148)))
(not $x2151)))))) :qid k!42))
))
(let (($x1665 (not $x1664)))
(let (($x1660 (not $x1659)))
(let (($x2163 (and $x1660 $x1665 $x2157)))
(let (($x2224 (or $x2163 $x2221)))
(let (($x1641 (forall ((?v0 B_Vertex$) )(! (let (($x1002 (<= (+ b_Infinity$ (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0))) 0)))
(let (($x1003 (not $x1002)))
(let (($x178 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x179 (not $x178)))
(let (($x1077 (and $x179 $x1003)))
(not $x1077)))))) :qid k!42))
))
(let (($x2230 (and $x1641 $x212 $x215 $x217 $x220 $x2224)))
(let (($x2306 (or $x2230 $x2301)))
(let (($x2140 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x2128 (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2129 (= ?x2128 0)))
(let ((?x1613 (?v1!7 ?v0)))
(let (($x1618 (fun_app$ v_b_Visited_G_1$ ?x1613)))
(let (($x2134 (and (not (<= (+ ?x174 (* (- 1) (fun_app$c v_b_SP_G_1$ ?x1613))) 0)) $x1618 $x2129)))
(let (($x1002 (<= (+ b_Infinity$ (* (- 1) ?x174)) 0)))
(let (($x1003 (not $x1002)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1006 (and $x132 $x1003)))
(let (($x1009 (not $x1006)))
(or $x1009 $x2134))))))))))))) :qid k!42))
))
(let (($x2102 (forall ((?v0 B_Vertex$) )(! (let ((?x128 (v_b_SP_G_0$ ?v0)))
(let ((?x2090 (+ ?x128 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2091 (= ?x2090 0)))
(let ((?x1578 (?v1!6 ?v0)))
(let (($x1583 (v_b_Visited_G_0$ ?x1578)))
(let (($x2096 (and (not (<= (+ ?x128 (* (- 1) (v_b_SP_G_0$ ?x1578))) 0)) $x1583 $x2091)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x951 (and $x132 (not (<= (+ b_Infinity$ (* (- 1) ?x128)) 0)))))
(let (($x954 (not $x951)))
(or $x954 $x2096))))))))))) :qid k!42))
))
(let (($x2315 (and $x2102 $x173 $x1051 $x1045 $x997 $x2140 $x2306)))
(let (($x1567 (forall ((?v1 B_Vertex$) )(! (let ((?x1540 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1541 (* (- 1) ?x1540)))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(let (($x1554 (and (not (>= (+ ?x128 ?x1541) 0)) $x136 (= (+ ?x128 ?x1541 (b_G$ (pair$ ?v1 ?v0!5))) 0))))
(not $x1554)))))) :qid k!42))
))
(let (($x2062 (and $x1539 $x1544 $x1567)))
(let (($x2320 (or $x2062 $x2315)))
(let (($x2323 (and $x939 $x2320)))
(let (($x1520 (not (and $x1512 (not $x1517)))))
(let (($x2051 (or $x1520 $x2048)))
(let (($x2054 (not $x2051)))
(let (($x2326 (or $x2054 $x2323)))
(let (($x2329 (and $x914 $x2326)))
(let (($x1493 (not (and (not $x1489) $x1491))))
(let (($x1499 (or $x1493 $x1498)))
(let (($x1500 (not $x1499)))
(let (($x2332 (or $x1500 $x2329)))
(let (($x2335 (and $x899 $x2332)))
(let (($x2338 (or $x1477 $x2335)))
(let (($x2341 (and $x145 $x2338)))
(let (($x2344 (or $x869 $x2341)))
(let ((@x2942 (rewrite (= (and $x1774 $x1779 $x256 $x1214 $x1209 $x266 $x2736 $x2742 $x2928) $x2940))))
(let (($x2242 (= (+ ?x273 (* (- 1) ?x1911) (b_G$ (pair$ ?0 ?v0!20))) 0)))
(let (($x2245 (and (not (>= (+ ?x273 (* (- 1) ?x1911)) 0)) $x291 $x2242)))
(let (($x2248 (not $x2245)))
(let ((@x2843 (monotonicity (rewrite (= $x2245 (not $x2837))) (= $x2248 (not (not $x2837))))))
(let ((@x2850 (quant-intro (trans @x2843 (rewrite (= (not (not $x2837)) $x2837)) (= $x2248 $x2837)) (= $x2251 $x2848))))
(let ((@x2820 (monotonicity (rewrite (= $x1276 (not (or $x300 $x922)))) (= $x1279 (not (not (or $x300 $x922)))))))
(let ((@x2824 (trans @x2820 (rewrite (= (not (not (or $x300 $x922))) (or $x300 $x922))) (= $x1279 (or $x300 $x922)))))
(let ((@x2832 (trans (monotonicity @x2824 (= $x1286 (or (or $x300 $x922) $x1282))) (rewrite (= (or (or $x300 $x922) $x1282) (or $x300 $x922 $x1282))) (= $x1286 (or $x300 $x922 $x1282)))))
(let ((@x2853 (monotonicity (quant-intro @x2832 (= $x1289 $x2833)) @x2850 (= $x2260 (and $x2833 $x1910 $x1915 $x2848)))))
(let ((@x2861 (trans @x2853 (rewrite (= (and $x2833 $x1910 $x1915 $x2848) $x2857)) (= $x2260 $x2857))))
(let ((@x2798 (monotonicity (rewrite (= (and $x1883 (not $x1888)) (not (or $x2791 $x1888)))) (= $x1891 (not (not (or $x2791 $x1888)))))))
(let ((@x2802 (trans @x2798 (rewrite (= (not (not (or $x2791 $x1888))) (or $x2791 $x1888))) (= $x1891 (or $x2791 $x1888)))))
(let ((@x2810 (trans (monotonicity @x2802 (= $x1897 (or (or $x2791 $x1888) $x1896))) (rewrite (= (or (or $x2791 $x1888) $x1896) $x2806)) (= $x1897 $x2806))))
(let ((@x2864 (monotonicity (monotonicity @x2810 (= $x1898 $x2811)) @x2861 (= $x2265 $x2862))))
(let ((@x2775 (monotonicity (rewrite (= $x302 (not (or $x291 $x2768)))) (= $x664 (not (not (or $x291 $x2768)))))))
(let ((@x2779 (trans @x2775 (rewrite (= (not (not (or $x291 $x2768))) (or $x291 $x2768))) (= $x664 (or $x291 $x2768)))))
(let ((@x2787 (trans (monotonicity @x2779 (= $x1267 (or (or $x291 $x2768) $x1262))) (rewrite (= (or (or $x291 $x2768) $x1262) $x2783)) (= $x1267 $x2783))))
(let ((@x2867 (monotonicity (quant-intro @x2787 (= $x1270 $x2788)) @x2864 (= $x2268 (and $x2788 $x2862)))))
(let ((@x2752 (monotonicity (rewrite (= (and (not $x1860) $x1862) (not (or $x1860 $x2745)))) (= $x1864 (not (not (or $x1860 $x2745)))))))
(let ((@x2756 (trans @x2752 (rewrite (= (not (not (or $x1860 $x2745))) (or $x1860 $x2745))) (= $x1864 (or $x1860 $x2745)))))
(let ((@x2764 (trans (monotonicity @x2756 (= $x1870 (or (or $x1860 $x2745) $x1869))) (rewrite (= (or (or $x1860 $x2745) $x1869) $x2760)) (= $x1870 $x2760))))
(let ((@x2878 (monotonicity (monotonicity @x2764 (= $x1871 $x2765)) (trans @x2867 (rewrite (= (and $x2788 $x2862) $x2871)) (= $x2268 $x2871)) (= $x2271 $x2876))))
(let ((@x2888 (trans (monotonicity @x2878 (= $x2274 (and $x1256 $x2876))) (rewrite (= (and $x1256 $x2876) $x2884)) (= $x2274 $x2884))))
(let ((@x2894 (monotonicity (monotonicity @x2888 (= $x2277 $x2889)) (= $x2280 (and $x297 $x2889)))))
(let ((@x2904 (monotonicity (trans @x2894 (rewrite (= (and $x297 $x2889) $x2897)) (= $x2280 $x2897)) (= $x2283 $x2902))))
(let ((@x2914 (trans (monotonicity @x2904 (= $x2286 (and $x652 $x2902))) (rewrite (= (and $x652 $x2902) $x2910)) (= $x2286 $x2910))))
(let ((@x2920 (monotonicity (monotonicity @x2914 (= $x2289 $x2915)) (= $x2292 (and $x1247 $x2915)))))
(let ((@x2930 (monotonicity (trans @x2920 (rewrite (= (and $x1247 $x2915) $x2923)) (= $x2292 $x2923)) (= $x2295 $x2928))))
(let ((@x2741 (monotonicity (rewrite (= $x1179 (not (or $x1169 $x1175)))) (= $x1196 (or (not (or $x1169 $x1175)) $x278)))))
(let ((@x2723 (monotonicity (rewrite (= $x1179 (not (or $x1169 $x1175)))) (= $x1182 (not (not (or $x1169 $x1175)))))))
(let ((@x2727 (trans @x2723 (rewrite (= (not (not (or $x1169 $x1175))) (or $x1169 $x1175))) (= $x1182 (or $x1169 $x1175)))))
(let ((@x2735 (trans (monotonicity @x2727 (= $x1190 (or (or $x1169 $x1175) $x1185))) (rewrite (= (or (or $x1169 $x1175) $x1185) (or $x1169 $x1175 $x1185))) (= $x1190 (or $x1169 $x1175 $x1185)))))
(let ((@x2933 (monotonicity (quant-intro @x2735 (= $x1193 $x2736)) (quant-intro @x2741 (= $x1199 $x2742)) @x2930 (= $x2301 (and $x1774 $x1779 $x256 $x1214 $x1209 $x266 $x2736 $x2742 $x2928)))))
(let ((@x2659 (monotonicity (rewrite (= $x1134 (not (or $x1099 $x922)))) (= $x1137 (not (not (or $x1099 $x922)))))))
(let ((@x2663 (trans @x2659 (rewrite (= (not (not (or $x1099 $x922))) (or $x1099 $x922))) (= $x1137 (or $x1099 $x922)))))
(let ((@x2671 (trans (monotonicity @x2663 (= $x1143 (or (or $x1099 $x922) $x1140))) (rewrite (= (or (or $x1099 $x922) $x1140) (or $x1099 $x922 $x1140))) (= $x1143 (or $x1099 $x922 $x1140)))))
(let ((@x2677 (monotonicity (quant-intro @x2671 (= $x1146 $x2672)) (= $x1752 (and $x2672 $x1749)))))
(let ((@x2637 (monotonicity (rewrite (= (and (not $x1724) (not $x1730)) (not (or $x1724 $x1730)))) (= $x1733 (not (not (or $x1724 $x1730)))))))
(let ((@x2641 (trans @x2637 (rewrite (= (not (not (or $x1724 $x1730))) (or $x1724 $x1730))) (= $x1733 (or $x1724 $x1730)))))
(let ((@x2649 (trans (monotonicity @x2641 (= $x2212 (or (or $x1724 $x1730) $x2209))) (rewrite (= (or (or $x1724 $x1730) $x2209) $x2645)) (= $x2212 $x2645))))
(let ((@x2687 (monotonicity (monotonicity @x2649 (= $x2215 $x2650)) (trans @x2677 (rewrite (= (and $x2672 $x1749) $x2680)) (= $x1752 $x2680)) (= $x2218 $x2685))))
(let ((@x2610 (monotonicity (rewrite (= $x1103 (not (or $x127 $x1099)))) (= $x1106 (not (not (or $x127 $x1099)))))))
(let ((@x2614 (trans @x2610 (rewrite (= (not (not (or $x127 $x1099))) (or $x127 $x1099))) (= $x1106 (or $x127 $x1099)))))
(let ((@x2622 (monotonicity @x2614 (rewrite (= (and (not $x2176) $x2192) $x2617)) (= (or $x1106 (and (not $x2176) $x2192)) (or (or $x127 $x1099) $x2617)))))
(let ((@x2627 (trans @x2622 (rewrite (= (or (or $x127 $x1099) $x2617) $x2623)) (= (or $x1106 (and (not $x2176) $x2192)) $x2623))))
(let ((@x2690 (monotonicity (quant-intro @x2627 (= $x2203 $x2628)) @x2687 (= $x2221 (and $x2628 $x2685)))))
(let (($x2151 (and (not (>= (+ ?x230 ?x1662) 0)) $x2148)))
(let (($x2154 (not $x2151)))
(let ((@x2586 (monotonicity (rewrite (= $x2151 (not $x2580))) (= $x2154 (not (not $x2580))))))
(let ((@x2593 (quant-intro (trans @x2586 (rewrite (= (not (not $x2580)) $x2580)) (= $x2154 $x2580)) (= $x2157 $x2591))))
(let ((@x2603 (trans (monotonicity @x2593 (= $x2163 (and $x1660 $x1665 $x2591))) (rewrite (= (and $x1660 $x1665 $x2591) $x2599)) (= $x2163 $x2599))))
(let ((@x2701 (monotonicity @x2603 (trans @x2690 (rewrite (= (and $x2628 $x2685) $x2694)) (= $x2221 $x2694)) (= $x2224 $x2699))))
(let ((@x2571 (monotonicity (rewrite (= $x1077 (not (or $x178 $x1002)))) (= (not $x1077) (not (not (or $x178 $x1002)))))))
(let ((@x2575 (trans @x2571 (rewrite (= (not (not (or $x178 $x1002))) (or $x178 $x1002))) (= (not $x1077) (or $x178 $x1002)))))
(let ((@x2704 (monotonicity (quant-intro @x2575 (= $x1641 $x2576)) @x2701 (= $x2230 (and $x2576 $x212 $x215 $x217 $x220 $x2699)))))
(let ((@x2716 (trans @x2704 (rewrite (= (and $x2576 $x212 $x215 $x217 $x220 $x2699) $x2712)) (= $x2230 $x2712))))
(let ((?x1613 (?v1!7 ?0)))
(let (($x1618 (fun_app$ v_b_Visited_G_1$ ?x1613)))
(let (($x2134 (and (not $x2113) $x1618 $x2129)))
(let (($x2137 (or $x1009 $x2134)))
(let ((@x2543 (monotonicity (rewrite (= $x1006 (not (or $x127 $x1002)))) (= $x1009 (not (not (or $x127 $x1002)))))))
(let ((@x2547 (trans @x2543 (rewrite (= (not (not (or $x127 $x1002))) (or $x127 $x1002))) (= $x1009 (or $x127 $x1002)))))
(let ((@x2556 (monotonicity @x2547 (rewrite (= $x2134 $x2551)) (= $x2137 (or (or $x127 $x1002) $x2551)))))
(let ((@x2561 (trans @x2556 (rewrite (= (or (or $x127 $x1002) $x2551) $x2557)) (= $x2137 $x2557))))
(let ((@x2521 (monotonicity (rewrite (= $x983 (not (or $x179 $x922)))) (= $x986 (not (not (or $x179 $x922)))))))
(let ((@x2525 (trans @x2521 (rewrite (= (not (not (or $x179 $x922))) (or $x179 $x922))) (= $x986 (or $x179 $x922)))))
(let ((@x2533 (trans (monotonicity @x2525 (= $x994 (or (or $x179 $x922) $x990))) (rewrite (= (or (or $x179 $x922) $x990) (or $x179 $x922 $x990))) (= $x994 (or $x179 $x922 $x990)))))
(let ((@x2509 (rewrite (= (or (or $x178 (not $x180)) $x1015) (or $x178 (not $x180) $x1015)))))
(let ((@x2501 (rewrite (= (not (not (or $x178 (not $x180)))) (or $x178 (not $x180))))))
(let ((@x2499 (monotonicity (rewrite (= $x181 (not (or $x178 (not $x180))))) (= $x403 (not (not (or $x178 (not $x180))))))))
(let ((@x2506 (monotonicity (trans @x2499 @x2501 (= $x403 (or $x178 (not $x180)))) (= $x1042 (or (or $x178 (not $x180)) $x1015)))))
(let ((@x2514 (quant-intro (trans @x2506 @x2509 (= $x1042 (or $x178 (not $x180) $x1015))) (= $x1045 $x2512))))
(let ((?x1578 (?v1!6 ?0)))
(let (($x1583 (v_b_Visited_G_0$ ?x1578)))
(let (($x2096 (and (not $x2075) $x1583 $x2091)))
(let (($x2099 (or $x954 $x2096)))
(let ((@x2470 (monotonicity (rewrite (= $x951 (not (or $x127 $x947)))) (= $x954 (not (not (or $x127 $x947)))))))
(let ((@x2474 (trans @x2470 (rewrite (= (not (not (or $x127 $x947))) (or $x127 $x947))) (= $x954 (or $x127 $x947)))))
(let ((@x2483 (monotonicity @x2474 (rewrite (= $x2096 $x2478)) (= $x2099 (or (or $x127 $x947) $x2478)))))
(let ((@x2488 (trans @x2483 (rewrite (= (or (or $x127 $x947) $x2478) $x2484)) (= $x2099 $x2484))))
(let ((@x2950 (monotonicity (quant-intro @x2488 (= $x2102 $x2489)) @x2514 (quant-intro @x2533 (= $x997 $x2534)) (quant-intro @x2561 (= $x2140 $x2562)) (monotonicity @x2716 (trans @x2933 @x2942 (= $x2301 $x2940)) (= $x2306 $x2945)) (= $x2315 (and $x2489 $x173 $x1051 $x2512 $x2534 $x2562 $x2945)))))
(let ((@x2963 (trans @x2950 (rewrite (= (and $x2489 $x173 $x1051 $x2512 $x2534 $x2562 $x2945) $x2959)) (= $x2315 $x2959))))
(let (($x1554 (and (not (>= (+ ?x128 ?x1541) 0)) $x136 (= (+ ?x128 ?x1541 (b_G$ (pair$ ?0 ?v0!5))) 0))))
(let (($x1564 (not $x1554)))
(let ((@x2446 (monotonicity (rewrite (= $x1554 (not $x2440))) (= $x1564 (not (not $x2440))))))
(let ((@x2453 (quant-intro (trans @x2446 (rewrite (= (not (not $x2440)) $x2440)) (= $x1564 $x2440)) (= $x1567 $x2451))))
(let ((@x2463 (trans (monotonicity @x2453 (= $x2062 (and $x1539 $x1544 $x2451))) (rewrite (= (and $x1539 $x1544 $x2451) $x2459)) (= $x2062 $x2459))))
(let ((@x2423 (monotonicity (rewrite (= $x926 (not (or $x137 $x922)))) (= $x929 (not (not (or $x137 $x922)))))))
(let ((@x2427 (trans @x2423 (rewrite (= (not (not (or $x137 $x922))) (or $x137 $x922))) (= $x929 (or $x137 $x922)))))
(let ((@x2435 (trans (monotonicity @x2427 (= $x936 (or (or $x137 $x922) $x933))) (rewrite (= (or (or $x137 $x922) $x933) (or $x137 $x922 $x933))) (= $x936 (or $x137 $x922 $x933)))))
(let ((@x2969 (monotonicity (quant-intro @x2435 (= $x939 $x2436)) (monotonicity @x2463 @x2963 (= $x2320 $x2964)) (= $x2323 (and $x2436 $x2964)))))
(let ((@x2401 (monotonicity (rewrite (= (and $x1512 (not $x1517)) (not (or $x2394 $x1517)))) (= $x1520 (not (not (or $x2394 $x1517)))))))
(let ((@x2405 (trans @x2401 (rewrite (= (not (not (or $x2394 $x1517))) (or $x2394 $x1517))) (= $x1520 (or $x2394 $x1517)))))
(let ((@x2413 (trans (monotonicity @x2405 (= $x2051 (or (or $x2394 $x1517) $x2048))) (rewrite (= (or (or $x2394 $x1517) $x2048) $x2409)) (= $x2051 $x2409))))
(let ((@x2980 (monotonicity (monotonicity @x2413 (= $x2054 $x2414)) (trans @x2969 (rewrite (= (and $x2436 $x2964) $x2973)) (= $x2323 $x2973)) (= $x2326 $x2978))))
(let ((@x2388 (rewrite (= (or (or $x136 (not $x148)) $x907) (or $x136 (not $x148) $x907)))))
(let ((@x2380 (rewrite (= (not (not (or $x136 (not $x148)))) (or $x136 (not $x148))))))
(let ((@x2378 (monotonicity (rewrite (= $x149 (not (or $x136 (not $x148))))) (= $x382 (not (not (or $x136 (not $x148))))))))
(let ((@x2385 (monotonicity (trans @x2378 @x2380 (= $x382 (or $x136 (not $x148)))) (= $x911 (or (or $x136 (not $x148)) $x907)))))
(let ((@x2393 (quant-intro (trans @x2385 @x2388 (= $x911 (or $x136 (not $x148) $x907))) (= $x914 $x2391))))
(let ((@x2991 (trans (monotonicity @x2393 @x2980 (= $x2329 (and $x2391 $x2978))) (rewrite (= (and $x2391 $x2978) $x2987)) (= $x2329 $x2987))))
(let ((@x2355 (monotonicity (rewrite (= (and (not $x1489) $x1491) (not (or $x1489 $x2348)))) (= $x1493 (not (not (or $x1489 $x2348)))))))
(let ((@x2359 (trans @x2355 (rewrite (= (not (not (or $x1489 $x2348))) (or $x1489 $x2348))) (= $x1493 (or $x1489 $x2348)))))
(let ((@x2367 (trans (monotonicity @x2359 (= $x1499 (or (or $x1489 $x2348) $x1498))) (rewrite (= (or (or $x1489 $x2348) $x1498) $x2363)) (= $x1499 $x2363))))
(let ((@x2994 (monotonicity (monotonicity @x2367 (= $x1500 $x2368)) @x2991 (= $x2332 $x2992))))
(let ((@x3004 (trans (monotonicity @x2994 (= $x2335 (and $x899 $x2992))) (rewrite (= (and $x899 $x2992) $x3000)) (= $x2335 $x3000))))
(let ((@x3010 (monotonicity (monotonicity @x3004 (= $x2338 $x3005)) (= $x2341 (and $x145 $x3005)))))
(let ((@x3020 (monotonicity (trans @x3010 (rewrite (= (and $x145 $x3005) $x3013)) (= $x2341 $x3013)) (= $x2344 $x3018))))
(let (($x1938 (forall ((?v1 B_Vertex$) )(! (let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1925 (and (not (>= (+ ?x273 ?x1912) 0)) $x291 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x273 ?x1912) 0))))
(not $x1925)))))) :qid k!42))
))
(let (($x1932 (not (not (and $x1910 $x1915)))))
(let (($x1942 (and $x1932 $x1938)))
(let (($x1947 (and $x1289 $x1942)))
(let (($x1951 (or $x1898 $x1947)))
(let (($x1955 (and $x1270 $x1951)))
(let (($x1959 (or $x1871 $x1955)))
(let (($x1963 (and $x1256 $x1959)))
(let (($x1967 (or $x1848 $x1963)))
(let (($x1842 (not $x773)))
(let (($x1971 (and $x1842 $x1967)))
(let (($x1975 (or $x773 $x1971)))
(let (($x1979 (and $x652 $x1975)))
(let (($x1983 (or $x1830 $x1979)))
(let (($x1987 (and $x1247 $x1983)))
(let (($x1991 (or $x1813 $x1987)))
(let (($x1801 (and (and $x1774 $x1779) $x256 $x1214 $x1209 $x266 $x1193 $x1199)))
(let (($x1995 (and $x1801 $x1991)))
(let (($x1739 (not (or $x1733 (>= (+ ?x1727 ?x1721 ?x1735) 0)))))
(let (($x1756 (or $x1739 $x1752)))
(let (($x1713 (forall ((?v0 B_Vertex$) )(! (let ((?x230 (fun_app$c v_b_SP_G_3$ ?v0)))
(let ((?x1097 (* (- 1) ?x230)))
(let ((?x1699 (fun_app$c v_b_SP_G_3$ (?v1!9 ?v0))))
(let ((?x1704 (b_G$ (pair$ (?v1!9 ?v0) ?v0))))
(let (($x1706 (= (+ ?x1704 ?x1699 ?x1097) 0)))
(let (($x1707 (and (not (>= (+ ?x1699 ?x1097) 0)) $x1706)))
(let (($x1099 (<= (+ b_Infinity$ ?x1097) 0)))
(let (($x1100 (not $x1099)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1103 (and $x132 $x1100)))
(let (($x1106 (not $x1103)))
(or $x1106 $x1707))))))))))))) :qid k!42))
))
(let (($x1760 (and $x1713 $x1756)))
(let (($x1687 (forall ((?v1 B_Vertex$) )(! (let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(let (($x1675 (and (not (>= (+ ?x230 ?x1662) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x230 ?x1662) 0))))
(not $x1675))))) :qid k!42))
))
(let (($x1681 (not (not (and $x1660 $x1665)))))
(let (($x1691 (and $x1681 $x1687)))
(let (($x1764 (or $x1691 $x1760)))
(let (($x1652 (and $x1641 $x212 $x215 $x217 $x220)))
(let (($x1768 (and $x1652 $x1764)))
(let (($x1999 (or $x1768 $x1995)))
(let (($x1629 (forall ((?v0 B_Vertex$) )(! (let ((?x174 (fun_app$c v_b_SP_G_1$ ?v0)))
(let ((?x1000 (* (- 1) ?x174)))
(let ((?x1613 (?v1!7 ?v0)))
(let ((?x1614 (fun_app$c v_b_SP_G_1$ ?x1613)))
(let ((?x1620 (b_G$ (pair$ ?x1613 ?v0))))
(let (($x1622 (= (+ ?x1620 ?x1614 ?x1000) 0)))
(let (($x1618 (fun_app$ v_b_Visited_G_1$ ?x1613)))
(let (($x1623 (and (not (>= (+ ?x1614 ?x1000) 0)) $x1618 $x1622)))
(let (($x1002 (<= (+ b_Infinity$ ?x1000) 0)))
(let (($x1003 (not $x1002)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x1006 (and $x132 $x1003)))
(let (($x1009 (not $x1006)))
(or $x1009 $x1623))))))))))))))) :qid k!42))
))
(let (($x1594 (forall ((?v0 B_Vertex$) )(! (let ((?x1585 (b_G$ (pair$ (?v1!6 ?v0) ?v0))))
(let ((?x128 (v_b_SP_G_0$ ?v0)))
(let ((?x945 (* (- 1) ?x128)))
(let ((?x1578 (?v1!6 ?v0)))
(let ((?x1579 (v_b_SP_G_0$ ?x1578)))
(let (($x1587 (= (+ ?x1579 ?x945 ?x1585) 0)))
(let (($x1583 (v_b_Visited_G_0$ ?x1578)))
(let (($x1588 (and (not (>= (+ ?x1579 ?x945) 0)) $x1583 $x1587)))
(let (($x127 (= ?v0 b_Source$)))
(let (($x132 (not $x127)))
(let (($x951 (and $x132 (not (<= (+ b_Infinity$ ?x945) 0)))))
(let (($x954 (not $x951)))
(or $x954 $x1588))))))))))))) :qid k!42))
))
(let (($x1632 (and $x1594 $x173 $x1051 $x1045 $x997 $x1629)))
(let (($x2003 (and $x1632 $x1999)))
(let (($x1561 (not (not (and $x1539 $x1544)))))
(let (($x1571 (and $x1561 $x1567)))
(let (($x2007 (or $x1571 $x2003)))
(let (($x2011 (and $x939 $x2007)))
(let (($x1527 (not (or $x1520 (>= (+ ?x1521 ?x1523 ?x1514) 0)))))
(let (($x2015 (or $x1527 $x2011)))
(let (($x2019 (and $x914 $x2015)))
(let (($x2023 (or $x1500 $x2019)))
(let (($x2027 (and $x899 $x2023)))
(let (($x2031 (or $x1477 $x2027)))
(let (($x1471 (not $x869)))
(let (($x2035 (and $x1471 $x2031)))
(let (($x2039 (or $x869 $x2035)))
(let (($x1925 (and (not (>= (+ ?x273 (* (- 1) ?x1911)) 0)) $x291 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x273 (* (- 1) ?x1911)) 0))))
(let (($x1935 (not $x1925)))
(let (($x2243 (= (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x273 (* (- 1) ?x1911)) 0) $x2242)))
(let (($x2240 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x273 (* (- 1) ?x1911)) (+ ?x273 (* (- 1) ?x1911) (b_G$ (pair$ ?0 ?v0!20))))))
(let ((@x2250 (monotonicity (monotonicity (monotonicity (rewrite $x2240) $x2243) (= $x1925 $x2245)) (= $x1935 $x2248))))
(let ((@x2256 (monotonicity (rewrite (= $x1932 (and $x1910 $x1915))) (quant-intro @x2250 (= $x1938 $x2251)) (= $x1942 (and (and $x1910 $x1915) $x2251)))))
(let ((@x2264 (trans (monotonicity @x2256 (= $x1947 (and $x1289 (and (and $x1910 $x1915) $x2251)))) (rewrite (= (and $x1289 (and (and $x1910 $x1915) $x2251)) $x2260)) (= $x1947 $x2260))))
(let ((@x2273 (monotonicity (monotonicity (monotonicity @x2264 (= $x1951 $x2265)) (= $x1955 $x2268)) (= $x1959 $x2271))))
(let ((@x2282 (monotonicity (rewrite (= $x1842 $x297)) (monotonicity (monotonicity @x2273 (= $x1963 $x2274)) (= $x1967 $x2277)) (= $x1971 $x2280))))
(let ((@x2291 (monotonicity (monotonicity (monotonicity @x2282 (= $x1975 $x2283)) (= $x1979 $x2286)) (= $x1983 $x2289))))
(let ((@x2300 (monotonicity (monotonicity (monotonicity @x2291 (= $x1987 $x2292)) (= $x1991 $x2295)) (= $x1995 (and $x1801 $x2295)))))
(let ((@x2211 (monotonicity (rewrite (= (+ ?x1727 ?x1721 ?x1735) ?x2206)) (= (>= (+ ?x1727 ?x1721 ?x1735) 0) $x2209))))
(let ((@x2214 (monotonicity @x2211 (= (or $x1733 (>= (+ ?x1727 ?x1721 ?x1735) 0)) $x2212))))
(let (($x2197 (and (not $x2176) $x2192)))
(let (($x2200 (or $x1106 $x2197)))
(let ((?x1097 (* (- 1) ?x230)))
(let ((?x1699 (fun_app$c v_b_SP_G_3$ (?v1!9 ?0))))
(let ((?x1704 (b_G$ (pair$ (?v1!9 ?0) ?0))))
(let (($x1706 (= (+ ?x1704 ?x1699 ?x1097) 0)))
(let (($x1707 (and (not (>= (+ ?x1699 ?x1097) 0)) $x1706)))
(let (($x1710 (or $x1106 $x1707)))
(let ((@x2189 (monotonicity (rewrite (= (+ ?x1704 ?x1699 ?x1097) (+ ?x1097 ?x1699 ?x1704))) (= $x1706 (= (+ ?x1097 ?x1699 ?x1704) 0)))))
(let ((@x2196 (trans @x2189 (rewrite (= (= (+ ?x1097 ?x1699 ?x1704) 0) $x2192)) (= $x1706 $x2192))))
(let ((@x2173 (monotonicity (rewrite (= (+ ?x1699 ?x1097) (+ ?x1097 ?x1699))) (= (>= (+ ?x1699 ?x1097) 0) (>= (+ ?x1097 ?x1699) 0)))))
(let ((@x2180 (trans @x2173 (rewrite (= (>= (+ ?x1097 ?x1699) 0) $x2176)) (= (>= (+ ?x1699 ?x1097) 0) $x2176))))
(let ((@x2199 (monotonicity (monotonicity @x2180 (= (not (>= (+ ?x1699 ?x1097) 0)) (not $x2176))) @x2196 (= $x1707 $x2197))))
(let ((@x2223 (monotonicity (quant-intro (monotonicity @x2199 (= $x1710 $x2200)) (= $x1713 $x2203)) (monotonicity (monotonicity @x2214 (= $x1739 $x2215)) (= $x1756 $x2218)) (= $x1760 $x2221))))
(let (($x1675 (and (not (>= (+ ?x230 ?x1662) 0)) (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x230 ?x1662) 0))))
(let (($x1684 (not $x1675)))
(let (($x2146 (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x230 ?x1662) (+ ?x230 ?x1662 (b_G$ (pair$ ?0 ?v0!8))))))
(let ((@x2150 (monotonicity (rewrite $x2146) (= (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x230 ?x1662) 0) $x2148))))
(let ((@x2159 (quant-intro (monotonicity (monotonicity @x2150 (= $x1675 $x2151)) (= $x1684 $x2154)) (= $x1687 $x2157))))
(let ((@x2162 (monotonicity (rewrite (= $x1681 (and $x1660 $x1665))) @x2159 (= $x1691 (and (and $x1660 $x1665) $x2157)))))
(let ((@x2167 (trans @x2162 (rewrite (= (and (and $x1660 $x1665) $x2157) $x2163)) (= $x1691 $x2163))))
(let ((@x2229 (monotonicity (monotonicity @x2167 @x2223 (= $x1764 $x2224)) (= $x1768 (and $x1652 $x2224)))))
(let ((@x2308 (monotonicity (trans @x2229 (rewrite (= (and $x1652 $x2224) $x2230)) (= $x1768 $x2230)) (trans @x2300 (rewrite (= (and $x1801 $x2295) $x2301)) (= $x1995 $x2301)) (= $x1999 $x2306))))
(let ((?x1000 (* (- 1) ?x174)))
(let ((?x1614 (fun_app$c v_b_SP_G_1$ ?x1613)))
(let ((?x1620 (b_G$ (pair$ ?x1613 ?0))))
(let (($x1622 (= (+ ?x1620 ?x1614 ?x1000) 0)))
(let (($x1623 (and (not (>= (+ ?x1614 ?x1000) 0)) $x1618 $x1622)))
(let (($x1626 (or $x1009 $x1623)))
(let ((@x2126 (monotonicity (rewrite (= (+ ?x1620 ?x1614 ?x1000) (+ ?x1000 ?x1614 ?x1620))) (= $x1622 (= (+ ?x1000 ?x1614 ?x1620) 0)))))
(let ((@x2133 (trans @x2126 (rewrite (= (= (+ ?x1000 ?x1614 ?x1620) 0) $x2129)) (= $x1622 $x2129))))
(let ((@x2110 (monotonicity (rewrite (= (+ ?x1614 ?x1000) (+ ?x1000 ?x1614))) (= (>= (+ ?x1614 ?x1000) 0) (>= (+ ?x1000 ?x1614) 0)))))
(let ((@x2117 (trans @x2110 (rewrite (= (>= (+ ?x1000 ?x1614) 0) $x2113)) (= (>= (+ ?x1614 ?x1000) 0) $x2113))))
(let ((@x2136 (monotonicity (monotonicity @x2117 (= (not (>= (+ ?x1614 ?x1000) 0)) (not $x2113))) @x2133 (= $x1623 $x2134))))
(let (($x1587 (= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128) (b_G$ (pair$ ?x1578 ?0))) 0)))
(let (($x1588 (and (not (>= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128)) 0)) $x1583 $x1587)))
(let (($x1591 (or $x954 $x1588)))
(let (($x2086 (= (+ (* (- 1) ?x128) (v_b_SP_G_0$ ?x1578) (b_G$ (pair$ ?x1578 ?0))) 0)))
(let (($x2084 (= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128) (b_G$ (pair$ ?x1578 ?0))) (+ (* (- 1) ?x128) (v_b_SP_G_0$ ?x1578) (b_G$ (pair$ ?x1578 ?0))))))
(let ((@x2095 (trans (monotonicity (rewrite $x2084) (= $x1587 $x2086)) (rewrite (= $x2086 $x2091)) (= $x1587 $x2091))))
(let (($x2081 (= (not (>= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128)) 0)) (not $x2075))))
(let (($x1581 (>= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128)) 0)))
(let (($x2068 (= (+ (v_b_SP_G_0$ ?x1578) (* (- 1) ?x128)) (+ (* (- 1) ?x128) (v_b_SP_G_0$ ?x1578)))))
(let ((@x2072 (monotonicity (rewrite $x2068) (= $x1581 (>= (+ (* (- 1) ?x128) (v_b_SP_G_0$ ?x1578)) 0)))))
(let ((@x2079 (trans @x2072 (rewrite (= (>= (+ (* (- 1) ?x128) (v_b_SP_G_0$ ?x1578)) 0) $x2075)) (= $x1581 $x2075))))
(let ((@x2101 (monotonicity (monotonicity (monotonicity @x2079 $x2081) @x2095 (= $x1588 $x2096)) (= $x1591 $x2099))))
(let ((@x2311 (monotonicity (quant-intro @x2101 (= $x1594 $x2102)) (quant-intro (monotonicity @x2136 (= $x1626 $x2137)) (= $x1629 $x2140)) (= $x1632 (and $x2102 $x173 $x1051 $x1045 $x997 $x2140)))))
(let ((@x2314 (monotonicity @x2311 @x2308 (= $x2003 (and (and $x2102 $x173 $x1051 $x1045 $x997 $x2140) $x2306)))))
(let ((@x2319 (trans @x2314 (rewrite (= (and (and $x2102 $x173 $x1051 $x1045 $x997 $x2140) $x2306) $x2315)) (= $x2003 $x2315))))
(let ((@x2061 (monotonicity (rewrite (= $x1561 (and $x1539 $x1544))) (= $x1571 (and (and $x1539 $x1544) $x1567)))))
(let ((@x2066 (trans @x2061 (rewrite (= (and (and $x1539 $x1544) $x1567) $x2062)) (= $x1571 $x2062))))
(let ((@x2325 (monotonicity (monotonicity @x2066 @x2319 (= $x2007 $x2320)) (= $x2011 $x2323))))
(let ((@x2050 (monotonicity (rewrite (= (+ ?x1521 ?x1523 ?x1514) ?x2045)) (= (>= (+ ?x1521 ?x1523 ?x1514) 0) $x2048))))
(let ((@x2053 (monotonicity @x2050 (= (or $x1520 (>= (+ ?x1521 ?x1523 ?x1514) 0)) $x2051))))
(let ((@x2328 (monotonicity (monotonicity @x2053 (= $x1527 $x2054)) @x2325 (= $x2015 $x2326))))
(let ((@x2337 (monotonicity (monotonicity (monotonicity @x2328 (= $x2019 $x2329)) (= $x2023 $x2332)) (= $x2027 $x2335))))
(let ((@x2343 (monotonicity (rewrite (= $x1471 $x145)) (monotonicity @x2337 (= $x2031 $x2338)) (= $x2035 $x2341))))
(let (($x1926 (exists ((?v1 B_Vertex$) )(! (let ((?x1911 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x273 (v_b_SP_G_2$ ?v1)))
(let (($x291 (fun_app$ v_b_Visited_G_2$ ?v1)))
(and (not (>= (+ ?x273 ?x1912) 0)) $x291 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x273 ?x1912) 0)))))) :qid k!42))
))
(let ((@x1944 (nnf-neg (refl (~ $x1932 $x1932)) (nnf-neg (refl (~ $x1935 $x1935)) (~ (not $x1926) $x1938)) (~ (not (or (not (and $x1910 $x1915)) $x1926)) $x1942))))
(let ((@x1946 (trans (sk (~ (not $x1329) (not (or (not (and $x1910 $x1915)) $x1926)))) @x1944 (~ (not $x1329) $x1942))))
(let ((@x1907 (nnf-neg (nnf-pos (refl (~ $x1286 $x1286)) (~ $x1289 $x1289)) (~ (not $x1292) $x1289))))
(let ((@x1954 (nnf-neg (sk (~ $x1292 $x1898)) (nnf-neg @x1907 @x1946 (~ (not $x1332) $x1947)) (~ (not $x1335) $x1951))))
(let ((@x1880 (nnf-neg (nnf-pos (refl (~ $x1267 $x1267)) (~ $x1270 $x1270)) (~ (not $x1273) $x1270))))
(let ((@x1962 (nnf-neg (sk (~ $x1273 $x1871)) (nnf-neg @x1880 @x1954 (~ (not $x1338) $x1955)) (~ (not $x1341) $x1959))))
(let ((@x1857 (nnf-neg (nnf-pos (refl (~ (>= ?x273 0) (>= ?x273 0))) (~ $x1256 $x1256)) (~ (not $x1259) $x1256))))
(let ((@x1970 (nnf-neg (sk (~ $x1259 $x1848)) (nnf-neg @x1857 @x1962 (~ (not $x1344) $x1963)) (~ (not $x1347) $x1967))))
(let ((@x1978 (nnf-neg (refl (~ $x773 $x773)) (nnf-neg (refl (~ $x1842 $x1842)) @x1970 (~ (not $x1350) $x1971)) (~ (not $x1353) $x1975))))
(let ((@x1839 (nnf-neg (nnf-pos (refl (~ (or $x300 $x278) (or $x300 $x278))) (~ $x652 $x652)) (~ (not $x785) $x652))))
(let ((@x1986 (nnf-neg (sk (~ $x785 $x1830)) (nnf-neg @x1839 @x1978 (~ (not $x1356) $x1979)) (~ (not $x1359) $x1983))))
(let ((@x1822 (nnf-neg (nnf-pos (refl (~ $x1243 $x1243)) (~ $x1247 $x1247)) (~ (not $x1250) $x1247))))
(let ((@x1994 (nnf-neg (sk (~ $x1250 $x1813)) (nnf-neg @x1822 @x1986 (~ (not $x1362) $x1987)) (~ (not $x1365) $x1991))))
(let ((@x1803 (monotonicity (sk (~ $x1080 (and $x1774 $x1779))) (refl (~ $x256 $x256)) (refl (~ $x1214 $x1214)) (nnf-pos (refl (~ $x1206 $x1206)) (~ $x1209 $x1209)) (refl (~ $x266 $x266)) (nnf-pos (refl (~ $x1190 $x1190)) (~ $x1193 $x1193)) (nnf-pos (refl (~ $x1196 $x1196)) (~ $x1199 $x1199)) (~ $x1235 $x1801))))
(let ((@x1998 (nnf-neg (nnf-neg @x1803 (~ (not $x1240) $x1801)) @x1994 (~ (not $x1368) $x1995))))
(let ((@x1748 (nnf-neg (nnf-pos (refl (~ $x1143 $x1143)) (~ $x1146 $x1146)) (~ (not $x1149) $x1146))))
(let ((@x1759 (nnf-neg (sk (~ $x1149 $x1739)) (nnf-neg @x1748 (refl (~ $x1749 $x1749)) (~ (not $x1152) $x1752)) (~ (not $x1155) $x1756))))
(let ((@x1715 (nnf-pos (monotonicity (refl (~ $x1106 $x1106)) (sk (~ $x1122 $x1707)) (~ $x1125 $x1710)) (~ $x1128 $x1713))))
(let ((@x1763 (nnf-neg (nnf-neg @x1715 (~ (not $x1131) $x1713)) @x1759 (~ (not $x1158) $x1760))))
(let (($x1676 (exists ((?v1 B_Vertex$) )(! (let ((?x1661 (fun_app$c v_b_SP_G_3$ ?v0!8)))
(let ((?x1662 (* (- 1) ?x1661)))
(let ((?x230 (fun_app$c v_b_SP_G_3$ ?v1)))
(and (not (>= (+ ?x230 ?x1662) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x230 ?x1662) 0))))) :qid k!42))
))
(let ((@x1693 (nnf-neg (refl (~ $x1681 $x1681)) (nnf-neg (refl (~ $x1684 $x1684)) (~ (not $x1676) $x1687)) (~ (not (or (not (and $x1660 $x1665)) $x1676)) $x1691))))
(let ((@x1695 (trans (sk (~ $x1131 (not (or (not (and $x1660 $x1665)) $x1676)))) @x1693 (~ $x1131 $x1691))))
(let ((@x1654 (monotonicity (nnf-neg (refl (~ (not $x1077) (not $x1077))) (~ $x1083 $x1641)) (refl (~ $x212 $x212)) (refl (~ $x215 $x215)) (refl (~ $x217 $x217)) (refl (~ $x220 $x220)) (~ $x1089 $x1652))))
(let ((@x1771 (nnf-neg (nnf-neg @x1654 (~ (not $x1094) $x1652)) (nnf-neg @x1695 @x1763 (~ (not $x1161) $x1764)) (~ (not $x1164) $x1768))))
(let ((@x1631 (nnf-pos (monotonicity (refl (~ $x1009 $x1009)) (sk (~ $x1031 $x1623)) (~ $x1034 $x1626)) (~ $x1037 $x1629))))
(let ((@x1596 (nnf-pos (monotonicity (refl (~ $x954 $x954)) (sk (~ $x974 $x1588)) (~ $x977 $x1591)) (~ $x980 $x1594))))
(let ((@x1634 (monotonicity @x1596 (refl (~ $x173 $x173)) (nnf-pos (refl (~ (>= ?x174 0) (>= ?x174 0))) (~ $x1051 $x1051)) (nnf-pos (refl (~ $x1042 $x1042)) (~ $x1045 $x1045)) (nnf-pos (refl (~ $x994 $x994)) (~ $x997 $x997)) @x1631 (~ $x1069 $x1632))))
(let ((@x2006 (nnf-neg (nnf-neg @x1634 (~ (not $x1074) $x1632)) (nnf-neg @x1771 @x1998 (~ (not $x1371) $x1999)) (~ (not $x1374) $x2003))))
(let (($x1555 (exists ((?v1 B_Vertex$) )(! (let ((?x1540 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1541 (* (- 1) ?x1540)))
(let ((?x128 (v_b_SP_G_0$ ?v1)))
(let (($x136 (v_b_Visited_G_0$ ?v1)))
(and (not (>= (+ ?x128 ?x1541) 0)) $x136 (= (+ ?x128 ?x1541 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))) :qid k!42))
))
(let ((@x1573 (nnf-neg (refl (~ $x1561 $x1561)) (nnf-neg (refl (~ $x1564 $x1564)) (~ (not $x1555) $x1567)) (~ (not (or (not (and $x1539 $x1544)) $x1555)) $x1571))))
(let ((@x1575 (trans (sk (~ (not $x980) (not (or (not (and $x1539 $x1544)) $x1555)))) @x1573 (~ (not $x980) $x1571))))
(let ((@x1536 (nnf-neg (nnf-pos (refl (~ $x936 $x936)) (~ $x939 $x939)) (~ (not $x942) $x939))))
(let ((@x2014 (nnf-neg @x1536 (nnf-neg @x1575 @x2006 (~ (not $x1377) $x2007)) (~ (not $x1380) $x2011))))
(let ((@x1509 (nnf-neg (nnf-pos (refl (~ $x911 $x911)) (~ $x914 $x914)) (~ (not $x917) $x914))))
(let ((@x2022 (nnf-neg @x1509 (nnf-neg (sk (~ $x942 $x1527)) @x2014 (~ (not $x1383) $x2015)) (~ (not $x1386) $x2019))))
(let ((@x1486 (nnf-neg (nnf-pos (refl (~ (>= ?x128 0) (>= ?x128 0))) (~ $x899 $x899)) (~ (not $x902) $x899))))
(let ((@x2030 (nnf-neg @x1486 (nnf-neg (sk (~ $x917 $x1500)) @x2022 (~ (not $x1389) $x2023)) (~ (not $x1392) $x2027))))
(let ((@x2038 (nnf-neg (refl (~ $x1471 $x1471)) (nnf-neg (sk (~ $x902 $x1477)) @x2030 (~ (not $x1395) $x2031)) (~ (not $x1398) $x2035))))
(let ((@x2042 (mp~ (not-or-elim (mp (asserted $x349) @x1411 $x1407) (not $x1401)) (nnf-neg (refl (~ $x869 $x869)) @x2038 (~ (not $x1401) $x2039)) $x2039)))
(let ((@x3878 (mp (mp (mp @x2042 (monotonicity @x2343 (= $x2039 $x2344)) $x2344) @x3020 $x3018) (monotonicity @x3874 (= $x3018 $x3875)) $x3875)))
(let ((@x4209 (unit-resolution @x3878 (lemma (unit-resolution @x5763 @x3492 (hypothesis $x869) false) $x145) $x3872)))
(let ((@x4211 (unit-resolution (def-axiom (or $x3866 $x1477 $x3860)) (unit-resolution (def-axiom (or $x3869 $x3863)) @x4209 $x3863) (lemma @x6353 $x1476) $x3860)))
(let ((@x6165 (unit-resolution ((_ quant-inst ?v0!2) (or (not $x3500) $x2348)) @x3505 (hypothesis $x1491) false)))
(let ((@x4215 (unit-resolution (def-axiom (or $x3854 $x2368 $x3848)) (unit-resolution (def-axiom (or $x2363 $x1491)) (lemma @x6165 $x2348) $x2363) (unit-resolution (def-axiom (or $x3857 $x3851)) @x4211 $x3851) $x3848)))
(let ((@x4217 (unit-resolution (def-axiom (or $x3842 $x2414 $x3836)) (unit-resolution (def-axiom (or $x3845 $x3839)) @x4215 $x3839) (unit-resolution (def-axiom (or $x2409 $x1512)) (lemma @x3073 $x2394) $x2409) $x3836)))
(let ((@x4219 (unit-resolution (def-axiom (or $x3830 $x3544 $x3824)) (unit-resolution (def-axiom (or $x3833 $x3827)) @x4217 $x3827) (lemma @x5735 $x3541) $x3824)))
(let ((@x5955 (unit-resolution (def-axiom (or $x3821 $x3556)) @x4219 $x3556)))
(let (($x4373 (or $x3561 $x3904)))
(let ((@x4363 ((_ quant-inst v_b_v_G_1$) $x4373)))
(let ((@x5049 (unit-resolution @x4363 @x5955 $x3904)))
(let ((?x5210 (pair$ v_b_v_G_1$ ?v0!15)))
(let ((?x5018 (b_G$ ?x5210)))
(let ((?x4456 (* (- 1) ?x1846)))
(let ((?x6267 (+ ?x257 ?x4456 ?x5018)))
(let (($x5853 (<= ?x6267 0)))
(let (($x6128 (= ?x6267 0)))
(let (($x6822 (>= (+ ?x257 (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0!15)) ?x5018) 0)))
(let (($x4911 (<= (+ b_Infinity$ (* (- 1) ?x5018)) 0)))
(let (($x6706 (or $x4911 $x6822)))
(let (($x6711 (not $x6706)))
(let ((@x5703 (hypothesis $x1848)))
(let (($x5745 (or (not (>= (+ ?x1846 (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0!15))) 0)) $x1847)))
(let ((?x4480 (fun_app$c v_b_SP_G_1$ ?v0!15)))
(let (($x5850 (>= ?x4480 0)))
(let ((@x5698 ((_ th-lemma arith farkas -1 1 1) @x5703 (hypothesis (>= (+ ?x1846 (* (- 1) ?x4480)) 0)) (unit-resolution ((_ quant-inst ?v0!15) (or $x3561 $x5850)) @x5955 $x5850) false)))
(let ((@x6183 (unit-resolution (lemma @x5698 $x5745) @x5703 (not (>= (+ ?x1846 (* (- 1) ?x4480)) 0)))))
(let ((@x6242 ((_ th-lemma arith triangle-eq) (or (not (= ?x1846 ?x4480)) (>= (+ ?x1846 (* (- 1) ?x4480)) 0)))))
(let ((@x4529 (unit-resolution (def-axiom (or $x3821 $x173)) @x4219 $x173)))
(let ((@x5142 (hypothesis $x3657)))
(let ((@x4265 (unit-resolution (def-axiom (or $x3654 $x217)) @x5142 $x217)))
(let ((?x5667 (fun_app$c v_b_SP_G_1$ ?v1!10)))
(let ((?x5152 (fun_app$c v_b_SP_G_1$ ?v0!11)))
(let ((?x5630 (* (- 1) ?x5152)))
(let (($x4072 (>= (+ ?x1727 ?x5630 ?x5667) 0)))
(let (($x5699 (fun_app$ v_b_Visited_G_1$ ?v1!10)))
(let (($x1725 (not $x1724)))
(let ((@x4170 (hypothesis $x2650)))
(let (($x4150 (>= (+ ?x1721 (* (- 1) ?x5667)) 0)))
(let ((@x4195 (monotonicity (symm (hypothesis $x217) (= v_b_SP_G_1$ v_b_SP_G_3$)) (= ?x5667 ?x1721))))
(let ((@x4203 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1721 ?x5667)) $x4150)) (symm @x4195 (= ?x1721 ?x5667)) $x4150)))
(let (($x4167 (or (not (<= (+ b_Infinity$ (* (- 1) ?x5667)) 0)) (not $x4150) $x1724)))
(let ((@x4163 ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x4150) (hypothesis (<= (+ b_Infinity$ (* (- 1) ?x5667)) 0)) (hypothesis $x1725) false)))
(let ((@x4204 (unit-resolution (lemma @x4163 $x4167) @x4203 (unit-resolution (def-axiom (or $x2645 $x1725)) @x4170 $x1725) (not (<= (+ b_Infinity$ (* (- 1) ?x5667)) 0)))))
(let (($x6045 (<= (+ b_Infinity$ (* (- 1) ?x5667)) 0)))
(let (($x5247 (or $x5699 $x6045)))
(let ((@x3048 (mp ((_ quant-inst ?v1!10) (or $x3595 $x5247)) (rewrite (= (or $x3595 $x5247) (or $x3595 $x5699 $x6045))) (or $x3595 $x5699 $x6045))))
(let ((@x4206 (unit-resolution (unit-resolution @x3048 (hypothesis $x3590) $x5247) @x4204 $x5699)))
(let ((@x4223 (unit-resolution (def-axiom (or $x3821 $x3573)) @x4219 $x3573)))
(let (($x5758 (not $x5699)))
(let (($x4064 (or $x3578 $x5758 $x1730 $x4072)))
(let (($x5845 (or $x5758 $x1730 (>= (+ ?x1727 ?x5667 ?x5630) 0))))
(let (($x4065 (or $x3578 $x5845)))
(let ((@x4061 (monotonicity (rewrite (= (+ ?x1727 ?x5667 ?x5630) (+ ?x1727 ?x5630 ?x5667))) (= (>= (+ ?x1727 ?x5667 ?x5630) 0) $x4072))))
(let ((@x4102 (monotonicity (monotonicity @x4061 (= $x5845 (or $x5758 $x1730 $x4072))) (= $x4065 (or $x3578 (or $x5758 $x1730 $x4072))))))
(let ((@x4106 (trans @x4102 (rewrite (= (or $x3578 (or $x5758 $x1730 $x4072)) $x4064)) (= $x4065 $x4064))))
(let ((@x4225 (unit-resolution (mp ((_ quant-inst ?v0!11 ?v1!10) $x4065) @x4106 $x4064) @x4223 (unit-resolution (def-axiom (or $x2645 (not $x1730))) @x4170 (not $x1730)) (or $x5758 $x4072))))
(let ((@x4228 (monotonicity (symm (hypothesis $x217) (= v_b_SP_G_1$ v_b_SP_G_3$)) (= ?x5152 ?x1734))))
(let ((@x4234 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1734 ?x5152)) (<= (+ ?x1734 ?x5630) 0))) (symm @x4228 (= ?x1734 ?x5152)) (<= (+ ?x1734 ?x5630) 0))))
(let ((@x4235 ((_ th-lemma arith farkas -1 -1 1 1) @x4234 (unit-resolution (def-axiom (or $x2645 (not $x2209))) @x4170 (not $x2209)) @x4203 (unit-resolution @x4225 @x4206 $x4072) false)))
(let ((@x4885 (unit-resolution (lemma @x4235 (or $x2645 $x3595 $x2708)) @x4265 (unit-resolution (def-axiom (or $x3654 $x3590)) @x5142 $x3590) $x2645)))
(let (($x4595 (<= (+ ?x1661 (* (- 1) (fun_app$c v_b_SP_G_3$ (?v1!7 ?v0!8)))) 0)))
(let ((?x3922 (?v1!7 ?v0!8)))
(let ((?x3910 (fun_app$c v_b_SP_G_1$ ?x3922)))
(let ((?x3989 (* (- 1) ?x3910)))
(let ((?x3142 (fun_app$c v_b_SP_G_1$ ?v0!8)))
(let (($x3936 (<= (+ ?x3142 ?x3989) 0)))
(let (($x4266 (not $x3936)))
(let ((?x3945 (pair$ ?x3922 ?v0!8)))
(let ((?x3946 (b_G$ ?x3945)))
(let ((?x3031 (* (- 1) ?x3946)))
(let ((?x3056 (+ ?x3142 ?x3989 ?x3031)))
(let (($x3032 (= ?x3056 0)))
(let (($x3033 (not $x3032)))
(let (($x3034 (or $x3936 (not (fun_app$ v_b_Visited_G_1$ ?x3922)) $x3033)))
(let (($x3049 (not $x3034)))
(let ((@x3978 (hypothesis $x1665)))
(let ((?x3144 (* (- 1) ?x3142)))
(let ((?x3984 (+ ?x1661 ?x3144)))
(let (($x3969 (>= ?x3984 0)))
(let ((@x4544 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1661 ?x3142)) $x3969)) (monotonicity @x4265 (= ?x1661 ?x3142)) $x3969)))
(let ((@x3973 ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x3969) (hypothesis (<= (+ b_Infinity$ ?x3144) 0)) @x3978 false)))
(let ((@x4027 (lemma @x3973 (or (not (<= (+ b_Infinity$ ?x3144) 0)) (not $x3969) $x1664))))
(let ((@x4552 (unit-resolution @x4027 @x4544 @x3978 (not (<= (+ b_Infinity$ ?x3144) 0)))))
(let ((@x3425 (def-axiom (or $x3630 $x1749))))
(let ((@x4543 (unit-resolution @x3425 (trans (monotonicity @x4265 (= ?x245 ?x172)) @x4529 $x246) $x3630)))
(let ((@x3134 (def-axiom (or $x3639 $x2650 $x3633))))
(let ((@x3138 (def-axiom (or $x3642 $x3636))))
(let ((@x3120 (def-axiom (or $x3651 $x3611 $x3645))))
(let ((@x4905 (unit-resolution @x3120 (unit-resolution @x3138 (unit-resolution @x3134 @x4543 @x4885 $x3639) $x3642) (unit-resolution (def-axiom (or $x3654 $x3648)) @x5142 $x3648) $x3611)))
(let ((@x4545 (unit-resolution (def-axiom (or $x3821 $x3581)) @x4219 $x3581)))
(let (($x4738 (= (or $x3586 (or $x1659 (<= (+ b_Infinity$ ?x3144) 0) $x3049)) (or $x3586 $x1659 (<= (+ b_Infinity$ ?x3144) 0) $x3049))))
(let ((@x4737 ((_ quant-inst ?v0!8) (or $x3586 (or $x1659 (<= (+ b_Infinity$ ?x3144) 0) $x3049)))))
(let ((@x5209 (mp @x4737 (rewrite $x4738) (or $x3586 $x1659 (<= (+ b_Infinity$ ?x3144) 0) $x3049))))
(let ((@x4406 (unit-resolution @x5209 @x4545 (unit-resolution (def-axiom (or $x3608 $x1660)) @x4905 $x1660) @x4552 $x3049)))
(let ((?x3126 (fun_app$c v_b_SP_G_3$ ?x3922)))
(let ((?x4327 (+ ?x3126 ?x3989)))
(let (($x4402 (<= ?x4327 0)))
(let ((@x4541 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3126 ?x3910)) $x4402)) (monotonicity @x4265 (= ?x3126 ?x3910)) $x4402)))
(let ((@x4852 ((_ th-lemma arith farkas 1 -1 -1 1) (hypothesis $x3969) (hypothesis $x4595) (hypothesis $x4402) (hypothesis $x4266) false)))
(let ((@x4542 (unit-resolution (lemma @x4852 (or (not $x4595) (not $x3969) (not $x4402) $x3936)) @x4544 @x4541 (unit-resolution (def-axiom (or $x3034 $x4266)) @x4406 $x4266) (not $x4595))))
(let ((?x5182 (* (- 1) ?x3126)))
(let ((?x4179 (+ ?x1661 ?x5182 ?x3031)))
(let (($x5089 (= ?x4179 0)))
(let (($x3918 (>= ?x4179 0)))
(let (($x5284 (>= ?x3056 0)))
(let ((@x4264 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3033 $x5284)) (unit-resolution (def-axiom (or $x3034 $x3032)) @x4406 $x3032) $x5284)))
(let ((@x5267 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 1) (or $x3918 (not $x5284) (not $x3969) (not $x4402))) @x4264 @x4544 @x4541 $x3918)))
(let (($x3917 (<= ?x4179 0)))
(let (($x4407 (>= ?x4327 0)))
(let ((@x4549 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3126 ?x3910)) $x4407)) (monotonicity @x4265 (= ?x3126 ?x3910)) $x4407)))
(let (($x3979 (<= ?x3984 0)))
(let ((@x6239 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1661 ?x3142)) $x3979)) (monotonicity @x4265 (= ?x1661 ?x3142)) $x3979)))
(let (($x5179 (<= ?x3056 0)))
(let ((@x3960 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3033 $x5179)) (unit-resolution (def-axiom (or $x3034 $x3032)) @x4406 $x3032) $x5179)))
(let ((@x4631 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 1) (or $x3917 (not $x5179) (not $x3979) (not $x4407))) @x3960 @x6239 @x4549 $x3917)))
(let ((@x4760 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x5089 (not $x3917) (not $x3918))) @x4631 @x5267 $x5089)))
(let (($x4746 (not $x5089)))
(let (($x4181 (or $x4595 $x4746)))
(let (($x3184 (or $x3605 $x4595 $x4746)))
(let (($x5980 (>= (+ ?x3126 ?x1662) 0)))
(let (($x5913 (or $x5980 (not (= (+ ?x3126 ?x1662 ?x3946) 0)))))
(let (($x3976 (or $x3605 $x5913)))
(let ((@x4178 (monotonicity (rewrite (= (+ ?x3126 ?x1662 ?x3946) (+ ?x1662 ?x3126 ?x3946))) (= (= (+ ?x3126 ?x1662 ?x3946) 0) (= (+ ?x1662 ?x3126 ?x3946) 0)))))
(let ((@x4745 (trans @x4178 (rewrite (= (= (+ ?x1662 ?x3126 ?x3946) 0) $x5089)) (= (= (+ ?x3126 ?x1662 ?x3946) 0) $x5089))))
(let ((@x5181 (monotonicity (rewrite (= (+ ?x3126 ?x1662) (+ ?x1662 ?x3126))) (= $x5980 (>= (+ ?x1662 ?x3126) 0)))))
(let ((@x4634 (trans @x5181 (rewrite (= (>= (+ ?x1662 ?x3126) 0) $x4595)) (= $x5980 $x4595))))
(let ((@x4184 (monotonicity @x4634 (monotonicity @x4745 (= (not (= (+ ?x3126 ?x1662 ?x3946) 0)) $x4746)) (= $x5913 $x4181))))
(let ((@x3916 (trans (monotonicity @x4184 (= $x3976 (or $x3605 $x4181))) (rewrite (= (or $x3605 $x4181) $x3184)) (= $x3976 $x3184))))
(let ((@x5060 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!8)) $x3976) @x3916 $x3184) (unit-resolution (def-axiom (or $x3608 $x3600)) @x4905 $x3600) $x4181)))
(let ((@x6153 (unit-resolution (lemma (unit-resolution @x5060 @x4760 @x4542 false) (or $x3654 $x1664)) @x5142 $x1664)))
(let ((@x6273 (unit-resolution @x3120 (unit-resolution (def-axiom (or $x3608 $x1665)) @x6153 $x3608) (unit-resolution (def-axiom (or $x3654 $x3648)) @x5142 $x3648) $x3645)))
(let ((@x5939 (unit-resolution @x3425 (unit-resolution @x3134 (unit-resolution @x3138 @x6273 $x3636) @x4885 $x3633) $x1749)))
(let ((@x5914 (unit-resolution @x5939 (trans (monotonicity @x4265 (= ?x245 ?x172)) @x4529 $x246) false)))
(let ((@x6386 (unit-resolution (def-axiom (or $x3818 $x3657 $x3812)) (unit-resolution (def-axiom (or $x3821 $x3815)) @x4219 $x3815) $x3815)))
(let ((@x6181 (unit-resolution @x6386 (lemma @x5914 $x3654) $x3812)))
(let ((@x5944 (unit-resolution (def-axiom (or $x3809 $x3678)) @x6181 $x3678)))
(let (($x4481 (= ?x1846 ?x4480)))
(let (($x3188 (or $x3683 $x6711 $x4481)))
(let (($x5285 (or (not (or $x4911 (<= (+ ?x4480 ?x1173 (* (- 1) ?x5018)) 0))) $x4481)))
(let (($x6363 (or $x3683 $x5285)))
(let (($x5370 (<= (+ ?x4480 ?x1173 (* (- 1) ?x5018)) 0)))
(let ((@x4465 (rewrite (= (+ ?x4480 ?x1173 (* (- 1) ?x5018)) (+ ?x1173 ?x4480 (* (- 1) ?x5018))))))
(let ((@x6818 (monotonicity @x4465 (= $x5370 (<= (+ ?x1173 ?x4480 (* (- 1) ?x5018)) 0)))))
(let ((@x6705 (trans @x6818 (rewrite (= (<= (+ ?x1173 ?x4480 (* (- 1) ?x5018)) 0) $x6822)) (= $x5370 $x6822))))
(let ((@x5840 (monotonicity (monotonicity @x6705 (= (or $x4911 $x5370) $x6706)) (= (not (or $x4911 $x5370)) $x6711))))
(let ((@x6545 (monotonicity (monotonicity @x5840 (= $x5285 (or $x6711 $x4481))) (= $x6363 (or $x3683 (or $x6711 $x4481))))))
(let ((@x4811 (trans @x6545 (rewrite (= (or $x3683 (or $x6711 $x4481)) $x3188)) (= $x6363 $x3188))))
(let ((@x6726 (unit-resolution (mp ((_ quant-inst ?v0!15) $x6363) @x4811 $x3188) @x5944 (unit-resolution @x6242 @x6183 (not $x4481)) $x6711)))
(let ((@x6470 (unit-resolution (def-axiom (or $x6706 (not $x4911))) (hypothesis $x6711) (not $x4911))))
(let ((@x6494 (unit-resolution (def-axiom (or $x6706 (not $x6822))) (hypothesis $x6711) (not $x6822))))
(let (($x6511 (or $x4911 $x6822 $x6128)))
(let ((@x6588 (unit-resolution (def-axiom (or $x3809 $x3670)) @x6181 $x3670)))
(let (($x6235 (or $x3675 $x4911 $x6822 $x6128)))
(let (($x6510 (or $x4911 $x5370 (= (+ ?x257 ?x5018 ?x4456) 0))))
(let (($x6263 (or $x3675 $x6510)))
(let ((@x6480 (monotonicity (rewrite (= (+ ?x257 ?x5018 ?x4456) ?x6267)) (= (= (+ ?x257 ?x5018 ?x4456) 0) $x6128))))
(let ((@x4472 (monotonicity (monotonicity @x6705 @x6480 (= $x6510 $x6511)) (= $x6263 (or $x3675 $x6511)))))
(let ((@x5852 (mp ((_ quant-inst ?v0!15) $x6263) (trans @x4472 (rewrite (= (or $x3675 $x6511) $x6235)) (= $x6263 $x6235)) $x6235)))
(let ((@x6501 (unit-resolution (unit-resolution @x5852 @x6588 $x6511) @x6494 @x6470 (hypothesis (not $x6128)) false)))
(let ((@x4608 (lemma @x6501 (or $x6706 $x6128))))
(let ((@x6959 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6128) $x5853)) (unit-resolution @x4608 @x6726 $x6128) $x5853)))
(let (($x6603 (>= ?x5018 0)))
(let (($x6582 (<= ?x5018 0)))
(let (($x6583 (not $x6582)))
(let (($x6156 (= v_b_v_G_1$ ?v0!15)))
(let (($x5538 (not $x6156)))
(let ((@x7337 (symm (commutativity (= $x6156 (= ?v0!15 v_b_v_G_1$))) (= (= ?v0!15 v_b_v_G_1$) $x6156))))
(let (($x6631 (= ?v0!15 v_b_v_G_1$)))
(let (($x7452 (not $x6631)))
(let (($x6269 (fun_app$ v_b_Visited_G_1$ ?v0!15)))
(let (($x7698 (or $x6631 $x6269)))
(let (($x6630 (fun_app$ ?x265 ?v0!15)))
(let (($x7702 (= $x6630 $x7698)))
(let (($x3468 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x67 (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v3)))
(= $x67 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :pattern ( (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v3) ) :qid k!38))
))
(let (($x77 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x67 (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v3)))
(= $x67 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!38))
))
(let (($x67 (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?3) ?2) ?1) ?0)))
(let (($x74 (= $x67 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0)))))
(let (($x72 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x67 (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v3)))
(= $x67 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!38))
))
(let ((@x76 (rewrite (= (= $x67 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0))) $x74))))
(let ((@x1443 (mp~ (mp (asserted $x72) (quant-intro @x76 (= $x72 $x77)) $x77) (nnf-pos (refl (~ $x74 $x74)) (~ $x77 $x77)) $x77)))
(let ((@x3473 (mp @x1443 (quant-intro (refl (= $x74 $x74)) (= $x77 $x3468)) $x3468)))
(let (($x4114 (not $x3468)))
(let (($x6435 (or $x4114 $x7702)))
(let ((@x5925 (monotonicity (rewrite (= (ite $x6631 true $x6269) $x7698)) (= (= $x6630 (ite $x6631 true $x6269)) $x7702))))
(let ((@x6213 (monotonicity @x5925 (= (or $x4114 (= $x6630 (ite $x6631 true $x6269))) $x6435))))
(let ((@x7485 (trans @x6213 (rewrite (= $x6435 $x6435)) (= (or $x4114 (= $x6630 (ite $x6631 true $x6269))) $x6435))))
(let ((@x7486 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!15) (or $x4114 (= $x6630 (ite $x6631 true $x6269)))) @x7485 $x6435)))
(let ((@x5875 (symm (unit-resolution (def-axiom (or $x3809 $x266)) @x6181 $x266) (= ?x265 v_b_Visited_G_2$))))
(let ((@x7321 (symm (monotonicity @x5875 (= $x6630 (fun_app$ v_b_Visited_G_2$ ?v0!15))) (= (fun_app$ v_b_Visited_G_2$ ?v0!15) $x6630))))
(let ((@x7322 (monotonicity @x7321 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!15)) (not $x6630)))))
(let (($x4415 (fun_app$ v_b_Visited_G_2$ ?v0!15)))
(let (($x4479 (not $x4415)))
(let ((?x5054 (b_G$ (pair$ v_b_v_G_1$ ?v0!13))))
(let ((?x4706 (+ ?x257 ?x1810 ?x5054)))
(let (($x4687 (= ?x4706 0)))
(let (($x5187 (>= (+ ?x257 (* (- 1) ?x1808) ?x5054) 0)))
(let (($x5051 (<= (+ b_Infinity$ (* (- 1) ?x5054)) 0)))
(let (($x5186 (or $x5051 $x5187)))
(let (($x5221 (not $x5186)))
(let ((@x5744 (monotonicity (commutativity (= (= ?x1808 ?x1809) (= ?x1809 ?x1808))) (= (not (= ?x1808 ?x1809)) (not (= ?x1809 ?x1808))))))
(let (($x5690 (not (= ?x1808 ?x1809))))
(let ((@x5726 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x5690 $x1812)) (hypothesis $x1813) $x5690) @x5744 (not (= ?x1809 ?x1808)))))
(let (($x5270 (= ?x1809 ?x1808)))
(let (($x5230 (or $x5221 $x5270)))
(let ((@x4739 (hypothesis $x3678)))
(let (($x5327 (or $x3683 $x5221 $x5270)))
(let (($x5333 (or (not (or $x5051 (<= (+ ?x1808 ?x1173 (* (- 1) ?x5054)) 0))) $x5270)))
(let (($x5268 (or $x3683 $x5333)))
(let (($x5095 (<= (+ ?x1808 ?x1173 (* (- 1) ?x5054)) 0)))
(let ((@x5120 (rewrite (= (+ ?x1808 ?x1173 (* (- 1) ?x5054)) (+ ?x1173 ?x1808 (* (- 1) ?x5054))))))
(let ((@x5127 (monotonicity @x5120 (= $x5095 (<= (+ ?x1173 ?x1808 (* (- 1) ?x5054)) 0)))))
(let ((@x4705 (trans @x5127 (rewrite (= (<= (+ ?x1173 ?x1808 (* (- 1) ?x5054)) 0) $x5187)) (= $x5095 $x5187))))
(let ((@x5229 (monotonicity (monotonicity @x4705 (= (or $x5051 $x5095) $x5186)) (= (not (or $x5051 $x5095)) $x5221))))
(let ((@x5269 (monotonicity (monotonicity @x5229 (= $x5333 $x5230)) (= $x5268 (or $x3683 $x5230)))))
(let ((@x5432 (mp ((_ quant-inst ?v0!13) $x5268) (trans @x5269 (rewrite (= (or $x3683 $x5230) $x5327)) (= $x5268 $x5327)) $x5327)))
(let ((@x5729 (unit-resolution (def-axiom (or $x5186 (not $x5051))) (unit-resolution (unit-resolution @x5432 @x4739 $x5230) @x5726 $x5221) (not $x5051))))
(let ((@x5749 (unit-resolution (def-axiom (or $x5186 (not $x5187))) (unit-resolution (unit-resolution @x5432 @x4739 $x5230) @x5726 $x5221) (not $x5187))))
(let (($x5211 (or $x5051 $x5187 $x4687)))
(let ((@x5807 (hypothesis $x3670)))
(let (($x5189 (or $x3675 $x5051 $x5187 $x4687)))
(let (($x5102 (or $x5051 $x5095 (= (+ ?x257 ?x5054 ?x1810) 0))))
(let (($x5163 (or $x3675 $x5102)))
(let ((@x5164 (monotonicity (rewrite (= (+ ?x257 ?x5054 ?x1810) ?x4706)) (= (= (+ ?x257 ?x5054 ?x1810) 0) $x4687))))
(let ((@x5215 (monotonicity (monotonicity @x4705 @x5164 (= $x5102 $x5211)) (= $x5163 (or $x3675 $x5211)))))
(let ((@x5376 (mp ((_ quant-inst ?v0!13) $x5163) (trans @x5215 (rewrite (= (or $x3675 $x5211) $x5189)) (= $x5163 $x5189)) $x5189)))
(let ((@x5714 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4687) (>= ?x4706 0))) (unit-resolution (unit-resolution @x5376 @x5807 $x5211) @x5749 @x5729 $x4687) (>= ?x4706 0))))
(let ((@x5723 (unit-resolution ((_ th-lemma arith farkas 1 1) (or (<= ?x1811 0) $x1812)) (hypothesis $x1813) (<= ?x1811 0))))
(let ((@x6888 (unit-resolution (lemma ((_ th-lemma arith farkas 1 -1 1) @x5723 @x5749 @x5714 false) (or $x1812 $x3675 $x3683)) @x6588 @x5944 $x1812)))
(let ((@x6891 (unit-resolution (def-axiom (or $x3806 $x1813 $x3800)) @x6888 (unit-resolution (def-axiom (or $x3809 $x3803)) @x6181 $x3803) $x3800)))
(let (($x6050 (= ?v0!14 v_b_v_G_1$)))
(let (($x5678 (fun_app$ v_b_Visited_G_1$ ?v0!14)))
(let (($x4963 (or $x6050 $x5678)))
(let (($x6049 (fun_app$ ?x265 ?v0!14)))
(let (($x6452 (= $x6049 $x4963)))
(let (($x5869 (or $x4114 $x6452)))
(let ((@x6355 (monotonicity (rewrite (= (ite $x6050 true $x5678) $x4963)) (= (= $x6049 (ite $x6050 true $x5678)) $x6452))))
(let ((@x5854 (monotonicity @x6355 (= (or $x4114 (= $x6049 (ite $x6050 true $x5678))) $x5869))))
(let ((@x6366 (trans @x5854 (rewrite (= $x5869 $x5869)) (= (or $x4114 (= $x6049 (ite $x6050 true $x5678))) $x5869))))
(let ((@x6233 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!14) (or $x4114 (= $x6049 (ite $x6050 true $x5678)))) @x6366 $x5869)))
(let ((@x6372 (symm (monotonicity @x5875 (= $x6049 (fun_app$ v_b_Visited_G_2$ ?v0!14))) (= (fun_app$ v_b_Visited_G_2$ ?v0!14) $x6049))))
(let (($x1824 (fun_app$ v_b_Visited_G_2$ ?v0!14)))
(let ((@x4837 (mp (unit-resolution (def-axiom (or $x1829 $x1824)) (hypothesis $x1830) $x1824) @x6372 $x6049)))
(let ((@x5037 (unit-resolution (def-axiom (or (not $x6452) (not $x6049) $x4963)) @x4837 (unit-resolution @x6233 @x3473 $x6452) $x4963)))
(let (($x4290 (not $x5678)))
(let ((?x5658 (* (- 1) ?x1827)))
(let ((?x4907 (+ ?x257 ?x5658)))
(let (($x6523 (>= ?x4907 0)))
(let (($x6556 (not $x6523)))
(let (($x4887 (>= (+ ?x257 ?x5658 (b_G$ (pair$ v_b_v_G_1$ ?v0!14))) 0)))
(let (($x4812 (not $x4887)))
(let (($x4783 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5110 (or $x4783 $x4887)))
(let (($x5079 (not $x5110)))
(let ((@x5065 (unit-resolution (def-axiom (or $x1829 (not $x1828))) (hypothesis $x1830) (not $x1828))))
(let (($x4844 (or $x3683 $x5079 $x1828)))
(let (($x4891 (<= (+ ?x1827 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5552 (or (not (or $x4783 $x4891)) $x1828)))
(let (($x4766 (or $x3683 $x5552)))
(let (($x4493 (<= (+ ?x1173 ?x1827 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5019 (= (+ ?x1827 ?x1173 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) (+ ?x1173 ?x1827 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))))))
(let ((@x5288 (trans (monotonicity (rewrite $x5019) (= $x4891 $x4493)) (rewrite (= $x4493 $x4887)) (= $x4891 $x4887))))
(let ((@x5082 (monotonicity (monotonicity @x5288 (= (or $x4783 $x4891) $x5110)) (= (not (or $x4783 $x4891)) $x5079))))
(let ((@x5868 (monotonicity (monotonicity @x5082 (= $x5552 (or $x5079 $x1828))) (= $x4766 (or $x3683 (or $x5079 $x1828))))))
(let ((@x5811 (trans @x5868 (rewrite (= (or $x3683 (or $x5079 $x1828)) $x4844)) (= $x4766 $x4844))))
(let ((@x6433 (unit-resolution (def-axiom (or $x5110 $x4812)) (unit-resolution (mp ((_ quant-inst ?v0!14) $x4766) @x5811 $x4844) @x5944 @x5065 $x5079) $x4812)))
(let ((?x6047 (pair$ v_b_v_G_1$ ?v0!14)))
(let ((?x6491 (b_G$ ?x6047)))
(let (($x5826 (>= ?x6491 0)))
(let ((@x6283 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x6491 0)) $x5826)) (hypothesis (not $x5826)) (not (= ?x6491 0)))))
(let (($x5742 (= v_b_v_G_1$ ?v0!14)))
(let (($x5751 (<= ?x6491 0)))
(let ((@x6302 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x5826 $x5751)) (hypothesis (not $x5826)) $x5751)))
(let (($x5738 (or $x5742 (not $x5751))))
(let (($x3480 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x84 (= ?v0 ?v1)))
(or $x84 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :pattern ( (pair$ ?v0 ?v1) ) :qid k!41))
))
(let (($x120 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x84 (= ?v0 ?v1)))
(or $x84 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :qid k!41))
))
(let (($x84 (= ?1 ?0)))
(let (($x117 (or $x84 (not (<= (b_G$ (pair$ ?1 ?0)) 0)))))
(let (($x105 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x85 (b_G$ ?x29)))
(let (($x102 (< 0 ?x85)))
(=> (not (= ?v0 ?v1)) $x102)))) :qid k!41))
))
(let (($x110 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x85 (b_G$ ?x29)))
(let (($x102 (< 0 ?x85)))
(let (($x84 (= ?v0 ?v1)))
(or $x84 $x102))))) :qid k!41))
))
(let ((?x29 (pair$ ?1 ?0)))
(let ((?x85 (b_G$ ?x29)))
(let (($x102 (< 0 ?x85)))
(let ((@x119 (monotonicity (rewrite (= $x102 (not (<= ?x85 0)))) (= (or $x84 $x102) $x117))))
(let ((@x112 (quant-intro (rewrite (= (=> (not $x84) $x102) (or $x84 $x102))) (= $x105 $x110))))
(let ((@x125 (mp (asserted $x105) (trans @x112 (quant-intro @x119 (= $x110 $x120)) (= $x105 $x120)) $x120)))
(let ((@x3485 (mp (mp~ @x125 (nnf-pos (refl (~ $x117 $x117)) (~ $x120 $x120)) $x120) (quant-intro (refl (= $x117 $x117)) (= $x120 $x3480)) $x3480)))
(let ((@x5780 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or (not $x3480) $x5738)) (rewrite (= (or (not $x3480) $x5738) (or (not $x3480) $x5742 (not $x5751)))) (or (not $x3480) $x5742 (not $x5751)))))
(let (($x5739 (= ?x6491 0)))
(let (($x5781 (or (not $x5742) $x5739)))
(let (($x3474 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :pattern ( (pair$ ?v0 ?v1) ) :qid k!40))
))
(let (($x99 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :qid k!40))
))
(let ((@x3476 (refl (= (or (not $x84) (= ?x85 0)) (or (not $x84) (= ?x85 0))))))
(let ((@x1447 (refl (~ (or (not $x84) (= ?x85 0)) (or (not $x84) (= ?x85 0))))))
(let (($x93 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x84 (= ?v0 ?v1)))
(=> $x84 (= (b_G$ (pair$ ?v0 ?v1)) 0))) :qid k!40))
))
(let ((@x98 (rewrite (= (=> $x84 (= ?x85 0)) (or (not $x84) (= ?x85 0))))))
(let ((@x1448 (mp~ (mp (asserted $x93) (quant-intro @x98 (= $x93 $x99)) $x99) (nnf-pos @x1447 (~ $x99 $x99)) $x99)))
(let ((@x3479 (mp @x1448 (quant-intro @x3476 (= $x99 $x3474)) $x3474)))
(let ((@x5817 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or (not $x3474) $x5781)) (rewrite (= (or (not $x3474) $x5781) (or (not $x3474) (not $x5742) $x5739))) (or (not $x3474) (not $x5742) $x5739))))
(let ((@x6306 (unit-resolution (unit-resolution @x5817 @x3479 $x5781) (unit-resolution (unit-resolution @x5780 @x3485 $x5738) @x6302 $x5742) @x6283 false)))
(let ((@x6555 ((_ th-lemma arith farkas 1 -1 1) (lemma @x6306 $x5826) (hypothesis $x4812) (hypothesis $x6523) false)))
(let ((@x6225 (unit-resolution (def-axiom (or $x3809 $x256)) @x6181 $x256)))
(let ((@x5748 (unit-resolution (def-axiom (or $x3821 $x3565)) @x4219 $x3565)))
(let ((@x6018 (rewrite (= (or $x3570 (or $x255 $x4290 $x6523)) (or $x3570 $x255 $x4290 $x6523)))))
(let ((@x6055 (mp ((_ quant-inst ?v0!14 v_b_v_G_1$) (or $x3570 (or $x255 $x4290 $x6523))) @x6018 (or $x3570 $x255 $x4290 $x6523))))
(let ((@x6222 (unit-resolution @x6055 @x5748 @x6225 (hypothesis $x5678) (hypothesis $x6556) false)))
(let ((@x5057 (unit-resolution (lemma @x6222 (or $x4290 $x6523)) (unit-resolution (lemma @x6555 (or $x6556 $x4887)) @x6433 $x6556) $x4290)))
(let ((@x6293 (monotonicity (unit-resolution (def-axiom (or (not $x4963) $x6050 $x5678)) @x5057 @x5037 $x6050) (= ?x1827 ?x257))))
(let (($x3052 (= ?x3104 ?x257)))
(let ((?x3130 (pair$ v_b_v_G_1$ v_b_v_G_1$)))
(let ((?x3096 (b_G$ ?x3130)))
(let (($x3079 (>= ?x3096 0)))
(let (($x3088 (<= (+ b_Infinity$ (* (- 1) ?x3096)) 0)))
(let (($x4242 (or $x3088 $x3079)))
(let (($x4785 (= ?x3096 0)))
(let (($x3151 (not $x3474)))
(let (($x4816 (or $x3151 $x4785)))
(let ((@x4770 (monotonicity (rewrite (= (= v_b_v_G_1$ v_b_v_G_1$) true)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) (not true)))))
(let ((@x4775 (trans @x4770 (rewrite (= (not true) false)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) false))))
(let ((@x4767 (monotonicity @x4775 (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x4785) (or false $x4785)))))
(let ((@x4773 (trans @x4767 (rewrite (= (or false $x4785) $x4785)) (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x4785) $x4785))))
(let ((@x4820 (monotonicity @x4773 (= (or $x3151 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x4785)) $x4816))))
(let ((@x4821 (trans @x4820 (rewrite (= $x4816 $x4816)) (= (or $x3151 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x4785)) $x4816))))
(let ((@x4822 (mp ((_ quant-inst v_b_v_G_1$ v_b_v_G_1$) (or $x3151 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x4785))) @x4821 $x4816)))
(let ((@x4849 (lemma (unit-resolution @x4822 @x3479 (hypothesis (not $x4785)) false) $x4785)))
(let ((@x6019 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4785) $x3079)) @x4849 $x3079)))
(let ((@x4316 (def-axiom (or $x4242 (not $x3079)))))
(let (($x4245 (not $x4242)))
(let (($x3975 (or $x3683 $x4245 $x3052)))
(let (($x3053 (or (not (or $x3088 (<= (+ ?x257 ?x1173 (* (- 1) ?x3096)) 0))) $x3052)))
(let (($x3958 (or $x3683 $x3053)))
(let (($x3103 (<= (+ ?x257 ?x1173 (* (- 1) ?x3096)) 0)))
(let ((@x4023 (monotonicity (rewrite (= (+ ?x257 ?x1173 (* (- 1) ?x3096)) (* (- 1) ?x3096))) (= $x3103 (<= (* (- 1) ?x3096) 0)))))
(let ((@x4044 (trans @x4023 (rewrite (= (<= (* (- 1) ?x3096) 0) $x3079)) (= $x3103 $x3079))))
(let ((@x4247 (monotonicity (monotonicity @x4044 (= (or $x3088 $x3103) $x4242)) (= (not (or $x3088 $x3103)) $x4245))))
(let ((@x4254 (monotonicity (monotonicity @x4247 (= $x3053 (or $x4245 $x3052))) (= $x3958 (or $x3683 (or $x4245 $x3052))))))
(let ((@x4258 (trans @x4254 (rewrite (= (or $x3683 (or $x4245 $x3052)) $x3975)) (= $x3958 $x3975))))
(let ((@x4259 (mp ((_ quant-inst v_b_v_G_1$) $x3958) @x4258 $x3975)))
(let ((@x6268 (monotonicity (unit-resolution (def-axiom (or (not $x4963) $x6050 $x5678)) @x5057 @x5037 $x6050) (= ?x1826 ?x3104))))
(let ((@x6107 (trans @x6268 (unit-resolution @x4259 @x5944 (unit-resolution @x4316 @x6019 $x4242) $x3052) (= ?x1826 ?x257))))
(let ((@x6162 (unit-resolution @x5065 (trans @x6107 (symm @x6293 (= ?x257 ?x1827)) $x1828) false)))
(let ((@x7617 (unit-resolution (def-axiom (or $x3794 $x1830 $x3788)) (lemma @x6162 $x1829) (unit-resolution (def-axiom (or $x3797 $x3791)) @x6891 $x3791) $x3788)))
(let ((@x7618 (unit-resolution (def-axiom (or $x3785 $x3695)) @x7617 $x3695)))
(let ((@x7447 (mp ((_ quant-inst ?v0!15) (or $x3700 (or $x4479 $x4481))) (rewrite (= (or $x3700 (or $x4479 $x4481)) (or $x3700 $x4479 $x4481))) (or $x3700 $x4479 $x4481))))
(let ((@x7323 (mp (unit-resolution @x7447 @x7618 (unit-resolution @x6242 @x6183 (not $x4481)) $x4479) @x7322 (not $x6630))))
(let ((@x7334 (unit-resolution (def-axiom (or (not $x7702) $x6630 (not $x7698))) @x7323 (unit-resolution @x7486 @x3473 $x7702) (not $x7698))))
(let ((@x7344 (mp (unit-resolution (def-axiom (or $x7698 $x7452)) @x7334 $x7452) (monotonicity @x7337 (= $x7452 $x5538)) $x5538)))
(let (($x5470 (or $x6156 $x6583)))
(let ((@x6577 (mp ((_ quant-inst v_b_v_G_1$ ?v0!15) (or (not $x3480) $x5470)) (rewrite (= (or (not $x3480) $x5470) (or (not $x3480) $x6156 $x6583))) (or (not $x3480) $x6156 $x6583))))
(let ((@x7345 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x6603 $x6582)) (unit-resolution (unit-resolution @x6577 @x3485 $x5470) @x7344 $x6583) $x6603)))
(let (($x4153 (<= ?x296 0)))
(let ((?x4058 (* (- 1) ?x296)))
(let ((?x4124 (+ ?x172 ?x4058)))
(let (($x4125 (>= ?x4124 0)))
(let ((@x6892 (unit-resolution (def-axiom (or $x3797 $x3686)) @x6891 $x3686)))
(let (($x4878 (or $x3691 $x4125)))
(let ((@x4880 ((_ quant-inst b_Source$) $x4878)))
(let (($x3198 (<= ?x172 0)))
(let ((@x4532 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2952 $x3198)) @x4529 $x3198)))
(let ((@x6899 (unit-resolution ((_ th-lemma arith assign-bounds -1 1) (or $x4153 (not $x3198) (not $x4125))) @x4532 (or $x4153 (not $x4125)))))
(let ((@x6900 (unit-resolution @x6899 (unit-resolution @x4880 @x6892 $x4125) $x4153)))
(let (($x3887 (= v_b_v_G_1$ b_Source$)))
(let (($x5313 (not $x3887)))
(let ((@x5202 (hypothesis $x773)))
(let ((?x4565 (pair$ b_Source$ b_Source$)))
(let ((?x4566 (b_G$ ?x4565)))
(let ((?x4567 (* (- 1) ?x4566)))
(let ((?x4041 (pair$ v_b_v_G_1$ b_Source$)))
(let ((?x4042 (b_G$ ?x4041)))
(let ((@x4671 (monotonicity (symm (hypothesis $x3887) (= b_Source$ v_b_v_G_1$)) (= ?x4565 ?x4041))))
(let ((@x4659 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x4042 ?x4566)) (>= (+ ?x4042 ?x4567) 0))) (monotonicity (symm @x4671 (= ?x4041 ?x4565)) (= ?x4042 ?x4566)) (>= (+ ?x4042 ?x4567) 0))))
(let ((?x4049 (* (- 1) ?x4042)))
(let ((?x5672 (+ ?x3096 ?x4049)))
(let (($x5674 (>= ?x5672 0)))
(let ((@x4664 (monotonicity (monotonicity (hypothesis $x3887) (= ?x3130 ?x4041)) (= ?x3096 ?x4042))))
(let (($x4315 (not $x3079)))
(let ((@x4728 (trans (monotonicity (hypothesis $x3887) (= ?x257 ?x172)) @x4529 (= ?x257 0))))
(let ((@x4830 (monotonicity (monotonicity (hypothesis $x3887) (= ?x3104 ?x296)) @x4728 (= $x3052 $x297))))
(let ((@x4736 (mp @x5202 (monotonicity (symm @x4830 (= $x297 $x3052)) (= $x773 (not $x3052))) (not $x3052))))
(let ((@x5369 (unit-resolution @x4316 (unit-resolution (unit-resolution @x4259 @x4739 (or $x4245 $x3052)) @x4736 $x4245) $x4315)))
(let (($x4601 (= ?x4566 0)))
(let (($x4613 (or $x3151 $x4601)))
(let ((@x4604 (monotonicity @x5820 (= (or (not (= b_Source$ b_Source$)) $x4601) (or false $x4601)))))
(let ((@x4630 (trans @x4604 (rewrite (= (or false $x4601) $x4601)) (= (or (not (= b_Source$ b_Source$)) $x4601) $x4601))))
(let ((@x4617 (monotonicity @x4630 (= (or $x3151 (or (not (= b_Source$ b_Source$)) $x4601)) $x4613))))
(let ((@x4620 (trans @x4617 (rewrite (= $x4613 $x4613)) (= (or $x3151 (or (not (= b_Source$ b_Source$)) $x4601)) $x4613))))
(let ((@x4621 (mp ((_ quant-inst b_Source$ b_Source$) (or $x3151 (or (not (= b_Source$ b_Source$)) $x4601))) @x4620 $x4613)))
(let ((@x5180 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4601) (>= ?x4566 0))) (unit-resolution @x4621 @x3479 $x4601) (>= ?x4566 0))))
(let ((@x5283 ((_ th-lemma arith farkas 1 -1 1 1) @x5180 @x5369 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3096 ?x4042)) $x5674)) @x4664 $x5674) @x4659 false)))
(let (($x5310 (<= ?x4042 0)))
(let ((?x4076 (+ ?x257 ?x4058 ?x4042)))
(let (($x4096 (<= ?x4076 0)))
(let (($x4079 (= ?x4076 0)))
(let (($x4053 (<= (+ ?x172 ?x1173 ?x4049) 0)))
(let (($x4051 (<= (+ b_Infinity$ ?x4049) 0)))
(let (($x4054 (or $x4051 $x4053)))
(let (($x4055 (not $x4054)))
(let ((@x5609 (symm (monotonicity @x4529 (= (= ?x296 ?x172) $x297)) (= $x297 (= ?x296 ?x172)))))
(let ((@x5618 (mp @x5202 (monotonicity @x5609 (= $x773 (not (= ?x296 ?x172)))) (not (= ?x296 ?x172)))))
(let (($x4056 (= ?x296 ?x172)))
(let (($x4057 (or $x4055 $x4056)))
(let (($x4295 (or $x3683 $x4055 $x4056)))
(let ((@x4884 (mp ((_ quant-inst b_Source$) (or $x3683 $x4057)) (rewrite (= (or $x3683 $x4057) $x4295)) $x4295)))
(let ((@x5791 (unit-resolution (def-axiom (or $x4054 (not $x4051))) (hypothesis $x4055) (not $x4051))))
(let ((@x5806 (unit-resolution (def-axiom (or $x4054 (not $x4053))) (hypothesis $x4055) (not $x4053))))
(let (($x4082 (or $x4051 $x4053 $x4079)))
(let (($x4085 (or $x3675 $x4051 $x4053 $x4079)))
(let (($x4075 (or $x4051 $x4053 (= (+ ?x257 ?x4042 ?x4058) 0))))
(let (($x4086 (or $x3675 $x4075)))
(let ((@x4081 (monotonicity (rewrite (= (+ ?x257 ?x4042 ?x4058) ?x4076)) (= (= (+ ?x257 ?x4042 ?x4058) 0) $x4079))))
(let ((@x4090 (monotonicity (monotonicity @x4081 (= $x4075 $x4082)) (= $x4086 (or $x3675 $x4082)))))
(let ((@x4095 (mp ((_ quant-inst b_Source$) $x4086) (trans @x4090 (rewrite (= (or $x3675 $x4082) $x4085)) (= $x4086 $x4085)) $x4085)))
(let ((@x5789 (unit-resolution (unit-resolution @x4095 @x5807 $x4082) @x5806 @x5791 (hypothesis (not $x4079)) false)))
(let ((@x5623 (unit-resolution (lemma @x5789 (or $x4054 $x4079 $x3675)) (unit-resolution (unit-resolution @x4884 @x4739 $x4057) @x5618 $x4055) @x5807 $x4079)))
(let ((@x5923 (hypothesis $x4096)))
(let ((@x5933 ((_ th-lemma arith farkas -1 1 -1 1) (hypothesis $x3904) (hypothesis $x4153) (hypothesis (not $x5310)) @x5923 false)))
(let ((@x5938 (lemma @x5933 (or $x5310 (not $x3904) (not $x4153) (not $x4096)))))
(let ((@x5596 (unit-resolution @x5938 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4079) $x4096)) @x5623 $x4096) (hypothesis $x4153) @x5049 $x5310)))
(let (($x5886 (= (or (not $x3480) (or $x3887 (not $x5310))) (or (not $x3480) $x3887 (not $x5310)))))
(let ((@x5952 (mp ((_ quant-inst v_b_v_G_1$ b_Source$) (or (not $x3480) (or $x3887 (not $x5310)))) (rewrite $x5886) (or (not $x3480) $x3887 (not $x5310)))))
(let ((@x5597 (unit-resolution @x5952 @x3485 @x5596 (unit-resolution (lemma @x5283 (or $x5313 $x3683 $x297)) @x5202 @x4739 $x5313) false)))
(let ((@x6788 (unit-resolution (lemma @x5597 (or $x297 (not $x4153) $x3675 $x3683)) @x6900 @x6588 @x5944 $x297)))
(let ((@x7810 (unit-resolution (def-axiom (or $x3782 $x773 $x3776)) (unit-resolution (def-axiom (or $x3785 $x3779)) @x7617 $x3779) @x6788 $x3776)))
(let ((@x3347 (def-axiom (or $x3770 $x1848 $x3764))))
(let ((@x9303 (unit-resolution @x3347 (unit-resolution (def-axiom (or $x3773 $x3767)) @x7810 $x3767) $x3767)))
(let ((@x9304 (unit-resolution @x9303 (lemma ((_ th-lemma arith farkas 1 1 -1 1) @x5703 @x7345 @x6959 @x5049 false) $x1847) $x3764)))
(let ((@x3367 (def-axiom (or $x3761 $x3703))))
(let (($x4335 (or $x3708 $x4161)))
(let ((@x4337 ((_ quant-inst v_b_v_G_1$) $x4335)))
(let (($x4126 (fun_app$ v_b_Visited_G_2$ v_b_v_G_1$)))
(let (($x3136 (fun_app$ ?x265 v_b_v_G_1$)))
(let (($x3461 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v1) ?v2) :pattern ( (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ) :qid k!37))
))
(let (($x57 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v1) ?v2) :qid k!37))
))
(let (($x54 (= (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?2) ?1) ?0) ?1) ?0)))
(let (($x52 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?v0) ?v1) ?v2) ?v1) ?v2) :qid k!37))
))
(let (($x51 (= (fun_app$ (fun_app$a (fun_app$b (fun_upd$ ?2) ?1) ?0) ?1) ?0)))
(let ((@x62 (mp (asserted $x52) (quant-intro (rewrite (= $x51 $x54)) (= $x52 $x57)) $x57)))
(let ((@x3466 (mp (mp~ @x62 (nnf-pos (refl (~ $x54 $x54)) (~ $x57 $x57)) $x57) (quant-intro (refl (= $x54 $x54)) (= $x57 $x3461)) $x3461)))
(let (($x6140 (or (not $x3461) $x3136)))
(let ((@x6106 (monotonicity (rewrite (= (= $x3136 true) $x3136)) (= (or (not $x3461) (= $x3136 true)) $x6140))))
(let ((@x5837 (trans @x6106 (rewrite (= $x6140 $x6140)) (= (or (not $x3461) (= $x3136 true)) $x6140))))
(let ((@x5928 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true) (or (not $x3461) (= $x3136 true))) @x5837 $x6140)))
(let ((@x7413 (mp (unit-resolution @x5928 @x3466 $x3136) (monotonicity @x5875 (= $x3136 $x4126)) $x4126)))
(let (($x4570 (>= ?x4546 0)))
(let ((@x5420 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x4570 $x4569)) (hypothesis (not $x4569)) $x4570)))
(let (($x4438 (<= (+ b_Infinity$ ?x4436) 0)))
(let (($x4127 (not $x4126)))
(let (($x5352 (or $x3725 $x4127 $x4438 $x4569)))
(let (($x5336 (>= (+ ?x4435 ?x3104 (* (- 1) ?x1911)) 0)))
(let (($x5339 (or $x4127 $x4438 $x5336)))
(let (($x5353 (or $x3725 $x5339)))
(let ((@x5341 (rewrite (= (+ ?x4435 ?x3104 (* (- 1) ?x1911)) (+ (* (- 1) ?x1911) ?x3104 ?x4435)))))
(let ((@x5344 (monotonicity @x5341 (= $x5336 (>= (+ (* (- 1) ?x1911) ?x3104 ?x4435) 0)))))
(let ((@x5348 (trans @x5344 (rewrite (= (>= (+ (* (- 1) ?x1911) ?x3104 ?x4435) 0) $x4569)) (= $x5336 $x4569))))
(let ((@x5357 (monotonicity (monotonicity @x5348 (= $x5339 (or $x4127 $x4438 $x4569))) (= $x5353 (or $x3725 (or $x4127 $x4438 $x4569))))))
(let ((@x5361 (trans @x5357 (rewrite (= (or $x3725 (or $x4127 $x4438 $x4569)) $x5352)) (= $x5353 $x5352))))
(let ((@x5424 (unit-resolution (mp ((_ quant-inst ?v0!20 v_b_v_G_1$) $x5353) @x5361 $x5352) (hypothesis $x3720) (hypothesis $x4126) (hypothesis (not $x4569)) $x4438)))
(let ((@x5428 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x5424 (hypothesis $x4161) @x5420 (hypothesis $x1915) false) (or $x4569 (not $x4161) $x1914 $x3725 $x4127))))
(let ((@x7705 (unit-resolution (unit-resolution @x5428 @x7413 (or $x4569 (not $x4161) $x1914 $x3725)) (unit-resolution @x4337 (unit-resolution @x3367 @x9304 $x3703) $x4161) (or $x4569 $x1914 $x3725))))
(let ((@x4467 (unit-resolution @x7705 (unit-resolution (def-axiom (or $x3737 $x1915)) @x4391 $x1915) (unit-resolution @x3222 @x4391 $x3720) $x4569)))
(let (($x5386 (= v_b_v_G_1$ ?v0!20)))
(let (($x5390 (not $x5386)))
(let ((@x9335 (symm (commutativity (= $x5386 (= ?v0!20 v_b_v_G_1$))) (= (= ?v0!20 v_b_v_G_1$) $x5386))))
(let (($x5240 (= ?v0!20 v_b_v_G_1$)))
(let (($x9098 (not $x5240)))
(let (($x4609 (fun_app$ v_b_Visited_G_1$ ?v0!20)))
(let (($x9110 (or $x5240 $x4609)))
(let (($x5237 (fun_app$ ?x265 ?v0!20)))
(let (($x9115 (= $x5237 $x9110)))
(let (($x9118 (or $x4114 $x9115)))
(let ((@x9117 (monotonicity (rewrite (= (ite $x5240 true $x4609) $x9110)) (= (= $x5237 (ite $x5240 true $x4609)) $x9115))))
(let ((@x9122 (monotonicity @x9117 (= (or $x4114 (= $x5237 (ite $x5240 true $x4609))) $x9118))))
(let ((@x9099 (trans @x9122 (rewrite (= $x9118 $x9118)) (= (or $x4114 (= $x5237 (ite $x5240 true $x4609))) $x9118))))
(let ((@x9100 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!20) (or $x4114 (= $x5237 (ite $x5240 true $x4609)))) @x9099 $x9118)))
(let ((@x9326 (symm (monotonicity @x5875 (= $x5237 (fun_app$ v_b_Visited_G_2$ ?v0!20))) (= (fun_app$ v_b_Visited_G_2$ ?v0!20) $x5237))))
(let ((@x9328 (monotonicity @x9326 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!20)) (not $x5237)))))
(let (($x4278 (fun_app$ v_b_Visited_G_2$ ?v0!20)))
(let (($x4279 (not $x4278)))
(let (($x4403 (or $x4279 $x4400)))
(let ((@x7926 (mp ((_ quant-inst ?v0!20) (or $x3700 $x4403)) (rewrite (= (or $x3700 $x4403) (or $x3700 $x4279 $x4400))) (or $x3700 $x4279 $x4400))))
(let ((@x9302 (unit-resolution (unit-resolution @x7926 @x7618 $x4403) (hypothesis (not $x4400)) $x4279)))
(let ((@x9330 (unit-resolution (def-axiom (or (not $x9115) $x5237 (not $x9110))) (mp @x9302 @x9328 (not $x5237)) (unit-resolution @x9100 @x3473 $x9115) (not $x9110))))
(let ((@x9338 (mp (unit-resolution (def-axiom (or $x9110 $x9098)) @x9330 $x9098) (monotonicity @x9335 (= $x9098 $x5390)) $x5390)))
(let (($x5387 (<= ?x4435 0)))
(let (($x5391 (= ?x4435 0)))
(let ((?x3106 (+ ?x257 ?x3096 ?x3105)))
(let (($x4239 (<= ?x3106 0)))
(let ((?x3884 (+ ?x257 ?x3105)))
(let (($x3885 (<= ?x3884 0)))
(let (($x6004 (= ?x257 ?x3104)))
(let ((@x7828 (mp (unit-resolution @x4259 @x5944 (unit-resolution @x4316 @x6019 $x4242) $x3052) (symm (commutativity (= $x6004 $x3052)) (= $x3052 $x6004)) $x6004)))
(let (($x4177 (<= ?x3096 0)))
(let ((@x6933 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4785) $x4177)) @x4849 $x4177)))
(let ((@x7838 (unit-resolution ((_ th-lemma arith assign-bounds 1 1) (or $x4239 (not $x3885) (not $x4177))) @x6933 (or $x4239 (not $x3885)))))
(let ((@x7839 (unit-resolution @x7838 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6004) $x3885)) @x7828 $x3885) $x4239)))
(let (($x3044 (>= ?x3106 0)))
(let (($x3886 (>= ?x3884 0)))
(let (($x5927 (or $x3691 $x3886)))
(let ((@x5941 ((_ quant-inst v_b_v_G_1$) $x5927)))
(let ((@x6925 (unit-resolution @x5941 @x6892 $x3886)))
(let ((@x6929 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1) (or $x3044 $x4315 (not $x3886))) @x6019 (or $x3044 (not $x3886)))))
(let ((@x6930 (unit-resolution @x6929 @x6925 $x3044)))
(let ((?x4381 (+ ?x1911 ?x3105)))
(let (($x7049 (<= ?x4381 0)))
(let (($x7135 (= ?x4546 0)))
(let ((?x1912 (* (- 1) ?x1911)))
(let ((?x4487 (+ ?x257 ?x1912 ?x4435)))
(let (($x4507 (<= ?x4487 0)))
(let (($x5673 (= ?x4487 0)))
(let (($x6827 (>= (+ ?x257 ?x4418 ?x4435) 0)))
(let (($x6723 (or $x4438 $x6827)))
(let (($x6684 (not $x6723)))
(let (($x6831 (or $x6684 $x4400)))
(let (($x6789 (or $x3683 $x6684 $x4400)))
(let (($x4443 (or (not (or $x4438 (<= (+ ?x4393 ?x1173 ?x4436) 0))) $x4400)))
(let (($x6790 (or $x3683 $x4443)))
(let ((@x6945 (monotonicity (rewrite (= (+ ?x4393 ?x1173 ?x4436) (+ ?x1173 ?x4393 ?x4436))) (= (<= (+ ?x4393 ?x1173 ?x4436) 0) (<= (+ ?x1173 ?x4393 ?x4436) 0)))))
(let ((@x6725 (trans @x6945 (rewrite (= (<= (+ ?x1173 ?x4393 ?x4436) 0) $x6827)) (= (<= (+ ?x4393 ?x1173 ?x4436) 0) $x6827))))
(let ((@x6730 (monotonicity @x6725 (= (or $x4438 (<= (+ ?x4393 ?x1173 ?x4436) 0)) $x6723))))
(let ((@x6830 (monotonicity @x6730 (= (not (or $x4438 (<= (+ ?x4393 ?x1173 ?x4436) 0))) $x6684))))
(let ((@x6829 (monotonicity (monotonicity @x6830 (= $x4443 $x6831)) (= $x6790 (or $x3683 $x6831)))))
(let ((@x6824 (mp ((_ quant-inst ?v0!20) $x6790) (trans @x6829 (rewrite (= (or $x3683 $x6831) $x6789)) (= $x6790 $x6789)) $x6789)))
(let ((@x9291 (unit-resolution (unit-resolution @x6824 @x5944 $x6831) (hypothesis (not $x4400)) $x6684)))
(let ((@x7434 (unit-resolution (def-axiom (or $x6723 (not $x4438))) (hypothesis $x6684) (not $x4438))))
(let ((@x7480 (unit-resolution (def-axiom (or $x6723 (not $x6827))) (hypothesis $x6684) (not $x6827))))
(let (($x6621 (or $x4438 $x6827 $x5673)))
(let (($x6987 (or $x3675 $x4438 $x6827 $x5673)))
(let (($x4440 (<= (+ ?x4393 ?x1173 ?x4436) 0)))
(let (($x4486 (or $x4438 $x4440 (= (+ ?x257 ?x4435 ?x1912) 0))))
(let (($x6624 (or $x3675 $x4486)))
(let ((@x5324 (monotonicity (rewrite (= (+ ?x257 ?x4435 ?x1912) ?x4487)) (= (= (+ ?x257 ?x4435 ?x1912) 0) $x5673))))
(let ((@x6996 (monotonicity (monotonicity @x6725 @x5324 (= $x4486 $x6621)) (= $x6624 (or $x3675 $x6621)))))
(let ((@x7057 (mp ((_ quant-inst ?v0!20) $x6624) (trans @x6996 (rewrite (= (or $x3675 $x6621) $x6987)) (= $x6624 $x6987)) $x6987)))
(let ((@x7649 (unit-resolution (unit-resolution @x7057 @x6588 $x6621) @x7480 @x7434 (hypothesis (not $x5673)) false)))
(let ((@x7699 (lemma @x7649 (or $x6723 $x5673))))
(let ((@x9295 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x5673) $x4507)) (unit-resolution @x7699 @x9291 $x5673) $x4507)))
(let ((@x9297 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or (not $x4507) $x4570 (not $x3886))) @x6925 (or (not $x4507) $x4570))))
(let ((@x7017 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7135 (not $x4569) (not $x4570))) (hypothesis $x4569) (or $x7135 (not $x4570)))))
(let (($x7151 (not $x7135)))
(let (($x7157 (or $x3734 $x7049 $x4127 $x7151)))
(let (($x4516 (>= (+ ?x3104 ?x1912) 0)))
(let (($x4528 (or $x4516 $x4127 (not (= (+ ?x3104 ?x1912 ?x4435) 0)))))
(let (($x7317 (or $x3734 $x4528)))
(let ((@x7137 (monotonicity (rewrite (= (+ ?x3104 ?x1912 ?x4435) (+ ?x1912 ?x3104 ?x4435))) (= (= (+ ?x3104 ?x1912 ?x4435) 0) (= (+ ?x1912 ?x3104 ?x4435) 0)))))
(let ((@x7149 (trans @x7137 (rewrite (= (= (+ ?x1912 ?x3104 ?x4435) 0) $x7135)) (= (= (+ ?x3104 ?x1912 ?x4435) 0) $x7135))))
(let ((@x7063 (monotonicity (rewrite (= (+ ?x3104 ?x1912) (+ ?x1912 ?x3104))) (= $x4516 (>= (+ ?x1912 ?x3104) 0)))))
(let ((@x7144 (trans @x7063 (rewrite (= (>= (+ ?x1912 ?x3104) 0) $x7049)) (= $x4516 $x7049))))
(let ((@x7156 (monotonicity @x7144 (monotonicity @x7149 (= (not (= (+ ?x3104 ?x1912 ?x4435) 0)) $x7151)) (= $x4528 (or $x7049 $x4127 $x7151)))))
(let ((@x7313 (trans (monotonicity @x7156 (= $x7317 (or $x3734 (or $x7049 $x4127 $x7151)))) (rewrite (= (or $x3734 (or $x7049 $x4127 $x7151)) $x7157)) (= $x7317 $x7157))))
(let ((@x7506 (unit-resolution (mp ((_ quant-inst v_b_v_G_1$) $x7317) @x7313 $x7157) (hypothesis $x3729) @x7413 (or $x7049 $x7151))))
(let ((@x9300 (unit-resolution @x7506 (unit-resolution @x7017 (unit-resolution @x9297 @x9295 $x4570) $x7135) $x7049)))
(let (($x4382 (>= ?x4381 0)))
(let ((?x6481 (pair$ v_b_v_G_1$ ?v1!16)))
(let ((?x6374 (b_G$ ?x6481)))
(let (($x7203 (<= ?x6374 0)))
(let (($x7206 (not $x7203)))
(let (($x7202 (= v_b_v_G_1$ ?v1!16)))
(let (($x7265 (not $x7202)))
(let (($x6813 (= ?v1!16 v_b_v_G_1$)))
(let (($x6712 (not $x6813)))
(let (($x6814 (fun_app$ v_b_Visited_G_1$ ?v1!16)))
(let (($x8313 (or $x6813 $x6814)))
(let (($x6812 (fun_app$ ?x265 ?v1!16)))
(let (($x4356 (= $x6812 $x8313)))
(let (($x6492 (or $x4114 $x4356)))
(let ((@x6175 (monotonicity (rewrite (= (ite $x6813 true $x6814) $x8313)) (= (= $x6812 (ite $x6813 true $x6814)) $x4356))))
(let ((@x7654 (monotonicity @x6175 (= (or $x4114 (= $x6812 (ite $x6813 true $x6814))) $x6492))))
(let ((@x7598 (trans @x7654 (rewrite (= $x6492 $x6492)) (= (or $x4114 (= $x6812 (ite $x6813 true $x6814))) $x6492))))
(let ((@x7600 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!16) (or $x4114 (= $x6812 (ite $x6813 true $x6814)))) @x7598 $x6492)))
(let ((@x8661 (monotonicity (symm (monotonicity @x5875 (= $x6812 $x1860)) (= $x1860 $x6812)) (= (not $x1860) (not $x6812)))))
(let (($x1861 (not $x1860)))
(let ((@x8145 (hypothesis $x2765)))
(let ((@x8181 (mp (unit-resolution (def-axiom (or $x2760 $x1861)) @x8145 $x1861) @x8661 (not $x6812))))
(let ((@x8616 (unit-resolution (def-axiom (or (not $x4356) $x6812 (not $x8313))) @x8181 (unit-resolution @x7600 @x3473 $x4356) (not $x8313))))
(let ((@x8179 (unit-resolution (hypothesis $x6712) (symm (hypothesis $x7202) $x6813) false)))
(let ((@x8586 (unit-resolution (lemma @x8179 (or $x7265 $x6813)) (unit-resolution (def-axiom (or $x8313 $x6712)) @x8616 $x6712) $x7265)))
(let ((@x7214 (rewrite (= (or (not $x3480) (or $x7202 $x7206)) (or (not $x3480) $x7202 $x7206)))))
(let ((@x7215 (mp ((_ quant-inst v_b_v_G_1$ ?v1!16) (or (not $x3480) (or $x7202 $x7206))) @x7214 (or (not $x3480) $x7202 $x7206))))
(let ((@x8872 (lemma (unit-resolution @x7215 @x3485 (hypothesis $x7203) (hypothesis $x7265) false) (or $x7206 $x7202))))
(let ((?x1865 (v_b_SP_G_2$ ?v1!16)))
(let ((?x6126 (* (- 1) ?x1865)))
(let ((?x6400 (+ ?x257 ?x6126 ?x6374)))
(let (($x6319 (<= ?x6400 0)))
(let (($x7408 (= ?x6400 0)))
(let (($x6238 (<= (+ b_Infinity$ (* (- 1) ?x6374)) 0)))
(let (($x7360 (not $x6238)))
(let (($x7540 (>= (+ ?x257 (* (- 1) (fun_app$c v_b_SP_G_1$ ?v1!16)) ?x6374) 0)))
(let (($x4492 (or $x6238 $x7540)))
(let (($x4445 (not $x4492)))
(let ((?x6234 (fun_app$c v_b_SP_G_1$ ?v1!16)))
(let (($x6378 (= ?x1865 ?x6234)))
(let (($x8060 (not $x6378)))
(let (($x7372 (>= (+ ?x1865 (* (- 1) ?x6234)) 0)))
(let (($x8588 (not $x7372)))
(let (($x8639 (<= (+ ?x257 (* (- 1) ?x6234)) 0)))
(let (($x7946 (or $x6814 $x8639)))
(let (($x8076 (or $x3665 $x6814 $x8639)))
(let ((@x8377 (monotonicity (rewrite (= (+ ?x6234 ?x1173) (+ ?x1173 ?x6234))) (= (>= (+ ?x6234 ?x1173) 0) (>= (+ ?x1173 ?x6234) 0)))))
(let ((@x8401 (trans @x8377 (rewrite (= (>= (+ ?x1173 ?x6234) 0) $x8639)) (= (>= (+ ?x6234 ?x1173) 0) $x8639))))
(let ((@x8438 (monotonicity (monotonicity @x8401 (= (or $x6814 (>= (+ ?x6234 ?x1173) 0)) $x7946)) (= (or $x3665 (or $x6814 (>= (+ ?x6234 ?x1173) 0))) (or $x3665 $x7946)))))
(let ((@x8439 (trans @x8438 (rewrite (= (or $x3665 $x7946) $x8076)) (= (or $x3665 (or $x6814 (>= (+ ?x6234 ?x1173) 0))) $x8076))))
(let ((@x8127 (mp ((_ quant-inst ?v1!16) (or $x3665 (or $x6814 (>= (+ ?x6234 ?x1173) 0)))) @x8439 $x8076)))
(let ((@x8777 (unit-resolution @x8127 (unit-resolution (def-axiom (or $x3809 $x3660)) @x6181 $x3660) $x7946)))
(let ((@x8778 (unit-resolution @x8777 (unit-resolution (def-axiom (or $x8313 (not $x6814))) @x8616 (not $x6814)) $x8639)))
(let ((?x1866 (v_b_SP_G_2$ ?v0!17)))
(let ((?x6890 (+ ?x1866 ?x3105)))
(let (($x6886 (<= ?x6890 0)))
(let (($x3187 (fun_app$ v_b_Visited_G_1$ ?v0!17)))
(let (($x4478 (= ?v0!17 v_b_v_G_1$)))
(let (($x4499 (or $x4478 $x3187)))
(let (($x4471 (fun_app$ ?x265 ?v0!17)))
(let (($x4593 (= $x4471 $x4499)))
(let (($x4712 (or $x4114 $x4593)))
(let ((@x4495 (monotonicity (rewrite (= (ite $x4478 true $x3187) $x4499)) (= (= $x4471 (ite $x4478 true $x3187)) $x4593))))
(let ((@x5371 (monotonicity @x4495 (= (or $x4114 (= $x4471 (ite $x4478 true $x3187))) $x4712))))
(let ((@x5958 (trans @x5371 (rewrite (= $x4712 $x4712)) (= (or $x4114 (= $x4471 (ite $x4478 true $x3187))) $x4712))))
(let ((@x6125 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!17) (or $x4114 (= $x4471 (ite $x4478 true $x3187)))) @x5958 $x4712)))
(let ((@x8749 (mp (unit-resolution (def-axiom (or $x2760 $x1862)) @x8145 $x1862) (symm (monotonicity @x5875 (= $x4471 $x1862)) (= $x1862 $x4471)) $x4471)))
(let ((@x8750 (unit-resolution (def-axiom (or (not $x4593) (not $x4471) $x4499)) @x8749 (unit-resolution @x6125 @x3473 $x4593) $x4499)))
(let ((?x4496 (fun_app$c v_b_SP_G_1$ ?v0!17)))
(let ((?x6307 (* (- 1) ?x4496)))
(let ((?x5972 (+ ?x257 ?x6307)))
(let (($x7220 (>= ?x5972 0)))
(let (($x7299 (not $x7220)))
(let ((?x5902 (+ ?x1866 ?x6307)))
(let (($x6327 (<= ?x5902 0)))
(let (($x6088 (or $x3691 $x6327)))
(let (($x6436 (>= (+ ?x4496 (* (- 1) ?x1866)) 0)))
(let ((@x6464 (monotonicity (rewrite (= (+ ?x4496 (* (- 1) ?x1866)) (+ (* (- 1) ?x1866) ?x4496))) (= $x6436 (>= (+ (* (- 1) ?x1866) ?x4496) 0)))))
(let ((@x5905 (trans @x6464 (rewrite (= (>= (+ (* (- 1) ?x1866) ?x4496) 0) $x6327)) (= $x6436 $x6327))))
(let ((@x5843 (trans (monotonicity @x5905 (= (or $x3691 $x6436) $x6088)) (rewrite (= $x6088 $x6088)) (= (or $x3691 $x6436) $x6088))))
(let ((@x7292 (unit-resolution (mp ((_ quant-inst ?v0!17) (or $x3691 $x6436)) @x5843 $x6088) @x6892 $x6327)))
(let (($x6936 (not $x6886)))
(let ((@x6513 (hypothesis $x6936)))
(let ((@x8452 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 1 -1) (or $x7299 (not $x6327) $x6886 $x4315 (not $x4239))) @x6513 @x7292 @x6019 @x7839 $x7299)))
(let (($x6485 (not $x4478)))
(let (($x6889 (= ?x1866 ?x3104)))
(let (($x6250 (not $x6889)))
(let ((@x6214 ((_ th-lemma arith triangle-eq) (or $x6250 $x6886))))
(let ((@x6921 (unit-resolution (hypothesis $x6250) (monotonicity (hypothesis $x4478) $x6889) false)))
(let ((@x6939 (lemma @x6921 (or $x6485 $x6889))))
(let ((@x5812 (def-axiom (or (not $x4499) $x4478 $x3187))))
(let ((@x8341 (unit-resolution @x5812 (unit-resolution @x6939 (unit-resolution @x6214 @x6513 $x6250) $x6485) (hypothesis $x4499) $x3187)))
(let (($x7229 (= (or $x3570 (or $x255 (not $x3187) $x7220)) (or $x3570 $x255 (not $x3187) $x7220))))
(let ((@x7231 (mp ((_ quant-inst ?v0!17 v_b_v_G_1$) (or $x3570 (or $x255 (not $x3187) $x7220))) (rewrite $x7229) (or $x3570 $x255 (not $x3187) $x7220))))
(let ((@x8111 (lemma (unit-resolution @x7231 @x5748 @x6225 @x8341 @x8452 false) (or $x6886 (not $x4499)))))
(let ((@x8747 (unit-resolution ((_ th-lemma arith assign-bounds 1 1 1 -1 1) (or $x8588 (not $x8639) $x1869 $x6936 (not $x4177) (not $x3044))) (unit-resolution @x8111 @x8750 $x6886) @x6933 @x6930 (unit-resolution (def-axiom (or $x2760 (not $x1869))) @x8145 (not $x1869)) @x8778 $x8588)))
(let (($x6079 (or $x4445 $x6378)))
(let (($x6188 (or $x3683 $x4445 $x6378)))
(let (($x6219 (or (not (or $x6238 (<= (+ ?x6234 ?x1173 (* (- 1) ?x6374)) 0))) $x6378)))
(let (($x6365 (or $x3683 $x6219)))
(let (($x6539 (<= (+ ?x6234 ?x1173 (* (- 1) ?x6374)) 0)))
(let ((@x6817 (rewrite (= (+ ?x6234 ?x1173 (* (- 1) ?x6374)) (+ ?x1173 ?x6234 (* (- 1) ?x6374))))))
(let ((@x7239 (monotonicity @x6817 (= $x6539 (<= (+ ?x1173 ?x6234 (* (- 1) ?x6374)) 0)))))
(let ((@x4408 (trans @x7239 (rewrite (= (<= (+ ?x1173 ?x6234 (* (- 1) ?x6374)) 0) $x7540)) (= $x6539 $x7540))))
(let ((@x6718 (monotonicity (monotonicity @x4408 (= (or $x6238 $x6539) $x4492)) (= (not (or $x6238 $x6539)) $x4445))))
(let ((@x7376 (monotonicity (monotonicity @x6718 (= $x6219 $x6079)) (= $x6365 (or $x3683 $x6079)))))
(let ((@x7375 (mp ((_ quant-inst ?v1!16) $x6365) (trans @x7376 (rewrite (= (or $x3683 $x6079) $x6188)) (= $x6365 $x6188)) $x6188)))
(let ((@x8141 (unit-resolution (unit-resolution @x7375 @x5944 $x6079) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x8060 $x7372)) @x8747 $x8060) $x4445)))
(let (($x7378 (or $x6238 $x7540 $x7408)))
(let (($x7022 (or $x3675 $x6238 $x7540 $x7408)))
(let (($x6399 (or $x6238 $x6539 (= (+ ?x257 ?x6374 ?x6126) 0))))
(let (($x6139 (or $x3675 $x6399)))
(let ((@x7409 (monotonicity (rewrite (= (+ ?x257 ?x6374 ?x6126) ?x6400)) (= (= (+ ?x257 ?x6374 ?x6126) 0) $x7408))))
(let ((@x6535 (monotonicity (monotonicity @x4408 @x7409 (= $x6399 $x7378)) (= $x6139 (or $x3675 $x7378)))))
(let ((@x7425 (mp ((_ quant-inst ?v1!16) $x6139) (trans @x6535 (rewrite (= (or $x3675 $x7378) $x7022)) (= $x6139 $x7022)) $x7022)))
(let ((@x8177 (unit-resolution (unit-resolution @x7425 @x6588 $x7378) (unit-resolution (def-axiom (or $x4492 (not $x7540))) @x8141 (not $x7540)) (unit-resolution (def-axiom (or $x4492 $x7360)) @x8141 $x7360) $x7408)))
(let ((@x8386 ((_ th-lemma arith farkas 1 1 1 1 1 1) (unit-resolution (def-axiom (or $x2760 (not $x1869))) @x8145 (not $x1869)) (unit-resolution @x8111 @x8750 $x6886) @x6933 @x6930 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x7408) $x6319)) @x8177 $x6319) (unit-resolution @x8872 @x8586 $x7206) false)))
(let ((@x3365 (def-axiom (or $x3758 $x2765 $x3752))))
(let ((@x9306 (unit-resolution @x3365 (lemma @x8386 $x2760) (unit-resolution (def-axiom (or $x3761 $x3755)) @x9304 $x3755) $x3752)))
(let ((@x8028 (rewrite (= (or $x3717 (or $x4278 $x4127 $x4382)) (or $x3717 $x4278 $x4127 $x4382)))))
(let ((@x7980 (mp ((_ quant-inst v_b_v_G_1$ ?v0!20) (or $x3717 (or $x4278 $x4127 $x4382))) @x8028 (or $x3717 $x4278 $x4127 $x4382))))
(let ((@x9309 (unit-resolution @x7980 (unit-resolution (def-axiom (or $x3749 $x3712)) @x9306 $x3712) @x7413 (or $x4278 $x4382))))
(let (($x4508 (>= ?x4487 0)))
(let ((@x9314 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x4508 (not $x4569) (not $x3886))) @x6925 (or $x4508 (not $x4569)))))
(let ((@x9316 ((_ th-lemma arith eq-propagate -1 -1 -1 -1 -1 -1 1 1) (unit-resolution @x9314 (hypothesis $x4569) $x4508) @x9295 (unit-resolution @x9309 @x9302 $x4382) @x9300 @x6019 @x6933 @x6930 @x7839 $x5391)))
(let (($x5388 (not $x5387)))
(let (($x5389 (or $x5386 $x5388)))
(let ((@x7596 (mp ((_ quant-inst v_b_v_G_1$ ?v0!20) (or (not $x3480) $x5389)) (rewrite (= (or (not $x3480) $x5389) (or (not $x3480) $x5386 $x5388))) (or (not $x3480) $x5386 $x5388))))
(let ((@x9321 (unit-resolution (unit-resolution @x7596 @x3485 $x5389) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x5391) $x5387)) @x9316 $x5387) $x5386)))
(let ((@x8870 (unit-resolution (lemma (unit-resolution @x9321 @x9338 false) (or $x4400 $x3734 (not $x4569))) (unit-resolution (def-axiom (or $x3737 $x3729)) @x4391 $x3729) @x4467 $x4400)))
(let ((@x8892 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4400) $x5977)) @x8870 $x5977)))
(let ((?x4641 (?v1!7 ?v0!20)))
(let ((?x4648 (pair$ ?x4641 ?v0!20)))
(let ((?x4649 (b_G$ ?x4648)))
(let ((?x4650 (* (- 1) ?x4649)))
(let ((?x4642 (fun_app$c v_b_SP_G_1$ ?x4641)))
(let ((?x4643 (* (- 1) ?x4642)))
(let ((?x4651 (+ ?x4393 ?x4643 ?x4650)))
(let (($x8653 (>= ?x4651 0)))
(let (($x4652 (= ?x4651 0)))
(let (($x4653 (not $x4652)))
(let (($x4646 (fun_app$ v_b_Visited_G_1$ ?x4641)))
(let (($x4647 (not $x4646)))
(let ((?x4644 (+ ?x4393 ?x4643)))
(let (($x4645 (<= ?x4644 0)))
(let (($x4654 (or $x4645 $x4647 $x4653)))
(let (($x4655 (not $x4654)))
(let (($x4640 (<= (+ b_Infinity$ ?x4418) 0)))
(let (($x7886 (not $x4640)))
(let ((@x8893 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or (not $x5977) $x1914 $x7886)) @x8892 (unit-resolution (def-axiom (or $x3737 $x1915)) @x4391 $x1915) $x7886)))
(let ((@x7414 (rewrite (= (or $x3586 (or $x1909 $x4640 $x4655)) (or $x3586 $x1909 $x4640 $x4655)))))
(let ((@x7415 (mp ((_ quant-inst ?v0!20) (or $x3586 (or $x1909 $x4640 $x4655))) @x7414 (or $x3586 $x1909 $x4640 $x4655))))
(let ((@x8894 (unit-resolution @x7415 @x4545 (unit-resolution (def-axiom (or $x3737 $x1910)) @x4391 $x1910) (or $x4640 $x4655))))
(let ((@x8897 (unit-resolution @x8894 @x8893 $x4655)))
(let ((@x8280 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4653 $x8653)) (unit-resolution (def-axiom (or $x4654 $x4652)) @x8897 $x4652) $x8653)))
(let (($x8584 (<= ?x4651 0)))
(let ((@x7677 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4653 $x8584)) (unit-resolution (def-axiom (or $x4654 $x4652)) @x8897 $x4652) $x8584)))
(let (($x4689 (fun_app$ v_b_Visited_G_2$ ?x4641)))
(let ((@x6032 (monotonicity (symm (hypothesis $x266) (= ?x265 v_b_Visited_G_2$)) (= (fun_app$ ?x265 ?x4641) $x4689))))
(let ((@x6036 (monotonicity (symm @x6032 (= $x4689 (fun_app$ ?x265 ?x4641))) (= (not $x4689) (not (fun_app$ ?x265 ?x4641))))))
(let (($x5978 (fun_app$ ?x265 ?x4641)))
(let (($x5985 (= ?x4641 v_b_v_G_1$)))
(let (($x5988 (or $x5985 $x4646)))
(let (($x5991 (= $x5978 $x5988)))
(let (($x5994 (or $x4114 $x5991)))
(let ((@x5993 (monotonicity (rewrite (= (ite $x5985 true $x4646) $x5988)) (= (= $x5978 (ite $x5985 true $x4646)) $x5991))))
(let ((@x5998 (monotonicity @x5993 (= (or $x4114 (= $x5978 (ite $x5985 true $x4646))) $x5994))))
(let ((@x6001 (trans @x5998 (rewrite (= $x5994 $x5994)) (= (or $x4114 (= $x5978 (ite $x5985 true $x4646))) $x5994))))
(let ((@x6002 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true (?v1!7 ?v0!20)) (or $x4114 (= $x5978 (ite $x5985 true $x4646)))) @x6001 $x5994)))
(let ((@x6025 (unit-resolution (def-axiom (or (not $x5991) $x5978 (not $x5988))) (unit-resolution (def-axiom (or $x5988 $x4647)) (hypothesis $x4646) $x5988) (or (not $x5991) $x5978))))
(let ((@x6038 (unit-resolution (unit-resolution @x6025 (unit-resolution @x6002 @x3473 $x5991) $x5978) (mp (hypothesis (not $x4689)) @x6036 (not $x5978)) false)))
(let ((@x8188 (unit-resolution (lemma @x6038 (or $x4689 $x2935 $x4647)) (unit-resolution (def-axiom (or $x3809 $x266)) @x6181 $x266) (or $x4689 $x4647))))
(let ((@x8763 (unit-resolution @x8188 (unit-resolution (def-axiom (or $x4654 $x4646)) @x8897 $x4646) $x4689)))
(let ((?x4697 (v_b_SP_G_2$ ?x4641)))
(let ((?x4700 (* (- 1) ?x4697)))
(let ((?x4868 (+ ?x1911 ?x4700)))
(let (($x7732 (<= ?x4868 0)))
(let (($x9853 (not $x7732)))
(let ((?x4701 (+ ?x4642 ?x4700)))
(let (($x4708 (>= ?x4701 0)))
(let ((@x8509 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1) (or $x9853 $x4645 (not $x5977) (not $x4708))) @x8892 (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3691 $x4708)) @x6892 $x4708) (unit-resolution (def-axiom (or $x4654 (not $x4645))) @x8897 (not $x4645)) $x9853)))
(let ((?x7938 (+ ?x1911 ?x4650 ?x4700)))
(let (($x8292 (<= ?x7938 0)))
(let (($x5038 (<= ?x4701 0)))
(let (($x8272 (= ?x4642 ?x4697)))
(let ((@x9865 (symm (commutativity (= $x8272 (= ?x4697 ?x4642))) (= (= ?x4697 ?x4642) $x8272))))
(let (($x4698 (= ?x4697 ?x4642)))
(let ((@x8267 (rewrite (= (or $x3700 (or (not $x4689) $x4698)) (or $x3700 (not $x4689) $x4698)))))
(let ((@x8268 (mp ((_ quant-inst (?v1!7 ?v0!20)) (or $x3700 (or (not $x4689) $x4698))) @x8267 (or $x3700 (not $x4689) $x4698))))
(let ((@x9794 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x8272) $x5038)) (mp (unit-resolution @x8268 @x7618 (hypothesis $x4689) $x4698) @x9865 $x8272) $x5038)))
(let (($x7927 (<= ?x4419 0)))
(let (($x8009 (or $x3691 $x7927)))
(let ((@x8030 (monotonicity (rewrite (= (+ ?x4393 ?x1912) (+ ?x1912 ?x4393))) (= (>= (+ ?x4393 ?x1912) 0) (>= (+ ?x1912 ?x4393) 0)))))
(let ((@x8091 (trans @x8030 (rewrite (= (>= (+ ?x1912 ?x4393) 0) $x7927)) (= (>= (+ ?x4393 ?x1912) 0) $x7927))))
(let ((@x8854 (trans (monotonicity @x8091 (= (or $x3691 (>= (+ ?x4393 ?x1912) 0)) $x8009)) (rewrite (= $x8009 $x8009)) (= (or $x3691 (>= (+ ?x4393 ?x1912) 0)) $x8009))))
(let ((@x9860 (unit-resolution (mp ((_ quant-inst ?v0!20) (or $x3691 (>= (+ ?x4393 ?x1912) 0))) @x8854 $x8009) @x6892 $x7927)))
(let ((@x10107 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1) (or $x8292 (not $x8584) (not $x7927) (not $x5038))) @x9860 (hypothesis $x8584) @x9794 $x8292)))
(let (($x8954 (>= ?x7938 0)))
(let ((@x10056 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1) (or $x8954 (not $x8653) (not $x5977) (not $x4708))) (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3691 $x4708)) @x6892 $x4708) (hypothesis $x8653) (hypothesis $x5977) $x8954)))
(let (($x8665 (= ?x7938 0)))
(let (($x9226 (not $x8665)))
(let (($x4690 (not $x4689)))
(let (($x6495 (or $x3734 $x7732 $x4690 $x9226)))
(let (($x4857 (>= (+ ?x4697 ?x1912) 0)))
(let (($x4861 (or $x4857 $x4690 (not (= (+ ?x4697 ?x1912 ?x4649) 0)))))
(let (($x9201 (or $x3734 $x4861)))
(let ((@x8630 (monotonicity (rewrite (= (+ ?x4697 ?x1912 ?x4649) (+ ?x1912 ?x4649 ?x4697))) (= (= (+ ?x4697 ?x1912 ?x4649) 0) (= (+ ?x1912 ?x4649 ?x4697) 0)))))
(let ((@x8460 (trans @x8630 (rewrite (= (= (+ ?x1912 ?x4649 ?x4697) 0) $x8665)) (= (= (+ ?x4697 ?x1912 ?x4649) 0) $x8665))))
(let ((@x7449 (monotonicity (rewrite (= (+ ?x4697 ?x1912) (+ ?x1912 ?x4697))) (= $x4857 (>= (+ ?x1912 ?x4697) 0)))))
(let ((@x7972 (trans @x7449 (rewrite (= (>= (+ ?x1912 ?x4697) 0) $x7732)) (= $x4857 $x7732))))
(let ((@x4476 (monotonicity @x7972 (monotonicity @x8460 (= (not (= (+ ?x4697 ?x1912 ?x4649) 0)) $x9226)) (= $x4861 (or $x7732 $x4690 $x9226)))))
(let ((@x8430 (trans (monotonicity @x4476 (= $x9201 (or $x3734 (or $x7732 $x4690 $x9226)))) (rewrite (= (or $x3734 (or $x7732 $x4690 $x9226)) $x6495)) (= $x9201 $x6495))))
(let ((@x10015 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!20)) $x9201) @x8430 $x6495) (hypothesis $x3729) (hypothesis $x4689) (or $x7732 $x9226))))
(let ((@x10016 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x8665 (not $x8292) (not $x8954))) (unit-resolution @x10015 (hypothesis $x9853) $x9226) @x10056 @x10107 false)))
(let ((@x8164 (unit-resolution (lemma @x10016 (or $x7732 $x3734 $x4690 (not $x8584) (not $x8653) (not $x5977))) @x8509 (unit-resolution (def-axiom (or $x3737 $x3729)) @x4391 $x3729) @x8763 @x7677 @x8280 @x8892 false)))
(let ((@x3278 (def-axiom (or $x3746 $x2811 $x3740))))
(let ((@x8072 (unit-resolution @x3278 (unit-resolution (def-axiom (or $x3749 $x3743)) @x9306 $x3743) $x3743)))
(let (($x3378 (not $x1896)))
(let ((@x3380 (def-axiom (or $x2806 $x3378))))
(let ((@x8073 (unit-resolution @x3380 (unit-resolution @x8072 (lemma @x8164 $x3737) $x2811) $x3378)))
(let ((?x6619 (fun_app$c v_b_SP_G_1$ ?v1!18)))
(let (($x6615 (= ?x1892 ?x6619)))
(let (($x7620 (not $x6615)))
(let ((@x7607 (hypothesis $x2811)))
(let ((@x7608 (unit-resolution (def-axiom (or $x2806 $x1883)) @x7607 $x1883)))
(let ((@x7570 (hypothesis $x3378)))
(let (($x1889 (not $x1888)))
(let ((@x7615 (unit-resolution (def-axiom (or $x2806 $x1889)) @x7607 $x1889)))
(let ((?x6721 (* (- 1) ?x6619)))
(let ((?x5600 (+ ?x1892 ?x6721)))
(let (($x7353 (>= ?x5600 0)))
(let ((@x9059 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7620 $x7353)) (hypothesis $x6615) $x7353)))
(let ((?x7110 (pair$ v_b_v_G_1$ ?v0!19)))
(let ((?x7111 (b_G$ ?x7110)))
(let ((?x7100 (* (- 1) ?x7111)))
(let ((?x7554 (+ ?x1885 ?x7100)))
(let (($x7556 (>= ?x7554 0)))
(let (($x7003 (= ?x1885 ?x7111)))
(let (($x7243 (= ?v1!18 v_b_v_G_1$)))
(let (($x7246 (fun_app$ v_b_Visited_G_1$ ?v1!18)))
(let (($x6211 (not $x7246)))
(let (($x7248 (>= (+ ?x1885 ?x6619 (* (- 1) (fun_app$c v_b_SP_G_1$ ?v0!19))) 0)))
(let (($x7499 (not $x7248)))
(let ((@x7004 (hypothesis $x7353)))
(let ((?x7053 (fun_app$c v_b_SP_G_1$ ?v0!19)))
(let ((?x7074 (* (- 1) ?x7053)))
(let ((?x7075 (+ ?x1893 ?x7074)))
(let (($x7076 (<= ?x7075 0)))
(let (($x7084 (or $x3691 $x7076)))
(let ((@x7073 (monotonicity (rewrite (= (+ ?x7053 ?x1894) (+ ?x1894 ?x7053))) (= (>= (+ ?x7053 ?x1894) 0) (>= (+ ?x1894 ?x7053) 0)))))
(let ((@x7080 (trans @x7073 (rewrite (= (>= (+ ?x1894 ?x7053) 0) $x7076)) (= (>= (+ ?x7053 ?x1894) 0) $x7076))))
(let ((@x7090 (trans (monotonicity @x7080 (= (or $x3691 (>= (+ ?x7053 ?x1894) 0)) $x7084)) (rewrite (= $x7084 $x7084)) (= (or $x3691 (>= (+ ?x7053 ?x1894) 0)) $x7084))))
(let ((@x7496 (unit-resolution (mp ((_ quant-inst ?v0!19) (or $x3691 (>= (+ ?x7053 ?x1894) 0))) @x7090 $x7084) @x6892 $x7076)))
(let ((@x7501 (lemma ((_ th-lemma arith farkas 1 -1 -1 1) (hypothesis $x7248) @x7570 @x7496 @x7004 false) (or $x7499 $x1896 (not $x7353)))))
(let ((@x6992 (rewrite (= (or $x3578 (or $x6211 $x1888 $x7248)) (or $x3578 $x6211 $x1888 $x7248)))))
(let ((@x7051 (mp ((_ quant-inst ?v0!19 ?v1!18) (or $x3578 (or $x6211 $x1888 $x7248))) @x6992 (or $x3578 $x6211 $x1888 $x7248))))
(let ((@x9076 (unit-resolution (unit-resolution @x7051 @x4223 (hypothesis $x1889) (or $x6211 $x7248)) (unit-resolution @x7501 @x9059 @x7570 $x7499) $x6211)))
(let (($x7222 (or $x7243 $x7246)))
(let (($x6667 (fun_app$ ?x265 ?v1!18)))
(let (($x6740 (= $x6667 $x7222)))
(let (($x6746 (or $x4114 $x6740)))
(let ((@x6743 (monotonicity (rewrite (= (ite $x7243 true $x7246) $x7222)) (= (= $x6667 (ite $x7243 true $x7246)) $x6740))))
(let ((@x6845 (monotonicity @x6743 (= (or $x4114 (= $x6667 (ite $x7243 true $x7246))) $x6746))))
(let ((@x4954 (trans @x6845 (rewrite (= $x6746 $x6746)) (= (or $x4114 (= $x6667 (ite $x7243 true $x7246))) $x6746))))
(let ((@x6537 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!18) (or $x4114 (= $x6667 (ite $x7243 true $x7246)))) @x4954 $x6746)))
(let ((@x9160 (mp (hypothesis $x1883) (symm (monotonicity @x5875 (= $x6667 $x1883)) (= $x1883 $x6667)) $x6667)))
(let ((@x9163 (unit-resolution (def-axiom (or (not $x6740) (not $x6667) $x7222)) @x9160 (unit-resolution @x6537 @x3473 $x6740) $x7222)))
(let ((@x4955 (def-axiom (or (not $x7222) $x7243 $x7246))))
(let ((@x7000 (unit-resolution (hypothesis (not $x7003)) (monotonicity (monotonicity (hypothesis $x7243) (= ?x1884 ?x7110)) $x7003) false)))
(let ((@x7002 (lemma @x7000 (or (not $x7243) $x7003))))
(let ((@x7011 ((_ th-lemma arith triangle-eq) (or (not $x7003) $x7556))))
(let ((@x9060 (unit-resolution @x7011 (unit-resolution @x7002 (unit-resolution @x4955 @x9163 @x9076 $x7243) $x7003) $x7556)))
(let (($x7366 (<= (+ ?x257 ?x6721) 0)))
(let (($x8813 (or $x3665 $x7246 $x7366)))
(let (($x7357 (>= (+ ?x6619 ?x1173) 0)))
(let (($x7358 (or $x7246 $x7357)))
(let (($x8814 (or $x3665 $x7358)))
(let ((@x8805 (monotonicity (rewrite (= (+ ?x6619 ?x1173) (+ ?x1173 ?x6619))) (= $x7357 (>= (+ ?x1173 ?x6619) 0)))))
(let ((@x8809 (trans @x8805 (rewrite (= (>= (+ ?x1173 ?x6619) 0) $x7366)) (= $x7357 $x7366))))
(let ((@x8818 (monotonicity (monotonicity @x8809 (= $x7358 (or $x7246 $x7366))) (= $x8814 (or $x3665 (or $x7246 $x7366))))))
(let ((@x8822 (trans @x8818 (rewrite (= (or $x3665 (or $x7246 $x7366)) $x8813)) (= $x8814 $x8813))))
(let ((@x8620 (unit-resolution (mp ((_ quant-inst ?v1!18) $x8814) @x8822 $x8813) (unit-resolution (def-axiom (or $x3809 $x3660)) @x6181 $x3660) @x9076 $x7366)))
(let (($x7102 (<= (+ b_Infinity$ ?x7100) 0)))
(let (($x7158 (not $x7102)))
(let ((@x8621 (unit-resolution ((_ th-lemma arith assign-bounds 1 1) (or $x7158 $x1888 (not $x7556))) @x9060 (hypothesis $x1889) $x7158)))
(let ((?x7171 (+ ?x257 ?x1894 ?x7111)))
(let (($x7252 (>= ?x7171 0)))
(let (($x7575 (not $x7252)))
(let ((@x8781 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1 1) (or $x7575 $x1896 (not $x7353) (not $x7366) (not $x7556))) @x8620 @x9060 @x7570 @x9059 $x7575)))
(let (($x7117 (>= (+ ?x257 ?x7074 ?x7111) 0)))
(let (($x7161 (not $x7117)))
(let ((@x9234 ((_ th-lemma arith assign-bounds -1 -1 1 -1 1) (or $x7161 (not $x7076) $x1896 (not $x7353) (not $x7366) (not $x7556)))))
(let ((@x9235 (unit-resolution @x9234 (hypothesis $x7366) (hypothesis $x7556) @x7570 @x7004 @x7496 $x7161)))
(let ((@x9237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x7171 0)) $x7252)) (hypothesis $x7575) (not (= ?x7171 0)))))
(let (($x7174 (= ?x7171 0)))
(let (($x7184 (or $x7102 $x7117 $x7174)))
(let (($x7186 (or $x3675 $x7102 $x7117 $x7174)))
(let (($x7104 (<= (+ ?x7053 ?x1173 ?x7100) 0)))
(let (($x7165 (or $x7102 $x7104 (= (+ ?x257 ?x7111 ?x1894) 0))))
(let (($x7187 (or $x3675 $x7165)))
(let ((@x7183 (monotonicity (rewrite (= (+ ?x257 ?x7111 ?x1894) ?x7171)) (= (= (+ ?x257 ?x7111 ?x1894) 0) $x7174))))
(let ((@x7115 (monotonicity (rewrite (= (+ ?x7053 ?x1173 ?x7100) (+ ?x1173 ?x7053 ?x7100))) (= $x7104 (<= (+ ?x1173 ?x7053 ?x7100) 0)))))
(let ((@x7128 (trans @x7115 (rewrite (= (<= (+ ?x1173 ?x7053 ?x7100) 0) $x7117)) (= $x7104 $x7117))))
(let ((@x7205 (monotonicity (monotonicity @x7128 @x7183 (= $x7165 $x7184)) (= $x7187 (or $x3675 $x7184)))))
(let ((@x7250 (mp ((_ quant-inst ?v0!19) $x7187) (trans @x7205 (rewrite (= (or $x3675 $x7184) $x7186)) (= $x7187 $x7186)) $x7186)))
(let ((@x9238 (unit-resolution (unit-resolution @x7250 @x6588 $x7184) @x9237 @x9235 (hypothesis $x7158) false)))
(let ((@x8782 (unit-resolution (lemma @x9238 (or $x7252 $x7102 (not $x7366) (not $x7556) $x1896 (not $x7353))) @x8781 @x8621 @x8620 @x9060 @x7570 @x9059 false)))
(let ((@x8908 (unit-resolution (lemma @x8782 (or $x7620 $x1896 $x1888 $x2791)) @x7615 @x7570 @x7608 $x7620)))
(let ((@x7245 (mp ((_ quant-inst ?v1!18) (or $x3700 (or $x2791 $x6615))) (rewrite (= (or $x3700 (or $x2791 $x6615)) (or $x3700 $x2791 $x6615))) (or $x3700 $x2791 $x6615))))
(unit-resolution (lemma (unit-resolution @x7245 @x7618 @x7608 @x8908 false) (or $x2806 $x1896)) @x8073 (unit-resolution @x8072 (lemma @x8164 $x3737) $x2811) false

ad24f408c8d068cc8218aa0fd750dfcacc455689 2983 0
unsat
((set-logic AUFLIA)
(declare-fun ?v0!20 () B_Vertex$)
(declare-fun ?v0!19 () B_Vertex$)
(declare-fun ?v1!18 () B_Vertex$)
(declare-fun ?v0!17 () B_Vertex$)
(declare-fun ?v1!16 () B_Vertex$)
(declare-fun ?v0!15 () B_Vertex$)
(declare-fun ?v0!14 () B_Vertex$)
(declare-fun ?v0!13 () B_Vertex$)
(declare-fun ?v0!12 () B_Vertex$)
(declare-fun ?v0!11 () B_Vertex$)
(declare-fun ?v1!10 () B_Vertex$)
(declare-fun ?v1!9 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!8 () B_Vertex$)
(declare-fun ?v1!7 (B_Vertex$) B_Vertex$)
(declare-fun ?v1!6 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!5 () B_Vertex$)
(declare-fun ?v0!4 () B_Vertex$)
(declare-fun ?v1!3 () B_Vertex$)
(declare-fun ?v0!2 () B_Vertex$)
(declare-fun ?v1!1 () B_Vertex$)
(declare-fun ?v0!0 () B_Vertex$)
(proof
(let ((?x260 (fun_upd$ v_b_Visited_G_1$ v_b_v_G_1$ true)))
(let (($x5237 (fun_app$ ?x260 ?v0!20)))
(let (($x9037 (not $x5237)))
(let (($x261 (= v_b_Visited_G_2$ ?x260)))
(let (($x3724 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or (>= (+ ?x268 ?x1907) 0) $x295 (not $x2237)))))))) :pattern ( (v_b_SP_G_2$ ?v1) ) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!20) ) :qid k!38))
))
(let (($x3729 (not $x3724)))
(let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x1908 (+ b_Infinity$ ?x1907)))
(let (($x1909 (<= ?x1908 0)))
(let (($x1904 (= ?v0!20 b_Source$)))
(let (($x3715 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or $x295 $x917 $x1277))))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3720 (not $x3715)))
(let (($x3732 (or $x3720 $x1904 $x1909 $x3729)))
(let (($x3735 (not $x3732)))
(let ((?x1888 (v_b_SP_G_2$ ?v0!19)))
(let ((?x1889 (* (- 1) ?x1888)))
(let ((?x1887 (v_b_SP_G_2$ ?v1!18)))
(let ((?x1879 (pair$ ?v1!18 ?v0!19)))
(let ((?x1880 (b_G$ ?x1879)))
(let (($x1891 (>= (+ ?x1880 ?x1887 ?x1889) 0)))
(let (($x1883 (<= (+ b_Infinity$ (* (- 1) ?x1880)) 0)))
(let (($x1878 (fun_app$ v_b_Visited_G_2$ ?v1!18)))
(let (($x2786 (not $x1878)))
(let (($x2801 (or $x2786 $x1883 $x1891)))
(let (($x2806 (not $x2801)))
(let (($x3738 (or $x2806 $x3735)))
(let (($x3741 (not $x3738)))
(let (($x3707 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x2763 (not $x296)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x286 $x2763 $x1257))))) :pattern ( (v_b_SP_G_2$ ?v1) (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3712 (not $x3707)))
(let (($x3744 (or $x3712 $x3741)))
(let (($x3747 (not $x3744)))
(let (($x1864 (>= (+ (v_b_SP_G_2$ ?v1!16) (* (- 1) (v_b_SP_G_2$ ?v0!17))) 0)))
(let (($x1857 (fun_app$ v_b_Visited_G_2$ ?v0!17)))
(let (($x2740 (not $x1857)))
(let (($x1855 (fun_app$ v_b_Visited_G_2$ ?v1!16)))
(let (($x2755 (or $x1855 $x2740 $x1864)))
(let (($x2760 (not $x2755)))
(let (($x3750 (or $x2760 $x3747)))
(let (($x3753 (not $x3750)))
(let (($x3698 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(>= ?x268 0)) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3703 (not $x3698)))
(let (($x3756 (or $x3703 $x3753)))
(let (($x3759 (not $x3756)))
(let ((?x1841 (v_b_SP_G_2$ ?v0!15)))
(let (($x1842 (>= ?x1841 0)))
(let (($x1843 (not $x1842)))
(let (($x3762 (or $x1843 $x3759)))
(let (($x3765 (not $x3762)))
(let ((?x291 (v_b_SP_G_2$ b_Source$)))
(let (($x292 (= ?x291 0)))
(let (($x768 (not $x292)))
(let (($x3768 (or $x768 $x3765)))
(let (($x3771 (not $x3768)))
(let (($x3774 (or $x768 $x3771)))
(let (($x3777 (not $x3774)))
(let (($x3690 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x295 (not $x286)))
(or $x295 $x273)))))) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3695 (not $x3690)))
(let (($x3780 (or $x3695 $x3777)))
(let (($x3783 (not $x3780)))
(let ((?x1822 (fun_app$a v_b_SP_G_1$ ?v0!14)))
(let ((?x1821 (v_b_SP_G_2$ ?v0!14)))
(let (($x1823 (= ?x1821 ?x1822)))
(let (($x1824 (or (not (fun_app$ v_b_Visited_G_2$ ?v0!14)) $x1823)))
(let (($x1825 (not $x1824)))
(let (($x3786 (or $x1825 $x3783)))
(let (($x3789 (not $x3786)))
(let (($x3681 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3686 (not $x3681)))
(let (($x3792 (or $x3686 $x3789)))
(let (($x3795 (not $x3792)))
(let ((?x1804 (v_b_SP_G_2$ ?v0!13)))
(let ((?x1805 (* (- 1) ?x1804)))
(let ((?x1803 (fun_app$a v_b_SP_G_1$ ?v0!13)))
(let ((?x1806 (+ ?x1803 ?x1805)))
(let (($x1807 (>= ?x1806 0)))
(let (($x1808 (not $x1807)))
(let (($x3798 (or $x1808 $x3795)))
(let (($x3801 (not $x3798)))
(let (($x3673 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2712 (or $x1164 $x1170)))
(let (($x2713 (not $x2712)))
(or $x2713 $x273)))))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3678 (not $x3673)))
(let (($x3665 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)))
(or $x1164 $x1170 $x1180)))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3670 (not $x3665)))
(let (($x2930 (not $x261)))
(let (($x3655 (forall ((?v0 B_Vertex$) )(! (let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 (>= (+ ?x171 ?x1168) 0)))))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3660 (not $x3655)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x1207 (+ b_Infinity$ ?x1168)))
(let (($x1208 (<= ?x1207 0)))
(let (($x252 (fun_app$ v_b_Visited_G_1$ v_b_v_G_1$)))
(let ((?x1770 (fun_app$a v_b_SP_G_1$ ?v0!12)))
(let ((?x1771 (* (- 1) ?x1770)))
(let ((?x1772 (+ b_Infinity$ ?x1771)))
(let (($x1773 (<= ?x1772 0)))
(let (($x1768 (fun_app$ v_b_Visited_G_1$ ?v0!12)))
(let (($x3804 (or $x1768 $x1773 $x252 $x1208 $x3660 $x2930 $x3670 $x3678 $x3801)))
(let (($x3807 (not $x3804)))
(let ((?x242 (fun_app$a v_b_SP_G_3$ b_Source$)))
(let (($x243 (= ?x242 0)))
(let (($x3617 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(or $x1094 $x917 $x1135)))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3622 (not $x3617)))
(let (($x3625 (or $x3622 $x243)))
(let (($x3628 (not $x3625)))
(let ((?x1729 (fun_app$a v_b_SP_G_3$ ?v0!11)))
(let ((?x1730 (* (- 1) ?x1729)))
(let ((?x1721 (pair$ ?v1!10 ?v0!11)))
(let ((?x1722 (b_G$ ?x1721)))
(let ((?x1716 (fun_app$a v_b_SP_G_3$ ?v1!10)))
(let ((?x2201 (+ ?x1716 ?x1722 ?x1730)))
(let (($x2204 (>= ?x2201 0)))
(let (($x1725 (<= (+ b_Infinity$ (* (- 1) ?x1722)) 0)))
(let (($x1719 (<= (+ b_Infinity$ (* (- 1) ?x1716)) 0)))
(let (($x2640 (or $x1719 $x1725 $x2204)))
(let (($x2645 (not $x2640)))
(let (($x3631 (or $x2645 $x3628)))
(let (($x3634 (not $x3631)))
(let (($x3609 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x1094 $x2612)))))))) :pattern ( (fun_app$a v_b_SP_G_3$ ?v0) ) :qid k!38))
))
(let (($x3614 (not $x3609)))
(let (($x3637 (or $x3614 $x3634)))
(let (($x3640 (not $x3637)))
(let (($x3595 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x227 ?x1657) 0) (not $x2143)))))) :pattern ( (fun_app$a v_b_SP_G_3$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!8) ) :qid k!38))
))
(let (($x3600 (not $x3595)))
(let (($x1659 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0!8))) 0)))
(let (($x1654 (= ?v0!8 b_Source$)))
(let (($x3603 (or $x1654 $x1659 $x3600)))
(let (($x3606 (not $x3603)))
(let (($x3643 (or $x3606 $x3640)))
(let (($x3646 (not $x3643)))
(let (($x217 (= v_b_oldSP_G_1$ v_b_oldSP_G_0$)))
(let (($x2704 (not $x217)))
(let (($x214 (= v_b_SP_G_3$ v_b_SP_G_1$)))
(let (($x2703 (not $x214)))
(let (($x212 (= v_b_v_G_2$ v_b_v_G_0$)))
(let (($x2702 (not $x212)))
(let (($x209 (= v_b_Visited_G_3$ v_b_Visited_G_1$)))
(let (($x2701 (not $x209)))
(let (($x3585 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x997))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3590 (not $x3585)))
(let (($x3649 (or $x3590 $x2701 $x2702 $x2703 $x2704 $x3646)))
(let (($x3652 (not $x3649)))
(let (($x3810 (or $x3652 $x3807)))
(let (($x3813 (not $x3810)))
(let (($x3576 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2124)))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x997 $x2546)))))))) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3581 (not $x3576)))
(let (($x3568 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(or $x176 $x917 $x985))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3573 (not $x3568)))
(let (($x3560 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x175 (not (fun_app$ v_b_Visited_G_1$ ?v0)) $x1010)))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v1) (fun_app$ v_b_Visited_G_1$ ?v0) ) :qid k!38))
))
(let (($x3565 (not $x3560)))
(let (($x3551 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(>= ?x171 0)) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3556 (not $x3551)))
(let ((?x169 (fun_app$a v_b_SP_G_1$ b_Source$)))
(let (($x170 (= ?x169 0)))
(let (($x2947 (not $x170)))
(let (($x3542 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x942 $x2473)))))))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3547 (not $x3542)))
(let (($x3816 (or $x3547 $x2947 $x3556 $x3565 $x3573 $x3581 $x3813)))
(let (($x3819 (not $x3816)))
(let (($x3528 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :pattern ( (v_b_SP_G_0$ ?v1) ) :pattern ( (fun_app$ v_b_Visited_G_0$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!5) ) :qid k!38))
))
(let (($x3533 (not $x3528)))
(let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x1537 (+ b_Infinity$ ?x1536)))
(let (($x1538 (<= ?x1537 0)))
(let (($x1533 (= ?v0!5 b_Source$)))
(let (($x3536 (or $x1533 $x1538 $x3533)))
(let (($x1534 (not $x1533)))
(let ((@x5072 (unit-resolution (def-axiom (or $x3536 $x1534)) (hypothesis (not $x3536)) $x1534)))
(let (($x5500 (= b_Infinity$ ?x1535)))
(let (($x6555 (not $x5500)))
(let (($x1539 (not $x1538)))
(let ((@x5027 (unit-resolution (def-axiom (or $x3536 $x1539)) (hypothesis (not $x3536)) $x1539)))
(let ((@x5583 (symm (commutativity (= $x5500 (= ?x1535 b_Infinity$))) (= (= ?x1535 b_Infinity$) $x5500))))
(let (($x5648 (= ?x1535 b_Infinity$)))
(let (($x3488 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(or $x123 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x355 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(or $x123 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :qid k!38))
))
(let (($x123 (= ?0 b_Source$)))
(let (($x352 (or $x123 (= (v_b_SP_G_0$ ?0) b_Infinity$))))
(let (($x135 (forall ((?v0 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v0)))
(not $x133)) :qid k!38))
))
(let (($x349 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(or $x128 (= (v_b_SP_G_0$ ?v0) 0)))) :qid k!38))
))
(let (($x885 (and $x349 $x355 $x135)))
(let (($x1324 (forall ((?v0 B_Vertex$) )(! (let (($x1318 (exists ((?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(and $x1304 $x286 $x1301))))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1295 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))))
(or (not $x1295) $x1318))))) :qid k!38))
))
(let (($x1284 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1271 (and $x286 $x918)))
(let (($x1274 (not $x1271)))
(or $x1274 $x1277))))))))))) :qid k!38))
))
(let (($x1287 (not $x1284)))
(let (($x1327 (or $x1287 $x1324)))
(let (($x1330 (and $x1284 $x1327)))
(let (($x1265 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(or $x659 $x1257))))))) :qid k!38))
))
(let (($x1268 (not $x1265)))
(let (($x1333 (or $x1268 $x1330)))
(let (($x1336 (and $x1265 $x1333)))
(let (($x1251 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(>= ?x268 0)) :qid k!38))
))
(let (($x1254 (not $x1251)))
(let (($x1339 (or $x1254 $x1336)))
(let (($x1342 (and $x1251 $x1339)))
(let (($x1345 (or $x768 $x1342)))
(let (($x1348 (and $x292 $x1345)))
(let (($x647 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x295 (not $x286)))
(or $x295 $x273)))))) :qid k!38))
))
(let (($x780 (not $x647)))
(let (($x1351 (or $x780 $x1348)))
(let (($x1354 (and $x647 $x1351)))
(let (($x1242 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :qid k!38))
))
(let (($x1245 (not $x1242)))
(let (($x1357 (or $x1245 $x1354)))
(let (($x1360 (and $x1242 $x1357)))
(let (($x1194 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1174 (and (not $x1164) (not $x1170))))
(or $x1174 $x273))))))))) :qid k!38))
))
(let (($x1188 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1174 (and (not (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)) (not $x1170))))
(let (($x1177 (not $x1174)))
(or $x1177 $x1180))))))))) :qid k!38))
))
(let (($x1204 (forall ((?v0 B_Vertex$) )(! (let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 (>= (+ ?x171 ?x1168) 0)))))) :qid k!38))
))
(let (($x1209 (not $x1208)))
(let (($x253 (not $x252)))
(let (($x1075 (exists ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(and $x176 $x998))))) :qid k!38))
))
(let (($x1230 (and $x1075 $x253 $x1209 $x1204 $x261 $x1188 $x1194)))
(let (($x1235 (not $x1230)))
(let (($x1363 (or $x1235 $x1360)))
(let (($x1141 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x1129 (and $x1095 $x918)))
(let (($x1132 (not $x1129)))
(or $x1132 $x1135)))))))))) :qid k!38))
))
(let (($x1144 (not $x1141)))
(let (($x1147 (or $x1144 $x243)))
(let (($x1150 (and $x1141 $x1147)))
(let (($x1123 (forall ((?v0 B_Vertex$) )(! (let (($x1117 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(and (not (>= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)) (= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))) :qid k!38))
))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x1117)))))))) :qid k!38))
))
(let (($x1126 (not $x1123)))
(let (($x1153 (or $x1126 $x1150)))
(let (($x1156 (and $x1123 $x1153)))
(let (($x1078 (not $x1075)))
(let (($x1084 (and $x1078 $x209 $x212 $x214 $x217)))
(let (($x1089 (not $x1084)))
(let (($x1159 (or $x1089 $x1156)))
(let (($x1366 (and $x1159 $x1363)))
(let (($x1032 (forall ((?v0 B_Vertex$) )(! (let (($x1026 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x1012 (not $x1010)))
(and $x1012 $x175 $x1007))))))) :qid k!38))
))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x1026)))))))) :qid k!38))
))
(let (($x992 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x978 (and $x175 $x918)))
(let (($x981 (not $x978)))
(or $x981 $x985))))))))) :qid k!38))
))
(let (($x1040 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(or $x398 $x1010)))))))) :qid k!38))
))
(let (($x1046 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(>= ?x171 0)) :qid k!38))
))
(let (($x975 (forall ((?v0 B_Vertex$) )(! (let (($x969 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x952 (= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x902 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x955 (not $x902)))
(and $x955 $x133 $x952))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x969)))))) :qid k!38))
))
(let (($x1064 (and $x975 $x170 $x1046 $x1040 $x992 $x1032)))
(let (($x1069 (not $x1064)))
(let (($x1369 (or $x1069 $x1366)))
(let (($x1372 (and $x975 $x1369)))
(let (($x934 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x921 (and $x133 $x918)))
(let (($x924 (not $x921)))
(or $x924 $x928))))))))) :qid k!38))
))
(let (($x937 (not $x934)))
(let (($x1375 (or $x937 $x1372)))
(let (($x1378 (and $x934 $x1375)))
(let (($x909 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(let (($x377 (not $x146)))
(or $x377 $x902)))))) :qid k!38))
))
(let (($x912 (not $x909)))
(let (($x1381 (or $x912 $x1378)))
(let (($x1384 (and $x909 $x1381)))
(let (($x894 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(>= ?x124 0)) :qid k!38))
))
(let (($x897 (not $x894)))
(let (($x1387 (or $x897 $x1384)))
(let (($x1390 (and $x894 $x1387)))
(let ((?x141 (v_b_SP_G_0$ b_Source$)))
(let (($x142 (= ?x141 0)))
(let (($x864 (not $x142)))
(let (($x1393 (or $x864 $x1390)))
(let (($x1396 (and $x142 $x1393)))
(let (($x1402 (not (or (not $x885) $x1396))))
(let (($x315 (forall ((?v0 B_Vertex$) )(! (let (($x313 (exists ((?v1 B_Vertex$) )(! (let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x311 (and $x286 (= (v_b_SP_G_2$ ?v0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x311)))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x308 (and $x128 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(=> $x308 $x313))))) :qid k!38))
))
(let (($x316 (and $x315 false)))
(let (($x317 (=> $x316 true)))
(let (($x318 (and $x315 $x317)))
(let (($x306 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x303 (+ ?x268 ?x152)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x302 (and $x286 $x153)))
(=> $x302 (<= ?x298 ?x303))))))))) :qid k!38))
))
(let (($x319 (=> $x306 $x318)))
(let (($x301 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(=> $x297 $x299)))))))) :qid k!38))
))
(let (($x321 (=> $x301 (and $x306 $x319))))
(let (($x294 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(<= 0 ?x268)) :qid k!38))
))
(let (($x323 (=> $x294 (and $x301 $x321))))
(let (($x325 (=> $x292 (and $x294 $x323))))
(let (($x288 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(=> $x286 $x273))))) :qid k!38))
))
(let (($x290 (and $x288 (and true true))))
(let (($x327 (=> $x290 (and $x292 $x325))))
(let (($x285 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(<= ?x268 ?x171))) :qid k!38))
))
(let (($x329 (=> $x285 (and $x288 $x327))))
(let (($x275 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 ?x171))))
(let (($x272 (not $x267)))
(=> $x272 $x273))))))))) :qid k!38))
))
(let (($x271 (forall ((?v0 B_Vertex$) )(! (let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x269 (= ?x268 ?x265)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 (fun_app$a v_b_SP_G_1$ ?v0)))))
(=> $x267 $x269))))))) :qid k!38))
))
(let (($x258 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x256 (<= ?x254 ?x171)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(=> $x176 $x256)))))) :qid k!38))
))
(let (($x255 (< ?x254 b_Infinity$)))
(let (($x206 (exists ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(and $x176 $x188))))) :qid k!38))
))
(let (($x281 (and $x206 (and $x253 (and $x255 (and $x258 (and $x261 (and $x271 $x275))))))))
(let (($x282 (and true $x281)))
(let (($x283 (and true $x282)))
(let (($x331 (=> $x283 (and $x285 $x329))))
(let (($x245 (and $x243 (=> $x243 true))))
(let (($x241 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x238 (and $x228 $x153)))
(=> $x238 (<= ?x230 ?x232))))))))) :qid k!38))
))
(let (($x246 (=> $x241 $x245)))
(let (($x237 (forall ((?v0 B_Vertex$) )(! (let (($x235 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 (= ?x230 ?x232))))))) :qid k!38))
))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x229 (and $x128 $x228)))
(=> $x229 $x235))))))) :qid k!38))
))
(let (($x248 (=> $x237 (and $x241 $x246))))
(let (($x222 (and true (and $x209 (and $x212 (and $x214 (and $x217 true)))))))
(let (($x223 (and true $x222)))
(let (($x207 (not $x206)))
(let (($x225 (and true (and $x207 $x223))))
(let (($x226 (and true $x225)))
(let (($x250 (=> $x226 (and $x237 $x248))))
(let (($x196 (forall ((?v0 B_Vertex$) )(! (let (($x194 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 (and $x175 (= ?x179 ?x184))))))))) :qid k!38))
))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x189 (and $x128 $x188)))
(=> $x189 $x194))))))) :qid k!38))
))
(let (($x197 (and $x196 true)))
(let (($x187 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x183 (and $x175 $x153)))
(=> $x183 (<= ?x179 ?x184))))))))) :qid k!38))
))
(let (($x182 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(=> $x178 $x180)))))))) :qid k!38))
))
(let (($x173 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(<= 0 ?x171)) :qid k!38))
))
(let (($x202 (and true (and $x170 (and $x173 (and $x182 (and $x187 $x197)))))))
(let (($x203 (and true $x202)))
(let (($x167 (forall ((?v0 B_Vertex$) )(! (let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x163))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x160 (and $x128 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(=> $x160 $x165))))) :qid k!38))
))
(let (($x333 (=> (and $x167 $x203) (and $x250 $x331))))
(let (($x158 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x154 (and $x133 $x153)))
(=> $x154 $x156))))))) :qid k!38))
))
(let (($x335 (=> $x158 (and $x167 $x333))))
(let (($x150 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v1)))
(let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(=> $x146 $x148))))))) :qid k!38))
))
(let (($x337 (=> $x150 (and $x158 $x335))))
(let (($x144 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(<= 0 ?x124)) :qid k!38))
))
(let (($x339 (=> $x144 (and $x150 $x337))))
(let (($x341 (=> $x142 (and $x144 $x339))))
(let (($x131 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(=> $x128 (= (v_b_SP_G_0$ ?v0) b_Infinity$)))) :qid k!38))
))
(let (($x127 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(=> $x123 (= (v_b_SP_G_0$ ?v0) 0))) :qid k!38))
))
(let (($x139 (and true (and $x127 (and $x131 (and $x135 true))))))
(let (($x140 (and true $x139)))
(let (($x343 (=> $x140 (and $x142 $x341))))
(let (($x344 (not $x343)))
(let (($x705 (forall ((?v0 B_Vertex$) )(! (let (($x693 (exists ((?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x684 (= ?x298 ?x666)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x687))))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x308 (and $x128 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(or (not $x308) $x693))))) :qid k!38))
))
(let (($x681 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x669 (<= ?x298 ?x666)))
(or (not (and (fun_app$ v_b_Visited_G_2$ ?v1) (< ?x152 b_Infinity$))) $x669)))))) :qid k!38))
))
(let (($x733 (or (not $x681) $x705)))
(let (($x738 (and $x681 $x733)))
(let (($x663 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(or $x659 $x299))))))))) :qid k!38))
))
(let (($x745 (or (not $x663) $x738)))
(let (($x750 (and $x663 $x745)))
(let (($x757 (or (not $x294) $x750)))
(let (($x762 (and $x294 $x757)))
(let (($x769 (or $x768 $x762)))
(let (($x774 (and $x292 $x769)))
(let (($x781 (or $x780 $x774)))
(let (($x786 (and $x647 $x781)))
(let (($x793 (or (not $x285) $x786)))
(let (($x798 (and $x285 $x793)))
(let (($x612 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 ?x171))))
(or $x267 $x273)))))))) :qid k!38))
))
(let (($x606 (forall ((?v0 B_Vertex$) )(! (let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x269 (= ?x268 ?x265)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 (fun_app$a v_b_SP_G_1$ ?v0)))))
(let (($x272 (not $x267)))
(or $x272 $x269)))))))) :qid k!38))
))
(let (($x615 (and $x606 $x612)))
(let (($x618 (and $x261 $x615)))
(let (($x600 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x256 (<= ?x254 ?x171)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x256))))) :qid k!38))
))
(let (($x621 (and $x600 $x618)))
(let (($x624 (and $x255 $x621)))
(let (($x627 (and $x253 $x624)))
(let (($x630 (and $x206 $x627)))
(let (($x805 (or (not $x630) $x798)))
(let (($x552 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x540 (<= ?x230 ?x516)))
(or (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x540)))))) :qid k!38))
))
(let (($x568 (or (not $x552) $x243)))
(let (($x573 (and $x552 $x568)))
(let (($x537 (forall ((?v0 B_Vertex$) )(! (let (($x525 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 $x519))))))) :qid k!38))
))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x229 (and $x128 $x228)))
(or (not $x229) $x525))))))) :qid k!38))
))
(let (($x580 (or (not $x537) $x573)))
(let (($x585 (and $x537 $x580)))
(let (($x592 (or (not (and $x207 (and $x209 (and $x212 (and $x214 $x217))))) $x585)))
(let (($x810 (and $x592 $x805)))
(let (($x444 (forall ((?v0 B_Vertex$) )(! (let (($x432 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x423 (= ?x179 ?x405)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 $x426))))))))) :qid k!38))
))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x189 (and $x128 $x188)))
(or (not $x189) $x432))))))) :qid k!38))
))
(let (($x420 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x408 (<= ?x179 ?x405)))
(or (not (and (fun_app$ v_b_Visited_G_1$ ?v1) (< ?x152 b_Infinity$))) $x408)))))) :qid k!38))
))
(let (($x454 (and $x420 $x444)))
(let (($x402 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(or $x398 $x180))))))))) :qid k!38))
))
(let (($x457 (and $x402 $x454)))
(let (($x460 (and $x173 $x457)))
(let (($x463 (and $x170 $x460)))
(let (($x395 (forall ((?v0 B_Vertex$) )(! (let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x163))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x160 (and $x128 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(or (not $x160) $x165))))) :qid k!38))
))
(let (($x477 (and $x395 $x463)))
(let (($x817 (or (not $x477) $x810)))
(let (($x822 (and $x395 $x817)))
(let (($x388 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x154 (and $x133 $x153)))
(or (not $x154) $x156))))))) :qid k!38))
))
(let (($x829 (or (not $x388) $x822)))
(let (($x834 (and $x388 $x829)))
(let (($x381 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v1)))
(let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(let (($x377 (not $x146)))
(or $x377 $x148)))))))) :qid k!38))
))
(let (($x841 (or (not $x381) $x834)))
(let (($x846 (and $x381 $x841)))
(let (($x853 (or (not $x144) $x846)))
(let (($x858 (and $x144 $x853)))
(let (($x865 (or $x864 $x858)))
(let (($x870 (and $x142 $x865)))
(let (($x877 (or (not (and $x349 (and $x355 $x135))) $x870)))
(let (($x1318 (exists ((?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(and $x1304 $x286 $x1301))))))))) :qid k!38))
))
(let (($x128 (not $x123)))
(let (($x1295 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?0))) 0)))))
(let (($x693 (exists ((?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?0)))
(let (($x684 (= ?x298 ?x666)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x687))))))))) :qid k!38))
))
(let (($x700 (or (not (and $x128 (< (v_b_SP_G_2$ ?0) b_Infinity$))) $x693)))
(let ((?x298 (v_b_SP_G_2$ ?1)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?0)))
(let ((?x152 (b_G$ (pair$ ?0 ?1))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?0)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(let (($x1313 (and $x1304 $x286 $x1301)))
(let ((?x666 (+ ?x152 ?x268)))
(let (($x684 (= ?x298 ?x666)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(let (($x690 (and $x309 $x687)))
(let ((@x1312 (monotonicity (rewrite (= $x309 $x1304)) (monotonicity (rewrite (= $x684 $x1301)) (= $x687 (and $x286 $x1301))) (= $x690 (and $x1304 (and $x286 $x1301))))))
(let ((@x1317 (trans @x1312 (rewrite (= (and $x1304 (and $x286 $x1301)) $x1313)) (= $x690 $x1313))))
(let (($x1293 (= (< ?x268 b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) ?x268)) 0)))))
(let ((@x1297 (monotonicity (rewrite $x1293) (= (and $x128 (< ?x268 b_Infinity$)) $x1295))))
(let ((@x1300 (monotonicity @x1297 (= (not (and $x128 (< ?x268 b_Infinity$))) (not $x1295)))))
(let ((@x1323 (monotonicity @x1300 (quant-intro @x1317 (= $x693 $x1318)) (= $x700 (or (not $x1295) $x1318)))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x1271 (and $x286 $x918)))
(let (($x1274 (not $x1271)))
(let (($x1281 (or $x1274 $x1277)))
(let (($x669 (<= ?x298 ?x666)))
(let (($x676 (or (not (and $x286 (< ?x152 b_Infinity$))) $x669)))
(let ((@x920 (rewrite (= (< ?x152 b_Infinity$) $x918))))
(let ((@x1276 (monotonicity (monotonicity @x920 (= (and $x286 (< ?x152 b_Infinity$)) $x1271)) (= (not (and $x286 (< ?x152 b_Infinity$))) $x1274))))
(let ((@x1286 (quant-intro (monotonicity @x1276 (rewrite (= $x669 $x1277)) (= $x676 $x1281)) (= $x681 $x1284))))
(let ((@x1329 (monotonicity (monotonicity @x1286 (= (not $x681) $x1287)) (quant-intro @x1323 (= $x705 $x1324)) (= $x733 $x1327))))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(let (($x1262 (or $x659 $x1257)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x660 (or $x659 $x299)))
(let ((@x1267 (quant-intro (monotonicity (rewrite (= $x299 $x1257)) (= $x660 $x1262)) (= $x663 $x1265))))
(let ((@x1335 (monotonicity (monotonicity @x1267 (= (not $x663) $x1268)) (monotonicity @x1286 @x1329 (= $x738 $x1330)) (= $x745 $x1333))))
(let ((@x1253 (quant-intro (rewrite (= (<= 0 ?x268) (>= ?x268 0))) (= $x294 $x1251))))
(let ((@x1341 (monotonicity (monotonicity @x1253 (= (not $x294) $x1254)) (monotonicity @x1267 @x1335 (= $x750 $x1336)) (= $x757 $x1339))))
(let ((@x1347 (monotonicity (monotonicity @x1253 @x1341 (= $x762 $x1342)) (= $x769 $x1345))))
(let ((@x1356 (monotonicity (monotonicity (monotonicity @x1347 (= $x774 $x1348)) (= $x781 $x1351)) (= $x786 $x1354))))
(let (($x1238 (>= (+ (fun_app$a v_b_SP_G_1$ ?0) (* (- 1) ?x268)) 0)))
(let ((@x1244 (quant-intro (rewrite (= (<= ?x268 (fun_app$a v_b_SP_G_1$ ?0)) $x1238)) (= $x285 $x1242))))
(let ((@x1359 (monotonicity (monotonicity @x1244 (= (not $x285) $x1245)) @x1356 (= $x793 $x1357))))
(let (($x1227 (and $x1075 (and $x253 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let (($x1225 (= $x627 (and $x253 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1174 (and (not $x1164) (not $x1170))))
(let (($x1191 (or $x1174 $x273)))
(let (($x267 (and (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (< (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x171))))
(let (($x609 (or $x267 $x273)))
(let ((@x1173 (rewrite (= (< (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x171) (not $x1170)))))
(let ((@x1167 (rewrite (= (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (not $x1164)))))
(let ((@x1193 (monotonicity (monotonicity @x1167 @x1173 (= $x267 $x1174)) (= $x609 $x1191))))
(let (($x1180 (= (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0)) (* (- 1) ?x268)) 0)))
(let (($x1177 (not $x1174)))
(let (($x1185 (or $x1177 $x1180)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?0))))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x269 (= ?x268 ?x265)))
(let (($x272 (not $x267)))
(let (($x603 (or $x272 $x269)))
(let ((@x1179 (monotonicity (monotonicity @x1167 @x1173 (= $x267 $x1174)) (= $x272 $x1177))))
(let ((@x1190 (quant-intro (monotonicity @x1179 (rewrite (= $x269 $x1180)) (= $x603 $x1185)) (= $x606 $x1188))))
(let ((@x1214 (monotonicity @x1190 (quant-intro @x1193 (= $x612 $x1194)) (= $x615 (and $x1188 $x1194)))))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?0)))
(let (($x1201 (or $x175 (>= (+ ?x171 ?x1168) 0))))
(let (($x256 (<= ?x254 ?x171)))
(let (($x597 (or $x175 $x256)))
(let ((@x1203 (monotonicity (rewrite (= $x256 (>= (+ ?x171 ?x1168) 0))) (= $x597 $x1201))))
(let ((@x1220 (monotonicity (quant-intro @x1203 (= $x600 $x1204)) (monotonicity @x1214 (= $x618 (and $x261 (and $x1188 $x1194)))) (= $x621 (and $x1204 (and $x261 (and $x1188 $x1194)))))))
(let ((@x1223 (monotonicity (rewrite (= $x255 $x1209)) @x1220 (= $x624 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x998 (not $x997)))
(let (($x176 (not $x175)))
(let (($x1072 (and $x176 $x998)))
(let ((@x1074 (monotonicity (rewrite (= (< ?x171 b_Infinity$) $x998)) (= (and $x176 (< ?x171 b_Infinity$)) $x1072))))
(let ((@x1229 (monotonicity (quant-intro @x1074 (= $x206 $x1075)) (monotonicity @x1223 $x1225) (= $x630 $x1227))))
(let ((@x1237 (monotonicity (trans @x1229 (rewrite (= $x1227 $x1230)) (= $x630 $x1230)) (= (not $x630) $x1235))))
(let ((@x1365 (monotonicity @x1237 (monotonicity @x1244 @x1359 (= $x798 $x1360)) (= $x805 $x1363))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?1))) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x1129 (and $x1095 $x918)))
(let (($x1132 (not $x1129)))
(let (($x1138 (or $x1132 $x1135)))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?1)))
(let (($x540 (<= ?x230 ?x516)))
(let (($x547 (or (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x540)))
(let ((@x1131 (monotonicity (rewrite (= (< ?x227 b_Infinity$) $x1095)) @x920 (= (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$)) $x1129))))
(let ((@x1134 (monotonicity @x1131 (= (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x1132))))
(let ((@x1143 (quant-intro (monotonicity @x1134 (rewrite (= $x540 $x1135)) (= $x547 $x1138)) (= $x552 $x1141))))
(let ((@x1149 (monotonicity (monotonicity @x1143 (= (not $x552) $x1144)) (= $x568 $x1147))))
(let (($x1117 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(and (not (>= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?0))) 0)) (= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?0))) 0)))) :qid k!38))
))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(let (($x1120 (or $x1101 $x1117)))
(let (($x525 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 $x519))))))) :qid k!38))
))
(let (($x532 (or (not (and $x128 (< ?x227 b_Infinity$))) $x525)))
(let (($x1114 (and (not (>= (+ ?x227 (* (- 1) ?x230)) 0)) (= (+ ?x152 ?x227 (* (- 1) ?x230)) 0))))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(let (($x522 (and $x231 $x519)))
(let ((@x1116 (monotonicity (rewrite (= $x231 (not (>= (+ ?x227 (* (- 1) ?x230)) 0)))) (rewrite (= $x519 (= (+ ?x152 ?x227 (* (- 1) ?x230)) 0))) (= $x522 $x1114))))
(let ((@x1100 (monotonicity (rewrite (= (< ?x227 b_Infinity$) $x1095)) (= (and $x128 (< ?x227 b_Infinity$)) $x1098))))
(let ((@x1122 (monotonicity (monotonicity @x1100 (= (not (and $x128 (< ?x227 b_Infinity$))) $x1101)) (quant-intro @x1116 (= $x525 $x1117)) (= $x532 $x1120))))
(let ((@x1128 (monotonicity (quant-intro @x1122 (= $x537 $x1123)) (= (not $x537) $x1126))))
(let ((@x1155 (monotonicity @x1128 (monotonicity @x1143 @x1149 (= $x573 $x1150)) (= $x580 $x1153))))
(let ((@x1086 (rewrite (= (and $x1078 (and $x209 (and $x212 (and $x214 $x217)))) $x1084))))
(let (($x488 (and $x209 (and $x212 (and $x214 $x217)))))
(let (($x502 (and $x207 $x488)))
(let ((@x1083 (monotonicity (monotonicity (quant-intro @x1074 (= $x206 $x1075)) (= $x207 $x1078)) (= $x502 (and $x1078 $x488)))))
(let ((@x1091 (monotonicity (trans @x1083 @x1086 (= $x502 $x1084)) (= (not $x502) $x1089))))
(let ((@x1161 (monotonicity @x1091 (monotonicity (quant-intro @x1122 (= $x537 $x1123)) @x1155 (= $x585 $x1156)) (= $x592 $x1159))))
(let (($x1065 (= (and $x975 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))) $x1064)))
(let (($x1062 (= $x477 (and $x975 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))))))
(let (($x1026 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?0))) 0)))
(let (($x1012 (not $x1010)))
(and $x1012 $x175 $x1007))))))) :qid k!38))
))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(let (($x1029 (or $x1004 $x1026)))
(let (($x432 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x423 (= ?x179 ?x405)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 $x426))))))))) :qid k!38))
))
(let (($x439 (or (not (and $x128 (< ?x171 b_Infinity$))) $x432)))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?1))) 0)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?1))) 0)))
(let (($x1012 (not $x1010)))
(let (($x1021 (and $x1012 $x175 $x1007)))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?1)))
(let (($x423 (= ?x179 ?x405)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(let (($x429 (and $x190 $x426)))
(let ((@x1020 (monotonicity (rewrite (= $x190 $x1012)) (monotonicity (rewrite (= $x423 $x1007)) (= $x426 (and $x175 $x1007))) (= $x429 (and $x1012 (and $x175 $x1007))))))
(let ((@x1025 (trans @x1020 (rewrite (= (and $x1012 (and $x175 $x1007)) $x1021)) (= $x429 $x1021))))
(let ((@x1003 (monotonicity (rewrite (= (< ?x171 b_Infinity$) $x998)) (= (and $x128 (< ?x171 b_Infinity$)) $x1001))))
(let ((@x1031 (monotonicity (monotonicity @x1003 (= (not (and $x128 (< ?x171 b_Infinity$))) $x1004)) (quant-intro @x1025 (= $x432 $x1026)) (= $x439 $x1029))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) ?x179)) 0)))
(let (($x978 (and $x175 $x918)))
(let (($x981 (not $x978)))
(let (($x989 (or $x981 $x985)))
(let (($x408 (<= ?x179 ?x405)))
(let (($x415 (or (not (and $x175 (< ?x152 b_Infinity$))) $x408)))
(let ((@x983 (monotonicity (monotonicity @x920 (= (and $x175 (< ?x152 b_Infinity$)) $x978)) (= (not (and $x175 (< ?x152 b_Infinity$))) $x981))))
(let ((@x994 (quant-intro (monotonicity @x983 (rewrite (= $x408 $x985)) (= $x415 $x989)) (= $x420 $x992))))
(let ((@x1051 (monotonicity @x994 (quant-intro @x1031 (= $x444 $x1032)) (= $x454 (and $x992 $x1032)))))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?1)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(let (($x1037 (or $x398 $x1010)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x399 (or $x398 $x180)))
(let ((@x1042 (quant-intro (monotonicity (rewrite (= $x180 $x1010)) (= $x399 $x1037)) (= $x402 $x1040))))
(let ((@x1048 (quant-intro (rewrite (= (<= 0 ?x171) (>= ?x171 0))) (= $x173 $x1046))))
(let ((@x1057 (monotonicity @x1048 (monotonicity @x1042 @x1051 (= $x457 (and $x1040 (and $x992 $x1032)))) (= $x460 (and $x1046 (and $x1040 (and $x992 $x1032)))))))
(let ((@x1060 (monotonicity @x1057 (= $x463 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))))))
(let (($x969 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x952 (= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?0)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x902 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?0))) 0)))
(let (($x955 (not $x902)))
(and $x955 $x133 $x952))))))) :qid k!38))
))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let (($x949 (not $x946)))
(let (($x972 (or $x949 $x969)))
(let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?0)) $x163))) :qid k!38))
))
(let (($x392 (or (not (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x165)))
(let (($x952 (= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?0)))
(let (($x902 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1))) 0)))
(let (($x955 (not $x902)))
(let (($x964 (and $x955 $x133 $x952)))
(let (($x164 (and (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) (and $x133 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152))))))
(let (($x959 (= (and $x133 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152))) (and $x133 $x952))))
(let ((@x954 (rewrite (= (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152)) $x952))))
(let ((@x963 (monotonicity (rewrite (= (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) $x955)) (monotonicity @x954 $x959) (= $x164 (and $x955 (and $x133 $x952))))))
(let ((@x968 (trans @x963 (rewrite (= (and $x955 (and $x133 $x952)) $x964)) (= $x164 $x964))))
(let (($x944 (= (< (v_b_SP_G_0$ ?0) b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let ((@x948 (monotonicity (rewrite $x944) (= (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$)) $x946))))
(let ((@x951 (monotonicity @x948 (= (not (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x949))))
(let ((@x977 (quant-intro (monotonicity @x951 (quant-intro @x968 (= $x165 $x969)) (= $x392 $x972)) (= $x395 $x975))))
(let ((@x1071 (monotonicity (trans (monotonicity @x977 @x1060 $x1062) (rewrite $x1065) (= $x477 $x1064)) (= (not $x477) $x1069))))
(let ((@x1371 (monotonicity @x1071 (monotonicity @x1161 @x1365 (= $x810 $x1366)) (= $x817 $x1369))))
(let (($x928 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x152) 0)))
(let (($x921 (and $x133 $x918)))
(let (($x924 (not $x921)))
(let (($x931 (or $x924 $x928)))
(let ((?x147 (v_b_SP_G_0$ ?1)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?0) ?x152))))
(let (($x385 (or (not (and $x133 (< ?x152 b_Infinity$))) $x156)))
(let ((@x926 (monotonicity (monotonicity @x920 (= (and $x133 (< ?x152 b_Infinity$)) $x921)) (= (not (and $x133 (< ?x152 b_Infinity$))) $x924))))
(let ((@x936 (quant-intro (monotonicity @x926 (rewrite (= $x156 $x928)) (= $x385 $x931)) (= $x388 $x934))))
(let ((@x1377 (monotonicity (monotonicity @x936 (= (not $x388) $x937)) (monotonicity @x977 @x1371 (= $x822 $x1372)) (= $x829 $x1375))))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?1))))
(let (($x377 (not $x146)))
(let (($x906 (or $x377 $x902)))
(let ((?x124 (v_b_SP_G_0$ ?0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x378 (or $x377 $x148)))
(let ((@x911 (quant-intro (monotonicity (rewrite (= $x148 $x902)) (= $x378 $x906)) (= $x381 $x909))))
(let ((@x1383 (monotonicity (monotonicity @x911 (= (not $x381) $x912)) (monotonicity @x936 @x1377 (= $x834 $x1378)) (= $x841 $x1381))))
(let ((@x896 (quant-intro (rewrite (= (<= 0 ?x124) (>= ?x124 0))) (= $x144 $x894))))
(let ((@x1389 (monotonicity (monotonicity @x896 (= (not $x144) $x897)) (monotonicity @x911 @x1383 (= $x846 $x1384)) (= $x853 $x1387))))
(let ((@x1395 (monotonicity (monotonicity @x896 @x1389 (= $x858 $x1390)) (= $x865 $x1393))))
(let ((@x890 (monotonicity (rewrite (= (and $x349 (and $x355 $x135)) $x885)) (= (not (and $x349 (and $x355 $x135))) (not $x885)))))
(let ((@x1401 (monotonicity @x890 (monotonicity @x1395 (= $x870 $x1396)) (= $x877 (or (not $x885) $x1396)))))
(let (($x313 (exists ((?v1 B_Vertex$) )(! (let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x311 (and $x286 (= (v_b_SP_G_2$ ?0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(let ((?x298 (v_b_SP_G_2$ ?0)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x311)))))) :qid k!38))
))
(let (($x308 (and $x128 (< ?x268 b_Infinity$))))
(let (($x314 (=> $x308 $x313)))
(let ((@x686 (monotonicity (rewrite (= (+ ?x268 ?x152) ?x666)) (= (= ?x298 (+ ?x268 ?x152)) $x684))))
(let ((@x692 (monotonicity (monotonicity @x686 (= (and $x286 (= ?x298 (+ ?x268 ?x152))) $x687)) (= (and $x309 (and $x286 (= ?x298 (+ ?x268 ?x152)))) $x690))))
(let ((@x698 (monotonicity (quant-intro @x692 (= $x313 $x693)) (= $x314 (=> $x308 $x693)))))
(let ((@x707 (quant-intro (trans @x698 (rewrite (= (=> $x308 $x693) $x700)) (= $x314 $x700)) (= $x315 $x705))))
(let ((@x714 (trans (monotonicity @x707 (= $x316 (and $x705 false))) (rewrite (= (and $x705 false) false)) (= $x316 false))))
(let ((@x721 (trans (monotonicity @x714 (= $x317 (=> false true))) (rewrite (= (=> false true) true)) (= $x317 true))))
(let ((@x728 (trans (monotonicity @x707 @x721 (= $x318 (and $x705 true))) (rewrite (= (and $x705 true) $x705)) (= $x318 $x705))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x302 (and $x286 $x153)))
(let (($x305 (=> $x302 (<= ?x298 (+ ?x268 ?x152)))))
(let ((@x671 (monotonicity (rewrite (= (+ ?x268 ?x152) ?x666)) (= (<= ?x298 (+ ?x268 ?x152)) $x669))))
(let ((@x680 (trans (monotonicity @x671 (= $x305 (=> $x302 $x669))) (rewrite (= (=> $x302 $x669) $x676)) (= $x305 $x676))))
(let ((@x731 (monotonicity (quant-intro @x680 (= $x306 $x681)) @x728 (= $x319 (=> $x681 $x705)))))
(let ((@x740 (monotonicity (quant-intro @x680 (= $x306 $x681)) (trans @x731 (rewrite (= (=> $x681 $x705) $x733)) (= $x319 $x733)) (= (and $x306 $x319) $x738))))
(let ((@x743 (monotonicity (quant-intro (rewrite (= (=> $x297 $x299) $x660)) (= $x301 $x663)) @x740 (= $x321 (=> $x663 $x738)))))
(let ((@x752 (monotonicity (quant-intro (rewrite (= (=> $x297 $x299) $x660)) (= $x301 $x663)) (trans @x743 (rewrite (= (=> $x663 $x738) $x745)) (= $x321 $x745)) (= (and $x301 $x321) $x750))))
(let ((@x761 (trans (monotonicity @x752 (= $x323 (=> $x294 $x750))) (rewrite (= (=> $x294 $x750) $x757)) (= $x323 $x757))))
(let ((@x767 (monotonicity (monotonicity @x761 (= (and $x294 $x323) $x762)) (= $x325 (=> $x292 $x762)))))
(let ((@x776 (monotonicity (trans @x767 (rewrite (= (=> $x292 $x762) $x769)) (= $x325 $x769)) (= (and $x292 $x325) $x774))))
(let ((@x649 (quant-intro (rewrite (= (=> $x286 $x273) (or $x295 $x273))) (= $x288 $x647))))
(let ((@x654 (monotonicity @x649 (rewrite (= (and true true) true)) (= $x290 (and $x647 true)))))
(let ((@x779 (monotonicity (trans @x654 (rewrite (= (and $x647 true) $x647)) (= $x290 $x647)) @x776 (= $x327 (=> $x647 $x774)))))
(let ((@x788 (monotonicity @x649 (trans @x779 (rewrite (= (=> $x647 $x774) $x781)) (= $x327 $x781)) (= (and $x288 $x327) $x786))))
(let ((@x797 (trans (monotonicity @x788 (= $x329 (=> $x285 $x786))) (rewrite (= (=> $x285 $x786) $x793)) (= $x329 $x793))))
(let (($x628 (= (and $x253 (and $x255 (and $x258 (and $x261 (and $x271 $x275))))) $x627)))
(let ((@x617 (monotonicity (quant-intro (rewrite (= (=> $x267 $x269) $x603)) (= $x271 $x606)) (quant-intro (rewrite (= (=> $x272 $x273) $x609)) (= $x275 $x612)) (= (and $x271 $x275) $x615))))
(let ((@x623 (monotonicity (quant-intro (rewrite (= (=> $x176 $x256) $x597)) (= $x258 $x600)) (monotonicity @x617 (= (and $x261 (and $x271 $x275)) $x618)) (= (and $x258 (and $x261 (and $x271 $x275))) $x621))))
(let ((@x626 (monotonicity @x623 (= (and $x255 (and $x258 (and $x261 (and $x271 $x275)))) $x624))))
(let ((@x635 (monotonicity (monotonicity (monotonicity @x626 $x628) (= $x281 $x630)) (= $x282 (and true $x630)))))
(let ((@x641 (monotonicity (trans @x635 (rewrite (= (and true $x630) $x630)) (= $x282 $x630)) (= $x283 (and true $x630)))))
(let ((@x803 (monotonicity (trans @x641 (rewrite (= (and true $x630) $x630)) (= $x283 $x630)) (monotonicity @x797 (= (and $x285 $x329) $x798)) (= $x331 (=> $x630 $x798)))))
(let ((@x559 (monotonicity (rewrite (= (=> $x243 true) true)) (= $x245 (and $x243 true)))))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x238 (and $x228 $x153)))
(let (($x240 (=> $x238 (<= ?x230 (+ ?x227 ?x152)))))
(let ((@x542 (monotonicity (rewrite (= (+ ?x227 ?x152) ?x516)) (= (<= ?x230 (+ ?x227 ?x152)) $x540))))
(let ((@x551 (trans (monotonicity @x542 (= $x240 (=> $x238 $x540))) (rewrite (= (=> $x238 $x540) $x547)) (= $x240 $x547))))
(let ((@x566 (monotonicity (quant-intro @x551 (= $x241 $x552)) (trans @x559 (rewrite (= (and $x243 true) $x243)) (= $x245 $x243)) (= $x246 (=> $x552 $x243)))))
(let ((@x575 (monotonicity (quant-intro @x551 (= $x241 $x552)) (trans @x566 (rewrite (= (=> $x552 $x243) $x568)) (= $x246 $x568)) (= (and $x241 $x246) $x573))))
(let (($x235 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 (= ?x230 ?x232))))))) :qid k!38))
))
(let (($x229 (and $x128 $x228)))
(let (($x236 (=> $x229 $x235)))
(let ((@x521 (monotonicity (rewrite (= (+ ?x227 ?x152) ?x516)) (= (= ?x230 (+ ?x227 ?x152)) $x519))))
(let ((@x527 (quant-intro (monotonicity @x521 (= (and $x231 (= ?x230 (+ ?x227 ?x152))) $x522)) (= $x235 $x525))))
(let ((@x536 (trans (monotonicity @x527 (= $x236 (=> $x229 $x525))) (rewrite (= (=> $x229 $x525) $x532)) (= $x236 $x532))))
(let ((@x578 (monotonicity (quant-intro @x536 (= $x237 $x537)) @x575 (= $x248 (=> $x537 $x573)))))
(let ((@x587 (monotonicity (quant-intro @x536 (= $x237 $x537)) (trans @x578 (rewrite (= (=> $x537 $x573) $x580)) (= $x248 $x580)) (= (and $x237 $x248) $x585))))
(let (($x486 (= (and $x212 (and $x214 (and $x217 true))) (and $x212 (and $x214 $x217)))))
(let ((@x484 (monotonicity (rewrite (= (and $x217 true) $x217)) (= (and $x214 (and $x217 true)) (and $x214 $x217)))))
(let ((@x490 (monotonicity (monotonicity @x484 $x486) (= (and $x209 (and $x212 (and $x214 (and $x217 true)))) $x488))))
(let ((@x497 (trans (monotonicity @x490 (= $x222 (and true $x488))) (rewrite (= (and true $x488) $x488)) (= $x222 $x488))))
(let ((@x501 (trans (monotonicity @x497 (= $x223 (and true $x488))) (rewrite (= (and true $x488) $x488)) (= $x223 $x488))))
(let ((@x507 (monotonicity (monotonicity @x501 (= (and $x207 $x223) $x502)) (= $x225 (and true $x502)))))
(let ((@x513 (monotonicity (trans @x507 (rewrite (= (and true $x502) $x502)) (= $x225 $x502)) (= $x226 (and true $x502)))))
(let ((@x590 (monotonicity (trans @x513 (rewrite (= (and true $x502) $x502)) (= $x226 $x502)) @x587 (= $x250 (=> $x502 $x585)))))
(let ((@x812 (monotonicity (trans @x590 (rewrite (= (=> $x502 $x585) $x592)) (= $x250 $x592)) (trans @x803 (rewrite (= (=> $x630 $x798) $x805)) (= $x331 $x805)) (= (and $x250 $x331) $x810))))
(let (($x194 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 (and $x175 (= ?x179 ?x184))))))))) :qid k!38))
))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x189 (and $x128 $x188)))
(let (($x195 (=> $x189 $x194)))
(let ((@x425 (monotonicity (rewrite (= (+ ?x171 ?x152) ?x405)) (= (= ?x179 (+ ?x171 ?x152)) $x423))))
(let ((@x431 (monotonicity (monotonicity @x425 (= (and $x175 (= ?x179 (+ ?x171 ?x152))) $x426)) (= (and $x190 (and $x175 (= ?x179 (+ ?x171 ?x152)))) $x429))))
(let ((@x437 (monotonicity (quant-intro @x431 (= $x194 $x432)) (= $x195 (=> $x189 $x432)))))
(let ((@x446 (quant-intro (trans @x437 (rewrite (= (=> $x189 $x432) $x439)) (= $x195 $x439)) (= $x196 $x444))))
(let ((@x453 (trans (monotonicity @x446 (= $x197 (and $x444 true))) (rewrite (= (and $x444 true) $x444)) (= $x197 $x444))))
(let (($x183 (and $x175 $x153)))
(let (($x186 (=> $x183 (<= ?x179 (+ ?x171 ?x152)))))
(let ((@x410 (monotonicity (rewrite (= (+ ?x171 ?x152) ?x405)) (= (<= ?x179 (+ ?x171 ?x152)) $x408))))
(let ((@x419 (trans (monotonicity @x410 (= $x186 (=> $x183 $x408))) (rewrite (= (=> $x183 $x408) $x415)) (= $x186 $x415))))
(let ((@x456 (monotonicity (quant-intro @x419 (= $x187 $x420)) @x453 (= (and $x187 $x197) $x454))))
(let ((@x459 (monotonicity (quant-intro (rewrite (= (=> $x178 $x180) $x399)) (= $x182 $x402)) @x456 (= (and $x182 (and $x187 $x197)) $x457))))
(let ((@x465 (monotonicity (monotonicity @x459 (= (and $x173 (and $x182 (and $x187 $x197))) $x460)) (= (and $x170 (and $x173 (and $x182 (and $x187 $x197)))) $x463))))
(let ((@x472 (trans (monotonicity @x465 (= $x202 (and true $x463))) (rewrite (= (and true $x463) $x463)) (= $x202 $x463))))
(let ((@x476 (trans (monotonicity @x472 (= $x203 (and true $x463))) (rewrite (= (and true $x463) $x463)) (= $x203 $x463))))
(let ((@x397 (quant-intro (rewrite (= (=> (and $x128 (< ?x124 b_Infinity$)) $x165) $x392)) (= $x167 $x395))))
(let ((@x815 (monotonicity (monotonicity @x397 @x476 (= (and $x167 $x203) $x477)) @x812 (= $x333 (=> $x477 $x810)))))
(let ((@x824 (monotonicity @x397 (trans @x815 (rewrite (= (=> $x477 $x810) $x817)) (= $x333 $x817)) (= (and $x167 $x333) $x822))))
(let ((@x390 (quant-intro (rewrite (= (=> (and $x133 $x153) $x156) $x385)) (= $x158 $x388))))
(let ((@x833 (trans (monotonicity @x390 @x824 (= $x335 (=> $x388 $x822))) (rewrite (= (=> $x388 $x822) $x829)) (= $x335 $x829))))
(let ((@x839 (monotonicity (quant-intro (rewrite (= (=> $x146 $x148) $x378)) (= $x150 $x381)) (monotonicity @x390 @x833 (= (and $x158 $x335) $x834)) (= $x337 (=> $x381 $x834)))))
(let ((@x848 (monotonicity (quant-intro (rewrite (= (=> $x146 $x148) $x378)) (= $x150 $x381)) (trans @x839 (rewrite (= (=> $x381 $x834) $x841)) (= $x337 $x841)) (= (and $x150 $x337) $x846))))
(let ((@x857 (trans (monotonicity @x848 (= $x339 (=> $x144 $x846))) (rewrite (= (=> $x144 $x846) $x853)) (= $x339 $x853))))
(let ((@x863 (monotonicity (monotonicity @x857 (= (and $x144 $x339) $x858)) (= $x341 (=> $x142 $x858)))))
(let ((@x872 (monotonicity (trans @x863 (rewrite (= (=> $x142 $x858) $x865)) (= $x341 $x865)) (= (and $x142 $x341) $x870))))
(let (($x363 (and $x349 (and $x355 $x135))))
(let (($x366 (and true $x363)))
(let ((@x357 (quant-intro (rewrite (= (=> $x128 (= ?x124 b_Infinity$)) $x352)) (= $x131 $x355))))
(let ((@x362 (monotonicity @x357 (rewrite (= (and $x135 true) $x135)) (= (and $x131 (and $x135 true)) (and $x355 $x135)))))
(let ((@x351 (quant-intro (rewrite (= (=> $x123 (= ?x124 0)) (or $x128 (= ?x124 0)))) (= $x127 $x349))))
(let ((@x365 (monotonicity @x351 @x362 (= (and $x127 (and $x131 (and $x135 true))) $x363))))
(let ((@x372 (trans (monotonicity @x365 (= $x139 $x366)) (rewrite (= $x366 $x363)) (= $x139 $x363))))
(let ((@x376 (trans (monotonicity @x372 (= $x140 $x366)) (rewrite (= $x366 $x363)) (= $x140 $x363))))
(let ((@x881 (trans (monotonicity @x376 @x872 (= $x343 (=> $x363 $x870))) (rewrite (= (=> $x363 $x870) $x877)) (= $x343 $x877))))
(let ((@x1406 (trans (monotonicity @x881 (= $x344 (not $x877))) (monotonicity @x1401 (= (not $x877) $x1402)) (= $x344 $x1402))))
(let ((@x1408 (not-or-elim (mp (asserted $x344) @x1406 $x1402) $x885)))
(let ((@x1458 (mp~ (and-elim @x1408 $x355) (nnf-pos (refl (~ $x352 $x352)) (~ $x355 $x355)) $x355)))
(let ((@x3493 (mp @x1458 (quant-intro (refl (= $x352 $x352)) (= $x355 $x3488)) $x3488)))
(let ((@x5494 (rewrite (= (or (not $x3488) (or $x1533 $x5648)) (or (not $x3488) $x1533 $x5648)))))
(let ((@x5498 (mp ((_ quant-inst ?v0!5) (or (not $x3488) (or $x1533 $x5648))) @x5494 (or (not $x3488) $x1533 $x5648))))
(let ((@x6448 (unit-resolution (hypothesis $x6555) (mp (unit-resolution @x5498 @x3493 (hypothesis $x1534) $x5648) @x5583 $x5500) false)))
(let ((@x3189 (unit-resolution (lemma @x6448 (or $x5500 $x1533)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x6555 $x1538)) @x5027 $x6555) @x5072 false)))
(let (($x3539 (not $x3536)))
(let (($x3822 (or $x3539 $x3819)))
(let (($x3825 (not $x3822)))
(let (($x3519 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or $x134 $x917 $x928))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3524 (not $x3519)))
(let (($x3828 (or $x3524 $x3825)))
(let (($x3831 (not $x3828)))
(let ((?x1517 (v_b_SP_G_0$ ?v0!4)))
(let ((?x1518 (* (- 1) ?x1517)))
(let ((?x1516 (v_b_SP_G_0$ ?v1!3)))
(let ((?x1508 (pair$ ?v1!3 ?v0!4)))
(let ((?x1509 (b_G$ ?x1508)))
(let ((?x2040 (+ ?x1509 ?x1516 ?x1518)))
(let (($x2043 (>= ?x2040 0)))
(let (($x1512 (<= (+ b_Infinity$ (* (- 1) ?x1509)) 0)))
(let (($x1507 (fun_app$ v_b_Visited_G_0$ ?v1!3)))
(let (($x2389 (not $x1507)))
(let (($x2404 (or $x2389 $x1512 $x2043)))
(let (($x3495 (forall ((?v0 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v0)))
(not $x133)) :pattern ( (fun_app$ v_b_Visited_G_0$ ?v0) ) :qid k!38))
))
(let ((@x1463 (mp~ (and-elim @x1408 $x135) (nnf-pos (refl (~ $x134 $x134)) (~ $x135 $x135)) $x135)))
(let ((@x3500 (mp @x1463 (quant-intro (refl (= $x134 $x134)) (= $x135 $x3495)) $x3495)))
(let ((@x4007 (unit-resolution ((_ quant-inst ?v1!3) (or (not $x3495) $x2389)) @x3500 (hypothesis $x1507) false)))
(let (($x2409 (not $x2404)))
(let (($x3834 (or $x2409 $x3831)))
(let (($x3837 (not $x3834)))
(let (($x3510 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(or $x133 (not (fun_app$ v_b_Visited_G_0$ ?v0)) $x902))) :pattern ( (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3515 (not $x3510)))
(let (($x3840 (or $x3515 $x3837)))
(let (($x3843 (not $x3840)))
(let (($x1493 (>= (+ (v_b_SP_G_0$ ?v1!1) (* (- 1) (v_b_SP_G_0$ ?v0!2))) 0)))
(let (($x1486 (fun_app$ v_b_Visited_G_0$ ?v0!2)))
(let (($x2343 (not $x1486)))
(let (($x1484 (fun_app$ v_b_Visited_G_0$ ?v1!1)))
(let (($x2358 (or $x1484 $x2343 $x1493)))
(let (($x2363 (not $x2358)))
(let (($x3846 (or $x2363 $x3843)))
(let (($x3849 (not $x3846)))
(let (($x3501 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(>= ?x124 0)) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3506 (not $x3501)))
(let (($x3852 (or $x3506 $x3849)))
(let (($x3855 (not $x3852)))
(let ((?x1470 (v_b_SP_G_0$ ?v0!0)))
(let (($x1471 (>= ?x1470 0)))
(let (($x1472 (not $x1471)))
(let ((@x5071 (hypothesis $x1472)))
(let (($x5774 (<= ?x1470 0)))
(let (($x82 (<= b_Infinity$ 0)))
(let (($x83 (not $x82)))
(let ((@x86 (mp (asserted (< 0 b_Infinity$)) (rewrite (= (< 0 b_Infinity$) $x83)) $x83)))
(let (($x5117 (= b_Infinity$ ?x1470)))
(let ((@x5579 (symm (commutativity (= $x5117 (= ?x1470 b_Infinity$))) (= (= ?x1470 b_Infinity$) $x5117))))
(let (($x3131 (= ?x1470 b_Infinity$)))
(let (($x5739 (= ?v0!0 b_Source$)))
(let (($x5713 (not $x5739)))
(let ((@x5595 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1470 0)) $x1471)) @x5071 (not (= ?x1470 0)))))
(let (($x3482 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(or $x128 (= (v_b_SP_G_0$ ?v0) 0)))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let ((@x3486 (quant-intro (refl (= (or $x128 (= ?x124 0)) (or $x128 (= ?x124 0)))) (= $x349 $x3482))))
(let ((@x1452 (nnf-pos (refl (~ (or $x128 (= ?x124 0)) (or $x128 (= ?x124 0)))) (~ $x349 $x349))))
(let ((@x3487 (mp (mp~ (and-elim @x1408 $x349) @x1452 $x349) @x3486 $x3482)))
(let (($x5769 (= (or (not $x3482) (or $x5713 (= ?x1470 0))) (or (not $x3482) $x5713 (= ?x1470 0)))))
(let ((@x5448 (mp ((_ quant-inst ?v0!0) (or (not $x3482) (or $x5713 (= ?x1470 0)))) (rewrite $x5769) (or (not $x3482) $x5713 (= ?x1470 0)))))
(let ((@x6281 (rewrite (= (or (not $x3488) (or $x5739 $x3131)) (or (not $x3488) $x5739 $x3131)))))
(let ((@x6173 (mp ((_ quant-inst ?v0!0) (or (not $x3488) (or $x5739 $x3131))) @x6281 (or (not $x3488) $x5739 $x3131))))
(let ((@x6446 (mp (unit-resolution @x6173 @x3493 (unit-resolution @x5448 @x3487 @x5595 $x5713) $x3131) @x5579 $x5117)))
(let ((@x6386 ((_ th-lemma arith triangle-eq) (or (not $x5117) (<= (+ b_Infinity$ (* (- 1) ?x1470)) 0)))))
(let ((@x6387 (unit-resolution @x6386 @x6446 (<= (+ b_Infinity$ (* (- 1) ?x1470)) 0))))
(let ((@x3142 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x5774) @x6387 @x86 false) (or (not $x5774) $x1471))))
(let ((@x5085 (unit-resolution @x3142 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x5774 $x1471)) @x5071 $x5774) @x5071 false)))
(let (($x3858 (or $x1472 $x3855)))
(let (($x3861 (not $x3858)))
(let (($x3864 (or $x864 $x3861)))
(let (($x3867 (not $x3864)))
(let (($x5885 (not $x3482)))
(let (($x3145 (or $x5885 $x142)))
(let ((@x4320 (monotonicity (rewrite (= (= b_Source$ b_Source$) true)) (= (not (= b_Source$ b_Source$)) (not true)))))
(let ((@x5484 (trans @x4320 (rewrite (= (not true) false)) (= (not (= b_Source$ b_Source$)) false))))
(let ((@x5457 (monotonicity @x5484 (= (or (not (= b_Source$ b_Source$)) $x142) (or false $x142)))))
(let ((@x5606 (trans @x5457 (rewrite (= (or false $x142) $x142)) (= (or (not (= b_Source$ b_Source$)) $x142) $x142))))
(let ((@x4948 (monotonicity @x5606 (= (or $x5885 (or (not (= b_Source$ b_Source$)) $x142)) $x3145))))
(let ((@x5799 (trans @x4948 (rewrite (= $x3145 $x3145)) (= (or $x5885 (or (not (= b_Source$ b_Source$)) $x142)) $x3145))))
(let ((@x5800 (mp ((_ quant-inst b_Source$) (or $x5885 (or (not (= b_Source$ b_Source$)) $x142))) @x5799 $x3145)))
(let (($x3870 (or $x864 $x3867)))
(let (($x2843 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or (>= (+ ?x268 ?x1907) 0) $x295 (not $x2237)))))))) :qid k!38))
))
(let (($x2828 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or $x295 $x917 $x1277))))))))) :qid k!38))
))
(let (($x2852 (not (or (not $x2828) $x1904 $x1909 (not $x2843)))))
(let (($x2857 (or $x2806 $x2852)))
(let (($x2783 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x2763 (not $x296)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x286 $x2763 $x1257))))) :qid k!38))
))
(let (($x2866 (not (or (not $x2783) (not $x2857)))))
(let (($x2871 (or $x2760 $x2866)))
(let (($x2879 (not (or $x1254 (not $x2871)))))
(let (($x2884 (or $x1843 $x2879)))
(let (($x2892 (not (or $x768 (not $x2884)))))
(let (($x2897 (or $x768 $x2892)))
(let (($x2905 (not (or $x780 (not $x2897)))))
(let (($x2910 (or $x1825 $x2905)))
(let (($x2918 (not (or $x1245 (not $x2910)))))
(let (($x2923 (or $x1808 $x2918)))
(let (($x2737 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2712 (or $x1164 $x1170)))
(let (($x2713 (not $x2712)))
(or $x2713 $x273)))))))))) :qid k!38))
))
(let (($x2731 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)))
(or $x1164 $x1170 $x1180)))))))) :qid k!38))
))
(let (($x2934 (or $x1768 $x1773 $x252 $x1208 (not $x1204) $x2930 (not $x2731) (not $x2737) (not $x2923))))
(let (($x2935 (not $x2934)))
(let (($x2667 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(or $x1094 $x917 $x1135)))))) :qid k!38))
))
(let (($x2675 (not (or (not $x2667) $x243))))
(let (($x2680 (or $x2645 $x2675)))
(let (($x2623 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x1094 $x2612)))))))) :qid k!38))
))
(let (($x2689 (not (or (not $x2623) (not $x2680)))))
(let (($x2586 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x227 ?x1657) 0) (not $x2143)))))) :qid k!38))
))
(let (($x2594 (not (or $x1654 $x1659 (not $x2586)))))
(let (($x2694 (or $x2594 $x2689)))
(let (($x2571 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x997))) :qid k!38))
))
(let (($x2707 (not (or (not $x2571) $x2701 $x2702 $x2703 $x2704 (not $x2694)))))
(let (($x2940 (or $x2707 $x2935)))
(let (($x2557 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2124)))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x997 $x2546)))))))) :qid k!38))
))
(let (($x2529 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(or $x176 $x917 $x985))))))) :qid k!38))
))
(let (($x2507 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x175 (not (fun_app$ v_b_Visited_G_1$ ?v0)) $x1010)))) :qid k!38))
))
(let (($x2484 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x942 $x2473)))))))) :qid k!38))
))
(let (($x2953 (or (not $x2484) $x2947 (not $x1046) (not $x2507) (not $x2529) (not $x2557) (not $x2940))))
(let (($x2954 (not $x2953)))
(let (($x2446 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :qid k!38))
))
(let (($x2454 (not (or $x1533 $x1538 (not $x2446)))))
(let (($x2959 (or $x2454 $x2954)))
(let (($x2431 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or $x134 $x917 $x928))))))) :qid k!38))
))
(let (($x2968 (not (or (not $x2431) (not $x2959)))))
(let (($x2973 (or $x2409 $x2968)))
(let (($x2386 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(or $x133 (not (fun_app$ v_b_Visited_G_0$ ?v0)) $x902))) :qid k!38))
))
(let (($x2982 (not (or (not $x2386) (not $x2973)))))
(let (($x2987 (or $x2363 $x2982)))
(let (($x2995 (not (or $x897 (not $x2987)))))
(let (($x3000 (or $x1472 $x2995)))
(let (($x3008 (not (or $x864 (not $x3000)))))
(let (($x3013 (or $x864 $x3008)))
(let (($x2832 (or (>= (+ ?x268 ?x1907) 0) $x295 (not (= (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))) 0)))))
(let ((@x3731 (monotonicity (quant-intro (refl (= $x2832 $x2832)) (= $x2843 $x3724)) (= (not $x2843) $x3729))))
(let ((@x3719 (quant-intro (refl (= (or $x295 $x917 $x1277) (or $x295 $x917 $x1277))) (= $x2828 $x3715))))
(let ((@x3734 (monotonicity (monotonicity @x3719 (= (not $x2828) $x3720)) @x3731 (= (or (not $x2828) $x1904 $x1909 (not $x2843)) $x3732))))
(let ((@x3743 (monotonicity (monotonicity (monotonicity @x3734 (= $x2852 $x3735)) (= $x2857 $x3738)) (= (not $x2857) $x3741))))
(let ((@x3711 (quant-intro (refl (= (or $x286 (not $x296) $x1257) (or $x286 (not $x296) $x1257))) (= $x2783 $x3707))))
(let ((@x3746 (monotonicity (monotonicity @x3711 (= (not $x2783) $x3712)) @x3743 (= (or (not $x2783) (not $x2857)) $x3744))))
(let ((@x3755 (monotonicity (monotonicity (monotonicity @x3746 (= $x2866 $x3747)) (= $x2871 $x3750)) (= (not $x2871) $x3753))))
(let ((@x3702 (quant-intro (refl (= (>= ?x268 0) (>= ?x268 0))) (= $x1251 $x3698))))
(let ((@x3758 (monotonicity (monotonicity @x3702 (= $x1254 $x3703)) @x3755 (= (or $x1254 (not $x2871)) $x3756))))
(let ((@x3767 (monotonicity (monotonicity (monotonicity @x3758 (= $x2879 $x3759)) (= $x2884 $x3762)) (= (not $x2884) $x3765))))
(let ((@x3773 (monotonicity (monotonicity @x3767 (= (or $x768 (not $x2884)) $x3768)) (= $x2892 $x3771))))
(let ((@x3779 (monotonicity (monotonicity @x3773 (= $x2897 $x3774)) (= (not $x2897) $x3777))))
(let ((@x3694 (quant-intro (refl (= (or $x295 $x273) (or $x295 $x273))) (= $x647 $x3690))))
(let ((@x3782 (monotonicity (monotonicity @x3694 (= $x780 $x3695)) @x3779 (= (or $x780 (not $x2897)) $x3780))))
(let ((@x3791 (monotonicity (monotonicity (monotonicity @x3782 (= $x2905 $x3783)) (= $x2910 $x3786)) (= (not $x2910) $x3789))))
(let ((@x3688 (monotonicity (quant-intro (refl (= $x1238 $x1238)) (= $x1242 $x3681)) (= $x1245 $x3686))))
(let ((@x3797 (monotonicity (monotonicity @x3688 @x3791 (= (or $x1245 (not $x2910)) $x3792)) (= $x2918 $x3795))))
(let ((@x3803 (monotonicity (monotonicity @x3797 (= $x2923 $x3798)) (= (not $x2923) $x3801))))
(let ((@x3675 (refl (= (or (not (or $x1164 $x1170)) $x273) (or (not (or $x1164 $x1170)) $x273)))))
(let ((@x3680 (monotonicity (quant-intro @x3675 (= $x2737 $x3673)) (= (not $x2737) $x3678))))
(let ((@x3669 (quant-intro (refl (= (or $x1164 $x1170 $x1180) (or $x1164 $x1170 $x1180))) (= $x2731 $x3665))))
(let ((@x3662 (monotonicity (quant-intro (refl (= $x1201 $x1201)) (= $x1204 $x3655)) (= (not $x1204) $x3660))))
(let ((@x3806 (monotonicity @x3662 (monotonicity @x3669 (= (not $x2731) $x3670)) @x3680 @x3803 (= $x2934 $x3804))))
(let ((@x3621 (quant-intro (refl (= (or $x1094 $x917 $x1135) (or $x1094 $x917 $x1135))) (= $x2667 $x3617))))
(let ((@x3627 (monotonicity (monotonicity @x3621 (= (not $x2667) $x3622)) (= (or (not $x2667) $x243) $x3625))))
(let ((@x3636 (monotonicity (monotonicity (monotonicity @x3627 (= $x2675 $x3628)) (= $x2680 $x3631)) (= (not $x2680) $x3634))))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?0) ?0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x2618 (or $x123 $x1094 $x2612)))
(let ((@x3616 (monotonicity (quant-intro (refl (= $x2618 $x2618)) (= $x2623 $x3609)) (= (not $x2623) $x3614))))
(let ((@x3642 (monotonicity (monotonicity @x3616 @x3636 (= (or (not $x2623) (not $x2680)) $x3637)) (= $x2689 $x3640))))
(let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?0 ?v0!8))) 0)))
(let (($x2575 (or (>= (+ ?x227 ?x1657) 0) (not $x2143))))
(let ((@x3602 (monotonicity (quant-intro (refl (= $x2575 $x2575)) (= $x2586 $x3595)) (= (not $x2586) $x3600))))
(let ((@x3608 (monotonicity (monotonicity @x3602 (= (or $x1654 $x1659 (not $x2586)) $x3603)) (= $x2594 $x3606))))
(let ((@x3648 (monotonicity (monotonicity @x3608 @x3642 (= $x2694 $x3643)) (= (not $x2694) $x3646))))
(let ((@x3589 (quant-intro (refl (= (or $x175 $x997) (or $x175 $x997))) (= $x2571 $x3585))))
(let ((@x3651 (monotonicity (monotonicity @x3589 (= (not $x2571) $x3590)) @x3648 (= (or (not $x2571) $x2701 $x2702 $x2703 $x2704 (not $x2694)) $x3649))))
(let ((@x3812 (monotonicity (monotonicity @x3651 (= $x2707 $x3652)) (monotonicity @x3806 (= $x2935 $x3807)) (= $x2940 $x3810))))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?0) ?0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?0))) (not $x2124)))))
(let (($x2552 (or $x123 $x997 $x2546)))
(let ((@x3583 (monotonicity (quant-intro (refl (= $x2552 $x2552)) (= $x2557 $x3576)) (= (not $x2557) $x3581))))
(let ((@x3572 (quant-intro (refl (= (or $x176 $x917 $x985) (or $x176 $x917 $x985))) (= $x2529 $x3568))))
(let ((@x3564 (quant-intro (refl (= (or $x175 (not $x177) $x1010) (or $x175 (not $x177) $x1010))) (= $x2507 $x3560))))
(let ((@x3555 (quant-intro (refl (= (>= ?x171 0) (>= ?x171 0))) (= $x1046 $x3551))))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?0) ?0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x2479 (or $x123 $x942 $x2473)))
(let ((@x3549 (monotonicity (quant-intro (refl (= $x2479 $x2479)) (= $x2484 $x3542)) (= (not $x2484) $x3547))))
(let ((@x3818 (monotonicity @x3549 (monotonicity @x3555 (= (not $x1046) $x3556)) (monotonicity @x3564 (= (not $x2507) $x3565)) (monotonicity @x3572 (= (not $x2529) $x3573)) @x3583 (monotonicity @x3812 (= (not $x2940) $x3813)) (= $x2953 $x3816))))
(let (($x2435 (or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?0 ?v0!5))) 0)))))
(let ((@x3535 (monotonicity (quant-intro (refl (= $x2435 $x2435)) (= $x2446 $x3528)) (= (not $x2446) $x3533))))
(let ((@x3541 (monotonicity (monotonicity @x3535 (= (or $x1533 $x1538 (not $x2446)) $x3536)) (= $x2454 $x3539))))
(let ((@x3824 (monotonicity @x3541 (monotonicity @x3818 (= $x2954 $x3819)) (= $x2959 $x3822))))
(let ((@x3523 (quant-intro (refl (= (or $x134 $x917 $x928) (or $x134 $x917 $x928))) (= $x2431 $x3519))))
(let ((@x3830 (monotonicity (monotonicity @x3523 (= (not $x2431) $x3524)) (monotonicity @x3824 (= (not $x2959) $x3825)) (= (or (not $x2431) (not $x2959)) $x3828))))
(let ((@x3839 (monotonicity (monotonicity (monotonicity @x3830 (= $x2968 $x3831)) (= $x2973 $x3834)) (= (not $x2973) $x3837))))
(let (($x2381 (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1)) $x902)))
(let ((@x3517 (monotonicity (quant-intro (refl (= $x2381 $x2381)) (= $x2386 $x3510)) (= (not $x2386) $x3515))))
(let ((@x3845 (monotonicity (monotonicity @x3517 @x3839 (= (or (not $x2386) (not $x2973)) $x3840)) (= $x2982 $x3843))))
(let ((@x3851 (monotonicity (monotonicity @x3845 (= $x2987 $x3846)) (= (not $x2987) $x3849))))
(let ((@x3505 (quant-intro (refl (= (>= ?x124 0) (>= ?x124 0))) (= $x894 $x3501))))
(let ((@x3854 (monotonicity (monotonicity @x3505 (= $x897 $x3506)) @x3851 (= (or $x897 (not $x2987)) $x3852))))
(let ((@x3863 (monotonicity (monotonicity (monotonicity @x3854 (= $x2995 $x3855)) (= $x3000 $x3858)) (= (not $x3000) $x3861))))
(let ((@x3869 (monotonicity (monotonicity @x3863 (= (or $x864 (not $x3000)) $x3864)) (= $x3008 $x3867))))
(let (($x2246 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x2240 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 $x2237)))
(not $x2240))))))) :qid k!38))
))
(let (($x1910 (not $x1909)))
(let (($x1905 (not $x1904)))
(let (($x2255 (and $x1284 $x1905 $x1910 $x2246)))
(let (($x1886 (not (and $x1878 (not $x1883)))))
(let (($x1892 (or $x1886 $x1891)))
(let (($x1893 (not $x1892)))
(let (($x2260 (or $x1893 $x2255)))
(let (($x2263 (and $x1265 $x2260)))
(let (($x1859 (not (and (not $x1855) $x1857))))
(let (($x1865 (or $x1859 $x1864)))
(let (($x1866 (not $x1865)))
(let (($x2266 (or $x1866 $x2263)))
(let (($x2269 (and $x1251 $x2266)))
(let (($x2272 (or $x1843 $x2269)))
(let (($x2275 (and $x292 $x2272)))
(let (($x2278 (or $x768 $x2275)))
(let (($x2281 (and $x647 $x2278)))
(let (($x2284 (or $x1825 $x2281)))
(let (($x2287 (and $x1242 $x2284)))
(let (($x2290 (or $x1808 $x2287)))
(let (($x1774 (not $x1773)))
(let (($x1769 (not $x1768)))
(let (($x2296 (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x1188 $x1194 $x2290)))
(let (($x1744 (not $x243)))
(let (($x1747 (and $x1141 $x1744)))
(let (($x1728 (not (and (not $x1719) (not $x1725)))))
(let (($x2207 (or $x1728 $x2204)))
(let (($x2210 (not $x2207)))
(let (($x2213 (or $x2210 $x1747)))
(let (($x2198 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2192 (and (not $x2171) $x2187)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x2192)))))))))))) :qid k!38))
))
(let (($x2216 (and $x2198 $x2213)))
(let (($x2152 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(let (($x2146 (and (not (>= (+ ?x227 ?x1657) 0)) $x2143)))
(not $x2146)))))) :qid k!38))
))
(let (($x1660 (not $x1659)))
(let (($x1655 (not $x1654)))
(let (($x2158 (and $x1655 $x1660 $x2152)))
(let (($x2219 (or $x2158 $x2216)))
(let (($x1636 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(let (($x1072 (and $x176 $x998)))
(not $x1072)))))) :qid k!38))
))
(let (($x2225 (and $x1636 $x209 $x212 $x214 $x217 $x2219)))
(let (($x2301 (or $x2225 $x2296)))
(let (($x2135 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let ((?x1608 (?v1!7 ?v0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x2129 (and (not (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?x1608))) 0)) $x1613 $x2124)))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x2129))))))))))))) :qid k!38))
))
(let (($x2097 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let ((?x1573 (?v1!6 ?v0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x2091 (and (not (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?x1573))) 0)) $x1578 $x2086)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x2091))))))))))) :qid k!38))
))
(let (($x2310 (and $x2097 $x170 $x1046 $x1040 $x992 $x2135 $x2301)))
(let (($x1562 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x1549 (and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0))))
(not $x1549)))))) :qid k!38))
))
(let (($x2057 (and $x1534 $x1539 $x1562)))
(let (($x2315 (or $x2057 $x2310)))
(let (($x2318 (and $x934 $x2315)))
(let (($x1515 (not (and $x1507 (not $x1512)))))
(let (($x2046 (or $x1515 $x2043)))
(let (($x2049 (not $x2046)))
(let (($x2321 (or $x2049 $x2318)))
(let (($x2324 (and $x909 $x2321)))
(let (($x1488 (not (and (not $x1484) $x1486))))
(let (($x1494 (or $x1488 $x1493)))
(let (($x1495 (not $x1494)))
(let (($x2327 (or $x1495 $x2324)))
(let (($x2330 (and $x894 $x2327)))
(let (($x2333 (or $x1472 $x2330)))
(let (($x2336 (and $x142 $x2333)))
(let (($x2339 (or $x864 $x2336)))
(let ((@x2937 (rewrite (= (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x2731 $x2737 $x2923) $x2935))))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))) 0)))
(let (($x2240 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 $x2237)))
(let (($x2243 (not $x2240)))
(let ((@x2838 (monotonicity (rewrite (= $x2240 (not $x2832))) (= $x2243 (not (not $x2832))))))
(let ((@x2845 (quant-intro (trans @x2838 (rewrite (= (not (not $x2832)) $x2832)) (= $x2243 $x2832)) (= $x2246 $x2843))))
(let ((@x2815 (monotonicity (rewrite (= $x1271 (not (or $x295 $x917)))) (= $x1274 (not (not (or $x295 $x917)))))))
(let ((@x2819 (trans @x2815 (rewrite (= (not (not (or $x295 $x917))) (or $x295 $x917))) (= $x1274 (or $x295 $x917)))))
(let ((@x2827 (trans (monotonicity @x2819 (= $x1281 (or (or $x295 $x917) $x1277))) (rewrite (= (or (or $x295 $x917) $x1277) (or $x295 $x917 $x1277))) (= $x1281 (or $x295 $x917 $x1277)))))
(let ((@x2848 (monotonicity (quant-intro @x2827 (= $x1284 $x2828)) @x2845 (= $x2255 (and $x2828 $x1905 $x1910 $x2843)))))
(let ((@x2856 (trans @x2848 (rewrite (= (and $x2828 $x1905 $x1910 $x2843) $x2852)) (= $x2255 $x2852))))
(let ((@x2793 (monotonicity (rewrite (= (and $x1878 (not $x1883)) (not (or $x2786 $x1883)))) (= $x1886 (not (not (or $x2786 $x1883)))))))
(let ((@x2797 (trans @x2793 (rewrite (= (not (not (or $x2786 $x1883))) (or $x2786 $x1883))) (= $x1886 (or $x2786 $x1883)))))
(let ((@x2805 (trans (monotonicity @x2797 (= $x1892 (or (or $x2786 $x1883) $x1891))) (rewrite (= (or (or $x2786 $x1883) $x1891) $x2801)) (= $x1892 $x2801))))
(let ((@x2859 (monotonicity (monotonicity @x2805 (= $x1893 $x2806)) @x2856 (= $x2260 $x2857))))
(let ((@x2780 (rewrite (= (or (or $x286 (not $x296)) $x1257) (or $x286 (not $x296) $x1257)))))
(let ((@x2772 (rewrite (= (not (not (or $x286 (not $x296)))) (or $x286 (not $x296))))))
(let ((@x2770 (monotonicity (rewrite (= $x297 (not (or $x286 (not $x296))))) (= $x659 (not (not (or $x286 (not $x296))))))))
(let ((@x2777 (monotonicity (trans @x2770 @x2772 (= $x659 (or $x286 (not $x296)))) (= $x1262 (or (or $x286 (not $x296)) $x1257)))))
(let ((@x2785 (quant-intro (trans @x2777 @x2780 (= $x1262 (or $x286 (not $x296) $x1257))) (= $x1265 $x2783))))
(let ((@x2870 (trans (monotonicity @x2785 @x2859 (= $x2263 (and $x2783 $x2857))) (rewrite (= (and $x2783 $x2857) $x2866)) (= $x2263 $x2866))))
(let ((@x2747 (monotonicity (rewrite (= (and (not $x1855) $x1857) (not (or $x1855 $x2740)))) (= $x1859 (not (not (or $x1855 $x2740)))))))
(let ((@x2751 (trans @x2747 (rewrite (= (not (not (or $x1855 $x2740))) (or $x1855 $x2740))) (= $x1859 (or $x1855 $x2740)))))
(let ((@x2759 (trans (monotonicity @x2751 (= $x1865 (or (or $x1855 $x2740) $x1864))) (rewrite (= (or (or $x1855 $x2740) $x1864) $x2755)) (= $x1865 $x2755))))
(let ((@x2873 (monotonicity (monotonicity @x2759 (= $x1866 $x2760)) @x2870 (= $x2266 $x2871))))
(let ((@x2883 (trans (monotonicity @x2873 (= $x2269 (and $x1251 $x2871))) (rewrite (= (and $x1251 $x2871) $x2879)) (= $x2269 $x2879))))
(let ((@x2889 (monotonicity (monotonicity @x2883 (= $x2272 $x2884)) (= $x2275 (and $x292 $x2884)))))
(let ((@x2899 (monotonicity (trans @x2889 (rewrite (= (and $x292 $x2884) $x2892)) (= $x2275 $x2892)) (= $x2278 $x2897))))
(let ((@x2909 (trans (monotonicity @x2899 (= $x2281 (and $x647 $x2897))) (rewrite (= (and $x647 $x2897) $x2905)) (= $x2281 $x2905))))
(let ((@x2915 (monotonicity (monotonicity @x2909 (= $x2284 $x2910)) (= $x2287 (and $x1242 $x2910)))))
(let ((@x2925 (monotonicity (trans @x2915 (rewrite (= (and $x1242 $x2910) $x2918)) (= $x2287 $x2918)) (= $x2290 $x2923))))
(let ((@x2736 (monotonicity (rewrite (= $x1174 (not (or $x1164 $x1170)))) (= $x1191 (or (not (or $x1164 $x1170)) $x273)))))
(let ((@x2718 (monotonicity (rewrite (= $x1174 (not (or $x1164 $x1170)))) (= $x1177 (not (not (or $x1164 $x1170)))))))
(let ((@x2722 (trans @x2718 (rewrite (= (not (not (or $x1164 $x1170))) (or $x1164 $x1170))) (= $x1177 (or $x1164 $x1170)))))
(let ((@x2730 (trans (monotonicity @x2722 (= $x1185 (or (or $x1164 $x1170) $x1180))) (rewrite (= (or (or $x1164 $x1170) $x1180) (or $x1164 $x1170 $x1180))) (= $x1185 (or $x1164 $x1170 $x1180)))))
(let ((@x2928 (monotonicity (quant-intro @x2730 (= $x1188 $x2731)) (quant-intro @x2736 (= $x1194 $x2737)) @x2925 (= $x2296 (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x2731 $x2737 $x2923)))))
(let ((@x2654 (monotonicity (rewrite (= $x1129 (not (or $x1094 $x917)))) (= $x1132 (not (not (or $x1094 $x917)))))))
(let ((@x2658 (trans @x2654 (rewrite (= (not (not (or $x1094 $x917))) (or $x1094 $x917))) (= $x1132 (or $x1094 $x917)))))
(let ((@x2666 (trans (monotonicity @x2658 (= $x1138 (or (or $x1094 $x917) $x1135))) (rewrite (= (or (or $x1094 $x917) $x1135) (or $x1094 $x917 $x1135))) (= $x1138 (or $x1094 $x917 $x1135)))))
(let ((@x2672 (monotonicity (quant-intro @x2666 (= $x1141 $x2667)) (= $x1747 (and $x2667 $x1744)))))
(let ((@x2632 (monotonicity (rewrite (= (and (not $x1719) (not $x1725)) (not (or $x1719 $x1725)))) (= $x1728 (not (not (or $x1719 $x1725)))))))
(let ((@x2636 (trans @x2632 (rewrite (= (not (not (or $x1719 $x1725))) (or $x1719 $x1725))) (= $x1728 (or $x1719 $x1725)))))
(let ((@x2644 (trans (monotonicity @x2636 (= $x2207 (or (or $x1719 $x1725) $x2204))) (rewrite (= (or (or $x1719 $x1725) $x2204) $x2640)) (= $x2207 $x2640))))
(let ((@x2682 (monotonicity (monotonicity @x2644 (= $x2210 $x2645)) (trans @x2672 (rewrite (= (and $x2667 $x1744) $x2675)) (= $x1747 $x2675)) (= $x2213 $x2680))))
(let ((@x2605 (monotonicity (rewrite (= $x1098 (not (or $x123 $x1094)))) (= $x1101 (not (not (or $x123 $x1094)))))))
(let ((@x2609 (trans @x2605 (rewrite (= (not (not (or $x123 $x1094))) (or $x123 $x1094))) (= $x1101 (or $x123 $x1094)))))
(let ((@x2617 (monotonicity @x2609 (rewrite (= (and (not $x2171) $x2187) $x2612)) (= (or $x1101 (and (not $x2171) $x2187)) (or (or $x123 $x1094) $x2612)))))
(let ((@x2622 (trans @x2617 (rewrite (= (or (or $x123 $x1094) $x2612) $x2618)) (= (or $x1101 (and (not $x2171) $x2187)) $x2618))))
(let ((@x2685 (monotonicity (quant-intro @x2622 (= $x2198 $x2623)) @x2682 (= $x2216 (and $x2623 $x2680)))))
(let (($x2146 (and (not (>= (+ ?x227 ?x1657) 0)) $x2143)))
(let (($x2149 (not $x2146)))
(let ((@x2581 (monotonicity (rewrite (= $x2146 (not $x2575))) (= $x2149 (not (not $x2575))))))
(let ((@x2588 (quant-intro (trans @x2581 (rewrite (= (not (not $x2575)) $x2575)) (= $x2149 $x2575)) (= $x2152 $x2586))))
(let ((@x2598 (trans (monotonicity @x2588 (= $x2158 (and $x1655 $x1660 $x2586))) (rewrite (= (and $x1655 $x1660 $x2586) $x2594)) (= $x2158 $x2594))))
(let ((@x2696 (monotonicity @x2598 (trans @x2685 (rewrite (= (and $x2623 $x2680) $x2689)) (= $x2216 $x2689)) (= $x2219 $x2694))))
(let ((@x2566 (monotonicity (rewrite (= $x1072 (not (or $x175 $x997)))) (= (not $x1072) (not (not (or $x175 $x997)))))))
(let ((@x2570 (trans @x2566 (rewrite (= (not (not (or $x175 $x997))) (or $x175 $x997))) (= (not $x1072) (or $x175 $x997)))))
(let ((@x2699 (monotonicity (quant-intro @x2570 (= $x1636 $x2571)) @x2696 (= $x2225 (and $x2571 $x209 $x212 $x214 $x217 $x2694)))))
(let ((@x2711 (trans @x2699 (rewrite (= (and $x2571 $x209 $x212 $x214 $x217 $x2694) $x2707)) (= $x2225 $x2707))))
(let ((?x1608 (?v1!7 ?0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x2129 (and (not $x2108) $x1613 $x2124)))
(let (($x2132 (or $x1004 $x2129)))
(let ((@x2538 (monotonicity (rewrite (= $x1001 (not (or $x123 $x997)))) (= $x1004 (not (not (or $x123 $x997)))))))
(let ((@x2542 (trans @x2538 (rewrite (= (not (not (or $x123 $x997))) (or $x123 $x997))) (= $x1004 (or $x123 $x997)))))
(let ((@x2551 (monotonicity @x2542 (rewrite (= $x2129 $x2546)) (= $x2132 (or (or $x123 $x997) $x2546)))))
(let ((@x2556 (trans @x2551 (rewrite (= (or (or $x123 $x997) $x2546) $x2552)) (= $x2132 $x2552))))
(let ((@x2516 (monotonicity (rewrite (= $x978 (not (or $x176 $x917)))) (= $x981 (not (not (or $x176 $x917)))))))
(let ((@x2520 (trans @x2516 (rewrite (= (not (not (or $x176 $x917))) (or $x176 $x917))) (= $x981 (or $x176 $x917)))))
(let ((@x2528 (trans (monotonicity @x2520 (= $x989 (or (or $x176 $x917) $x985))) (rewrite (= (or (or $x176 $x917) $x985) (or $x176 $x917 $x985))) (= $x989 (or $x176 $x917 $x985)))))
(let ((@x2504 (rewrite (= (or (or $x175 (not $x177)) $x1010) (or $x175 (not $x177) $x1010)))))
(let ((@x2496 (rewrite (= (not (not (or $x175 (not $x177)))) (or $x175 (not $x177))))))
(let ((@x2494 (monotonicity (rewrite (= $x178 (not (or $x175 (not $x177))))) (= $x398 (not (not (or $x175 (not $x177))))))))
(let ((@x2501 (monotonicity (trans @x2494 @x2496 (= $x398 (or $x175 (not $x177)))) (= $x1037 (or (or $x175 (not $x177)) $x1010)))))
(let ((@x2509 (quant-intro (trans @x2501 @x2504 (= $x1037 (or $x175 (not $x177) $x1010))) (= $x1040 $x2507))))
(let ((?x1573 (?v1!6 ?0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x2091 (and (not $x2070) $x1578 $x2086)))
(let (($x2094 (or $x949 $x2091)))
(let ((@x2465 (monotonicity (rewrite (= $x946 (not (or $x123 $x942)))) (= $x949 (not (not (or $x123 $x942)))))))
(let ((@x2469 (trans @x2465 (rewrite (= (not (not (or $x123 $x942))) (or $x123 $x942))) (= $x949 (or $x123 $x942)))))
(let ((@x2478 (monotonicity @x2469 (rewrite (= $x2091 $x2473)) (= $x2094 (or (or $x123 $x942) $x2473)))))
(let ((@x2483 (trans @x2478 (rewrite (= (or (or $x123 $x942) $x2473) $x2479)) (= $x2094 $x2479))))
(let ((@x2945 (monotonicity (quant-intro @x2483 (= $x2097 $x2484)) @x2509 (quant-intro @x2528 (= $x992 $x2529)) (quant-intro @x2556 (= $x2135 $x2557)) (monotonicity @x2711 (trans @x2928 @x2937 (= $x2296 $x2935)) (= $x2301 $x2940)) (= $x2310 (and $x2484 $x170 $x1046 $x2507 $x2529 $x2557 $x2940)))))
(let ((@x2958 (trans @x2945 (rewrite (= (and $x2484 $x170 $x1046 $x2507 $x2529 $x2557 $x2940) $x2954)) (= $x2310 $x2954))))
(let (($x1549 (and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?0 ?v0!5))) 0))))
(let (($x1559 (not $x1549)))
(let ((@x2441 (monotonicity (rewrite (= $x1549 (not $x2435))) (= $x1559 (not (not $x2435))))))
(let ((@x2448 (quant-intro (trans @x2441 (rewrite (= (not (not $x2435)) $x2435)) (= $x1559 $x2435)) (= $x1562 $x2446))))
(let ((@x2458 (trans (monotonicity @x2448 (= $x2057 (and $x1534 $x1539 $x2446))) (rewrite (= (and $x1534 $x1539 $x2446) $x2454)) (= $x2057 $x2454))))
(let ((@x2418 (monotonicity (rewrite (= $x921 (not (or $x134 $x917)))) (= $x924 (not (not (or $x134 $x917)))))))
(let ((@x2422 (trans @x2418 (rewrite (= (not (not (or $x134 $x917))) (or $x134 $x917))) (= $x924 (or $x134 $x917)))))
(let ((@x2430 (trans (monotonicity @x2422 (= $x931 (or (or $x134 $x917) $x928))) (rewrite (= (or (or $x134 $x917) $x928) (or $x134 $x917 $x928))) (= $x931 (or $x134 $x917 $x928)))))
(let ((@x2964 (monotonicity (quant-intro @x2430 (= $x934 $x2431)) (monotonicity @x2458 @x2958 (= $x2315 $x2959)) (= $x2318 (and $x2431 $x2959)))))
(let ((@x2396 (monotonicity (rewrite (= (and $x1507 (not $x1512)) (not (or $x2389 $x1512)))) (= $x1515 (not (not (or $x2389 $x1512)))))))
(let ((@x2400 (trans @x2396 (rewrite (= (not (not (or $x2389 $x1512))) (or $x2389 $x1512))) (= $x1515 (or $x2389 $x1512)))))
(let ((@x2408 (trans (monotonicity @x2400 (= $x2046 (or (or $x2389 $x1512) $x2043))) (rewrite (= (or (or $x2389 $x1512) $x2043) $x2404)) (= $x2046 $x2404))))
(let ((@x2975 (monotonicity (monotonicity @x2408 (= $x2049 $x2409)) (trans @x2964 (rewrite (= (and $x2431 $x2959) $x2968)) (= $x2318 $x2968)) (= $x2321 $x2973))))
(let (($x2382 (= (or (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1))) $x902) $x2381)))
(let (($x2379 (= $x906 (or (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1))) $x902))))
(let (($x2367 (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1)))))
(let ((@x2373 (monotonicity (rewrite (= $x146 (not $x2367))) (= $x377 (not (not $x2367))))))
(let ((@x2380 (monotonicity (trans @x2373 (rewrite (= (not (not $x2367)) $x2367)) (= $x377 $x2367)) $x2379)))
(let ((@x2388 (quant-intro (trans @x2380 (rewrite $x2382) (= $x906 $x2381)) (= $x909 $x2386))))
(let ((@x2986 (trans (monotonicity @x2388 @x2975 (= $x2324 (and $x2386 $x2973))) (rewrite (= (and $x2386 $x2973) $x2982)) (= $x2324 $x2982))))
(let ((@x2350 (monotonicity (rewrite (= (and (not $x1484) $x1486) (not (or $x1484 $x2343)))) (= $x1488 (not (not (or $x1484 $x2343)))))))
(let ((@x2354 (trans @x2350 (rewrite (= (not (not (or $x1484 $x2343))) (or $x1484 $x2343))) (= $x1488 (or $x1484 $x2343)))))
(let ((@x2362 (trans (monotonicity @x2354 (= $x1494 (or (or $x1484 $x2343) $x1493))) (rewrite (= (or (or $x1484 $x2343) $x1493) $x2358)) (= $x1494 $x2358))))
(let ((@x2989 (monotonicity (monotonicity @x2362 (= $x1495 $x2363)) @x2986 (= $x2327 $x2987))))
(let ((@x2999 (trans (monotonicity @x2989 (= $x2330 (and $x894 $x2987))) (rewrite (= (and $x894 $x2987) $x2995)) (= $x2330 $x2995))))
(let ((@x3005 (monotonicity (monotonicity @x2999 (= $x2333 $x3000)) (= $x2336 (and $x142 $x3000)))))
(let ((@x3015 (monotonicity (trans @x3005 (rewrite (= (and $x142 $x3000) $x3008)) (= $x2336 $x3008)) (= $x2339 $x3013))))
(let (($x1933 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1920 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x268 ?x1907) 0))))
(not $x1920)))))) :qid k!38))
))
(let (($x1927 (not (not (and $x1905 $x1910)))))
(let (($x1937 (and $x1927 $x1933)))
(let (($x1942 (and $x1284 $x1937)))
(let (($x1946 (or $x1893 $x1942)))
(let (($x1950 (and $x1265 $x1946)))
(let (($x1954 (or $x1866 $x1950)))
(let (($x1958 (and $x1251 $x1954)))
(let (($x1962 (or $x1843 $x1958)))
(let (($x1837 (not $x768)))
(let (($x1966 (and $x1837 $x1962)))
(let (($x1970 (or $x768 $x1966)))
(let (($x1974 (and $x647 $x1970)))
(let (($x1978 (or $x1825 $x1974)))
(let (($x1982 (and $x1242 $x1978)))
(let (($x1986 (or $x1808 $x1982)))
(let (($x1796 (and (and $x1769 $x1774) $x253 $x1209 $x1204 $x261 $x1188 $x1194)))
(let (($x1990 (and $x1796 $x1986)))
(let (($x1734 (not (or $x1728 (>= (+ ?x1722 ?x1716 ?x1730) 0)))))
(let (($x1751 (or $x1734 $x1747)))
(let (($x1708 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x1092 (* (- 1) ?x227)))
(let ((?x1694 (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))))
(let ((?x1699 (b_G$ (pair$ (?v1!9 ?v0) ?v0))))
(let (($x1701 (= (+ ?x1699 ?x1694 ?x1092) 0)))
(let (($x1702 (and (not (>= (+ ?x1694 ?x1092) 0)) $x1701)))
(let (($x1094 (<= (+ b_Infinity$ ?x1092) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x1702))))))))))))) :qid k!38))
))
(let (($x1755 (and $x1708 $x1751)))
(let (($x1682 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x1670 (and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x227 ?x1657) 0))))
(not $x1670))))) :qid k!38))
))
(let (($x1676 (not (not (and $x1655 $x1660)))))
(let (($x1686 (and $x1676 $x1682)))
(let (($x1759 (or $x1686 $x1755)))
(let (($x1647 (and $x1636 $x209 $x212 $x214 $x217)))
(let (($x1763 (and $x1647 $x1759)))
(let (($x1994 (or $x1763 $x1990)))
(let (($x1624 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x995 (* (- 1) ?x171)))
(let ((?x1608 (?v1!7 ?v0)))
(let ((?x1609 (fun_app$a v_b_SP_G_1$ ?x1608)))
(let ((?x1615 (b_G$ (pair$ ?x1608 ?v0))))
(let (($x1617 (= (+ ?x1615 ?x1609 ?x995) 0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x1618 (and (not (>= (+ ?x1609 ?x995) 0)) $x1613 $x1617)))
(let (($x997 (<= (+ b_Infinity$ ?x995) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x1618))))))))))))))) :qid k!38))
))
(let (($x1589 (forall ((?v0 B_Vertex$) )(! (let ((?x1580 (b_G$ (pair$ (?v1!6 ?v0) ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x940 (* (- 1) ?x124)))
(let ((?x1573 (?v1!6 ?v0)))
(let ((?x1574 (v_b_SP_G_0$ ?x1573)))
(let (($x1582 (= (+ ?x1574 ?x940 ?x1580) 0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x1583 (and (not (>= (+ ?x1574 ?x940) 0)) $x1578 $x1582)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ ?x940) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x1583))))))))))))) :qid k!38))
))
(let (($x1627 (and $x1589 $x170 $x1046 $x1040 $x992 $x1624)))
(let (($x1998 (and $x1627 $x1994)))
(let (($x1556 (not (not (and $x1534 $x1539)))))
(let (($x1566 (and $x1556 $x1562)))
(let (($x2002 (or $x1566 $x1998)))
(let (($x2006 (and $x934 $x2002)))
(let (($x1522 (not (or $x1515 (>= (+ ?x1516 ?x1518 ?x1509) 0)))))
(let (($x2010 (or $x1522 $x2006)))
(let (($x2014 (and $x909 $x2010)))
(let (($x2018 (or $x1495 $x2014)))
(let (($x2022 (and $x894 $x2018)))
(let (($x2026 (or $x1472 $x2022)))
(let (($x1466 (not $x864)))
(let (($x2030 (and $x1466 $x2026)))
(let (($x2034 (or $x864 $x2030)))
(let (($x1920 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) 0))))
(let (($x1930 (not $x1920)))
(let (($x2235 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))))))
(let ((@x2239 (monotonicity (rewrite $x2235) (= (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) 0) $x2237))))
(let ((@x2248 (quant-intro (monotonicity (monotonicity @x2239 (= $x1920 $x2240)) (= $x1930 $x2243)) (= $x1933 $x2246))))
(let ((@x2251 (monotonicity (rewrite (= $x1927 (and $x1905 $x1910))) @x2248 (= $x1937 (and (and $x1905 $x1910) $x2246)))))
(let ((@x2259 (trans (monotonicity @x2251 (= $x1942 (and $x1284 (and (and $x1905 $x1910) $x2246)))) (rewrite (= (and $x1284 (and (and $x1905 $x1910) $x2246)) $x2255)) (= $x1942 $x2255))))
(let ((@x2268 (monotonicity (monotonicity (monotonicity @x2259 (= $x1946 $x2260)) (= $x1950 $x2263)) (= $x1954 $x2266))))
(let ((@x2277 (monotonicity (rewrite (= $x1837 $x292)) (monotonicity (monotonicity @x2268 (= $x1958 $x2269)) (= $x1962 $x2272)) (= $x1966 $x2275))))
(let ((@x2286 (monotonicity (monotonicity (monotonicity @x2277 (= $x1970 $x2278)) (= $x1974 $x2281)) (= $x1978 $x2284))))
(let ((@x2295 (monotonicity (monotonicity (monotonicity @x2286 (= $x1982 $x2287)) (= $x1986 $x2290)) (= $x1990 (and $x1796 $x2290)))))
(let ((@x2206 (monotonicity (rewrite (= (+ ?x1722 ?x1716 ?x1730) ?x2201)) (= (>= (+ ?x1722 ?x1716 ?x1730) 0) $x2204))))
(let ((@x2209 (monotonicity @x2206 (= (or $x1728 (>= (+ ?x1722 ?x1716 ?x1730) 0)) $x2207))))
(let (($x2192 (and (not $x2171) $x2187)))
(let (($x2195 (or $x1101 $x2192)))
(let ((?x1092 (* (- 1) ?x227)))
(let ((?x1694 (fun_app$a v_b_SP_G_3$ (?v1!9 ?0))))
(let ((?x1699 (b_G$ (pair$ (?v1!9 ?0) ?0))))
(let (($x1701 (= (+ ?x1699 ?x1694 ?x1092) 0)))
(let (($x1702 (and (not (>= (+ ?x1694 ?x1092) 0)) $x1701)))
(let (($x1705 (or $x1101 $x1702)))
(let ((@x2184 (monotonicity (rewrite (= (+ ?x1699 ?x1694 ?x1092) (+ ?x1092 ?x1694 ?x1699))) (= $x1701 (= (+ ?x1092 ?x1694 ?x1699) 0)))))
(let ((@x2191 (trans @x2184 (rewrite (= (= (+ ?x1092 ?x1694 ?x1699) 0) $x2187)) (= $x1701 $x2187))))
(let ((@x2168 (monotonicity (rewrite (= (+ ?x1694 ?x1092) (+ ?x1092 ?x1694))) (= (>= (+ ?x1694 ?x1092) 0) (>= (+ ?x1092 ?x1694) 0)))))
(let ((@x2175 (trans @x2168 (rewrite (= (>= (+ ?x1092 ?x1694) 0) $x2171)) (= (>= (+ ?x1694 ?x1092) 0) $x2171))))
(let ((@x2194 (monotonicity (monotonicity @x2175 (= (not (>= (+ ?x1694 ?x1092) 0)) (not $x2171))) @x2191 (= $x1702 $x2192))))
(let ((@x2218 (monotonicity (quant-intro (monotonicity @x2194 (= $x1705 $x2195)) (= $x1708 $x2198)) (monotonicity (monotonicity @x2209 (= $x1734 $x2210)) (= $x1751 $x2213)) (= $x1755 $x2216))))
(let (($x1670 (and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) 0))))
(let (($x1679 (not $x1670)))
(let (($x2141 (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) (+ ?x227 ?x1657 (b_G$ (pair$ ?0 ?v0!8))))))
(let ((@x2145 (monotonicity (rewrite $x2141) (= (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) 0) $x2143))))
(let ((@x2154 (quant-intro (monotonicity (monotonicity @x2145 (= $x1670 $x2146)) (= $x1679 $x2149)) (= $x1682 $x2152))))
(let ((@x2157 (monotonicity (rewrite (= $x1676 (and $x1655 $x1660))) @x2154 (= $x1686 (and (and $x1655 $x1660) $x2152)))))
(let ((@x2162 (trans @x2157 (rewrite (= (and (and $x1655 $x1660) $x2152) $x2158)) (= $x1686 $x2158))))
(let ((@x2224 (monotonicity (monotonicity @x2162 @x2218 (= $x1759 $x2219)) (= $x1763 (and $x1647 $x2219)))))
(let ((@x2303 (monotonicity (trans @x2224 (rewrite (= (and $x1647 $x2219) $x2225)) (= $x1763 $x2225)) (trans @x2295 (rewrite (= (and $x1796 $x2290) $x2296)) (= $x1990 $x2296)) (= $x1994 $x2301))))
(let ((?x995 (* (- 1) ?x171)))
(let ((?x1609 (fun_app$a v_b_SP_G_1$ ?x1608)))
(let ((?x1615 (b_G$ (pair$ ?x1608 ?0))))
(let (($x1617 (= (+ ?x1615 ?x1609 ?x995) 0)))
(let (($x1618 (and (not (>= (+ ?x1609 ?x995) 0)) $x1613 $x1617)))
(let (($x1621 (or $x1004 $x1618)))
(let ((@x2121 (monotonicity (rewrite (= (+ ?x1615 ?x1609 ?x995) (+ ?x995 ?x1609 ?x1615))) (= $x1617 (= (+ ?x995 ?x1609 ?x1615) 0)))))
(let ((@x2128 (trans @x2121 (rewrite (= (= (+ ?x995 ?x1609 ?x1615) 0) $x2124)) (= $x1617 $x2124))))
(let ((@x2105 (monotonicity (rewrite (= (+ ?x1609 ?x995) (+ ?x995 ?x1609))) (= (>= (+ ?x1609 ?x995) 0) (>= (+ ?x995 ?x1609) 0)))))
(let ((@x2112 (trans @x2105 (rewrite (= (>= (+ ?x995 ?x1609) 0) $x2108)) (= (>= (+ ?x1609 ?x995) 0) $x2108))))
(let ((@x2131 (monotonicity (monotonicity @x2112 (= (not (>= (+ ?x1609 ?x995) 0)) (not $x2108))) @x2128 (= $x1618 $x2129))))
(let (($x1582 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124) (b_G$ (pair$ ?x1573 ?0))) 0)))
(let (($x1583 (and (not (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)) $x1578 $x1582)))
(let (($x1586 (or $x949 $x1583)))
(let (($x2081 (= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573) (b_G$ (pair$ ?x1573 ?0))) 0)))
(let (($x2079 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124) (b_G$ (pair$ ?x1573 ?0))) (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573) (b_G$ (pair$ ?x1573 ?0))))))
(let ((@x2090 (trans (monotonicity (rewrite $x2079) (= $x1582 $x2081)) (rewrite (= $x2081 $x2086)) (= $x1582 $x2086))))
(let (($x2076 (= (not (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)) (not $x2070))))
(let (($x1576 (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)))
(let (($x2063 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)))))
(let ((@x2067 (monotonicity (rewrite $x2063) (= $x1576 (>= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)) 0)))))
(let ((@x2074 (trans @x2067 (rewrite (= (>= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)) 0) $x2070)) (= $x1576 $x2070))))
(let ((@x2096 (monotonicity (monotonicity (monotonicity @x2074 $x2076) @x2090 (= $x1583 $x2091)) (= $x1586 $x2094))))
(let ((@x2306 (monotonicity (quant-intro @x2096 (= $x1589 $x2097)) (quant-intro (monotonicity @x2131 (= $x1621 $x2132)) (= $x1624 $x2135)) (= $x1627 (and $x2097 $x170 $x1046 $x1040 $x992 $x2135)))))
(let ((@x2309 (monotonicity @x2306 @x2303 (= $x1998 (and (and $x2097 $x170 $x1046 $x1040 $x992 $x2135) $x2301)))))
(let ((@x2314 (trans @x2309 (rewrite (= (and (and $x2097 $x170 $x1046 $x1040 $x992 $x2135) $x2301) $x2310)) (= $x1998 $x2310))))
(let ((@x2056 (monotonicity (rewrite (= $x1556 (and $x1534 $x1539))) (= $x1566 (and (and $x1534 $x1539) $x1562)))))
(let ((@x2061 (trans @x2056 (rewrite (= (and (and $x1534 $x1539) $x1562) $x2057)) (= $x1566 $x2057))))
(let ((@x2320 (monotonicity (monotonicity @x2061 @x2314 (= $x2002 $x2315)) (= $x2006 $x2318))))
(let ((@x2045 (monotonicity (rewrite (= (+ ?x1516 ?x1518 ?x1509) ?x2040)) (= (>= (+ ?x1516 ?x1518 ?x1509) 0) $x2043))))
(let ((@x2048 (monotonicity @x2045 (= (or $x1515 (>= (+ ?x1516 ?x1518 ?x1509) 0)) $x2046))))
(let ((@x2323 (monotonicity (monotonicity @x2048 (= $x1522 $x2049)) @x2320 (= $x2010 $x2321))))
(let ((@x2332 (monotonicity (monotonicity (monotonicity @x2323 (= $x2014 $x2324)) (= $x2018 $x2327)) (= $x2022 $x2330))))
(let ((@x2338 (monotonicity (rewrite (= $x1466 $x142)) (monotonicity @x2332 (= $x2026 $x2333)) (= $x2030 $x2336))))
(let (($x1921 (exists ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x268 ?x1907) 0)))))) :qid k!38))
))
(let ((@x1939 (nnf-neg (refl (~ $x1927 $x1927)) (nnf-neg (refl (~ $x1930 $x1930)) (~ (not $x1921) $x1933)) (~ (not (or (not (and $x1905 $x1910)) $x1921)) $x1937))))
(let ((@x1941 (trans (sk (~ (not $x1324) (not (or (not (and $x1905 $x1910)) $x1921)))) @x1939 (~ (not $x1324) $x1937))))
(let ((@x1902 (nnf-neg (nnf-pos (refl (~ $x1281 $x1281)) (~ $x1284 $x1284)) (~ (not $x1287) $x1284))))
(let ((@x1949 (nnf-neg (sk (~ $x1287 $x1893)) (nnf-neg @x1902 @x1941 (~ (not $x1327) $x1942)) (~ (not $x1330) $x1946))))
(let ((@x1875 (nnf-neg (nnf-pos (refl (~ $x1262 $x1262)) (~ $x1265 $x1265)) (~ (not $x1268) $x1265))))
(let ((@x1957 (nnf-neg (sk (~ $x1268 $x1866)) (nnf-neg @x1875 @x1949 (~ (not $x1333) $x1950)) (~ (not $x1336) $x1954))))
(let ((@x1852 (nnf-neg (nnf-pos (refl (~ (>= ?x268 0) (>= ?x268 0))) (~ $x1251 $x1251)) (~ (not $x1254) $x1251))))
(let ((@x1965 (nnf-neg (sk (~ $x1254 $x1843)) (nnf-neg @x1852 @x1957 (~ (not $x1339) $x1958)) (~ (not $x1342) $x1962))))
(let ((@x1973 (nnf-neg (refl (~ $x768 $x768)) (nnf-neg (refl (~ $x1837 $x1837)) @x1965 (~ (not $x1345) $x1966)) (~ (not $x1348) $x1970))))
(let ((@x1834 (nnf-neg (nnf-pos (refl (~ (or $x295 $x273) (or $x295 $x273))) (~ $x647 $x647)) (~ (not $x780) $x647))))
(let ((@x1981 (nnf-neg (sk (~ $x780 $x1825)) (nnf-neg @x1834 @x1973 (~ (not $x1351) $x1974)) (~ (not $x1354) $x1978))))
(let ((@x1817 (nnf-neg (nnf-pos (refl (~ $x1238 $x1238)) (~ $x1242 $x1242)) (~ (not $x1245) $x1242))))
(let ((@x1989 (nnf-neg (sk (~ $x1245 $x1808)) (nnf-neg @x1817 @x1981 (~ (not $x1357) $x1982)) (~ (not $x1360) $x1986))))
(let ((@x1798 (monotonicity (sk (~ $x1075 (and $x1769 $x1774))) (refl (~ $x253 $x253)) (refl (~ $x1209 $x1209)) (nnf-pos (refl (~ $x1201 $x1201)) (~ $x1204 $x1204)) (refl (~ $x261 $x261)) (nnf-pos (refl (~ $x1185 $x1185)) (~ $x1188 $x1188)) (nnf-pos (refl (~ $x1191 $x1191)) (~ $x1194 $x1194)) (~ $x1230 $x1796))))
(let ((@x1993 (nnf-neg (nnf-neg @x1798 (~ (not $x1235) $x1796)) @x1989 (~ (not $x1363) $x1990))))
(let ((@x1743 (nnf-neg (nnf-pos (refl (~ $x1138 $x1138)) (~ $x1141 $x1141)) (~ (not $x1144) $x1141))))
(let ((@x1754 (nnf-neg (sk (~ $x1144 $x1734)) (nnf-neg @x1743 (refl (~ $x1744 $x1744)) (~ (not $x1147) $x1747)) (~ (not $x1150) $x1751))))
(let ((@x1710 (nnf-pos (monotonicity (refl (~ $x1101 $x1101)) (sk (~ $x1117 $x1702)) (~ $x1120 $x1705)) (~ $x1123 $x1708))))
(let ((@x1758 (nnf-neg (nnf-neg @x1710 (~ (not $x1126) $x1708)) @x1754 (~ (not $x1153) $x1755))))
(let (($x1671 (exists ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x227 ?x1657) 0))))) :qid k!38))
))
(let ((@x1688 (nnf-neg (refl (~ $x1676 $x1676)) (nnf-neg (refl (~ $x1679 $x1679)) (~ (not $x1671) $x1682)) (~ (not (or (not (and $x1655 $x1660)) $x1671)) $x1686))))
(let ((@x1690 (trans (sk (~ $x1126 (not (or (not (and $x1655 $x1660)) $x1671)))) @x1688 (~ $x1126 $x1686))))
(let ((@x1649 (monotonicity (nnf-neg (refl (~ (not $x1072) (not $x1072))) (~ $x1078 $x1636)) (refl (~ $x209 $x209)) (refl (~ $x212 $x212)) (refl (~ $x214 $x214)) (refl (~ $x217 $x217)) (~ $x1084 $x1647))))
(let ((@x1766 (nnf-neg (nnf-neg @x1649 (~ (not $x1089) $x1647)) (nnf-neg @x1690 @x1758 (~ (not $x1156) $x1759)) (~ (not $x1159) $x1763))))
(let ((@x1626 (nnf-pos (monotonicity (refl (~ $x1004 $x1004)) (sk (~ $x1026 $x1618)) (~ $x1029 $x1621)) (~ $x1032 $x1624))))
(let ((@x1591 (nnf-pos (monotonicity (refl (~ $x949 $x949)) (sk (~ $x969 $x1583)) (~ $x972 $x1586)) (~ $x975 $x1589))))
(let ((@x1629 (monotonicity @x1591 (refl (~ $x170 $x170)) (nnf-pos (refl (~ (>= ?x171 0) (>= ?x171 0))) (~ $x1046 $x1046)) (nnf-pos (refl (~ $x1037 $x1037)) (~ $x1040 $x1040)) (nnf-pos (refl (~ $x989 $x989)) (~ $x992 $x992)) @x1626 (~ $x1064 $x1627))))
(let ((@x2001 (nnf-neg (nnf-neg @x1629 (~ (not $x1069) $x1627)) (nnf-neg @x1766 @x1993 (~ (not $x1366) $x1994)) (~ (not $x1369) $x1998))))
(let (($x1550 (exists ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))) :qid k!38))
))
(let ((@x1568 (nnf-neg (refl (~ $x1556 $x1556)) (nnf-neg (refl (~ $x1559 $x1559)) (~ (not $x1550) $x1562)) (~ (not (or (not (and $x1534 $x1539)) $x1550)) $x1566))))
(let ((@x1570 (trans (sk (~ (not $x975) (not (or (not (and $x1534 $x1539)) $x1550)))) @x1568 (~ (not $x975) $x1566))))
(let ((@x1531 (nnf-neg (nnf-pos (refl (~ $x931 $x931)) (~ $x934 $x934)) (~ (not $x937) $x934))))
(let ((@x2009 (nnf-neg @x1531 (nnf-neg @x1570 @x2001 (~ (not $x1372) $x2002)) (~ (not $x1375) $x2006))))
(let ((@x1504 (nnf-neg (nnf-pos (refl (~ $x906 $x906)) (~ $x909 $x909)) (~ (not $x912) $x909))))
(let ((@x2017 (nnf-neg @x1504 (nnf-neg (sk (~ $x937 $x1522)) @x2009 (~ (not $x1378) $x2010)) (~ (not $x1381) $x2014))))
(let ((@x1481 (nnf-neg (nnf-pos (refl (~ (>= ?x124 0) (>= ?x124 0))) (~ $x894 $x894)) (~ (not $x897) $x894))))
(let ((@x2025 (nnf-neg @x1481 (nnf-neg (sk (~ $x912 $x1495)) @x2017 (~ (not $x1384) $x2018)) (~ (not $x1387) $x2022))))
(let ((@x2033 (nnf-neg (refl (~ $x1466 $x1466)) (nnf-neg (sk (~ $x897 $x1472)) @x2025 (~ (not $x1390) $x2026)) (~ (not $x1393) $x2030))))
(let ((@x2037 (mp~ (not-or-elim (mp (asserted $x344) @x1406 $x1402) (not $x1396)) (nnf-neg (refl (~ $x864 $x864)) @x2033 (~ (not $x1396) $x2034)) $x2034)))
(let ((@x3873 (mp (mp (mp @x2037 (monotonicity @x2338 (= $x2034 $x2339)) $x2339) @x3015 $x3013) (monotonicity @x3869 (= $x3013 $x3870)) $x3870)))
(let ((@x4276 (unit-resolution @x3873 (lemma (unit-resolution @x5800 @x3487 (hypothesis $x864) false) $x142) $x3867)))
(let ((@x4278 (unit-resolution (def-axiom (or $x3861 $x1472 $x3855)) (unit-resolution (def-axiom (or $x3864 $x3858)) @x4276 $x3858) (lemma @x5085 $x1471) $x3855)))
(let ((@x3051 (unit-resolution ((_ quant-inst ?v0!2) (or (not $x3495) $x2343)) @x3500 (hypothesis $x1486) false)))
(let ((@x4352 (unit-resolution (def-axiom (or $x3849 $x2363 $x3843)) (unit-resolution (def-axiom (or $x2358 $x1486)) (lemma @x3051 $x2343) $x2358) (unit-resolution (def-axiom (or $x3852 $x3846)) @x4278 $x3846) $x3843)))
(let ((@x4355 (unit-resolution (def-axiom (or $x3837 $x2409 $x3831)) (unit-resolution (def-axiom (or $x3840 $x3834)) @x4352 $x3834) (unit-resolution (def-axiom (or $x2404 $x1507)) (lemma @x4007 $x2389) $x2404) $x3831)))
(let ((@x4357 (unit-resolution (def-axiom (or $x3825 $x3539 $x3819)) (unit-resolution (def-axiom (or $x3828 $x3822)) @x4355 $x3822) (lemma @x3189 $x3536) $x3819)))
(let ((@x4135 (unit-resolution (def-axiom (or $x3816 $x170)) @x4357 $x170)))
(let ((@x4159 (hypothesis $x3652)))
(let ((@x4139 (unit-resolution (def-axiom (or $x3649 $x214)) @x4159 $x214)))
(let ((@x4149 (unit-resolution (def-axiom (or $x3625 $x1744)) (trans (monotonicity @x4139 (= ?x242 ?x169)) @x4135 $x243) $x3625)))
(let (($x1720 (not $x1719)))
(let ((@x3125 (hypothesis $x2645)))
(let (($x4264 (>= (+ ?x1716 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!10))) 0)))
(let ((@x4002 (symm (hypothesis $x214) (= v_b_SP_G_1$ v_b_SP_G_3$))))
(let ((@x5768 (symm (monotonicity @x4002 (= (fun_app$a v_b_SP_G_1$ ?v1!10) ?x1716)) (= ?x1716 (fun_app$a v_b_SP_G_1$ ?v1!10)))))
(let ((@x5656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1716 (fun_app$a v_b_SP_G_1$ ?v1!10))) $x4264)) @x5768 $x4264)))
(let (($x5398 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!10))) 0)))
(let (($x5689 (fun_app$ v_b_Visited_G_1$ ?v1!10)))
(let (($x6142 (not $x5689)))
(let ((?x5569 (fun_app$a v_b_SP_G_1$ ?v1!10)))
(let ((?x5512 (fun_app$a v_b_SP_G_1$ ?v0!11)))
(let ((?x5709 (* (- 1) ?x5512)))
(let ((?x4184 (+ ?x1722 ?x5709 ?x5569)))
(let (($x4211 (>= ?x4184 0)))
(let ((?x4266 (+ ?x1729 ?x5709)))
(let (($x4267 (<= ?x4266 0)))
(let ((@x4273 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1729 ?x5512)) $x4267)) (symm (monotonicity @x4002 (= ?x5512 ?x1729)) (= ?x1729 ?x5512)) $x4267)))
(let ((@x4363 ((_ th-lemma arith farkas 1 -1 -1 1) (hypothesis $x4267) (hypothesis $x4264) (hypothesis $x4211) (hypothesis (not $x2204)) false)))
(let ((@x4274 (unit-resolution (lemma @x4363 (or (not $x4211) (not $x4267) (not $x4264) $x2204)) @x4273 @x5656 (unit-resolution (def-axiom (or $x2640 (not $x2204))) @x3125 (not $x2204)) (not $x4211))))
(let (($x4220 (or $x3573 $x6142 $x1725 $x4211)))
(let (($x5674 (or $x6142 $x1725 (>= (+ ?x1722 ?x5569 ?x5709) 0))))
(let (($x4221 (or $x3573 $x5674)))
(let ((@x4210 (monotonicity (rewrite (= (+ ?x1722 ?x5569 ?x5709) ?x4184)) (= (>= (+ ?x1722 ?x5569 ?x5709) 0) $x4211))))
(let ((@x4224 (monotonicity (monotonicity @x4210 (= $x5674 (or $x6142 $x1725 $x4211))) (= $x4221 (or $x3573 (or $x6142 $x1725 $x4211))))))
(let ((@x4227 (trans @x4224 (rewrite (= (or $x3573 (or $x6142 $x1725 $x4211)) $x4220)) (= $x4221 $x4220))))
(let ((@x4360 (unit-resolution (mp ((_ quant-inst ?v0!11 ?v1!10) $x4221) @x4227 $x4220) (unit-resolution (def-axiom (or $x3816 $x3568)) @x4357 $x3568) (unit-resolution (def-axiom (or $x2640 (not $x1725))) @x3125 (not $x1725)) (or $x6142 $x4211))))
(let (($x5857 (or $x5689 $x5398)))
(let ((@x5652 (mp ((_ quant-inst ?v1!10) (or $x3590 $x5857)) (rewrite (= (or $x3590 $x5857) (or $x3590 $x5689 $x5398))) (or $x3590 $x5689 $x5398))))
(let ((@x4367 (unit-resolution (unit-resolution @x5652 (hypothesis $x3585) $x5857) (unit-resolution @x4360 @x4274 $x6142) $x5398)))
(let ((@x4362 ((_ th-lemma arith farkas -1 1 1) @x4367 @x5656 (unit-resolution (def-axiom (or $x2640 $x1720)) @x3125 $x1720) false)))
(let ((@x4151 (unit-resolution (lemma @x4362 (or $x2640 $x3590 $x2703)) (unit-resolution (def-axiom (or $x3649 $x3585)) @x4159 $x3585) @x4139 $x2640)))
(let ((@x4161 (unit-resolution (def-axiom (or $x3637 $x3631)) (unit-resolution (def-axiom (or $x3634 $x2645 $x3628)) @x4151 @x4149 $x3634) $x3637)))
(let ((@x4158 (unit-resolution (def-axiom (or $x3646 $x3606 $x3640)) @x4161 (unit-resolution (def-axiom (or $x3649 $x3643)) @x4159 $x3643) $x3606)))
(let (($x3139 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!8))) 0)))
(let ((?x5112 (fun_app$a v_b_SP_G_1$ ?v0!8)))
(let ((?x5119 (* (- 1) ?x5112)))
(let ((?x3935 (?v1!7 ?v0!8)))
(let ((?x3976 (pair$ ?x3935 ?v0!8)))
(let ((?x3971 (b_G$ ?x3976)))
(let ((?x3928 (fun_app$a v_b_SP_G_1$ ?x3935)))
(let ((?x3958 (+ ?x3928 ?x3971 ?x5119)))
(let (($x3970 (= ?x3958 0)))
(let (($x3980 (not $x3970)))
(let (($x3930 (fun_app$ v_b_Visited_G_1$ ?x3935)))
(let (($x3959 (not $x3930)))
(let (($x3890 (>= (+ ?x3928 ?x5119) 0)))
(let (($x4009 (or $x3890 $x3959 $x3980)))
(let ((?x4378 (fun_app$a v_b_SP_G_3$ ?x3935)))
(let ((?x4397 (* (- 1) ?x4378)))
(let ((?x4601 (+ ?x3928 ?x4397)))
(let (($x4605 (>= ?x4601 0)))
(let ((@x4642 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3928 ?x4378)) $x4605)) (symm (monotonicity (hypothesis $x214) (= ?x4378 ?x3928)) (= ?x3928 ?x4378)) $x4605)))
(let ((?x4137 (+ ?x1656 ?x5119)))
(let (($x4122 (>= ?x4137 0)))
(let ((@x4625 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1656 ?x5112)) $x4122)) (symm (monotonicity @x4002 (= ?x5112 ?x1656)) (= ?x1656 ?x5112)) $x4122)))
(let (($x4065 (<= ?x3958 0)))
(let ((@x5126 (unit-resolution (def-axiom (or $x4009 $x3970)) (hypothesis (not $x4009)) $x3970)))
(let (($x4604 (<= ?x4601 0)))
(let ((@x5858 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3928 ?x4378)) $x4604)) (symm (monotonicity (hypothesis $x214) (= ?x4378 ?x3928)) (= ?x3928 ?x4378)) $x4604)))
(let (($x4121 (<= ?x4137 0)))
(let ((@x5140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1656 ?x5112)) $x4121)) (symm (monotonicity @x4002 (= ?x5112 ?x1656)) (= ?x1656 ?x5112)) $x4121)))
(let (($x4058 (>= ?x3958 0)))
(let (($x4399 (<= (+ ?x1656 ?x4397) 0)))
(let (($x4338 (not $x4399)))
(let ((@x4989 (unit-resolution (def-axiom (or $x4009 (not $x3890))) (hypothesis (not $x4009)) (not $x3890))))
(let ((@x5003 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1) (or $x4338 (not $x4122) $x3890 (not $x4605))) @x4989 @x4625 @x4642 $x4338)))
(let (($x4758 (not $x4605)))
(let (($x4757 (not $x4122)))
(let (($x4898 (or $x4399 $x3600 (not $x4058) (not $x4121) (not $x4604) (not $x4065) $x4757 $x4758)))
(let ((?x5665 (* (- 1) ?x3971)))
(let ((?x4417 (+ ?x1656 ?x5665 ?x4397)))
(let (($x4445 (>= ?x4417 0)))
(let ((@x5038 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1 -1) (or $x4445 (not $x4065) $x4757 $x4758)) (hypothesis $x4065) (hypothesis $x4122) (hypothesis $x4605) $x4445)))
(let (($x4444 (<= ?x4417 0)))
(let ((@x4331 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1 -1) (or $x4444 (not $x4058) (not $x4121) (not $x4604))) (hypothesis $x4058) (hypothesis $x4121) (hypothesis $x4604) $x4444)))
(let (($x4418 (= ?x4417 0)))
(let (($x4428 (not $x4418)))
(let (($x4430 (or $x4399 $x4428)))
(let (($x4447 (or $x3600 $x4399 $x4428)))
(let (($x4384 (>= (+ ?x4378 ?x1657) 0)))
(let (($x4388 (or $x4384 (not (= (+ ?x4378 ?x1657 ?x3971) 0)))))
(let (($x4432 (or $x3600 $x4388)))
(let ((@x4414 (monotonicity (rewrite (= (+ ?x4378 ?x1657 ?x3971) (+ ?x1657 ?x3971 ?x4378))) (= (= (+ ?x4378 ?x1657 ?x3971) 0) (= (+ ?x1657 ?x3971 ?x4378) 0)))))
(let ((@x4427 (trans @x4414 (rewrite (= (= (+ ?x1657 ?x3971 ?x4378) 0) $x4418)) (= (= (+ ?x4378 ?x1657 ?x3971) 0) $x4418))))
(let ((@x4396 (monotonicity (rewrite (= (+ ?x4378 ?x1657) (+ ?x1657 ?x4378))) (= $x4384 (>= (+ ?x1657 ?x4378) 0)))))
(let ((@x4406 (trans @x4396 (rewrite (= (>= (+ ?x1657 ?x4378) 0) $x4399)) (= $x4384 $x4399))))
(let ((@x4446 (monotonicity @x4406 (monotonicity @x4427 (= (not (= (+ ?x4378 ?x1657 ?x3971) 0)) $x4428)) (= $x4388 $x4430))))
(let ((@x4442 (trans (monotonicity @x4446 (= $x4432 (or $x3600 $x4430))) (rewrite (= (or $x3600 $x4430) $x4447)) (= $x4432 $x4447))))
(let ((@x5041 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!8)) $x4432) @x4442 $x4447) (hypothesis $x3595) $x4430)))
(let ((@x4897 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4418 (not $x4444) (not $x4445))) (unit-resolution @x5041 (hypothesis $x4338) $x4428) @x4331 @x5038 false)))
(let ((@x3135 (unit-resolution (lemma @x4897 $x4898) @x5003 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3980 $x4058)) @x5126 $x4058) (hypothesis $x3595) @x5140 @x5858 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3980 $x4065)) @x5126 $x4065) @x4625 @x4642 false)))
(let ((@x4168 (unit-resolution (lemma @x3135 (or $x4009 $x3600 $x2703)) (unit-resolution (def-axiom (or $x3603 $x3595)) @x4158 $x3595) @x4139 $x4009)))
(let ((@x4189 (unit-resolution (def-axiom (or $x3816 $x3576)) @x4357 $x3576)))
(let (($x4014 (not $x4009)))
(let (($x4042 (or $x3581 $x1654 $x3139 $x4014)))
(let (($x3956 (<= (+ ?x5112 (* (- 1) ?x3928)) 0)))
(let (($x3033 (or $x1654 $x3139 (not (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))))))
(let (($x4043 (or $x3581 $x3033)))
(let (($x3964 (= (not (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))) $x4014)))
(let (($x4010 (= (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0))) $x4009)))
(let (($x5977 (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))
(let ((@x3929 (rewrite (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) (+ (* (- 1) ?x3928) ?x5665 ?x5112)))))
(let ((@x3957 (monotonicity @x3929 (= $x5977 (= (+ (* (- 1) ?x3928) ?x5665 ?x5112) 0)))))
(let ((@x3988 (trans @x3957 (rewrite (= (= (+ (* (- 1) ?x3928) ?x5665 ?x5112) 0) $x3970)) (= $x5977 $x3970))))
(let ((@x3898 (monotonicity (rewrite (= (+ ?x5112 (* (- 1) ?x3928)) (+ (* (- 1) ?x3928) ?x5112))) (= $x3956 (<= (+ (* (- 1) ?x3928) ?x5112) 0)))))
(let ((@x3927 (trans @x3898 (rewrite (= (<= (+ (* (- 1) ?x3928) ?x5112) 0) $x3890)) (= $x3956 $x3890))))
(let ((@x4011 (monotonicity (monotonicity @x3927 (monotonicity @x3988 (= (not $x5977) $x3980)) $x4010) $x3964)))
(let ((@x4050 (monotonicity (monotonicity @x4011 (= $x3033 (or $x1654 $x3139 $x4014))) (= $x4043 (or $x3581 (or $x1654 $x3139 $x4014))))))
(let ((@x4053 (trans @x4050 (rewrite (= (or $x3581 (or $x1654 $x3139 $x4014)) $x4042)) (= $x4043 $x4042))))
(let ((@x4248 (unit-resolution (mp ((_ quant-inst ?v0!8) $x4043) @x4053 $x4042) @x4189 (unit-resolution (def-axiom (or $x3603 $x1655)) @x4158 $x1655) (or $x3139 $x4014))))
(let (($x4136 (= ?x1656 ?x5112)))
(let ((@x4235 (monotonicity (symm @x4139 (= v_b_SP_G_1$ v_b_SP_G_3$)) (= ?x5112 ?x1656))))
(let ((@x4237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4136) $x4122)) (symm @x4235 $x4136) $x4122)))
(let ((@x4238 ((_ th-lemma arith farkas 1 -1 1) @x4237 (unit-resolution @x4248 @x4168 $x3139) (unit-resolution (def-axiom (or $x3603 $x1660)) @x4158 $x1660) false)))
(let ((@x4802 (unit-resolution (def-axiom (or $x3813 $x3652 $x3807)) (lemma @x4238 $x3649) (unit-resolution (def-axiom (or $x3816 $x3810)) @x4357 $x3810) $x3807)))
(let ((@x6739 (symm (unit-resolution (def-axiom (or $x3804 $x261)) @x4802 $x261) (= ?x260 v_b_Visited_G_2$))))
(let ((@x10168 (symm (monotonicity @x6739 (= $x5237 (fun_app$ v_b_Visited_G_2$ ?v0!20))) (= (fun_app$ v_b_Visited_G_2$ ?v0!20) $x5237))))
(let ((@x10119 (monotonicity @x10168 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!20)) $x9037))))
(let (($x4298 (fun_app$ v_b_Visited_G_2$ ?v0!20)))
(let (($x4299 (not $x4298)))
(let ((?x4413 (fun_app$a v_b_SP_G_1$ ?v0!20)))
(let ((?x4438 (* (- 1) ?x4413)))
(let ((?x4439 (+ ?x1906 ?x4438)))
(let (($x6002 (>= ?x4439 0)))
(let (($x9479 (not $x6002)))
(let ((@x9476 (hypothesis $x6002)))
(let (($x9588 (or (not (<= (+ ?x1906 (* (- 1) (v_b_SP_G_2$ (?v1!7 ?v0!20)))) 0)) $x9479)))
(let ((?x4661 (?v1!7 ?v0!20)))
(let ((?x4662 (fun_app$a v_b_SP_G_1$ ?x4661)))
(let ((?x4663 (* (- 1) ?x4662)))
(let ((?x4664 (+ ?x4413 ?x4663)))
(let (($x4665 (<= ?x4664 0)))
(let ((?x4668 (pair$ ?x4661 ?v0!20)))
(let ((?x4669 (b_G$ ?x4668)))
(let ((?x4670 (* (- 1) ?x4669)))
(let ((?x4671 (+ ?x4413 ?x4663 ?x4670)))
(let (($x4672 (= ?x4671 0)))
(let (($x4673 (not $x4672)))
(let (($x4666 (fun_app$ v_b_Visited_G_1$ ?x4661)))
(let (($x4667 (not $x4666)))
(let (($x4674 (or $x4665 $x4667 $x4673)))
(let (($x4675 (not $x4674)))
(let (($x1884 (not $x1883)))
(let ((@x8699 (hypothesis $x2806)))
(let (($x7517 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!19)))) 0)))
(let ((?x7554 (pair$ v_b_v_G_1$ ?v0!19)))
(let ((?x7555 (b_G$ ?x7554)))
(let ((?x7388 (fun_app$a v_b_SP_G_1$ ?v0!19)))
(let ((?x7461 (* (- 1) ?x7388)))
(let (($x4944 (>= (+ ?x254 ?x7461 ?x7555) 0)))
(let (($x8378 (or $x7517 $x4944)))
(let ((?x7471 (+ ?x254 ?x1889 ?x7555)))
(let (($x6876 (= ?x7471 0)))
(let (($x8868 (not $x6876)))
(let (($x6123 (>= ?x7471 0)))
(let (($x8149 (not $x6123)))
(let ((?x7512 (* (- 1) ?x7555)))
(let ((?x9069 (+ ?x1880 ?x7512)))
(let (($x8504 (>= ?x9069 0)))
(let (($x6383 (= ?v1!18 v_b_v_G_1$)))
(let (($x5168 (fun_app$ v_b_Visited_G_1$ ?v1!18)))
(let (($x6179 (not $x5168)))
(let (($x7401 (<= (+ ?x1888 ?x7461) 0)))
(let ((?x5283 (b_G$ (pair$ v_b_v_G_1$ ?v0!13))))
(let ((?x5139 (+ ?x254 ?x1805 ?x5283)))
(let (($x4859 (= ?x5139 0)))
(let (($x4202 (>= (+ ?x254 (* (- 1) ?x1803) ?x5283) 0)))
(let (($x3165 (<= (+ b_Infinity$ (* (- 1) ?x5283)) 0)))
(let (($x4930 (or $x3165 $x4202)))
(let (($x4933 (not $x4930)))
(let ((@x4771 (monotonicity (commutativity (= (= ?x1803 ?x1804) (= ?x1804 ?x1803))) (= (not (= ?x1803 ?x1804)) (not (= ?x1804 ?x1803))))))
(let (($x4765 (not (= ?x1803 ?x1804))))
(let ((@x4772 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4765 $x1807)) (hypothesis $x1808) $x4765) @x4771 (not (= ?x1804 ?x1803)))))
(let (($x4288 (= ?x1804 ?x1803)))
(let (($x4284 (or $x4933 $x4288)))
(let ((@x4803 (unit-resolution (def-axiom (or $x3804 $x3673)) @x4802 $x3673)))
(let (($x4290 (or $x3678 $x4933 $x4288)))
(let (($x4289 (or (not (or $x3165 (<= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) 0))) $x4288)))
(let (($x4291 (or $x3678 $x4289)))
(let (($x3167 (<= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) 0)))
(let ((@x4198 (rewrite (= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) (+ ?x1168 ?x1803 (* (- 1) ?x5283))))))
(let ((@x4195 (monotonicity @x4198 (= $x3167 (<= (+ ?x1168 ?x1803 (* (- 1) ?x5283)) 0)))))
(let ((@x5138 (trans @x4195 (rewrite (= (<= (+ ?x1168 ?x1803 (* (- 1) ?x5283)) 0) $x4202)) (= $x3167 $x4202))))
(let ((@x4283 (monotonicity (monotonicity @x5138 (= (or $x3165 $x3167) $x4930)) (= (not (or $x3165 $x3167)) $x4933))))
(let ((@x4294 (monotonicity (monotonicity @x4283 (= $x4289 $x4284)) (= $x4291 (or $x3678 $x4284)))))
(let ((@x5050 (mp ((_ quant-inst ?v0!13) $x4291) (trans @x4294 (rewrite (= (or $x3678 $x4284) $x4290)) (= $x4291 $x4290)) $x4290)))
(let ((@x4805 (unit-resolution (def-axiom (or $x4930 (not $x3165))) (unit-resolution (unit-resolution @x5050 @x4803 $x4284) @x4772 $x4933) (not $x3165))))
(let ((@x4788 (unit-resolution (def-axiom (or $x4930 (not $x4202))) (unit-resolution (unit-resolution @x5050 @x4803 $x4284) @x4772 $x4933) (not $x4202))))
(let (($x5127 (or $x3165 $x4202 $x4859)))
(let ((@x4789 (unit-resolution (def-axiom (or $x3804 $x3665)) @x4802 $x3665)))
(let (($x5129 (or $x3670 $x3165 $x4202 $x4859)))
(let (($x4192 (or $x3165 $x3167 (= (+ ?x254 ?x5283 ?x1805) 0))))
(let (($x5130 (or $x3670 $x4192)))
(let ((@x4861 (monotonicity (rewrite (= (+ ?x254 ?x5283 ?x1805) ?x5139)) (= (= (+ ?x254 ?x5283 ?x1805) 0) $x4859))))
(let ((@x5135 (monotonicity (monotonicity @x5138 @x4861 (= $x4192 $x5127)) (= $x5130 (or $x3670 $x5127)))))
(let ((@x5160 (mp ((_ quant-inst ?v0!13) $x5130) (trans @x5135 (rewrite (= (or $x3670 $x5127) $x5129)) (= $x5130 $x5129)) $x5129)))
(let ((@x4787 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4859) (>= ?x5139 0))) (unit-resolution (unit-resolution @x5160 @x4789 $x5127) @x4788 @x4805 $x4859) (>= ?x5139 0))))
(let ((@x4795 (unit-resolution ((_ th-lemma arith farkas 1 1) (or (<= ?x1806 0) $x1807)) (hypothesis $x1808) (<= ?x1806 0))))
(let ((@x5162 (unit-resolution (def-axiom (or $x3801 $x1808 $x3795)) (unit-resolution (def-axiom (or $x3804 $x3798)) @x4802 $x3798) $x3798)))
(let ((@x4711 (unit-resolution @x5162 (lemma ((_ th-lemma arith farkas 1 -1 1) @x4795 @x4788 @x4787 false) $x1807) $x3795)))
(let ((@x4714 (unit-resolution (def-axiom (or $x3792 $x3681)) @x4711 $x3681)))
(let (($x6395 (or $x3686 $x7401)))
(let ((@x8489 (monotonicity (rewrite (= (+ ?x7388 ?x1889) (+ ?x1889 ?x7388))) (= (>= (+ ?x7388 ?x1889) 0) (>= (+ ?x1889 ?x7388) 0)))))
(let ((@x7634 (trans @x8489 (rewrite (= (>= (+ ?x1889 ?x7388) 0) $x7401)) (= (>= (+ ?x7388 ?x1889) 0) $x7401))))
(let ((@x8284 (trans (monotonicity @x7634 (= (or $x3686 (>= (+ ?x7388 ?x1889) 0)) $x6395)) (rewrite (= $x6395 $x6395)) (= (or $x3686 (>= (+ ?x7388 ?x1889) 0)) $x6395))))
(let ((@x8710 (unit-resolution (mp ((_ quant-inst ?v0!19) (or $x3686 (>= (+ ?x7388 ?x1889) 0))) @x8284 $x6395) @x4714 $x7401)))
(let (($x8129 (>= (+ ?x1887 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!18))) 0)))
(let ((?x6950 (fun_app$a v_b_SP_G_1$ ?v1!18)))
(let (($x6951 (= ?x1887 ?x6950)))
(let (($x1819 (fun_app$ v_b_Visited_G_2$ ?v0!14)))
(let (($x3393 (not $x1823)))
(let (($x5543 (fun_app$ v_b_Visited_G_1$ ?v0!14)))
(let (($x5064 (= ?v0!14 v_b_v_G_1$)))
(let (($x6244 (or $x5064 $x5543)))
(let (($x5974 (fun_app$ ?x260 ?v0!14)))
(let (($x6373 (= $x5974 $x6244)))
(let (($x3463 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :pattern ( (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3) ) :qid k!34))
))
(let (($x73 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!34))
))
(let (($x63 (fun_app$ (fun_upd$ ?3 ?2 ?1) ?0)))
(let (($x70 (= $x63 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0)))))
(let (($x68 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!34))
))
(let ((@x72 (rewrite (= (= $x63 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0))) $x70))))
(let ((@x1438 (mp~ (mp (asserted $x68) (quant-intro @x72 (= $x68 $x73)) $x73) (nnf-pos (refl (~ $x70 $x70)) (~ $x73 $x73)) $x73)))
(let ((@x3468 (mp @x1438 (quant-intro (refl (= $x70 $x70)) (= $x73 $x3463)) $x3463)))
(let (($x4134 (not $x3463)))
(let (($x5805 (or $x4134 $x6373)))
(let ((@x5853 (monotonicity (rewrite (= (ite $x5064 true $x5543) $x6244)) (= (= $x5974 (ite $x5064 true $x5543)) $x6373))))
(let ((@x3152 (monotonicity @x5853 (= (or $x4134 (= $x5974 (ite $x5064 true $x5543))) $x5805))))
(let ((@x4912 (trans @x3152 (rewrite (= $x5805 $x5805)) (= (or $x4134 (= $x5974 (ite $x5064 true $x5543))) $x5805))))
(let ((@x4913 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!14) (or $x4134 (= $x5974 (ite $x5064 true $x5543)))) @x4912 $x5805)))
(let ((@x5240 (mp (hypothesis $x1819) (symm (monotonicity @x6739 (= $x5974 $x1819)) (= $x1819 $x5974)) $x5974)))
(let ((@x5728 (unit-resolution (def-axiom (or (not $x6373) (not $x5974) $x6244)) @x5240 (unit-resolution @x4913 @x3468 $x6373) $x6244)))
(let ((@x7078 (hypothesis $x3393)))
(let ((?x3063 (v_b_SP_G_2$ v_b_v_G_1$)))
(let (($x3024 (= ?x3063 ?x254)))
(let ((?x3076 (pair$ v_b_v_G_1$ v_b_v_G_1$)))
(let ((?x3077 (b_G$ ?x3076)))
(let (($x3038 (>= ?x3077 0)))
(let (($x3080 (<= (+ b_Infinity$ (* (- 1) ?x3077)) 0)))
(let (($x4540 (or $x3080 $x3038)))
(let (($x6342 (= ?x3077 0)))
(let (($x3469 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :pattern ( (pair$ ?v0 ?v1) ) :qid k!36))
))
(let (($x95 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :qid k!36))
))
(let (($x92 (or (not (= ?1 ?0)) (= (b_G$ (pair$ ?1 ?0)) 0))))
(let (($x89 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(=> $x80 (= (b_G$ (pair$ ?v0 ?v1)) 0))) :qid k!36))
))
(let ((@x94 (rewrite (= (=> (= ?1 ?0) (= (b_G$ (pair$ ?1 ?0)) 0)) $x92))))
(let ((@x1443 (mp~ (mp (asserted $x89) (quant-intro @x94 (= $x89 $x95)) $x95) (nnf-pos (refl (~ $x92 $x92)) (~ $x95 $x95)) $x95)))
(let ((@x3474 (mp @x1443 (quant-intro (refl (= $x92 $x92)) (= $x95 $x3469)) $x3469)))
(let (($x3045 (not $x3469)))
(let (($x6595 (or $x3045 $x6342)))
(let ((@x6585 (monotonicity (rewrite (= (= v_b_v_G_1$ v_b_v_G_1$) true)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) (not true)))))
(let ((@x6587 (trans @x6585 (rewrite (= (not true) false)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) false))))
(let ((@x6590 (monotonicity @x6587 (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342) (or false $x6342)))))
(let ((@x6594 (trans @x6590 (rewrite (= (or false $x6342) $x6342)) (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342) $x6342))))
(let ((@x6599 (monotonicity @x6594 (= (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342)) $x6595))))
(let ((@x6602 (trans @x6599 (rewrite (= $x6595 $x6595)) (= (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342)) $x6595))))
(let ((@x6603 (mp ((_ quant-inst v_b_v_G_1$ v_b_v_G_1$) (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342))) @x6602 $x6595)))
(let ((@x6616 (lemma (unit-resolution @x6603 @x3474 (hypothesis (not $x6342)) false) $x6342)))
(let ((@x7085 (unit-resolution (def-axiom (or $x4540 (not $x3038))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6342) $x3038)) @x6616 $x3038) $x4540)))
(let (($x4579 (not $x4540)))
(let (($x4550 (or $x4579 $x3024)))
(let (($x4556 (or $x3678 $x4579 $x3024)))
(let (($x3874 (or (not (or $x3080 (<= (+ ?x254 ?x1168 (* (- 1) ?x3077)) 0))) $x3024)))
(let (($x4557 (or $x3678 $x3874)))
(let (($x3062 (<= (+ ?x254 ?x1168 (* (- 1) ?x3077)) 0)))
(let ((@x4468 (monotonicity (rewrite (= (+ ?x254 ?x1168 (* (- 1) ?x3077)) (* (- 1) ?x3077))) (= $x3062 (<= (* (- 1) ?x3077) 0)))))
(let ((@x4485 (trans @x4468 (rewrite (= (<= (* (- 1) ?x3077) 0) $x3038)) (= $x3062 $x3038))))
(let ((@x4549 (monotonicity (monotonicity @x4485 (= (or $x3080 $x3062) $x4540)) (= (not (or $x3080 $x3062)) $x4579))))
(let ((@x4561 (monotonicity (monotonicity @x4549 (= $x3874 $x4550)) (= $x4557 (or $x3678 $x4550)))))
(let ((@x4574 (mp ((_ quant-inst v_b_v_G_1$) $x4557) (trans @x4561 (rewrite (= (or $x3678 $x4550) $x4556)) (= $x4557 $x4556)) $x4556)))
(let ((@x7095 (trans (monotonicity (hypothesis $x5064) (= ?x1821 ?x3063)) (unit-resolution (unit-resolution @x4574 @x4803 $x4550) @x7085 $x3024) (= ?x1821 ?x254))))
(let ((@x7096 (trans @x7095 (symm (monotonicity (hypothesis $x5064) (= ?x1822 ?x254)) (= ?x254 ?x1822)) $x1823)))
(let ((@x6504 (unit-resolution (lemma (unit-resolution @x7078 @x7096 false) (or (not $x5064) $x1823)) @x7078 (not $x5064))))
(let ((@x6501 (unit-resolution (def-axiom (or (not $x6244) $x5064 $x5543)) @x6504 (or (not $x6244) $x5543))))
(let (($x6879 (>= (+ ?x254 (* (- 1) ?x1822)) 0)))
(let (($x7105 (not $x6879)))
(let (($x6372 (>= (+ ?x254 (* (- 1) ?x1822) (b_G$ (pair$ v_b_v_G_1$ ?v0!14))) 0)))
(let (($x6043 (not $x6372)))
(let (($x5623 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x6328 (or $x5623 $x6372)))
(let (($x5555 (not $x6328)))
(let (($x5565 (or $x3678 $x5555 $x1823)))
(let (($x5711 (<= (+ ?x1822 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5760 (or (not (or $x5623 $x5711)) $x1823)))
(let (($x5490 (or $x3678 $x5760)))
(let (($x5031 (<= (+ ?x1168 ?x1822 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5019 (= (+ ?x1822 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) (+ ?x1168 ?x1822 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))))))
(let ((@x6180 (trans (monotonicity (rewrite $x5019) (= $x5711 $x5031)) (rewrite (= $x5031 $x6372)) (= $x5711 $x6372))))
(let ((@x5556 (monotonicity (monotonicity @x6180 (= (or $x5623 $x5711) $x6328)) (= (not (or $x5623 $x5711)) $x5555))))
(let ((@x4918 (monotonicity (monotonicity @x5556 (= $x5760 (or $x5555 $x1823))) (= $x5490 (or $x3678 (or $x5555 $x1823))))))
(let ((@x6362 (trans @x4918 (rewrite (= (or $x3678 (or $x5555 $x1823)) $x5565)) (= $x5490 $x5565))))
(let ((@x6339 (unit-resolution (def-axiom (or $x6328 $x6043)) (unit-resolution (mp ((_ quant-inst ?v0!14) $x5490) @x6362 $x5565) @x4803 @x7078 $x5555) $x6043)))
(let ((?x5617 (pair$ v_b_v_G_1$ ?v0!14)))
(let ((?x5621 (b_G$ ?x5617)))
(let (($x6266 (>= ?x5621 0)))
(let ((@x6636 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x5621 0)) $x6266)) (hypothesis (not $x6266)) (not (= ?x5621 0)))))
(let (($x6078 (= v_b_v_G_1$ ?v0!14)))
(let (($x6076 (<= ?x5621 0)))
(let ((@x6410 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x6266 $x6076)) (hypothesis (not $x6266)) $x6076)))
(let (($x6080 (or $x6078 (not $x6076))))
(let (($x3475 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(or $x80 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :pattern ( (pair$ ?v0 ?v1) ) :qid k!37))
))
(let (($x116 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(or $x80 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :qid k!37))
))
(let (($x80 (= ?1 ?0)))
(let (($x113 (or $x80 (not (<= (b_G$ (pair$ ?1 ?0)) 0)))))
(let (($x101 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(=> (not (= ?v0 ?v1)) $x98)))) :qid k!37))
))
(let (($x106 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(let (($x80 (= ?v0 ?v1)))
(or $x80 $x98))))) :qid k!37))
))
(let ((?x29 (pair$ ?1 ?0)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(let ((@x115 (monotonicity (rewrite (= $x98 (not (<= ?x81 0)))) (= (or $x80 $x98) $x113))))
(let ((@x108 (quant-intro (rewrite (= (=> (not $x80) $x98) (or $x80 $x98))) (= $x101 $x106))))
(let ((@x121 (mp (asserted $x101) (trans @x108 (quant-intro @x115 (= $x106 $x116)) (= $x101 $x116)) $x116)))
(let ((@x3480 (mp (mp~ @x121 (nnf-pos (refl (~ $x113 $x113)) (~ $x116 $x116)) $x116) (quant-intro (refl (= $x113 $x113)) (= $x116 $x3475)) $x3475)))
(let ((@x6389 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or (not $x3475) $x6080)) (rewrite (= (or (not $x3475) $x6080) (or (not $x3475) $x6078 (not $x6076)))) (or (not $x3475) $x6078 (not $x6076)))))
(let (($x6086 (= ?x5621 0)))
(let (($x6096 (or (not $x6078) $x6086)))
(let ((@x6264 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or $x3045 $x6096)) (rewrite (= (or $x3045 $x6096) (or $x3045 (not $x6078) $x6086))) (or $x3045 (not $x6078) $x6086))))
(let ((@x6993 (unit-resolution (unit-resolution @x6264 @x3474 $x6096) (unit-resolution (unit-resolution @x6389 @x3480 $x6080) @x6410 $x6078) @x6636 false)))
(let ((@x7107 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x6266) (hypothesis $x6043) (hypothesis $x6879) false) (or (not $x6266) $x6372 $x7105))))
(let ((@x6134 (unit-resolution (unit-resolution @x7107 (lemma @x6993 $x6266) (or $x6372 $x7105)) @x6339 $x7105)))
(let ((@x6066 (unit-resolution (def-axiom (or $x3804 $x253)) @x4802 $x253)))
(let ((@x6683 (unit-resolution (def-axiom (or $x3816 $x3560)) @x4357 $x3560)))
(let (($x6034 (= (or $x3565 (or $x252 (not $x5543) $x6879)) (or $x3565 $x252 (not $x5543) $x6879))))
(let ((@x6556 (mp ((_ quant-inst ?v0!14 v_b_v_G_1$) (or $x3565 (or $x252 (not $x5543) $x6879))) (rewrite $x6034) (or $x3565 $x252 (not $x5543) $x6879))))
(let ((@x6850 (unit-resolution @x6556 @x6683 @x6066 @x6134 (unit-resolution @x6501 @x5728 $x5543) false)))
(let ((@x5791 (unit-resolution (lemma @x6850 $x1824) (unit-resolution (def-axiom (or $x1824 $x3393)) (hypothesis $x1825) $x3393) (unit-resolution (def-axiom (or $x1824 $x1819)) (hypothesis $x1825) $x1819) false)))
(let ((@x9261 (unit-resolution (def-axiom (or $x3789 $x1825 $x3783)) (unit-resolution (def-axiom (or $x3792 $x3786)) @x4711 $x3786) $x3786)))
(let ((@x9263 (unit-resolution (def-axiom (or $x3780 $x3690)) (unit-resolution @x9261 (lemma @x5791 $x1824) $x3783) $x3690)))
(let ((@x6271 (mp ((_ quant-inst ?v1!18) (or $x3695 (or $x2786 $x6951))) (rewrite (= (or $x3695 (or $x2786 $x6951)) (or $x3695 $x2786 $x6951))) (or $x3695 $x2786 $x6951))))
(let ((@x5205 (unit-resolution @x6271 @x9263 (unit-resolution (def-axiom (or $x2801 $x1878)) @x8699 $x1878) $x6951)))
(let ((@x8621 ((_ th-lemma arith assign-bounds -1 -1 1) (or (not (>= (+ ?x1880 ?x6950 ?x7461) 0)) (not $x7401) $x1891 (not $x8129)))))
(let ((@x8189 (unit-resolution @x8621 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6951) $x8129)) @x5205 $x8129) (unit-resolution (def-axiom (or $x2801 (not $x1891))) @x8699 (not $x1891)) @x8710 (not (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let (($x5620 (= (or $x3573 (or $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0))) (or $x3573 $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let ((@x7205 (mp ((_ quant-inst ?v0!19 ?v1!18) (or $x3573 (or $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))) (rewrite $x5620) (or $x3573 $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let ((@x8192 (unit-resolution @x7205 (unit-resolution (def-axiom (or $x3816 $x3568)) @x4357 $x3568) (unit-resolution (def-axiom (or $x2801 $x1884)) @x8699 $x1884) (or $x6179 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let (($x8059 (or $x6383 $x5168)))
(let (($x4914 (fun_app$ ?x260 ?v1!18)))
(let (($x8555 (= $x4914 $x8059)))
(let (($x7052 (or $x4134 $x8555)))
(let ((@x8554 (monotonicity (rewrite (= (ite $x6383 true $x5168) $x8059)) (= (= $x4914 (ite $x6383 true $x5168)) $x8555))))
(let ((@x8280 (monotonicity @x8554 (= (or $x4134 (= $x4914 (ite $x6383 true $x5168))) $x7052))))
(let ((@x7080 (trans @x8280 (rewrite (= $x7052 $x7052)) (= (or $x4134 (= $x4914 (ite $x6383 true $x5168))) $x7052))))
(let ((@x7791 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!18) (or $x4134 (= $x4914 (ite $x6383 true $x5168)))) @x7080 $x7052)))
(let ((@x8161 (mp (unit-resolution (def-axiom (or $x2801 $x1878)) @x8699 $x1878) (symm (monotonicity @x6739 (= $x4914 $x1878)) (= $x1878 $x4914)) $x4914)))
(let ((@x8162 (unit-resolution (def-axiom (or (not $x8555) (not $x4914) $x8059)) @x8161 (unit-resolution @x7791 @x3468 $x8555) $x8059)))
(let ((@x8163 (unit-resolution (def-axiom (or (not $x8059) $x6383 $x5168)) @x8162 (unit-resolution @x8192 @x8189 $x6179) $x6383)))
(let ((@x5864 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1880 ?x7555)) $x8504)) (monotonicity (monotonicity @x8163 (= ?x1879 ?x7554)) (= ?x1880 ?x7555)) $x8504)))
(let (($x7609 (>= (+ ?x1887 (* (- 1) ?x3063)) 0)))
(let ((@x5835 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1887 ?x3063)) $x7609)) (monotonicity @x8163 (= ?x1887 ?x3063)) $x7609)))
(let ((?x3064 (* (- 1) ?x3063)))
(let ((?x3904 (+ ?x254 ?x3064)))
(let (($x3905 (<= ?x3904 0)))
(let (($x4587 (= ?x254 ?x3063)))
(let ((@x8351 (mp (unit-resolution (unit-resolution @x4574 @x4803 $x4550) @x7085 $x3024) (symm (commutativity (= $x4587 $x3024)) (= $x3024 $x4587)) $x4587)))
(let ((@x8148 ((_ th-lemma arith farkas 1 -1 1 -1 1) (hypothesis $x6123) (hypothesis (not $x1891)) (hypothesis $x7609) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4587) $x3905)) @x8351 $x3905) (hypothesis $x8504) false)))
(let ((@x6098 (unit-resolution (lemma @x8148 (or $x8149 $x1891 (not $x7609) (not $x8504))) (unit-resolution (def-axiom (or $x2801 (not $x1891))) @x8699 (not $x1891)) @x5835 @x5864 $x8149)))
(let ((@x8175 (unit-resolution (def-axiom (or $x8378 (not $x7517))) (hypothesis (not $x8378)) (not $x7517))))
(let (($x7000 (not $x4944)))
(let ((@x8640 (unit-resolution (def-axiom (or $x8378 $x7000)) (hypothesis (not $x8378)) $x7000)))
(let (($x6310 (or $x7517 $x4944 $x6876)))
(let (($x7071 (or $x3670 $x7517 $x4944 $x6876)))
(let (($x7524 (<= (+ ?x7388 ?x1168 ?x7512) 0)))
(let (($x7589 (or $x7517 $x7524 (= (+ ?x254 ?x7555 ?x1889) 0))))
(let (($x6768 (or $x3670 $x7589)))
(let ((@x6946 (monotonicity (rewrite (= (+ ?x254 ?x7555 ?x1889) ?x7471)) (= (= (+ ?x254 ?x7555 ?x1889) 0) $x6876))))
(let ((@x7308 (monotonicity (rewrite (= (+ ?x7388 ?x1168 ?x7512) (+ ?x1168 ?x7388 ?x7512))) (= $x7524 (<= (+ ?x1168 ?x7388 ?x7512) 0)))))
(let ((@x8377 (trans @x7308 (rewrite (= (<= (+ ?x1168 ?x7388 ?x7512) 0) $x4944)) (= $x7524 $x4944))))
(let ((@x6639 (monotonicity (monotonicity @x8377 @x6946 (= $x7589 $x6310)) (= $x6768 (or $x3670 $x6310)))))
(let ((@x6030 (mp ((_ quant-inst ?v0!19) $x6768) (trans @x6639 (rewrite (= (or $x3670 $x6310) $x7071)) (= $x6768 $x7071)) $x7071)))
(let ((@x8762 (unit-resolution (unit-resolution @x6030 @x4789 $x6310) @x8640 @x8175 (hypothesis $x8868) false)))
(let ((@x8475 (unit-resolution (lemma @x8762 (or $x8378 $x6876)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x8868 $x6123)) @x6098 $x8868) $x8378)))
(let ((@x8713 (lemma ((_ th-lemma arith farkas -1 -1 1) @x8710 (hypothesis $x8149) (hypothesis $x4944) false) (or $x7000 $x6123))))
(let ((@x7808 (unit-resolution (def-axiom (or (not $x8378) $x7517 $x4944)) (unit-resolution @x8713 @x6098 $x7000) @x8475 $x7517)))
(let ((@x7807 ((_ th-lemma arith farkas 1 -1 1) @x5864 @x7808 (unit-resolution (def-axiom (or $x2801 $x1884)) @x8699 $x1884) false)))
(let (($x3381 (not $x1864)))
(let ((@x6859 (hypothesis $x2760)))
(let ((@x6910 (unit-resolution (def-axiom (or $x2755 $x3381)) @x6859 $x3381)))
(let (($x6437 (<= (+ ?x254 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!16))) 0)))
(let (($x4947 (fun_app$ v_b_Visited_G_1$ ?v1!16)))
(let (($x6336 (= ?v1!16 v_b_v_G_1$)))
(let (($x8534 (or $x6336 $x4947)))
(let (($x6263 (fun_app$ ?x260 ?v1!16)))
(let (($x6346 (= $x6263 $x8534)))
(let (($x8582 (or $x4134 $x6346)))
(let ((@x8309 (monotonicity (rewrite (= (ite $x6336 true $x4947) $x8534)) (= (= $x6263 (ite $x6336 true $x4947)) $x6346))))
(let ((@x8586 (monotonicity @x8309 (= (or $x4134 (= $x6263 (ite $x6336 true $x4947))) $x8582))))
(let ((@x8591 (trans @x8586 (rewrite (= $x8582 $x8582)) (= (or $x4134 (= $x6263 (ite $x6336 true $x4947))) $x8582))))
(let ((@x8592 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!16) (or $x4134 (= $x6263 (ite $x6336 true $x4947)))) @x8591 $x8582)))
(let ((@x7062 (monotonicity (symm (monotonicity @x6739 (= $x6263 $x1855)) (= $x1855 $x6263)) (= (not $x1855) (not $x6263)))))
(let ((@x7109 (mp (unit-resolution (def-axiom (or $x2755 (not $x1855))) @x6859 (not $x1855)) @x7062 (not $x6263))))
(let ((@x7053 (unit-resolution (def-axiom (or (not $x6346) $x6263 (not $x8534))) @x7109 (unit-resolution @x8592 @x3468 $x6346) (not $x8534))))
(let (($x7664 (or $x4947 $x6437)))
(let ((@x7108 (unit-resolution (def-axiom (or $x3804 $x3655)) @x4802 $x3655)))
(let (($x6930 (or $x3660 $x4947 $x6437)))
(let (($x7189 (>= (+ (fun_app$a v_b_SP_G_1$ ?v1!16) ?x1168) 0)))
(let (($x7192 (or $x4947 $x7189)))
(let (($x7392 (or $x3660 $x7192)))
(let ((@x6696 (rewrite (= (>= (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)) 0) $x6437))))
(let (($x7657 (= (+ (fun_app$a v_b_SP_G_1$ ?v1!16) ?x1168) (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)))))
(let ((@x6394 (monotonicity (rewrite $x7657) (= $x7189 (>= (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)) 0)))))
(let ((@x7789 (monotonicity (monotonicity (trans @x6394 @x6696 (= $x7189 $x6437)) (= $x7192 $x7664)) (= $x7392 (or $x3660 $x7664)))))
(let ((@x7788 (mp ((_ quant-inst ?v1!16) $x7392) (trans @x7789 (rewrite (= (or $x3660 $x7664) $x6930)) (= $x7392 $x6930)) $x6930)))
(let ((@x7110 (unit-resolution (unit-resolution @x7788 @x7108 $x7664) (unit-resolution (def-axiom (or $x8534 (not $x4947))) @x7053 (not $x4947)) $x6437)))
(let (($x6906 (<= (+ (v_b_SP_G_2$ ?v0!17) (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!17))) 0)))
(let (($x7394 (or $x3686 $x6906)))
(let (($x6869 (>= (+ (fun_app$a v_b_SP_G_1$ ?v0!17) (* (- 1) (v_b_SP_G_2$ ?v0!17))) 0)))
(let (($x7794 (>= (+ (* (- 1) (v_b_SP_G_2$ ?v0!17)) (fun_app$a v_b_SP_G_1$ ?v0!17)) 0)))
(let (($x7505 (= (+ (fun_app$a v_b_SP_G_1$ ?v0!17) (* (- 1) (v_b_SP_G_2$ ?v0!17))) (+ (* (- 1) (v_b_SP_G_2$ ?v0!17)) (fun_app$a v_b_SP_G_1$ ?v0!17)))))
(let ((@x6937 (trans (monotonicity (rewrite $x7505) (= $x6869 $x7794)) (rewrite (= $x7794 $x6906)) (= $x6869 $x6906))))
(let ((@x7419 (trans (monotonicity @x6937 (= (or $x3686 $x6869) $x7394)) (rewrite (= $x7394 $x7394)) (= (or $x3686 $x6869) $x7394))))
(let (($x6920 (>= (+ (v_b_SP_G_2$ ?v1!16) (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!16))) 0)))
(let ((?x6958 (fun_app$a v_b_SP_G_1$ ?v1!16)))
(let ((?x1860 (v_b_SP_G_2$ ?v1!16)))
(let (($x6841 (= ?x1860 ?x6958)))
(let (($x7027 (>= (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?v1!16)) (* (- 1) ?x6958)) 0)))
(let (($x6231 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v1!16)))) 0)))
(let (($x7455 (or $x6231 $x7027)))
(let ((?x6824 (pair$ v_b_v_G_1$ ?v1!16)))
(let ((?x6825 (b_G$ ?x6824)))
(let ((?x6938 (* (- 1) ?x1860)))
(let ((?x6929 (+ ?x254 ?x6938 ?x6825)))
(let (($x7553 (= ?x6929 0)))
(let (($x7206 (not $x7553)))
(let (($x6067 (<= ?x6929 0)))
(let (($x6919 (not $x6067)))
(let (($x6631 (fun_app$ v_b_Visited_G_1$ ?v0!17)))
(let (($x6844 (= ?v0!17 v_b_v_G_1$)))
(let (($x6265 (or $x6844 $x6631)))
(let (($x6895 (fun_app$ ?x260 ?v0!17)))
(let (($x6665 (= $x6895 $x6265)))
(let (($x5717 (or $x4134 $x6665)))
(let ((@x6990 (monotonicity (rewrite (= (ite $x6844 true $x6631) $x6265)) (= (= $x6895 (ite $x6844 true $x6631)) $x6665))))
(let ((@x7528 (monotonicity @x6990 (= (or $x4134 (= $x6895 (ite $x6844 true $x6631))) $x5717))))
(let ((@x7133 (trans @x7528 (rewrite (= $x5717 $x5717)) (= (or $x4134 (= $x6895 (ite $x6844 true $x6631))) $x5717))))
(let ((@x7043 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!17) (or $x4134 (= $x6895 (ite $x6844 true $x6631)))) @x7133 $x5717)))
(let ((@x7214 (mp (unit-resolution (def-axiom (or $x2755 $x1857)) @x6859 $x1857) (symm (monotonicity @x6739 (= $x6895 $x1857)) (= $x1857 $x6895)) $x6895)))
(let ((@x7215 (unit-resolution (def-axiom (or (not $x6665) (not $x6895) $x6265)) @x7214 (unit-resolution @x7043 @x3468 $x6665) $x6265)))
(let (($x7558 (<= ?x6825 0)))
(let (($x7559 (not $x7558)))
(let ((@x6953 (symm (commutativity (= (= v_b_v_G_1$ ?v1!16) $x6336)) (= $x6336 (= v_b_v_G_1$ ?v1!16)))))
(let ((@x6769 (mp (hypothesis (not $x6336)) (monotonicity @x6953 (= (not $x6336) (not (= v_b_v_G_1$ ?v1!16)))) (not (= v_b_v_G_1$ ?v1!16)))))
(let (($x7557 (= v_b_v_G_1$ ?v1!16)))
(let (($x7560 (or $x7557 $x7559)))
(let ((@x5992 (mp ((_ quant-inst v_b_v_G_1$ ?v1!16) (or (not $x3475) $x7560)) (rewrite (= (or (not $x3475) $x7560) (or (not $x3475) $x7557 $x7559))) (or (not $x3475) $x7557 $x7559))))
(let ((@x6161 (hypothesis $x3381)))
(let ((?x6285 (fun_app$a v_b_SP_G_1$ ?v0!17)))
(let ((?x6904 (* (- 1) ?x6285)))
(let ((?x7131 (+ ?x254 ?x6904)))
(let (($x6000 (>= ?x7131 0)))
(let (($x6858 (not $x6844)))
(let ((?x1861 (v_b_SP_G_2$ ?v0!17)))
(let (($x6188 (= ?x1861 ?x3063)))
(let (($x5847 (not $x6188)))
(let ((?x5089 (+ ?x1861 ?x3064)))
(let (($x5848 (<= ?x5089 0)))
(let (($x6925 (not $x5848)))
(let ((@x6267 (hypothesis $x6067)))
(let (($x3906 (>= ?x3904 0)))
(let (($x4341 (or $x3686 $x3906)))
(let ((@x4906 ((_ quant-inst v_b_v_G_1$) $x4341)))
(let ((@x6160 (unit-resolution @x4906 @x4714 $x3906)))
(let ((@x6971 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) @x6267 (hypothesis $x5848) @x6161 @x6160 (hypothesis $x7559) false) (or $x6925 $x6919 $x1864 $x7558))))
(let ((@x6928 (unit-resolution @x6971 @x6267 @x6161 (unit-resolution (unit-resolution @x5992 @x3480 $x7560) @x6769 $x7559) $x6925)))
(let ((@x6532 ((_ th-lemma arith triangle-eq) (or $x5847 $x5848))))
(let ((@x5114 (unit-resolution (hypothesis $x5847) (monotonicity (hypothesis $x6844) $x6188) false)))
(let ((@x5115 (lemma @x5114 (or $x6858 $x6188))))
(let ((@x8623 (def-axiom (or (not $x6265) $x6844 $x6631))))
(let ((@x4834 (unit-resolution @x8623 (unit-resolution @x5115 (unit-resolution @x6532 @x6928 $x5847) $x6858) (hypothesis $x6265) $x6631)))
(let (($x5475 (= (or $x3565 (or $x252 (not $x6631) $x6000)) (or $x3565 $x252 (not $x6631) $x6000))))
(let ((@x5735 (mp ((_ quant-inst ?v0!17 v_b_v_G_1$) (or $x3565 (or $x252 (not $x6631) $x6000))) (rewrite $x5475) (or $x3565 $x252 (not $x6631) $x6000))))
(let ((@x6914 ((_ th-lemma arith farkas 1 1 1 1 1) @x6267 (unit-resolution @x5735 @x6683 @x6066 @x4834 $x6000) (unit-resolution (mp ((_ quant-inst ?v0!17) (or $x3686 $x6869)) @x7419 $x7394) @x4714 $x6906) @x6161 (unit-resolution (unit-resolution @x5992 @x3480 $x7560) @x6769 $x7559) false)))
(let ((@x7217 (unit-resolution (lemma @x6914 (or $x6919 $x1864 (not $x6265) $x6336)) @x6910 @x7215 (unit-resolution (def-axiom (or $x8534 (not $x6336))) @x7053 (not $x6336)) $x6919)))
(let ((@x6357 (unit-resolution (def-axiom (or $x7455 (not $x6231))) (hypothesis (not $x7455)) (not $x6231))))
(let ((@x6426 (unit-resolution (def-axiom (or $x7455 (not $x7027))) (hypothesis (not $x7455)) (not $x7027))))
(let (($x7603 (or $x6231 $x7027 $x7553)))
(let (($x5113 (or $x3670 $x6231 $x7027 $x7553)))
(let (($x6826 (<= (+ ?x6958 ?x1168 (* (- 1) ?x6825)) 0)))
(let (($x6927 (or $x6231 $x6826 (= (+ ?x254 ?x6825 ?x6938) 0))))
(let (($x7688 (or $x3670 $x6927)))
(let ((@x7602 (monotonicity (rewrite (= (+ ?x254 ?x6825 ?x6938) ?x6929)) (= (= (+ ?x254 ?x6825 ?x6938) 0) $x7553))))
(let ((@x7947 (rewrite (= (+ ?x6958 ?x1168 (* (- 1) ?x6825)) (+ ?x1168 (* (- 1) ?x6825) ?x6958)))))
(let ((@x7737 (monotonicity @x7947 (= $x6826 (<= (+ ?x1168 (* (- 1) ?x6825) ?x6958) 0)))))
(let ((@x8385 (trans @x7737 (rewrite (= (<= (+ ?x1168 (* (- 1) ?x6825) ?x6958) 0) $x7027)) (= $x6826 $x7027))))
(let ((@x6604 (monotonicity (monotonicity @x8385 @x7602 (= $x6927 $x7603)) (= $x7688 (or $x3670 $x7603)))))
(let ((@x7391 (mp ((_ quant-inst ?v1!16) $x7688) (trans @x6604 (rewrite (= (or $x3670 $x7603) $x5113)) (= $x7688 $x5113)) $x5113)))
(let ((@x4197 (unit-resolution (unit-resolution @x7391 @x4789 $x7603) @x6426 @x6357 (hypothesis $x7206) false)))
(let ((@x7250 (unit-resolution (lemma @x4197 (or $x7455 $x7553)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7206 $x6067)) @x7217 $x7206) $x7455)))
(let (($x7639 (not $x7455)))
(let (($x7673 (or $x7639 $x6841)))
(let (($x7669 (or $x3678 $x7639 $x6841)))
(let ((@x7671 (monotonicity (monotonicity @x8385 (= (or $x6231 $x6826) $x7455)) (= (not (or $x6231 $x6826)) $x7639))))
(let ((@x7677 (monotonicity (monotonicity @x7671 (= (or (not (or $x6231 $x6826)) $x6841) $x7673)) (= (or $x3678 (or (not (or $x6231 $x6826)) $x6841)) (or $x3678 $x7673)))))
(let ((@x7387 (trans @x7677 (rewrite (= (or $x3678 $x7673) $x7669)) (= (or $x3678 (or (not (or $x6231 $x6826)) $x6841)) $x7669))))
(let ((@x7252 (unit-resolution (mp ((_ quant-inst ?v1!16) (or $x3678 (or (not (or $x6231 $x6826)) $x6841))) @x7387 $x7669) @x4803 $x7673)))
(let ((@x7315 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6841) $x6920)) (unit-resolution @x7252 @x7250 $x6841) $x6920)))
(let ((@x7323 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1 -1) (or (not $x6000) (not $x6437) (not $x6920) (not $x6906) $x1864)) @x7315 (unit-resolution (mp ((_ quant-inst ?v0!17) (or $x3686 $x6869)) @x7419 $x7394) @x4714 $x6906) @x7110 @x6910 (not $x6000))))
(let ((@x7351 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1 1) (or $x6925 (not $x3906) (not $x6437) (not $x6920) $x1864)) @x7315 @x6160 @x7110 @x6910 $x6925)))
(let ((@x7364 (unit-resolution @x8623 (unit-resolution @x5115 (unit-resolution @x6532 @x7351 $x5847) $x6858) @x7215 $x6631)))
(let (($x6106 (not (<= (b_G$ (pair$ v_b_v_G_1$ ?v0!15)) 0))))
(let (($x5808 (= v_b_v_G_1$ ?v0!15)))
(let (($x5324 (not $x5808)))
(let ((@x6624 (symm (commutativity (= $x5808 (= ?v0!15 v_b_v_G_1$))) (= (= ?v0!15 v_b_v_G_1$) $x5808))))
(let (($x6044 (= ?v0!15 v_b_v_G_1$)))
(let (($x6867 (not $x6044)))
(let (($x5521 (fun_app$ v_b_Visited_G_1$ ?v0!15)))
(let (($x6849 (or $x6044 $x5521)))
(let (($x6408 (fun_app$ ?x260 ?v0!15)))
(let (($x6494 (= $x6408 $x6849)))
(let (($x5683 (or $x4134 $x6494)))
(let ((@x6072 (monotonicity (rewrite (= (ite $x6044 true $x5521) $x6849)) (= (= $x6408 (ite $x6044 true $x5521)) $x6494))))
(let ((@x6772 (monotonicity @x6072 (= (or $x4134 (= $x6408 (ite $x6044 true $x5521))) $x5683))))
(let ((@x5812 (trans @x6772 (rewrite (= $x5683 $x5683)) (= (or $x4134 (= $x6408 (ite $x6044 true $x5521))) $x5683))))
(let ((@x5804 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!15) (or $x4134 (= $x6408 (ite $x6044 true $x5521)))) @x5812 $x5683)))
(let ((@x6715 (symm (monotonicity @x6739 (= $x6408 (fun_app$ v_b_Visited_G_2$ ?v0!15))) (= (fun_app$ v_b_Visited_G_2$ ?v0!15) $x6408))))
(let ((@x6719 (monotonicity @x6715 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!15)) (not $x6408)))))
(let (($x6151 (fun_app$ v_b_Visited_G_2$ ?v0!15)))
(let (($x6527 (not $x6151)))
(let ((@x6833 (hypothesis $x1843)))
(let (($x6836 (or (not (>= (+ ?x1841 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!15))) 0)) $x1842)))
(let (($x6830 (>= (+ ?x1841 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!15))) 0)))
(let ((?x6459 (fun_app$a v_b_SP_G_1$ ?v0!15)))
(let (($x6119 (>= ?x6459 0)))
(let ((@x4713 (unit-resolution (def-axiom (or $x3816 $x3551)) @x4357 $x3551)))
(let ((@x6834 ((_ th-lemma arith farkas -1 1 1) @x6833 (unit-resolution ((_ quant-inst ?v0!15) (or $x3556 $x6119)) @x4713 $x6119) (hypothesis $x6830) false)))
(let ((@x6656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1841 ?x6459)) $x6830)) (unit-resolution (lemma @x6834 $x6836) @x6833 (not $x6830)) (not (= ?x1841 ?x6459)))))
(let (($x6618 (= (or $x3695 (or $x6527 (= ?x1841 ?x6459))) (or $x3695 $x6527 (= ?x1841 ?x6459)))))
(let ((@x6610 (mp ((_ quant-inst ?v0!15) (or $x3695 (or $x6527 (= ?x1841 ?x6459)))) (rewrite $x6618) (or $x3695 $x6527 (= ?x1841 ?x6459)))))
(let ((@x6720 (mp (unit-resolution @x6610 (hypothesis $x3690) @x6656 $x6527) @x6719 (not $x6408))))
(let ((@x6725 (unit-resolution (def-axiom (or (not $x6494) $x6408 (not $x6849))) @x6720 (unit-resolution @x5804 @x3468 $x6494) (not $x6849))))
(let ((@x6488 (mp (unit-resolution (def-axiom (or $x6849 $x6867)) @x6725 $x6867) (monotonicity @x6624 (= $x6867 $x5324)) $x5324)))
(let (($x6164 (or $x5808 $x6106)))
(let ((@x5318 (mp ((_ quant-inst v_b_v_G_1$ ?v0!15) (or (not $x3475) $x6164)) (rewrite (= (or (not $x3475) $x6164) (or (not $x3475) $x5808 $x6106))) (or (not $x3475) $x5808 $x6106))))
(let (($x3157 (>= ?x169 0)))
(let ((?x4056 (+ ?x169 ?x1168)))
(let (($x6181 (<= ?x4056 0)))
(let (($x3907 (= v_b_v_G_1$ b_Source$)))
(let ((?x3908 (?v1!7 v_b_v_G_1$)))
(let ((?x3915 (pair$ ?x3908 v_b_v_G_1$)))
(let ((?x3916 (b_G$ ?x3915)))
(let ((?x3917 (* (- 1) ?x3916)))
(let ((?x3909 (fun_app$a v_b_SP_G_1$ ?x3908)))
(let ((?x3910 (* (- 1) ?x3909)))
(let ((?x3918 (+ ?x254 ?x3910 ?x3917)))
(let (($x3919 (= ?x3918 0)))
(let (($x3913 (fun_app$ v_b_Visited_G_1$ ?x3908)))
(let (($x3914 (not $x3913)))
(let ((?x3911 (+ ?x254 ?x3910)))
(let (($x3912 (<= ?x3911 0)))
(let (($x3921 (or $x3912 $x3914 (not $x3919))))
(let (($x4342 (>= ?x3911 0)))
(let (($x6807 (not $x4342)))
(let ((@x6790 (hypothesis $x4342)))
(let (($x5838 (>= ?x3909 0)))
(let ((?x6528 (pair$ v_b_v_G_1$ ?v0!15)))
(let ((?x6529 (b_G$ ?x6528)))
(let ((?x6364 (* (- 1) ?x1841)))
(let ((?x5981 (+ ?x254 ?x6364 ?x6529)))
(let (($x6866 (<= ?x5981 0)))
(let (($x6554 (= ?x5981 0)))
(let (($x5936 (>= (+ ?x254 (* (- 1) ?x6459) ?x6529) 0)))
(let (($x6303 (<= (+ b_Infinity$ (* (- 1) ?x6529)) 0)))
(let (($x3933 (or $x6303 $x5936)))
(let (($x6288 (not $x3933)))
(let (($x6486 (= ?x1841 ?x6459)))
(let (($x6685 (or $x3678 $x6288 $x6486)))
(let (($x6462 (or (not (or $x6303 (<= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) 0))) $x6486)))
(let (($x6686 (or $x3678 $x6462)))
(let (($x5681 (<= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) 0)))
(let ((@x3990 (rewrite (= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) (+ ?x1168 ?x6459 (* (- 1) ?x6529))))))
(let ((@x4138 (monotonicity @x3990 (= $x5681 (<= (+ ?x1168 ?x6459 (* (- 1) ?x6529)) 0)))))
(let ((@x3932 (trans @x4138 (rewrite (= (<= (+ ?x1168 ?x6459 (* (- 1) ?x6529)) 0) $x5936)) (= $x5681 $x5936))))
(let ((@x6693 (monotonicity (monotonicity @x3932 (= (or $x6303 $x5681) $x3933)) (= (not (or $x6303 $x5681)) $x6288))))
(let ((@x6509 (monotonicity (monotonicity @x6693 (= $x6462 (or $x6288 $x6486))) (= $x6686 (or $x3678 (or $x6288 $x6486))))))
(let ((@x5868 (trans @x6509 (rewrite (= (or $x3678 (or $x6288 $x6486)) $x6685)) (= $x6686 $x6685))))
(let ((@x6885 (unit-resolution (def-axiom (or $x3933 (not $x6303))) (hypothesis $x6288) (not $x6303))))
(let ((@x6886 (unit-resolution (def-axiom (or $x3933 (not $x5936))) (hypothesis $x6288) (not $x5936))))
(let (($x4983 (or $x6303 $x5936 $x6554)))
(let (($x3903 (or $x3670 $x6303 $x5936 $x6554)))
(let (($x5258 (or $x6303 $x5681 (= (+ ?x254 ?x6529 ?x6364) 0))))
(let (($x4854 (or $x3670 $x5258)))
(let ((@x4987 (monotonicity (rewrite (= (+ ?x254 ?x6529 ?x6364) ?x5981)) (= (= (+ ?x254 ?x6529 ?x6364) 0) $x6554))))
(let ((@x5496 (monotonicity (monotonicity @x3932 @x4987 (= $x5258 $x4983)) (= $x4854 (or $x3670 $x4983)))))
(let ((@x5069 (mp ((_ quant-inst ?v0!15) $x4854) (trans @x5496 (rewrite (= (or $x3670 $x4983) $x3903)) (= $x4854 $x3903)) $x3903)))
(let ((@x6888 (unit-resolution (unit-resolution @x5069 @x4789 $x4983) @x6886 @x6885 (hypothesis (not $x6554)) false)))
(let ((@x6099 (unit-resolution (lemma @x6888 (or $x3933 $x6554)) (unit-resolution (mp ((_ quant-inst ?v0!15) $x6686) @x5868 $x6685) @x4803 @x6656 $x6288) $x6554)))
(let ((@x6871 ((_ th-lemma arith farkas 1 1 1 1 1) @x6833 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6554) $x6866)) @x6099 $x6866) (unit-resolution ((_ quant-inst (?v1!7 v_b_v_G_1$)) (or $x3556 $x5838)) @x4713 $x5838) @x6790 (unit-resolution (unit-resolution @x5318 @x3480 $x6164) @x6488 $x6106) false)))
(let ((@x6225 (unit-resolution (lemma @x6871 (or $x3695 $x1842 $x6807)) (hypothesis $x3690) @x6833 $x6807)))
(let ((@x3174 (def-axiom (or $x3921 (not $x3912)))))
(let ((@x6645 (unit-resolution @x3174 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x4342 $x3912)) @x6225 $x3912) $x3921)))
(let (($x3922 (not $x3921)))
(let (($x4599 (or $x3581 $x3907 $x1208 $x3922)))
(let ((@x4617 (mp ((_ quant-inst v_b_v_G_1$) (or $x3581 (or $x3907 $x1208 $x3922))) (rewrite (= (or $x3581 (or $x3907 $x1208 $x3922)) $x4599)) $x4599)))
(let ((@x6649 (unit-resolution @x4617 @x4189 (unit-resolution (def-axiom (or $x3804 $x1209)) @x4802 $x1209) (or $x3907 $x3922))))
(let ((@x5588 (symm (monotonicity (unit-resolution @x6649 @x6645 $x3907) (= ?x254 ?x169)) (= ?x169 ?x254))))
(let ((@x5241 ((_ th-lemma arith farkas 1 1 1 1 1) @x6833 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6554) $x6866)) @x6099 $x6866) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x169 ?x254)) $x6181)) @x5588 $x6181) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2947 $x3157)) @x4135 $x3157) (unit-resolution (unit-resolution @x5318 @x3480 $x6164) @x6488 $x6106) false)))
(let ((@x8742 (unit-resolution (def-axiom (or $x3780 $x3774)) (unit-resolution @x9261 (lemma @x5791 $x1824) $x3783) $x3774)))
(let (($x4076 (= ?x291 ?x169)))
(let (($x4073 (<= (+ ?x169 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ b_Source$)))) 0)))
(let (($x4071 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ b_Source$)))) 0)))
(let (($x4074 (or $x4071 $x4073)))
(let (($x3924 (>= ?x254 0)))
(let (($x4636 (or $x3556 $x3924)))
(let ((@x4637 ((_ quant-inst v_b_v_G_1$) $x4636)))
(let (($x4075 (not $x4074)))
(let ((@x5775 (hypothesis $x4075)))
(let ((?x4061 (pair$ v_b_v_G_1$ b_Source$)))
(let ((?x4062 (b_G$ ?x4061)))
(let (($x5863 (>= ?x4062 0)))
(let (($x5333 (= ?x4062 0)))
(let (($x5329 (<= ?x4062 0)))
(let (($x4173 (<= ?x291 0)))
(let ((?x4078 (* (- 1) ?x291)))
(let ((?x4144 (+ ?x169 ?x4078)))
(let (($x4145 (>= ?x4144 0)))
(let (($x4905 (or $x3686 $x4145)))
(let ((@x5229 ((_ quant-inst b_Source$) $x4905)))
(let (($x3158 (<= ?x169 0)))
(let ((@x4838 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2947 $x3158)) @x4135 $x3158)))
(let ((@x4827 (unit-resolution ((_ th-lemma arith assign-bounds -1 1) (or $x4173 (not $x3158) (not $x4145))) @x4838 (unit-resolution @x5229 @x4714 $x4145) $x4173)))
(let ((?x4096 (+ ?x254 ?x4078 ?x4062)))
(let (($x4116 (<= ?x4096 0)))
(let (($x4099 (= ?x4096 0)))
(let (($x4102 (or $x4071 $x4073 $x4099)))
(let (($x4105 (or $x3670 $x4071 $x4073 $x4099)))
(let (($x4095 (or $x4071 $x4073 (= (+ ?x254 ?x4062 ?x4078) 0))))
(let (($x4106 (or $x3670 $x4095)))
(let ((@x4101 (monotonicity (rewrite (= (+ ?x254 ?x4062 ?x4078) ?x4096)) (= (= (+ ?x254 ?x4062 ?x4078) 0) $x4099))))
(let ((@x4110 (monotonicity (monotonicity @x4101 (= $x4095 $x4102)) (= $x4106 (or $x3670 $x4102)))))
(let ((@x4115 (mp ((_ quant-inst b_Source$) $x4106) (trans @x4110 (rewrite (= (or $x3670 $x4102) $x4105)) (= $x4106 $x4105)) $x4105)))
(let ((@x5780 (unit-resolution (unit-resolution @x4115 (hypothesis $x3665) $x4102) (unit-resolution (def-axiom (or $x4074 (not $x4073))) @x5775 (not $x4073)) (unit-resolution (def-axiom (or $x4074 (not $x4071))) @x5775 (not $x4071)) (hypothesis (not $x4099)) false)))
(let ((@x4831 (unit-resolution (lemma @x5780 (or $x4074 $x4099 $x3670)) @x4789 (or $x4074 $x4099))))
(let ((@x4846 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4099) $x4116)) (unit-resolution @x4831 @x5775 $x4099) $x4116)))
(let ((@x5939 ((_ th-lemma arith farkas -1 1 -1 1) (hypothesis $x3924) (hypothesis $x4173) (hypothesis (not $x5329)) (hypothesis $x4116) false)))
(let ((@x4867 (unit-resolution (lemma @x5939 (or $x5329 (not $x3924) (not $x4173) (not $x4116))) (unit-resolution @x4637 @x4713 $x3924) (or $x5329 (not $x4173) (not $x4116)))))
(let (($x5274 (= (or (not $x3475) (or $x3907 (not $x5329))) (or (not $x3475) $x3907 (not $x5329)))))
(let ((@x5275 (mp ((_ quant-inst v_b_v_G_1$ b_Source$) (or (not $x3475) (or $x3907 (not $x5329)))) (rewrite $x5274) (or (not $x3475) $x3907 (not $x5329)))))
(let ((@x5099 (rewrite (= (or $x3045 (or (not $x3907) $x5333)) (or $x3045 (not $x3907) $x5333)))))
(let ((@x5081 (mp ((_ quant-inst v_b_v_G_1$ b_Source$) (or $x3045 (or (not $x3907) $x5333))) @x5099 (or $x3045 (not $x3907) $x5333))))
(let ((@x4868 (unit-resolution @x5081 @x3474 (unit-resolution @x5275 @x3480 (unit-resolution @x4867 @x4846 @x4827 $x5329) $x3907) $x5333)))
(let ((@x4872 ((_ th-lemma arith farkas -1 1 1 1) @x4838 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x5333) $x5863)) @x4868 $x5863) (unit-resolution (def-axiom (or $x4074 (not $x4073))) @x5775 (not $x4073)) (unit-resolution @x4637 @x4713 $x3924) false)))
(let (($x4077 (or $x4075 $x4076)))
(let (($x5055 (or $x3678 $x4075 $x4076)))
(let ((@x5303 (mp ((_ quant-inst b_Source$) (or $x3678 $x4077)) (rewrite (= (or $x3678 $x4077) $x5055)) $x5055)))
(let ((@x8878 (unit-resolution (unit-resolution @x5303 @x4803 $x4077) (lemma @x4872 $x4074) $x4076)))
(let ((@x9287 (unit-resolution (def-axiom (or $x3777 $x768 $x3771)) (mp @x8878 (monotonicity @x4135 (= $x4076 $x292)) $x292) (or $x3777 $x3771))))
(let ((@x8755 (unit-resolution (def-axiom (or $x3768 $x3762)) (unit-resolution @x9287 @x8742 $x3771) $x3762)))
(let ((@x8979 (unit-resolution (def-axiom (or $x3765 $x1843 $x3759)) @x8755 (unit-resolution (lemma @x5241 (or $x3695 $x1842)) @x9263 $x1842) $x3759)))
(let ((@x9416 (unit-resolution (def-axiom (or $x3753 $x2760 $x3747)) (unit-resolution (def-axiom (or $x3756 $x3750)) @x8979 $x3750) $x3750)))
(let ((@x9452 (unit-resolution @x9416 (lemma (unit-resolution @x5735 @x6683 @x6066 @x7364 @x7323 false) $x2755) $x3747)))
(let ((@x9454 (unit-resolution (def-axiom (or $x3741 $x2806 $x3735)) (unit-resolution (def-axiom (or $x3744 $x3738)) @x9452 $x3738) $x3738)))
(let ((@x9455 (unit-resolution @x9454 (lemma @x7807 $x2801) $x3735)))
(let ((@x9475 (unit-resolution (def-axiom (or $x3732 $x1910)) @x9455 $x1910)))
(let ((@x9478 ((_ th-lemma arith farkas -1 1 1) (hypothesis (<= (+ b_Infinity$ ?x4438) 0)) @x9476 @x9475 false)))
(let ((@x9241 (unit-resolution (lemma @x9478 (or $x9479 (not (<= (+ b_Infinity$ ?x4438) 0)))) @x9476 (not (<= (+ b_Infinity$ ?x4438) 0)))))
(let (($x4660 (<= (+ b_Infinity$ ?x4438) 0)))
(let (($x8499 (or $x3581 $x1904 $x4660 $x4675)))
(let ((@x7305 (mp ((_ quant-inst ?v0!20) (or $x3581 (or $x1904 $x4660 $x4675))) (rewrite (= (or $x3581 (or $x1904 $x4660 $x4675)) $x8499)) $x8499)))
(let ((@x9599 (unit-resolution @x7305 @x4189 (unit-resolution (def-axiom (or $x3732 $x1905)) @x9455 $x1905) (or $x4660 $x4675))))
(let ((@x9582 (unit-resolution @x9599 @x9241 $x4675)))
(let ((?x4717 (v_b_SP_G_2$ ?x4661)))
(let ((?x4720 (* (- 1) ?x4717)))
(let ((?x4721 (+ ?x4662 ?x4720)))
(let (($x4728 (>= ?x4721 0)))
(let ((@x9586 ((_ th-lemma arith farkas 1 1 -1 1) @x9476 (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3686 $x4728)) @x4714 $x4728) (hypothesis (<= (+ ?x1906 ?x4720) 0)) (unit-resolution (def-axiom (or $x4674 (not $x4665))) @x9582 (not $x4665)) false)))
(let ((@x8898 (unit-resolution (lemma @x9586 $x9588) @x9476 (not (<= (+ ?x1906 ?x4720) 0)))))
(let ((?x7341 (+ ?x1906 ?x4670 ?x4720)))
(let (($x7121 (= ?x7341 0)))
(let (($x5719 (<= ?x7341 0)))
(let (($x4844 (<= (+ b_Infinity$ ?x4670) 0)))
(let (($x8387 (not $x4844)))
(let (($x7025 (>= ?x4671 0)))
(let ((@x8158 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4673 $x7025)) (unit-resolution (def-axiom (or $x4674 $x4672)) @x9582 $x4672) $x7025)))
(let (($x4825 (>= ?x4662 0)))
(let ((@x8897 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1 -1) (or $x8387 (not $x4825) (not $x7025) $x1909 $x9479)) @x9475 (or $x8387 (not $x4825) (not $x7025) $x9479))))
(let ((@x8874 (unit-resolution @x8897 (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3556 $x4825)) @x4713 $x4825) @x9476 @x8158 $x8387)))
(let (($x4709 (fun_app$ v_b_Visited_G_2$ ?x4661)))
(let ((@x6057 (monotonicity (symm (hypothesis $x261) (= ?x260 v_b_Visited_G_2$)) (= (fun_app$ ?x260 ?x4661) $x4709))))
(let ((@x6061 (monotonicity (symm @x6057 (= $x4709 (fun_app$ ?x260 ?x4661))) (= (not $x4709) (not (fun_app$ ?x260 ?x4661))))))
(let (($x6003 (fun_app$ ?x260 ?x4661)))
(let (($x6010 (= ?x4661 v_b_v_G_1$)))
(let (($x6013 (or $x6010 $x4666)))
(let (($x6016 (= $x6003 $x6013)))
(let (($x6019 (or $x4134 $x6016)))
(let ((@x6018 (monotonicity (rewrite (= (ite $x6010 true $x4666) $x6013)) (= (= $x6003 (ite $x6010 true $x4666)) $x6016))))
(let ((@x6023 (monotonicity @x6018 (= (or $x4134 (= $x6003 (ite $x6010 true $x4666))) $x6019))))
(let ((@x6026 (trans @x6023 (rewrite (= $x6019 $x6019)) (= (or $x4134 (= $x6003 (ite $x6010 true $x4666))) $x6019))))
(let ((@x6027 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true (?v1!7 ?v0!20)) (or $x4134 (= $x6003 (ite $x6010 true $x4666)))) @x6026 $x6019)))
(let ((@x6050 (unit-resolution (def-axiom (or (not $x6016) $x6003 (not $x6013))) (unit-resolution (def-axiom (or $x6013 $x4667)) (hypothesis $x4666) $x6013) (or (not $x6016) $x6003))))
(let ((@x6063 (unit-resolution (unit-resolution @x6050 (unit-resolution @x6027 @x3468 $x6016) $x6003) (mp (hypothesis (not $x4709)) @x6061 (not $x6003)) false)))
(let ((@x8957 (unit-resolution (lemma @x6063 (or $x4709 $x2930 $x4667)) (unit-resolution (def-axiom (or $x3804 $x261)) @x4802 $x261) (or $x4709 $x4667))))
(let ((@x8892 (unit-resolution @x8957 (unit-resolution (def-axiom (or $x4674 $x4666)) @x9582 $x4666) $x4709)))
(let (($x4710 (not $x4709)))
(let (($x6183 (or $x3720 $x4710 $x4844 $x5719)))
(let (($x4848 (>= (+ ?x4669 ?x4717 ?x1907) 0)))
(let (($x4849 (or $x4710 $x4844 $x4848)))
(let (($x7891 (or $x3720 $x4849)))
(let ((@x7340 (monotonicity (rewrite (= (+ ?x4669 ?x4717 ?x1907) (+ ?x1907 ?x4669 ?x4717))) (= $x4848 (>= (+ ?x1907 ?x4669 ?x4717) 0)))))
(let ((@x7415 (trans @x7340 (rewrite (= (>= (+ ?x1907 ?x4669 ?x4717) 0) $x5719)) (= $x4848 $x5719))))
(let ((@x7922 (monotonicity (monotonicity @x7415 (= $x4849 (or $x4710 $x4844 $x5719))) (= $x7891 (or $x3720 (or $x4710 $x4844 $x5719))))))
(let ((@x7119 (trans @x7922 (rewrite (= (or $x3720 (or $x4710 $x4844 $x5719)) $x6183)) (= $x7891 $x6183))))
(let ((@x8954 (unit-resolution (mp ((_ quant-inst ?v0!20 (?v1!7 ?v0!20)) $x7891) @x7119 $x6183) (unit-resolution (def-axiom (or $x3732 $x3715)) @x9455 $x3715) @x8892 (or $x4844 $x5719))))
(let (($x8133 (>= ?x7341 0)))
(let ((@x9055 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1) (or $x8133 (not $x7025) $x9479 (not $x4728))) (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3686 $x4728)) @x4714 $x4728) @x8158 @x9476 $x8133)))
(let ((@x9049 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7121 (not $x5719) (not $x8133))) @x9055 (unit-resolution @x8954 @x8874 $x5719) $x7121)))
(let (($x7918 (not $x7121)))
(let ((?x4888 (+ ?x1906 ?x4720)))
(let (($x7874 (<= ?x4888 0)))
(let (($x8072 (or $x3729 $x7874 $x4710 $x7918)))
(let (($x4877 (>= (+ ?x4717 ?x1907) 0)))
(let (($x4881 (or $x4877 $x4710 (not (= (+ ?x4717 ?x1907 ?x4669) 0)))))
(let (($x8040 (or $x3729 $x4881)))
(let ((@x6258 (monotonicity (rewrite (= (+ ?x4717 ?x1907 ?x4669) (+ ?x1907 ?x4669 ?x4717))) (= (= (+ ?x4717 ?x1907 ?x4669) 0) (= (+ ?x1907 ?x4669 ?x4717) 0)))))
(let ((@x7178 (trans @x6258 (rewrite (= (= (+ ?x1907 ?x4669 ?x4717) 0) $x7121)) (= (= (+ ?x4717 ?x1907 ?x4669) 0) $x7121))))
(let ((@x7871 (monotonicity (rewrite (= (+ ?x4717 ?x1907) (+ ?x1907 ?x4717))) (= $x4877 (>= (+ ?x1907 ?x4717) 0)))))
(let ((@x7892 (trans @x7871 (rewrite (= (>= (+ ?x1907 ?x4717) 0) $x7874)) (= $x4877 $x7874))))
(let ((@x8041 (monotonicity @x7892 (monotonicity @x7178 (= (not (= (+ ?x4717 ?x1907 ?x4669) 0)) $x7918)) (= $x4881 (or $x7874 $x4710 $x7918)))))
(let ((@x8107 (trans (monotonicity @x8041 (= $x8040 (or $x3729 (or $x7874 $x4710 $x7918)))) (rewrite (= (or $x3729 (or $x7874 $x4710 $x7918)) $x8072)) (= $x8040 $x8072))))
(let ((@x9051 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!20)) $x8040) @x8107 $x8072) (unit-resolution (def-axiom (or $x3732 $x3724)) @x9455 $x3724) @x8892 (or $x7874 $x7918))))
(let ((@x10024 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1906 ?x4413)) $x6002)) (lemma (unit-resolution @x9051 @x9049 @x8898 false) $x9479) (not (= ?x1906 ?x4413)))))
(let (($x4420 (= ?x1906 ?x4413)))
(let (($x4423 (or $x4299 $x4420)))
(let (($x8830 (or $x3695 $x4299 $x4420)))
(let ((@x8691 (mp ((_ quant-inst ?v0!20) (or $x3695 $x4423)) (rewrite (= (or $x3695 $x4423) $x8830)) $x8830)))
(let ((@x10120 (mp (unit-resolution (unit-resolution @x8691 @x9263 $x4423) @x10024 $x4299) @x10119 $x9037)))
(let (($x4629 (fun_app$ v_b_Visited_G_1$ ?v0!20)))
(let (($x5238 (= ?v0!20 v_b_v_G_1$)))
(let (($x10274 (or $x5238 $x4629)))
(let (($x10073 (= $x5237 $x10274)))
(let (($x10506 (or $x4134 $x10073)))
(let ((@x10500 (monotonicity (rewrite (= (ite $x5238 true $x4629) $x10274)) (= (= $x5237 (ite $x5238 true $x4629)) $x10073))))
(let ((@x10183 (monotonicity @x10500 (= (or $x4134 (= $x5237 (ite $x5238 true $x4629))) $x10506))))
(let ((@x10372 (trans @x10183 (rewrite (= $x10506 $x10506)) (= (or $x4134 (= $x5237 (ite $x5238 true $x4629))) $x10506))))
(let ((@x10020 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!20) (or $x4134 (= $x5237 (ite $x5238 true $x4629)))) @x10372 $x10506)))
(let ((?x4454 (pair$ v_b_v_G_1$ ?v0!20)))
(let ((?x4455 (b_G$ ?x4454)))
(let ((?x4507 (+ ?x254 ?x1907 ?x4455)))
(let (($x4527 (<= ?x4507 0)))
(let (($x8001 (= ?x4507 0)))
(let ((?x9161 (+ ?x254 ?x4438 ?x4455)))
(let (($x9165 (>= ?x9161 0)))
(let ((?x4456 (* (- 1) ?x4455)))
(let ((?x4457 (+ b_Infinity$ ?x4456)))
(let (($x4458 (<= ?x4457 0)))
(let (($x8810 (or $x4458 $x9165)))
(let (($x8814 (not $x8810)))
(let (($x8919 (or $x8814 $x4420)))
(let (($x8679 (or $x3678 $x8814 $x4420)))
(let (($x4463 (or (not (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0))) $x4420)))
(let (($x9386 (or $x3678 $x4463)))
(let ((@x9164 (monotonicity (rewrite (= (+ ?x4413 ?x1168 ?x4456) (+ ?x1168 ?x4413 ?x4456))) (= (<= (+ ?x4413 ?x1168 ?x4456) 0) (<= (+ ?x1168 ?x4413 ?x4456) 0)))))
(let ((@x8891 (trans @x9164 (rewrite (= (<= (+ ?x1168 ?x4413 ?x4456) 0) $x9165)) (= (<= (+ ?x4413 ?x1168 ?x4456) 0) $x9165))))
(let ((@x8813 (monotonicity @x8891 (= (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0)) $x8810))))
(let ((@x8815 (monotonicity @x8813 (= (not (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0))) $x8814))))
(let ((@x9295 (monotonicity (monotonicity @x8815 (= $x4463 $x8919)) (= $x9386 (or $x3678 $x8919)))))
(let ((@x9441 (mp ((_ quant-inst ?v0!20) $x9386) (trans @x9295 (rewrite (= (or $x3678 $x8919) $x8679)) (= $x9386 $x8679)) $x8679)))
(let ((@x9984 (unit-resolution (def-axiom (or $x8810 (not $x4458))) (hypothesis $x8814) (not $x4458))))
(let ((@x9985 (unit-resolution (def-axiom (or $x8810 (not $x9165))) (hypothesis $x8814) (not $x9165))))
(let (($x8926 (or $x4458 $x9165 $x8001)))
(let (($x8928 (or $x3670 $x4458 $x9165 $x8001)))
(let (($x4460 (<= (+ ?x4413 ?x1168 ?x4456) 0)))
(let (($x4506 (or $x4458 $x4460 (= (+ ?x254 ?x4455 ?x1907) 0))))
(let (($x8929 (or $x3670 $x4506)))
(let ((@x8925 (monotonicity (rewrite (= (+ ?x254 ?x4455 ?x1907) ?x4507)) (= (= (+ ?x254 ?x4455 ?x1907) 0) $x8001))))
(let ((@x8953 (monotonicity (monotonicity @x8891 @x8925 (= $x4506 $x8926)) (= $x8929 (or $x3670 $x8926)))))
(let ((@x8682 (mp ((_ quant-inst ?v0!20) $x8929) (trans @x8953 (rewrite (= (or $x3670 $x8926) $x8928)) (= $x8929 $x8928)) $x8928)))
(let ((@x9987 (unit-resolution (unit-resolution @x8682 @x4789 $x8926) @x9985 @x9984 (hypothesis (not $x8001)) false)))
(let ((@x10276 (unit-resolution (lemma @x9987 (or $x8810 $x8001)) (unit-resolution (unit-resolution @x9441 @x4803 $x8919) @x10024 $x8814) $x8001)))
(let ((?x4401 (+ ?x1906 ?x3064)))
(let (($x6992 (<= ?x4401 0)))
(let ((?x4566 (+ ?x1906 ?x3064 ?x4456)))
(let (($x6987 (= ?x4566 0)))
(let (($x4590 (>= ?x4566 0)))
(let ((@x9966 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or (not $x4527) $x4590 (not $x3906))) @x6160 (or (not $x4527) $x4590))))
(let (($x4589 (<= ?x4566 0)))
(let (($x4181 (>= ?x3063 0)))
(let (($x6279 (or $x3703 $x4181)))
(let ((@x6374 ((_ quant-inst v_b_v_G_1$) $x6279)))
(let ((@x9257 (unit-resolution @x6374 (unit-resolution (def-axiom (or $x3756 $x3698)) @x8979 $x3698) $x4181)))
(let (($x4146 (fun_app$ v_b_Visited_G_2$ v_b_v_G_1$)))
(let (($x3097 (fun_app$ ?x260 v_b_v_G_1$)))
(let (($x3456 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :pattern ( (fun_upd$ ?v0 ?v1 ?v2) ) :qid k!33))
))
(let (($x55 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :qid k!33))
))
(let (($x52 (= (fun_app$ (fun_upd$ ?2 ?1 ?0) ?1) ?0)))
(let (($x50 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :qid k!33))
))
(let ((@x54 (rewrite (= (= (fun_app$ (fun_upd$ ?2 ?1 ?0) ?1) ?0) $x52))))
(let ((@x1427 (mp~ (mp (asserted $x50) (quant-intro @x54 (= $x50 $x55)) $x55) (nnf-pos (refl (~ $x52 $x52)) (~ $x55 $x55)) $x55)))
(let ((@x3461 (mp @x1427 (quant-intro (refl (= $x52 $x52)) (= $x55 $x3456)) $x3456)))
(let (($x4383 (or (not $x3456) $x3097)))
(let ((@x4480 (monotonicity (rewrite (= (= $x3097 true) $x3097)) (= (or (not $x3456) (= $x3097 true)) $x4383))))
(let ((@x4483 (trans @x4480 (rewrite (= $x4383 $x4383)) (= (or (not $x3456) (= $x3097 true)) $x4383))))
(let ((@x4484 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true) (or (not $x3456) (= $x3097 true))) @x4483 $x4383)))
(let ((@x9972 (mp (unit-resolution @x4484 @x3461 $x3097) (monotonicity @x6739 (= $x3097 $x4146)) $x4146)))
(let ((@x5439 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x4590 $x4589)) (hypothesis (not $x4589)) $x4590)))
(let (($x4147 (not $x4146)))
(let (($x5371 (or $x3720 $x4147 $x4458 $x4589)))
(let ((?x5354 (+ ?x4455 ?x3063 ?x1907)))
(let (($x5355 (>= ?x5354 0)))
(let (($x5358 (or $x4147 $x4458 $x5355)))
(let (($x5372 (or $x3720 $x5358)))
(let ((@x5363 (monotonicity (rewrite (= ?x5354 (+ ?x1907 ?x3063 ?x4455))) (= $x5355 (>= (+ ?x1907 ?x3063 ?x4455) 0)))))
(let ((@x5367 (trans @x5363 (rewrite (= (>= (+ ?x1907 ?x3063 ?x4455) 0) $x4589)) (= $x5355 $x4589))))
(let ((@x5376 (monotonicity (monotonicity @x5367 (= $x5358 (or $x4147 $x4458 $x4589))) (= $x5372 (or $x3720 (or $x4147 $x4458 $x4589))))))
(let ((@x5380 (trans @x5376 (rewrite (= (or $x3720 (or $x4147 $x4458 $x4589)) $x5371)) (= $x5372 $x5371))))
(let ((@x5381 (mp ((_ quant-inst ?v0!20 v_b_v_G_1$) $x5372) @x5380 $x5371)))
(let ((@x5443 (unit-resolution @x5381 (hypothesis $x3715) (hypothesis $x4146) (hypothesis (not $x4589)) $x4458)))
(let ((@x5447 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x5443 (hypothesis $x4181) @x5439 (hypothesis $x1910) false) (or $x4589 (not $x4181) $x1909 $x3720 $x4147))))
(let ((@x9976 (unit-resolution (unit-resolution @x5447 @x9972 (or $x4589 (not $x4181) $x1909 $x3720)) @x9257 (or $x4589 $x1909 $x3720))))
(let ((@x9977 (unit-resolution @x9976 (unit-resolution (def-axiom (or $x3732 $x3715)) @x9455 $x3715) @x9475 $x4589)))
(let ((@x9991 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x6987 (not $x4589) (not $x4590))) @x9977 (or $x6987 (not $x4590)))))
(let ((@x9992 (unit-resolution @x9991 (unit-resolution @x9966 (hypothesis $x4527) $x4590) $x6987)))
(let (($x7023 (not $x6987)))
(let (($x6921 (or $x3729 $x6992 $x4147 $x7023)))
(let (($x4536 (>= (+ ?x3063 ?x1907) 0)))
(let (($x4548 (or $x4536 $x4147 (not (= (+ ?x3063 ?x1907 ?x4455) 0)))))
(let (($x8524 (or $x3729 $x4548)))
(let ((@x7245 (monotonicity (rewrite (= (+ ?x3063 ?x1907 ?x4455) (+ ?x1907 ?x3063 ?x4455))) (= (= (+ ?x3063 ?x1907 ?x4455) 0) (= (+ ?x1907 ?x3063 ?x4455) 0)))))
(let ((@x7022 (trans @x7245 (rewrite (= (= (+ ?x1907 ?x3063 ?x4455) 0) $x6987)) (= (= (+ ?x3063 ?x1907 ?x4455) 0) $x6987))))
(let ((@x7049 (monotonicity (rewrite (= (+ ?x3063 ?x1907) (+ ?x1907 ?x3063))) (= $x4536 (>= (+ ?x1907 ?x3063) 0)))))
(let ((@x8373 (trans @x7049 (rewrite (= (>= (+ ?x1907 ?x3063) 0) $x6992)) (= $x4536 $x6992))))
(let ((@x7936 (monotonicity @x8373 (monotonicity @x7022 (= (not (= (+ ?x3063 ?x1907 ?x4455) 0)) $x7023)) (= $x4548 (or $x6992 $x4147 $x7023)))))
(let ((@x8581 (trans (monotonicity @x7936 (= $x8524 (or $x3729 (or $x6992 $x4147 $x7023)))) (rewrite (= (or $x3729 (or $x6992 $x4147 $x7023)) $x6921)) (= $x8524 $x6921))))
(let ((@x8053 (mp ((_ quant-inst v_b_v_G_1$) $x8524) @x8581 $x6921)))
(let ((@x9995 (unit-resolution @x8053 (unit-resolution (def-axiom (or $x3732 $x3724)) @x9455 $x3724) @x9972 (or $x6992 $x7023))))
(let (($x5406 (<= ?x4455 0)))
(let (($x5407 (not $x5406)))
(let (($x5405 (= v_b_v_G_1$ ?v0!20)))
(let (($x5409 (not $x5405)))
(let ((@x10003 (monotonicity (symm (commutativity (= $x5405 $x5238)) (= $x5238 $x5405)) (= (not $x5238) $x5409))))
(let (($x5408 (or $x5405 $x5407)))
(let (($x3099 (not $x3475)))
(let (($x9955 (or $x3099 $x5405 $x5407)))
(let ((@x9962 (mp ((_ quant-inst v_b_v_G_1$ ?v0!20) (or $x3099 $x5408)) (rewrite (= (or $x3099 $x5408) $x9955)) $x9955)))
(let ((@x10006 (unit-resolution (unit-resolution @x9962 @x3480 $x5408) (mp (hypothesis (not $x5238)) @x10003 $x5409) $x5407)))
(let ((@x10007 ((_ th-lemma arith farkas -1 -1 1 1) @x6160 @x10006 (hypothesis $x4527) (unit-resolution @x9995 @x9992 $x6992) false)))
(let ((@x10279 (unit-resolution (lemma @x10007 (or (not $x4527) $x5238)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x8001) $x4527)) @x10276 $x4527) $x5238)))
(let ((@x10164 (unit-resolution (def-axiom (or (not $x10073) $x5237 (not $x10274))) (unit-resolution (def-axiom (or $x10274 (not $x5238))) @x10279 $x10274) (or (not $x10073) $x5237))))
(unit-resolution (unit-resolution @x10164 (unit-resolution @x10020 @x3468 $x10073) $x5237) @x10120 false

8ec9d30fc9fdbc0ea292e0fdf148a6230c16dbca 2924 0
unsat
((set-logic <null>)
(declare-fun ?v0!15 () Int)
(declare-fun ?v0!14 () Int)
(declare-fun ?v0!13 () Int)
(proof
(let ((?x10076 (b_S_array$ b_T_T_u1$ v_b_P_H_len$)))
(let ((?x22595 (b_S_ptr$ ?x10076 v_b_P_H_arr$)))
(let ((?x24598 (b_S_idx$ ?x22595 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let ((?x10272 (b_S_typemap$ v_b_S_s$)))
(let ((?x24302 (b_S_select_o_tm$ ?x10272 ?x24598)))
(let ((?x24605 (b_S_ts_n_emb$ ?x24302)))
(let (($x24606 (= ?x24605 ?x22595)))
(let (($x24611 (b_S_typed$ v_b_S_s$ ?x24598)))
(let (($x24614 (not $x24611)))
(let (($x24608 (b_S_ts_n_is_n_volatile$ ?x24302)))
(let (($x24607 (not $x24606)))
(let (($x24615 (or $x24607 $x24608 (not (b_S_ts_n_is_n_array_n_elt$ ?x24302)) $x24614)))
(let (($x24616 (not $x24615)))
(let (($x11901 (>= v_b_L_H_p_G_0$ 0)))
(let (($x20030 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11800 (not $x10238))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!704))
))
(let (($x20035 (not $x20030)))
(let (($x20022 (forall ((?v0 Int) )(! (let ((?x11816 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11818 (<= (+ ?x10163 ?x11816) 0)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11800 $x11818))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!704))
))
(let (($x20027 (not $x20022)))
(let (($x20038 (or $x20027 $x20035)))
(let (($x20041 (not $x20038)))
(let ((?x10078 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x15743 (b_S_idx$ ?x10078 ?v0!15 b_T_T_u1$)))
(let ((?x15744 (b_S_read_n_u1$ v_b_S_s$ ?x15743)))
(let ((?x16029 (* (- 1) ?x15744)))
(let (($x16031 (>= (+ v_b_S_result_G_0$ ?x16029) 0)))
(let (($x16009 (<= (+ v_b_P_H_len$ (* (- 1) ?v0!15)) 0)))
(let (($x15737 (<= ?v0!15 4294967295)))
(let (($x19560 (not $x15737)))
(let (($x15736 (>= ?v0!15 0)))
(let (($x19559 (not $x15736)))
(let (($x19575 (or $x19559 $x19560 $x16009 $x16031)))
(let (($x19580 (not $x19575)))
(let (($x20044 (or $x19580 $x20041)))
(let (($x20047 (not $x20044)))
(let (($x10222 (= v_b_S_result_G_0$ v_b_L_H_max_G_1$)))
(let (($x19640 (not $x10222)))
(let (($x10220 (= v_b_SL_H_witness_G_2$ v_b_SL_H_witness_G_0$)))
(let (($x19639 (not $x10220)))
(let (($x10218 (= v_b_L_H_p_G_2$ v_b_L_H_p_G_0$)))
(let (($x19638 (not $x10218)))
(let (($x10216 (= v_b_L_H_max_G_4$ v_b_L_H_max_G_1$)))
(let (($x19637 (not $x10216)))
(let (($x11432 (>= v_b_SL_H_witness_G_0$ 0)))
(let (($x19501 (not $x11432)))
(let (($x11429 (>= v_b_L_H_p_G_0$ 1)))
(let (($x19474 (not $x11429)))
(let (($x15729 (not b_S_position_n_marker$)))
(let (($x20050 (or $x15729 $x19474 $x19501 $x19637 $x19638 $x19639 $x19640 $x20047)))
(let (($x20053 (not $x20050)))
(let (($x20056 (or $x15729 $x20053)))
(let (($x20059 (not $x20056)))
(let ((?x11484 (* (- 1) v_b_L_H_p_G_0$)))
(let ((?x11485 (+ v_b_P_H_len$ ?x11484)))
(let (($x11486 (<= ?x11485 0)))
(let (($x11487 (not $x11486)))
(let (($x20062 (or $x11487 $x19474 $x19501 $x20059)))
(let (($x20065 (not $x20062)))
(let ((?x10372 (b_S_idx$ ?x10078 v_b_SL_H_witness_G_1$ b_T_T_u1$)))
(let ((?x10373 (b_S_read_n_u1$ v_b_S_s$ ?x10372)))
(let (($x10374 (= ?x10373 v_b_L_H_max_G_3$)))
(let (($x19411 (not $x10374)))
(let (($x11647 (<= (+ v_b_P_H_len$ (* (- 1) v_b_SL_H_witness_G_1$)) 0)))
(let (($x19412 (or $x11647 $x19411)))
(let (($x19413 (not $x19412)))
(let (($x19906 (forall ((?v0 Int) )(! (let ((?x11631 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11633 (<= (+ ?x10163 ?x11631) 0)))
(let (($x11615 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11615 $x11633))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!704))
))
(let (($x19911 (not $x19906)))
(let (($x19914 (or $x19911 $x19413)))
(let (($x19917 (not $x19914)))
(let ((?x15633 (b_S_idx$ ?x10078 ?v0!14 b_T_T_u1$)))
(let ((?x15634 (b_S_read_n_u1$ v_b_S_s$ ?x15633)))
(let ((?x15891 (* (- 1) ?x15634)))
(let (($x15893 (>= (+ v_b_L_H_max_G_3$ ?x15891) 0)))
(let (($x15871 (<= (+ v_b_L_H_p_G_1$ (* (- 1) ?v0!14)) 0)))
(let (($x15627 (<= ?v0!14 4294967295)))
(let (($x19366 (not $x15627)))
(let (($x15626 (>= ?v0!14 0)))
(let (($x19365 (not $x15626)))
(let (($x19381 (or $x19365 $x19366 $x15871 $x15893)))
(let (($x19386 (not $x19381)))
(let (($x19920 (or $x19386 $x19917)))
(let (($x19923 (not $x19920)))
(let (($x11608 (>= (+ v_b_P_H_len$ (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x11612 (not $x11608)))
(let (($x19926 (or $x11612 $x19923)))
(let (($x19929 (not $x19926)))
(let (($x19932 (or $x11612 $x19929)))
(let (($x19935 (not $x19932)))
(let (($x11536 (>= v_b_SL_H_witness_G_1$ 0)))
(let (($x19455 (not $x11536)))
(let (($x11578 (>= v_b_L_H_p_G_1$ 2)))
(let (($x19454 (not $x11578)))
(let (($x10358 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_24$ b_H_loc_o_p$ v_b_L_H_p_G_1$ b_T_T_u4$)))
(let (($x19453 (not $x10358)))
(let ((?x11581 (* (- 1) v_b_L_H_p_G_1$)))
(let ((?x11582 (+ v_b_L_H_p_G_0$ ?x11581)))
(let (($x11580 (= ?x11582 (- 1))))
(let (($x19452 (not $x11580)))
(let (($x13353 (<= v_b_L_H_p_G_0$ 4294967294)))
(let (($x15614 (not $x13353)))
(let (($x11570 (>= v_b_L_H_p_G_0$ (- 1))))
(let (($x15611 (not $x11570)))
(let (($x19938 (or $x15611 $x15614 $x19452 $x19453 $x19454 $x19455 $x19935)))
(let (($x19941 (not $x19938)))
(let (($x19944 (or $x15611 $x15614 $x19941)))
(let (($x19947 (not $x19944)))
(let (($x10392 (= v_b_SL_H_witness_G_1$ v_b_SL_H_witness_G_0$)))
(let (($x19513 (not $x10392)))
(let (($x10391 (= v_b_L_H_max_G_3$ v_b_L_H_max_G_1$)))
(let (($x19512 (not $x10391)))
(let ((?x10320 (b_S_idx$ ?x10078 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let ((?x10327 (b_S_read_n_u1$ v_b_S_s$ ?x10320)))
(let ((?x11517 (* (- 1) ?x10327)))
(let (($x11516 (>= (+ v_b_L_H_max_G_1$ ?x11517) 0)))
(let (($x11515 (not $x11516)))
(let (($x19980 (or $x11515 $x19501 $x19512 $x19513 $x19474 $x19455 $x19947)))
(let (($x19983 (not $x19980)))
(let (($x10340 (= v_b_SL_H_witness_G_1$ v_b_L_H_p_G_0$)))
(let (($x19473 (not $x10340)))
(let (($x10338 (= v_b_L_H_max_G_3$ v_b_L_H_max_G_2$)))
(let (($x19472 (not $x10338)))
(let (($x10335 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_24_o_47$ b_H_loc_o_witness$ v_b_L_H_p_G_0$ b_T_T_u4$)))
(let (($x19471 (not $x10335)))
(let (($x10334 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_23_o_7$ b_H_loc_o_max$ v_b_L_H_max_G_2$ b_T_T_u1$)))
(let (($x19470 (not $x10334)))
(let (($x10333 (= v_b_L_H_max_G_2$ ?x10327)))
(let (($x19469 (not $x10333)))
(let (($x10324 (b_S_thread_n_local$ v_b_S_s$ ?x10320)))
(let (($x15599 (not $x10324)))
(let (($x10321 (b_S_is$ ?x10320 b_T_T_u1$)))
(let (($x15590 (not $x10321)))
(let (($x19950 (or $x15590 $x15599 $x19469 $x19470 $x19471 $x19472 $x19473 $x19474 $x19455 $x19947)))
(let (($x19953 (not $x19950)))
(let (($x19956 (or $x15590 $x15599 $x19953)))
(let (($x19959 (not $x19956)))
(let (($x10322 (b_S_typed$ v_b_S_s$ ?x10320)))
(let (($x15593 (not $x10322)))
(let (($x19962 (or $x15590 $x15593 $x19959)))
(let (($x19965 (not $x19962)))
(let (($x19968 (or $x15590 $x15593 $x19965)))
(let (($x19971 (not $x19968)))
(let (($x19974 (or $x11516 $x19474 $x19501 $x19971)))
(let (($x19977 (not $x19974)))
(let (($x19986 (or $x19977 $x19983)))
(let (($x19989 (not $x19986)))
(let (($x19992 (or $x15590 $x15599 $x19474 $x19501 $x19989)))
(let (($x19995 (not $x19992)))
(let (($x19998 (or $x15590 $x15599 $x19995)))
(let (($x20001 (not $x19998)))
(let (($x20004 (or $x15590 $x15593 $x20001)))
(let (($x20007 (not $x20004)))
(let (($x20010 (or $x15590 $x15593 $x20007)))
(let (($x20013 (not $x20010)))
(let (($x20016 (or $x11486 $x19474 $x19501 $x20013)))
(let (($x20019 (not $x20016)))
(let (($x20068 (or $x20019 $x20065)))
(let (($x20071 (not $x20068)))
(let ((?x2238 (b_S_ptr_n_to$ b_T_T_u1$)))
(let (($x10296 (b_S_local_n_value_n_is_n_ptr$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_arr$ ?x10078 ?x2238)))
(let (($x19683 (not $x10296)))
(let ((?x10105 (b_S_ptr_n_to_n_int$ ?x10078)))
(let (($x10295 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_arr$ ?x10105 ?x2238)))
(let (($x19682 (not $x10295)))
(let (($x10294 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_len$ v_b_P_H_len$ b_T_T_u4$)))
(let (($x19681 (not $x10294)))
(let (($x10293 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_max$ v_b_L_H_max_G_1$ b_T_T_u1$)))
(let (($x19680 (not $x10293)))
(let (($x10292 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_witness$ v_b_SL_H_witness_G_0$ b_T_T_u4$)))
(let (($x19679 (not $x10292)))
(let (($x10291 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_p$ v_b_L_H_p_G_0$ b_T_T_u4$)))
(let (($x19678 (not $x10291)))
(let (($x10097 (b_S_full_n_stop$ v_b_S_s$)))
(let (($x19677 (not $x10097)))
(let (($x10204 (b_S_good_n_state_n_ext$ b_H_tok_S_1_T_16_o_3$ v_b_S_s$)))
(let (($x19676 (not $x10204)))
(let (($x10284 (b_S_call_n_transition$ v_b_S_s$ v_b_S_s$)))
(let (($x19675 (not $x10284)))
(let ((?x10190 (b_S_idx$ ?x10078 v_b_SL_H_witness_G_0$ b_T_T_u1$)))
(let ((?x10191 (b_S_read_n_u1$ v_b_S_s$ ?x10190)))
(let (($x10192 (= ?x10191 v_b_L_H_max_G_1$)))
(let (($x19674 (not $x10192)))
(let (($x11867 (<= (+ v_b_P_H_len$ (* (- 1) v_b_SL_H_witness_G_0$)) 0)))
(let (($x19898 (forall ((?v0 Int) )(! (let ((?x11887 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11889 (<= (+ ?x10163 ?x11887) 0)))
(let (($x11871 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11871 $x11889))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!704))
))
(let (($x19903 (not $x19898)))
(let (($x11898 (>= ?x11485 0)))
(let (($x19672 (not $x11898)))
(let (($x13326 (<= v_b_L_H_p_G_0$ 4294967295)))
(let (($x19671 (not $x13326)))
(let (($x19670 (not $x11901)))
(let (($x13315 (<= v_b_SL_H_witness_G_0$ 4294967295)))
(let (($x19669 (not $x13315)))
(let (($x13304 (<= v_b_L_H_max_G_1$ 255)))
(let (($x19668 (not $x13304)))
(let (($x11911 (>= v_b_L_H_max_G_1$ 0)))
(let (($x19667 (not $x11911)))
(let ((?x10137 (b_S_idx$ ?x10078 0 b_T_T_u1$)))
(let ((?x10144 (b_S_read_n_u1$ v_b_S_s$ ?x10137)))
(let (($x10167 (= ?x10144 v_b_L_H_max_G_0$)))
(let (($x15548 (not $x10167)))
(let (($x11259 (<= v_b_P_H_len$ 0)))
(let (($x20074 (or $x11259 $x15548 $x19667 $x19668 $x19669 $x19670 $x19671 $x19672 $x19903 $x11867 $x19674 $x19675 $x19676 $x19677 $x19678 $x19679 $x19680 $x19681 $x19682 $x19683 $x19474 $x19501 $x20071)))
(let (($x20077 (not $x20074)))
(let (($x10145 (= v_b_L_H_max_G_0$ ?x10144)))
(let (($x20080 (or $x11259 $x15548 $x20077)))
(let (($x20083 (not $x20080)))
(let (($x19890 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11404 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10163)) 0)))
(let (($x11388 (>= ?v0 1)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11388 $x11404)))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!704))
))
(let (($x19895 (not $x19890)))
(let (($x20086 (or $x19895 $x20083)))
(let (($x20089 (not $x20086)))
(let ((?x15529 (b_S_idx$ ?x10078 ?v0!13 b_T_T_u1$)))
(let ((?x15530 (b_S_read_n_u1$ v_b_S_s$ ?x15529)))
(let ((?x15531 (* (- 1) ?x15530)))
(let (($x15533 (>= (+ v_b_L_H_max_G_0$ ?x15531) 0)))
(let (($x15525 (>= ?v0!13 1)))
(let (($x15524 (<= ?v0!13 4294967295)))
(let (($x19298 (not $x15524)))
(let (($x15523 (>= ?v0!13 0)))
(let (($x19297 (not $x15523)))
(let (($x19313 (or $x19297 $x19298 $x15525 $x15533)))
(let (($x19318 (not $x19313)))
(let (($x20092 (or $x19318 $x20089)))
(let (($x20095 (not $x20092)))
(let (($x11382 (>= v_b_P_H_len$ 1)))
(let (($x11385 (not $x11382)))
(let (($x20098 (or $x11385 $x20095)))
(let (($x20101 (not $x20098)))
(let (($x20104 (or $x11385 $x20101)))
(let (($x20107 (not $x20104)))
(let (($x10148 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_8$ b_H_loc_o_p$ 1 b_T_T_u4$)))
(let (($x19727 (not $x10148)))
(let (($x10147 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_14_o_3$ b_H_loc_o_witness$ 0 b_T_T_u4$)))
(let (($x19726 (not $x10147)))
(let (($x10146 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_12_o_3$ b_H_loc_o_max$ v_b_L_H_max_G_0$ b_T_T_u1$)))
(let (($x19725 (not $x10146)))
(let (($x19724 (not $x10145)))
(let (($x10141 (b_S_thread_n_local$ v_b_S_s$ ?x10137)))
(let (($x15511 (not $x10141)))
(let (($x10138 (b_S_is$ ?x10137 b_T_T_u1$)))
(let (($x15502 (not $x10138)))
(let (($x20110 (or $x15502 $x15511 $x19724 $x19725 $x19726 $x19727 $x20107)))
(let (($x20113 (not $x20110)))
(let (($x20116 (or $x15502 $x15511 $x20113)))
(let (($x20119 (not $x20116)))
(let (($x10139 (b_S_typed$ v_b_S_s$ ?x10137)))
(let (($x15505 (not $x10139)))
(let (($x20122 (or $x15502 $x15505 $x20119)))
(let (($x20125 (not $x20122)))
(let ((?x22478 (b_S_select_o_tm$ ?x10272 ?x10137)))
(let (($x22602 (b_S_ts_n_is_n_volatile$ ?x22478)))
(let (($x22603 (or $x15505 $x22602)))
(let (($x22604 (not $x22603)))
(let ((?x10079 (b_S_ref$ ?x10078)))
(let ((?x10080 (b_S_ptr$ ?x10076 ?x10079)))
(let ((?x21014 (b_S_ref$ ?x10080)))
(let ((?x21983 (b_S_ptr$ ?x10076 ?x21014)))
(let ((?x22343 (b_S_domain$ v_b_S_s$ ?x21983)))
(let (($x22596 (b_S_set_n_in$ ?x22595 ?x22343)))
(let (($x21179 (= ?x10079 v_b_P_H_arr$)))
(let (($x19835 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_ref$ (b_S_ptr$ ?v0 ?v1)) ?v1) :pattern ( (b_S_ptr$ ?v0 ?v1) ) :qid k!627))
))
(let (($x9655 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_ref$ (b_S_ptr$ ?v0 ?v1)) ?v1) :qid k!627))
))
(let (($x9654 (= (b_S_ref$ (b_S_ptr$ ?1 ?0)) ?0)))
(let ((@x15356 (mp~ (asserted $x9655) (nnf-pos (refl (~ $x9654 $x9654)) (~ $x9655 $x9655)) $x9655)))
(let ((@x19840 (mp @x15356 (quant-intro (refl (= $x9654 $x9654)) (= $x9655 $x19835)) $x19835)))
(let (($x21152 (not $x19835)))
(let (($x21184 (or $x21152 $x21179)))
(let ((@x21185 ((_ quant-inst b_T_T_u1$ v_b_P_H_arr$) $x21184)))
(let ((@x23445 (unit-resolution @x21185 @x19840 $x21179)))
(let ((@x23680 (monotonicity (symm @x23445 (= v_b_P_H_arr$ ?x10079)) (= ?x22595 ?x10080))))
(let (($x21990 (= ?x10080 ?x21983)))
(let (($x10084 (b_S_is$ ?x10080 ?x10076)))
(let (($x11245 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11243 (>= v_b_P_H_len$ 0)))
(let (($x10439 (forall ((?v0 B_S_ptr$) )(! (let (($x10113 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0)))
(not $x10113)) :pattern ( (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0) ) :qid k!704))
))
(let ((?x10111 (b_S_current_n_timestamp$ v_b_S_s$)))
(let (($x10112 (= v_b_H_wrTime_S_1_T_6_o_1$ ?x10111)))
(let (($x10109 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_len$ v_b_P_H_len$ b_T_T_u4$)))
(let (($x10107 (b_S_local_n_value_n_is_n_ptr$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_arr$ ?x10078 ?x2238)))
(let (($x10106 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_arr$ ?x10105 ?x2238)))
(let (($x11256 (forall ((?v0 B_S_pure_n_function$) )(! (let (($x11251 (>= (+ (b_S_frame_n_level$ ?v0) (* (- 1) b_S_current_n_frame_n_level$)) 0)))
(not $x11251)) :pattern ( (b_S_frame_n_level$ ?v0) ) :qid k!704))
))
(let (($x10096 (b_S_good_n_state_n_ext$ b_H_tok_S_1_T_6_o_1$ v_b_S_s$)))
(let (($x10095 (b_S_function_n_entry$ v_b_S_s$)))
(let (($x10089 (b_S_is_n_non_n_primitive$ ?x10076)))
(let ((?x10086 (b_S_kind_n_of$ ?x10076)))
(let (($x10087 (= ?x10086 b_S_kind_n_primitive$)))
(let (($x10088 (not $x10087)))
(let (($x10085 (b_S_typed$ v_b_S_s$ ?x10080)))
(let ((?x10082 (b_S_owner$ v_b_S_s$ ?x10080)))
(let (($x10083 (= ?x10082 b_S_me$)))
(let (($x10081 (b_S_closed$ v_b_S_s$ ?x10080)))
(let (($x11260 (not $x11259)))
(let (($x11263 (>= v_b_P_H_len$ 1099511627776)))
(let (($x11264 (not $x11263)))
(let (($x11270 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_SL_H_witness$)) 0)))
(let (($x11268 (>= v_b_SL_H_witness$ 0)))
(let (($x11278 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_L_H_p$)) 0)))
(let (($x11276 (>= v_b_L_H_p$ 0)))
(let (($x11286 (>= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max$)) 0)))
(let (($x11284 (>= v_b_L_H_max$ 0)))
(let (($x11342 (and $x11284 $x11286 $x11276 $x11278 $x11268 $x11270 $x11264 $x11260 $x10081 $x10083 $x10084 $x10085 $x10088 $x10089 $x10095 $x10096 $x10097 $x11256 $x10106 $x10107 $x10109 $x10112 $x10439 $x11243 $x11245)))
(let (($x11844 (exists ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?v0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?v0 0)))
(and $x2815 $x3115 $x11802 $x10238))))))))) :qid k!704))
))
(let (($x11824 (forall ((?v0 Int) )(! (let ((?x11816 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11818 (<= (+ ?x10163 ?x11816) 0)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?v0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11808 (and $x2815 $x3115 $x11802)))
(let (($x11813 (not $x11808)))
(or $x11813 $x11818)))))))))))) :qid k!704))
))
(let (($x11827 (not $x11824)))
(let (($x11847 (or $x11827 $x11844)))
(let (($x11850 (and $x11824 $x11847)))
(let (($x11792 (and b_S_position_n_marker$ $x11429 $x11432 $x10216 $x10218 $x10220 $x10222)))
(let (($x11797 (not $x11792)))
(let (($x11853 (or $x11797 $x11850)))
(let (($x11856 (and b_S_position_n_marker$ $x11853)))
(let (($x11772 (and $x11486 $x11429 $x11432)))
(let (($x11777 (not $x11772)))
(let (($x11859 (or $x11777 $x11856)))
(let (($x11648 (not $x11647)))
(let (($x11651 (and $x11648 $x10374)))
(let (($x11639 (forall ((?v0 Int) )(! (let ((?x11631 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11633 (<= (+ ?x10163 ?x11631) 0)))
(let (($x11615 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x11617 (not $x11615)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?v0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11623 (and $x2815 $x3115 $x11617)))
(let (($x11628 (not $x11623)))
(or $x11628 $x11633)))))))))))) :qid k!704))
))
(let (($x11642 (not $x11639)))
(let (($x11654 (or $x11642 $x11651)))
(let (($x11657 (and $x11639 $x11654)))
(let (($x11660 (or $x11612 $x11657)))
(let (($x11663 (and $x11608 $x11660)))
(let ((?x11574 (+ b_S_max_o_u4$ ?x11484)))
(let (($x11573 (>= ?x11574 1)))
(let (($x11600 (and $x11570 $x11573 $x11580 $x10358 $x11578 $x11536)))
(let (($x11605 (not $x11600)))
(let (($x11666 (or $x11605 $x11663)))
(let (($x11672 (and $x11570 $x11573 $x11666)))
(let (($x11725 (and $x11516 $x11432 $x10391 $x10392 $x11429 $x11536)))
(let (($x11730 (not $x11725)))
(let (($x11733 (or $x11730 $x11672)))
(let (($x11562 (and $x10321 $x10324 $x10333 $x10334 $x10335 $x10338 $x10340 $x11429 $x11536)))
(let (($x11567 (not $x11562)))
(let (($x11677 (or $x11567 $x11672)))
(let (($x11683 (and $x10321 $x10324 $x11677)))
(let (($x10323 (and $x10321 $x10322)))
(let (($x11001 (not $x10323)))
(let (($x11688 (or $x11001 $x11683)))
(let (($x11694 (and $x10321 $x10322 $x11688)))
(let (($x11527 (and $x11515 $x11429 $x11432)))
(let (($x11532 (not $x11527)))
(let (($x11699 (or $x11532 $x11694)))
(let (($x11736 (and $x11699 $x11733)))
(let (($x11507 (and $x10321 $x10324 $x11429 $x11432)))
(let (($x11512 (not $x11507)))
(let (($x11739 (or $x11512 $x11736)))
(let (($x11745 (and $x10321 $x10324 $x11739)))
(let (($x11750 (or $x11001 $x11745)))
(let (($x11756 (and $x10321 $x10322 $x11750)))
(let (($x11496 (and $x11487 $x11429 $x11432)))
(let (($x11501 (not $x11496)))
(let (($x11761 (or $x11501 $x11756)))
(let (($x11862 (and $x11761 $x11859)))
(let (($x11476 (and $x10284 $x10204 $x10097 $x10291 $x10292 $x10293 $x10294 $x10295 $x10296 $x11429 $x11432)))
(let (($x11481 (not $x11476)))
(let (($x11868 (not $x11867)))
(let (($x11895 (forall ((?v0 Int) )(! (let ((?x11887 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11889 (<= (+ ?x10163 ?x11887) 0)))
(let (($x11871 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x11873 (not $x11871)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?v0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11879 (and $x2815 $x3115 $x11873)))
(let (($x11884 (not $x11879)))
(or $x11884 $x11889)))))))))))) :qid k!704))
))
(let (($x11904 (>= ?x11574 0)))
(let (($x11907 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_SL_H_witness_G_0$)) 0)))
(let (($x11914 (>= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x11957 (and $x11260 $x10167 $x11911 $x11914 $x11907 $x11901 $x11904 $x11898 $x11895 $x11868 $x10192 $x11429 $x11432)))
(let (($x11962 (not $x11957)))
(let (($x11971 (or $x11962 $x11481 $x11862)))
(let (($x11979 (and $x11260 $x10167 $x11971)))
(let (($x11411 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11404 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10163)) 0)))
(let (($x11388 (>= ?v0 1)))
(let (($x11389 (not $x11388)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?v0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11395 (and $x2815 $x3115 $x11389)))
(let (($x11400 (not $x11395)))
(or $x11400 $x11404))))))))))) :qid k!704))
))
(let (($x11414 (not $x11411)))
(let (($x11984 (or $x11414 $x11979)))
(let (($x11987 (and $x11411 $x11984)))
(let (($x11990 (or $x11385 $x11987)))
(let (($x11993 (and $x11382 $x11990)))
(let (($x11374 (and $x10138 $x10141 $x10145 $x10146 $x10147 $x10148)))
(let (($x11379 (not $x11374)))
(let (($x11996 (or $x11379 $x11993)))
(let (($x12002 (and $x10138 $x10141 $x11996)))
(let (($x10140 (and $x10138 $x10139)))
(let (($x11209 (not $x10140)))
(let (($x12007 (or $x11209 $x12002)))
(let (($x12013 (and $x10138 $x10139 $x12007)))
(let (($x10136 (b_S_in_n_domain_n_lab$ v_b_S_s$ ?x10080 ?x10080 b_l_H_public$)))
(let (($x11221 (not $x10136)))
(let (($x12018 (or $x11221 $x12013)))
(let (($x12021 (and $x10136 $x12018)))
(let (($x12027 (not (or (not $x11342) $x12021))))
(let (($x10242 (exists ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x10233 (< ?v0 v_b_P_H_len$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(and $x2766 (and $x3097 (and $x10233 $x10238)))))))) :qid k!704))
))
(let (($x10244 (and $x10242 (=> $x10242 true))))
(let (($x10237 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10235 (<= ?x10163 v_b_S_result_G_0$)))
(let (($x10233 (< ?v0 v_b_P_H_len$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10234 (and $x3098 $x10233)))
(=> $x10234 $x10235)))))))) :qid k!704))
))
(let (($x10245 (=> $x10237 $x10244)))
(let (($x10227 (and true (and $x10216 (and $x10218 (and $x10220 (and $x10222 true)))))))
(let (($x10174 (<= 0 v_b_SL_H_witness_G_0$)))
(let (($x10181 (<= 1 v_b_L_H_p_G_0$)))
(let (($x10182 (and $x10181 $x10174)))
(let (($x10230 (and true (and $x10182 (and $x10182 $x10227)))))
(let (($x10247 (=> (and b_S_position_n_marker$ (and $x10182 $x10230)) (and $x10237 $x10245))))
(let (($x10248 (and b_S_position_n_marker$ $x10247)))
(let (($x10206 (and true $x10182)))
(let (($x10207 (and $x10182 $x10206)))
(let (($x10411 (and $x10182 $x10207)))
(let (($x10412 (and true $x10411)))
(let (($x10413 (and $x10182 $x10412)))
(let (($x10410 (<= v_b_P_H_len$ v_b_L_H_p_G_0$)))
(let (($x10416 (and true (and $x10182 (and $x10410 $x10413)))))
(let (($x10417 (=> $x10416 $x10248)))
(let (($x10377 (=> (and (and (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x10374) false) true)))
(let (($x10375 (and (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x10374)))
(let (($x10378 (and $x10375 $x10377)))
(let (($x10370 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10368 (<= ?x10163 v_b_L_H_max_G_3$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10367 (and $x3098 (< ?v0 v_b_L_H_p_G_1$))))
(=> $x10367 $x10368))))))) :qid k!704))
))
(let (($x10379 (=> $x10370 $x10378)))
(let (($x10365 (<= v_b_L_H_p_G_1$ v_b_P_H_len$)))
(let (($x10381 (=> $x10365 (and $x10370 $x10379))))
(let (($x10341 (<= 0 v_b_SL_H_witness_G_1$)))
(let (($x10360 (and (<= 2 v_b_L_H_p_G_1$) $x10341)))
(let (($x10363 (and (= v_b_L_H_p_G_1$ (+ v_b_L_H_p_G_0$ 1)) (and $x10358 (and $x10360 true)))))
(let (($x10355 (and (<= 0 (+ v_b_L_H_p_G_0$ 1)) (<= (+ v_b_L_H_p_G_0$ 1) b_S_max_o_u4$))))
(let (($x10383 (=> (and $x10355 $x10363) (and $x10365 $x10381))))
(let (($x10384 (and $x10355 $x10383)))
(let (($x10395 (and true (and $x10391 (and $x10392 (and true (and $x10181 $x10341)))))))
(let (($x10398 (and true (and $x10182 (and $x10182 $x10395)))))
(let (($x10390 (<= ?x10327 v_b_L_H_max_G_1$)))
(let (($x10402 (and true (and $x10182 (and $x10390 (and $x10182 $x10398))))))
(let (($x10403 (=> $x10402 $x10384)))
(let (($x10346 (and true (and $x10338 (and $x10340 (and true (and $x10181 $x10341)))))))
(let (($x10325 (and $x10321 $x10324)))
(let (($x10351 (and $x10325 (and $x10333 (and $x10334 (and $x10335 (and (and $x10181 $x10181) $x10346)))))))
(let (($x10385 (=> $x10351 $x10384)))
(let (($x10387 (=> $x10323 (and $x10325 $x10385))))
(let (($x10331 (and true (and $x10182 (and (< v_b_L_H_max_G_1$ ?x10327) $x10207)))))
(let (($x10389 (=> $x10331 (and $x10323 $x10387))))
(let (($x10326 (and $x10325 $x10182)))
(let (($x10405 (=> $x10326 (and $x10389 $x10403))))
(let (($x10407 (=> $x10323 (and $x10325 $x10405))))
(let (($x10319 (and true (and $x10182 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10207)))))
(let (($x10409 (=> $x10319 (and $x10323 $x10407))))
(let (($x10300 (and (= ?x10272 ?x10272) (= (b_S_statusmap$ v_b_S_s$) (b_S_statusmap$ v_b_S_s$)))))
(let (($x10301 (and $x10300 $x10182)))
(let (($x10297 (and $x10295 $x10296)))
(let (($x10205 (and $x10204 $x10097)))
(let (($x10307 (and $x10205 (and $x10291 (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x10301))))))))
(let (($x10283 (forall ((?v0 B_S_ptr$) )(! (let ((?x10280 (b_S_timestamp$ v_b_S_s$ ?v0)))
(<= ?x10280 ?x10280)) :pattern ( (b_S_timestamp$ v_b_S_s$ ?v0) ) :qid k!704))
))
(let (($x10286 (and (<= ?x10111 ?x10111) (and $x10283 $x10284))))
(let (($x10278 (forall ((?v0 B_S_ptr$) )(! (let (($x10260 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10272 (b_S_typemap$ v_b_S_s$)))
(let ((?x10273 (b_S_select_o_tm$ ?x10272 ?v0)))
(let (($x10275 (and (= ?x10273 ?x10273) $x10260)))
(=> $x10260 $x10275))))) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let (($x10287 (and $x10278 $x10286)))
(let (($x10271 (forall ((?v0 B_S_ptr$) )(! (let (($x10260 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10256 (b_S_statusmap$ v_b_S_s$)))
(let ((?x10257 (b_S_select_o_sm$ ?x10256 ?v0)))
(let (($x10269 (and (= ?x10257 ?x10257) $x10260)))
(=> $x10260 $x10269))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let (($x10288 (and $x10271 $x10287)))
(let (($x10267 (forall ((?v0 B_S_ptr$) )(! (let (($x10260 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10261 (b_S_memory$ v_b_S_s$)))
(let ((?x10262 (b_S_select_o_mem$ ?x10261 ?v0)))
(let (($x10264 (and (= ?x10262 ?x10262) $x10260)))
(=> $x10260 $x10264))))) :pattern ( (b_S_select_o_mem$ (b_S_memory$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let (($x10289 (and $x10267 $x10288)))
(let (($x10259 (forall ((?v0 B_S_ptr$) )(! (let (($x10253 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_owner$ v_b_S_s$ ?v0))) b_S_kind_n_thread$)))
(=> (not $x10253) (not $x10253))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let (($x10290 (and $x10259 $x10289)))
(let (($x10311 (and true (and $x10182 (and $x10290 (and $x10286 $x10307))))))
(let (($x10313 (and true (and $x10182 $x10311))))
(let (($x10315 (and true (and $x10182 $x10313))))
(let (($x10419 (=> $x10315 (and $x10409 $x10417))))
(let (($x10203 (not true)))
(let (($x10212 (and $x10203 (and $x10182 (and true (and $x10182 (and $x10205 $x10207)))))))
(let (($x10213 (and $x10182 $x10212)))
(let (($x10214 (and true $x10213)))
(let (($x10249 (=> $x10214 $x10248)))
(let (($x10420 (and $x10249 $x10419)))
(let (($x10194 (and (and (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x10192) $x10182)))
(let (($x10188 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10186 (<= ?x10163 v_b_L_H_max_G_1$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10185 (and $x3098 (< ?v0 v_b_L_H_p_G_0$))))
(=> $x10185 $x10186))))))) :qid k!704))
))
(let (($x10183 (<= v_b_L_H_p_G_0$ v_b_P_H_len$)))
(let (($x10180 (and (<= 0 v_b_L_H_p_G_0$) (<= v_b_L_H_p_G_0$ b_S_max_o_u4$))))
(let (($x10176 (and $x10174 (<= v_b_SL_H_witness_G_0$ b_S_max_o_u4$))))
(let (($x10172 (and (<= 0 v_b_L_H_max_G_1$) (<= v_b_L_H_max_G_1$ b_S_max_o_u1$))))
(let (($x10200 (and $x10172 (and $x10176 (and $x10180 (and $x10182 (and $x10183 (and $x10188 $x10194))))))))
(let (($x10201 (and true $x10200)))
(let (($x10074 (< 0 v_b_P_H_len$)))
(let (($x10168 (and $x10074 $x10167)))
(let (($x10421 (=> (and $x10168 $x10201) $x10420)))
(let (($x10166 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10164 (<= ?x10163 v_b_L_H_max_G_0$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10161 (and $x3098 (< ?v0 1))))
(=> $x10161 $x10164))))))) :qid k!704))
))
(let (($x10423 (=> $x10166 (and $x10168 $x10421))))
(let (($x10159 (<= 1 v_b_P_H_len$)))
(let (($x10425 (=> $x10159 (and $x10166 $x10423))))
(let (($x10149 (<= 1 1)))
(let (($x10154 (and $x10148 (and $x10149 (and $x10149 (and (<= 0 0) (<= 0 0)))))))
(let (($x10142 (and $x10138 $x10141)))
(let (($x10427 (=> (and $x10142 (and $x10145 (and $x10146 (and $x10147 $x10154)))) (and $x10159 $x10425))))
(let (($x10429 (=> $x10140 (and $x10142 $x10427))))
(let (($x10431 (=> $x10136 (and $x10140 $x10429))))
(let (($x10119 (and (<= 0 v_b_P_H_len$) (<= v_b_P_H_len$ b_S_max_o_u4$))))
(let (($x10116 (forall ((?v0 B_S_ptr$) )(! (let (($x10113 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0)))
(= $x10113 false)) :pattern ( (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0) ) :qid k!704))
))
(let (($x10108 (and $x10106 $x10107)))
(let (($x10104 (forall ((?v0 B_S_pure_n_function$) )(! (let ((?x10100 (b_S_frame_n_level$ ?v0)))
(< ?x10100 b_S_current_n_frame_n_level$)) :pattern ( (b_S_frame_n_level$ ?v0) ) :qid k!704))
))
(let (($x10098 (and $x10096 $x10097)))
(let (($x10125 (and $x10098 (and $x10104 (and $x10108 (and $x10109 (and $x10112 (and $x10116 $x10119))))))))
(let (($x10127 (and true (and $x10095 $x10125))))
(let (($x10094 (and $x10081 (and $x10083 (and $x10084 (and $x10085 (and $x10088 $x10089)))))))
(let (($x10073 (< v_b_P_H_len$ 1099511627776)))
(let (($x10071 (and (<= 0 v_b_SL_H_witness$) (<= v_b_SL_H_witness$ b_S_max_o_u4$))))
(let (($x10067 (and (<= 0 v_b_L_H_p$) (<= v_b_L_H_p$ b_S_max_o_u4$))))
(let (($x10063 (and (<= 0 v_b_L_H_max$) (<= v_b_L_H_max$ b_S_max_o_u1$))))
(let (($x10133 (and $x10063 (and $x10067 (and $x10071 (and $x10073 (and $x10074 (and $x10094 $x10127))))))))
(let (($x10134 (and true $x10133)))
(let (($x10433 (=> $x10134 (and $x10136 $x10431))))
(let (($x10434 (not $x10433)))
(let (($x10649 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10235 (<= ?x10163 v_b_S_result_G_0$)))
(let (($x10233 (< ?v0 v_b_P_H_len$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10234 (and $x3098 $x10233)))
(or (not $x10234) $x10235)))))))) :qid k!704))
))
(let (($x10665 (or (not $x10649) $x10242)))
(let (($x10670 (and $x10649 $x10665)))
(let (($x10616 (and $x10216 (and $x10218 (and $x10220 $x10222)))))
(let (($x10626 (and $x10182 $x10616)))
(let (($x10629 (and $x10182 $x10626)))
(let (($x10639 (and $x10182 $x10629)))
(let (($x10642 (and b_S_position_n_marker$ $x10639)))
(let (($x10677 (or (not $x10642) $x10670)))
(let (($x10682 (and b_S_position_n_marker$ $x10677)))
(let (($x11134 (or (not (and $x10182 (and $x10410 $x10182))) $x10682)))
(let (($x10931 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10368 (<= ?x10163 v_b_L_H_max_G_3$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10367 (and $x3098 (< ?v0 v_b_L_H_p_G_1$))))
(or (not $x10367) $x10368))))))) :qid k!704))
))
(let (($x10954 (or (not $x10931) $x10375)))
(let (($x10959 (and $x10931 $x10954)))
(let (($x10966 (or (not $x10365) $x10959)))
(let (($x10971 (and $x10365 $x10966)))
(let (($x10918 (and $x10358 $x10360)))
(let ((?x10901 (+ 1 v_b_L_H_p_G_0$)))
(let (($x10913 (= v_b_L_H_p_G_1$ ?x10901)))
(let (($x10921 (and $x10913 $x10918)))
(let (($x10907 (<= ?x10901 b_S_max_o_u4$)))
(let (($x10904 (<= 0 ?x10901)))
(let (($x10910 (and $x10904 $x10907)))
(let (($x10924 (and $x10910 $x10921)))
(let (($x10978 (or (not $x10924) $x10971)))
(let (($x10983 (and $x10910 $x10978)))
(let (($x10342 (and $x10181 $x10341)))
(let (($x11019 (and $x10392 $x10342)))
(let (($x11022 (and $x10391 $x11019)))
(let (($x11032 (and $x10182 $x11022)))
(let (($x11035 (and $x10182 $x11032)))
(let (($x11045 (and $x10182 $x11035)))
(let (($x11048 (and $x10390 $x11045)))
(let (($x11051 (and $x10182 $x11048)))
(let (($x11065 (or (not $x11051) $x10983)))
(let (($x10873 (and $x10340 $x10342)))
(let (($x10876 (and $x10338 $x10873)))
(let (($x10886 (and $x10181 $x10876)))
(let (($x10889 (and $x10335 $x10886)))
(let (($x10892 (and $x10334 $x10889)))
(let (($x10895 (and $x10333 $x10892)))
(let (($x10898 (and $x10325 $x10895)))
(let (($x10990 (or (not $x10898) $x10983)))
(let (($x10995 (and $x10325 $x10990)))
(let (($x11002 (or $x11001 $x10995)))
(let (($x11007 (and $x10323 $x11002)))
(let (($x11014 (or (not (and $x10182 (and (< v_b_L_H_max_G_1$ ?x10327) $x10182))) $x11007)))
(let (($x11070 (and $x11014 $x11065)))
(let (($x11077 (or (not $x10326) $x11070)))
(let (($x11082 (and $x10325 $x11077)))
(let (($x11088 (or $x11001 $x11082)))
(let (($x11093 (and $x10323 $x11088)))
(let (($x11100 (or (not (and $x10182 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10182))) $x11093)))
(let (($x11139 (and $x11100 $x11134)))
(let (($x10789 (and $x10297 $x10182)))
(let (($x10792 (and $x10294 $x10789)))
(let (($x10795 (and $x10293 $x10792)))
(let (($x10798 (and $x10292 $x10795)))
(let (($x10801 (and $x10291 $x10798)))
(let (($x10804 (and $x10205 $x10801)))
(let (($x10807 (and $x10286 $x10804)))
(let (($x10810 (and $x10286 $x10807)))
(let (($x10813 (and $x10182 $x10810)))
(let (($x10823 (and $x10182 $x10813)))
(let (($x10833 (and $x10182 $x10823)))
(let (($x11146 (or (not $x10833) $x11139)))
(let (($x10529 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10186 (<= ?x10163 v_b_L_H_max_G_1$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10185 (and $x3098 (< ?v0 v_b_L_H_p_G_0$))))
(or (not $x10185) $x10186))))))) :qid k!704))
))
(let (($x10532 (and $x10529 $x10194)))
(let (($x10535 (and $x10183 $x10532)))
(let (($x10538 (and $x10182 $x10535)))
(let (($x10541 (and $x10180 $x10538)))
(let (($x10544 (and $x10176 $x10541)))
(let (($x10547 (and $x10172 $x10544)))
(let (($x10557 (and $x10168 $x10547)))
(let (($x11162 (or (not $x10557) $x11146)))
(let (($x11167 (and $x10168 $x11162)))
(let (($x10522 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10164 (<= ?x10163 v_b_L_H_max_G_0$)))
(let (($x3097 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10161 (and $x3098 (< ?v0 1))))
(or (not $x10161) $x10164))))))) :qid k!704))
))
(let (($x11174 (or (not $x10522) $x11167)))
(let (($x11179 (and $x10522 $x11174)))
(let (($x11186 (or (not $x10159) $x11179)))
(let (($x11191 (and $x10159 $x11186)))
(let (($x10150 (<= 0 0)))
(let (($x10497 (and $x10149 $x10150)))
(let (($x10500 (and $x10149 $x10497)))
(let (($x10503 (and $x10148 $x10500)))
(let (($x10506 (and $x10147 $x10503)))
(let (($x10509 (and $x10146 $x10506)))
(let (($x10512 (and $x10145 $x10509)))
(let (($x10515 (and $x10142 $x10512)))
(let (($x11198 (or (not $x10515) $x11191)))
(let (($x11203 (and $x10142 $x11198)))
(let (($x11210 (or $x11209 $x11203)))
(let (($x11215 (and $x10140 $x11210)))
(let (($x11222 (or $x11221 $x11215)))
(let (($x11227 (and $x10136 $x11222)))
(let (($x10442 (and $x10439 $x10119)))
(let (($x10445 (and $x10112 $x10442)))
(let (($x10448 (and $x10109 $x10445)))
(let (($x10451 (and $x10108 $x10448)))
(let (($x10454 (and $x10104 $x10451)))
(let (($x10457 (and $x10098 $x10454)))
(let (($x10460 (and $x10095 $x10457)))
(let (($x10470 (and $x10094 $x10460)))
(let (($x10473 (and $x10074 $x10470)))
(let (($x10476 (and $x10073 $x10473)))
(let (($x10479 (and $x10071 $x10476)))
(let (($x10482 (and $x10067 $x10479)))
(let (($x10485 (and $x10063 $x10482)))
(let (($x11234 (or (not $x10485) $x11227)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ ?x10078 ?0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let ((?x3113 (* (- 1) b_S_max_o_u4$)))
(let ((?x3114 (+ ?0 ?x3113)))
(let (($x3115 (<= ?x3114 0)))
(let (($x2815 (>= ?0 0)))
(let (($x11839 (and $x2815 $x3115 $x11802 $x10238)))
(let (($x2766 (<= 0 ?0)))
(let (($x10241 (and $x2766 (and (<= ?0 b_S_max_o_u4$) (and (< ?0 v_b_P_H_len$) $x10238)))))
(let (($x11834 (= (and (<= ?0 b_S_max_o_u4$) (and (< ?0 v_b_P_H_len$) $x10238)) (and $x3115 (and $x11802 $x10238)))))
(let ((@x11832 (monotonicity (rewrite (= (< ?0 v_b_P_H_len$) $x11802)) (= (and (< ?0 v_b_P_H_len$) $x10238) (and $x11802 $x10238)))))
(let ((@x2814 (rewrite (= $x2766 $x2815))))
(let ((@x11838 (monotonicity @x2814 (monotonicity (rewrite (= (<= ?0 b_S_max_o_u4$) $x3115)) @x11832 $x11834) (= $x10241 (and $x2815 (and $x3115 (and $x11802 $x10238)))))))
(let ((@x11843 (trans @x11838 (rewrite (= (and $x2815 (and $x3115 (and $x11802 $x10238))) $x11839)) (= $x10241 $x11839))))
(let (($x11818 (<= (+ ?x10163 (* (- 1) v_b_S_result_G_0$)) 0)))
(let (($x11808 (and $x2815 $x3115 $x11802)))
(let (($x11813 (not $x11808)))
(let (($x11821 (or $x11813 $x11818)))
(let (($x10235 (<= ?x10163 v_b_S_result_G_0$)))
(let (($x10233 (< ?0 v_b_P_H_len$)))
(let (($x3097 (<= ?0 b_S_max_o_u4$)))
(let (($x3098 (and $x2766 $x3097)))
(let (($x10234 (and $x3098 $x10233)))
(let (($x10646 (or (not $x10234) $x10235)))
(let ((@x3124 (monotonicity @x2814 (rewrite (= $x3097 $x3115)) (= $x3098 (and $x2815 $x3115)))))
(let ((@x11807 (monotonicity @x3124 (rewrite (= $x10233 $x11802)) (= $x10234 (and (and $x2815 $x3115) $x11802)))))
(let ((@x11812 (trans @x11807 (rewrite (= (and (and $x2815 $x3115) $x11802) $x11808)) (= $x10234 $x11808))))
(let ((@x11823 (monotonicity (monotonicity @x11812 (= (not $x10234) $x11813)) (rewrite (= $x10235 $x11818)) (= $x10646 $x11821))))
(let ((@x11829 (monotonicity (quant-intro @x11823 (= $x10649 $x11824)) (= (not $x10649) $x11827))))
(let ((@x11852 (monotonicity (quant-intro @x11823 (= $x10649 $x11824)) (monotonicity @x11829 (quant-intro @x11843 (= $x10242 $x11844)) (= $x10665 $x11847)) (= $x10670 $x11850))))
(let (($x11434 (and $x11429 $x11432)))
(let (($x11793 (= (and b_S_position_n_marker$ (and $x11434 (and $x11434 (and $x11434 $x10616)))) $x11792)))
(let (($x11790 (= $x10642 (and b_S_position_n_marker$ (and $x11434 (and $x11434 (and $x11434 $x10616)))))))
(let ((@x11430 (rewrite (= $x10181 $x11429))))
(let ((@x11436 (monotonicity @x11430 (rewrite (= $x10174 $x11432)) (= $x10182 $x11434))))
(let ((@x11785 (monotonicity @x11436 (monotonicity @x11436 (= $x10626 (and $x11434 $x10616))) (= $x10629 (and $x11434 (and $x11434 $x10616))))))
(let ((@x11788 (monotonicity @x11436 @x11785 (= $x10639 (and $x11434 (and $x11434 (and $x11434 $x10616)))))))
(let ((@x11799 (monotonicity (trans (monotonicity @x11788 $x11790) (rewrite $x11793) (= $x10642 $x11792)) (= (not $x10642) $x11797))))
(let ((@x11858 (monotonicity (monotonicity @x11799 @x11852 (= $x10677 $x11853)) (= $x10682 $x11856))))
(let ((@x11768 (monotonicity (rewrite (= $x10410 $x11486)) @x11436 (= (and $x10410 $x10182) (and $x11486 $x11434)))))
(let ((@x11771 (monotonicity @x11436 @x11768 (= (and $x10182 (and $x10410 $x10182)) (and $x11434 (and $x11486 $x11434))))))
(let ((@x11776 (trans @x11771 (rewrite (= (and $x11434 (and $x11486 $x11434)) $x11772)) (= (and $x10182 (and $x10410 $x10182)) $x11772))))
(let ((@x11861 (monotonicity (monotonicity @x11776 (= (not (and $x10182 (and $x10410 $x10182))) $x11777)) @x11858 (= $x11134 $x11859))))
(let ((@x11653 (monotonicity (rewrite (= (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x11648)) (= $x10375 $x11651))))
(let (($x11633 (<= (+ ?x10163 (* (- 1) v_b_L_H_max_G_3$)) 0)))
(let (($x11615 (>= (+ ?0 ?x11581) 0)))
(let (($x11617 (not $x11615)))
(let (($x11623 (and $x2815 $x3115 $x11617)))
(let (($x11628 (not $x11623)))
(let (($x11636 (or $x11628 $x11633)))
(let (($x10368 (<= ?x10163 v_b_L_H_max_G_3$)))
(let (($x10928 (or (not (and $x3098 (< ?0 v_b_L_H_p_G_1$))) $x10368)))
(let ((@x11622 (monotonicity @x3124 (rewrite (= (< ?0 v_b_L_H_p_G_1$) $x11617)) (= (and $x3098 (< ?0 v_b_L_H_p_G_1$)) (and (and $x2815 $x3115) $x11617)))))
(let ((@x11627 (trans @x11622 (rewrite (= (and (and $x2815 $x3115) $x11617) $x11623)) (= (and $x3098 (< ?0 v_b_L_H_p_G_1$)) $x11623))))
(let ((@x11630 (monotonicity @x11627 (= (not (and $x3098 (< ?0 v_b_L_H_p_G_1$))) $x11628))))
(let ((@x11641 (quant-intro (monotonicity @x11630 (rewrite (= $x10368 $x11633)) (= $x10928 $x11636)) (= $x10931 $x11639))))
(let ((@x11656 (monotonicity (monotonicity @x11641 (= (not $x10931) $x11642)) @x11653 (= $x10954 $x11654))))
(let ((@x11662 (monotonicity (monotonicity (rewrite (= $x10365 $x11608)) (= (not $x10365) $x11612)) (monotonicity @x11641 @x11656 (= $x10959 $x11657)) (= $x10966 $x11660))))
(let (($x11601 (= (and (and $x11570 $x11573) (and $x11580 (and $x10358 (and $x11578 $x11536)))) $x11600)))
(let (($x11598 (= $x10924 (and (and $x11570 $x11573) (and $x11580 (and $x10358 (and $x11578 $x11536)))))))
(let ((@x11587 (monotonicity (rewrite (= (<= 2 v_b_L_H_p_G_1$) $x11578)) (rewrite (= $x10341 $x11536)) (= $x10360 (and $x11578 $x11536)))))
(let ((@x11593 (monotonicity (rewrite (= $x10913 $x11580)) (monotonicity @x11587 (= $x10918 (and $x10358 (and $x11578 $x11536)))) (= $x10921 (and $x11580 (and $x10358 (and $x11578 $x11536)))))))
(let ((@x11596 (monotonicity (rewrite (= $x10904 $x11570)) (rewrite (= $x10907 $x11573)) (= $x10910 (and $x11570 $x11573)))))
(let ((@x11607 (monotonicity (trans (monotonicity @x11596 @x11593 $x11598) (rewrite $x11601) (= $x10924 $x11600)) (= (not $x10924) $x11605))))
(let ((@x11668 (monotonicity @x11607 (monotonicity (rewrite (= $x10365 $x11608)) @x11662 (= $x10971 $x11663)) (= $x10978 $x11666))))
(let ((@x11676 (trans (monotonicity @x11596 @x11668 (= $x10983 (and (and $x11570 $x11573) $x11666))) (rewrite (= (and (and $x11570 $x11573) $x11666) $x11672)) (= $x10983 $x11672))))
(let (($x11716 (and $x11434 (and $x11434 (and $x11434 (and $x10391 (and $x10392 (and $x11429 $x11536))))))))
(let (($x11714 (= $x11035 (and $x11434 (and $x11434 (and $x10391 (and $x10392 (and $x11429 $x11536))))))))
(let ((@x11540 (monotonicity @x11430 (rewrite (= $x10341 $x11536)) (= $x10342 (and $x11429 $x11536)))))
(let ((@x11709 (monotonicity (monotonicity @x11540 (= $x11019 (and $x10392 (and $x11429 $x11536)))) (= $x11022 (and $x10391 (and $x10392 (and $x11429 $x11536)))))))
(let ((@x11712 (monotonicity @x11436 @x11709 (= $x11032 (and $x11434 (and $x10391 (and $x10392 (and $x11429 $x11536))))))))
(let ((@x11721 (monotonicity (rewrite (= $x10390 $x11516)) (monotonicity @x11436 (monotonicity @x11436 @x11712 $x11714) (= $x11045 $x11716)) (= $x11048 (and $x11516 $x11716)))))
(let ((@x11729 (trans (monotonicity @x11436 @x11721 (= $x11051 (and $x11434 (and $x11516 $x11716)))) (rewrite (= (and $x11434 (and $x11516 $x11716)) $x11725)) (= $x11051 $x11725))))
(let ((@x11735 (monotonicity (monotonicity @x11729 (= (not $x11051) $x11730)) @x11676 (= $x11065 $x11733))))
(let (($x11553 (and $x10334 (and $x10335 (and $x11429 (and $x10338 (and $x10340 (and $x11429 $x11536))))))))
(let (($x11551 (= $x10889 (and $x10335 (and $x11429 (and $x10338 (and $x10340 (and $x11429 $x11536))))))))
(let ((@x11546 (monotonicity (monotonicity @x11540 (= $x10873 (and $x10340 (and $x11429 $x11536)))) (= $x10876 (and $x10338 (and $x10340 (and $x11429 $x11536)))))))
(let ((@x11549 (monotonicity @x11430 @x11546 (= $x10886 (and $x11429 (and $x10338 (and $x10340 (and $x11429 $x11536))))))))
(let ((@x11558 (monotonicity (monotonicity (monotonicity @x11549 $x11551) (= $x10892 $x11553)) (= $x10895 (and $x10333 $x11553)))))
(let ((@x11566 (trans (monotonicity @x11558 (= $x10898 (and $x10325 (and $x10333 $x11553)))) (rewrite (= (and $x10325 (and $x10333 $x11553)) $x11562)) (= $x10898 $x11562))))
(let ((@x11679 (monotonicity (monotonicity @x11566 (= (not $x10898) $x11567)) @x11676 (= $x10990 $x11677))))
(let ((@x11687 (trans (monotonicity @x11679 (= $x10995 (and $x10325 $x11677))) (rewrite (= (and $x10325 $x11677) $x11683)) (= $x10995 $x11683))))
(let ((@x11693 (monotonicity (monotonicity @x11687 (= $x11002 $x11688)) (= $x11007 (and $x10323 $x11688)))))
(let (($x10328 (< v_b_L_H_max_G_1$ ?x10327)))
(let (($x10856 (and $x10328 $x10182)))
(let (($x10859 (and $x10182 $x10856)))
(let ((@x11523 (monotonicity (rewrite (= $x10328 $x11515)) @x11436 (= $x10856 (and $x11515 $x11434)))))
(let ((@x11531 (trans (monotonicity @x11436 @x11523 (= $x10859 (and $x11434 (and $x11515 $x11434)))) (rewrite (= (and $x11434 (and $x11515 $x11434)) $x11527)) (= $x10859 $x11527))))
(let ((@x11701 (monotonicity (monotonicity @x11531 (= (not $x10859) $x11532)) (trans @x11693 (rewrite (= (and $x10323 $x11688) $x11694)) (= $x11007 $x11694)) (= $x11014 $x11699))))
(let ((@x11511 (trans (monotonicity @x11436 (= $x10326 (and $x10325 $x11434))) (rewrite (= (and $x10325 $x11434) $x11507)) (= $x10326 $x11507))))
(let ((@x11741 (monotonicity (monotonicity @x11511 (= (not $x10326) $x11512)) (monotonicity @x11701 @x11735 (= $x11070 $x11736)) (= $x11077 $x11739))))
(let ((@x11749 (trans (monotonicity @x11741 (= $x11082 (and $x10325 $x11739))) (rewrite (= (and $x10325 $x11739) $x11745)) (= $x11082 $x11745))))
(let ((@x11755 (monotonicity (monotonicity @x11749 (= $x11088 $x11750)) (= $x11093 (and $x10323 $x11750)))))
(let (($x11502 (= (not (and $x10182 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10182))) $x11501)))
(let (($x10316 (< v_b_L_H_p_G_0$ v_b_P_H_len$)))
(let (($x10843 (and $x10316 $x10182)))
(let (($x10846 (and $x10182 $x10843)))
(let ((@x11492 (monotonicity (rewrite (= $x10316 $x11487)) @x11436 (= $x10843 (and $x11487 $x11434)))))
(let ((@x11500 (trans (monotonicity @x11436 @x11492 (= $x10846 (and $x11434 (and $x11487 $x11434)))) (rewrite (= (and $x11434 (and $x11487 $x11434)) $x11496)) (= $x10846 $x11496))))
(let ((@x11763 (monotonicity (monotonicity @x11500 $x11502) (trans @x11755 (rewrite (= (and $x10323 $x11750) $x11756)) (= $x11093 $x11756)) (= $x11100 $x11761))))
(let (($x11452 (and $x10205 (and $x10291 (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x11434))))))))
(let (($x11458 (and true (and true $x10284))))
(let (($x11477 (= (and $x11434 (and $x11434 (and $x11434 (and $x11458 (and $x11458 $x11452))))) $x11476)))
(let (($x11474 (= $x10833 (and $x11434 (and $x11434 (and $x11434 (and $x11458 (and $x11458 $x11452))))))))
(let (($x11450 (= $x10801 (and $x10291 (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x11434))))))))
(let ((@x11442 (monotonicity (monotonicity @x11436 (= $x10789 (and $x10297 $x11434))) (= $x10792 (and $x10294 (and $x10297 $x11434))))))
(let ((@x11448 (monotonicity (monotonicity @x11442 (= $x10795 (and $x10293 (and $x10294 (and $x10297 $x11434))))) (= $x10798 (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x11434))))))))
(let (($x11419 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_timestamp$ v_b_S_s$ ?v0) ) :qid k!704))
))
(let (($x11417 (= (<= (b_S_timestamp$ v_b_S_s$ ?0) (b_S_timestamp$ v_b_S_s$ ?0)) true)))
(let ((@x11425 (trans (quant-intro (rewrite $x11417) (= $x10283 $x11419)) (elim-unused (= $x11419 true)) (= $x10283 true))))
(let ((@x11460 (monotonicity (rewrite (= (<= ?x10111 ?x10111) true)) (monotonicity @x11425 (= (and $x10283 $x10284) (and true $x10284))) (= $x10286 $x11458))))
(let ((@x11463 (monotonicity @x11460 (monotonicity (monotonicity @x11448 $x11450) (= $x10804 $x11452)) (= $x10807 (and $x11458 $x11452)))))
(let ((@x11469 (monotonicity @x11436 (monotonicity @x11460 @x11463 (= $x10810 (and $x11458 (and $x11458 $x11452)))) (= $x10813 (and $x11434 (and $x11458 (and $x11458 $x11452)))))))
(let ((@x11472 (monotonicity @x11436 @x11469 (= $x10823 (and $x11434 (and $x11434 (and $x11458 (and $x11458 $x11452))))))))
(let ((@x11483 (monotonicity (trans (monotonicity @x11436 @x11472 $x11474) (rewrite $x11477) (= $x10833 $x11476)) (= (not $x10833) $x11481))))
(let ((@x11967 (monotonicity @x11483 (monotonicity @x11763 @x11861 (= $x11139 $x11862)) (= $x11146 (or $x11481 $x11862)))))
(let (($x11936 (and (and $x11901 $x11904) (and $x11434 (and $x11898 (and $x11895 (and (and $x11868 $x10192) $x11434)))))))
(let (($x11951 (and $x11260 $x10167)))
(let (($x11958 (= (and $x11951 (and (and $x11911 $x11914) (and (and $x11432 $x11907) $x11936))) $x11957)))
(let (($x11955 (= $x10557 (and $x11951 (and (and $x11911 $x11914) (and (and $x11432 $x11907) $x11936))))))
(let (($x11931 (= $x10538 (and $x11434 (and $x11898 (and $x11895 (and (and $x11868 $x10192) $x11434)))))))
(let (($x11919 (= (and (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x10192) (and $x11868 $x10192))))
(let ((@x11920 (monotonicity (rewrite (= (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x11868)) $x11919)))
(let (($x11889 (<= (+ ?x10163 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x11871 (>= (+ ?0 ?x11484) 0)))
(let (($x11873 (not $x11871)))
(let (($x11879 (and $x2815 $x3115 $x11873)))
(let (($x11884 (not $x11879)))
(let (($x11892 (or $x11884 $x11889)))
(let (($x10186 (<= ?x10163 v_b_L_H_max_G_1$)))
(let (($x10526 (or (not (and $x3098 (< ?0 v_b_L_H_p_G_0$))) $x10186)))
(let ((@x11878 (monotonicity @x3124 (rewrite (= (< ?0 v_b_L_H_p_G_0$) $x11873)) (= (and $x3098 (< ?0 v_b_L_H_p_G_0$)) (and (and $x2815 $x3115) $x11873)))))
(let ((@x11883 (trans @x11878 (rewrite (= (and (and $x2815 $x3115) $x11873) $x11879)) (= (and $x3098 (< ?0 v_b_L_H_p_G_0$)) $x11879))))
(let ((@x11886 (monotonicity @x11883 (= (not (and $x3098 (< ?0 v_b_L_H_p_G_0$))) $x11884))))
(let ((@x11897 (quant-intro (monotonicity @x11886 (rewrite (= $x10186 $x11889)) (= $x10526 $x11892)) (= $x10529 $x11895))))
(let ((@x11926 (monotonicity @x11897 (monotonicity @x11920 @x11436 (= $x10194 (and (and $x11868 $x10192) $x11434))) (= $x10532 (and $x11895 (and (and $x11868 $x10192) $x11434))))))
(let ((@x11929 (monotonicity (rewrite (= $x10183 $x11898)) @x11926 (= $x10535 (and $x11898 (and $x11895 (and (and $x11868 $x10192) $x11434)))))))
(let ((@x11935 (monotonicity (rewrite (= (<= 0 v_b_L_H_p_G_0$) $x11901)) (rewrite (= (<= v_b_L_H_p_G_0$ b_S_max_o_u4$) $x11904)) (= $x10180 (and $x11901 $x11904)))))
(let ((@x11941 (monotonicity (rewrite (= $x10174 $x11432)) (rewrite (= (<= v_b_SL_H_witness_G_0$ b_S_max_o_u4$) $x11907)) (= $x10176 (and $x11432 $x11907)))))
(let ((@x11944 (monotonicity @x11941 (monotonicity @x11935 (monotonicity @x11436 @x11929 $x11931) (= $x10541 $x11936)) (= $x10544 (and (and $x11432 $x11907) $x11936)))))
(let ((@x11947 (monotonicity (rewrite (= (<= 0 v_b_L_H_max_G_1$) $x11911)) (rewrite (= (<= v_b_L_H_max_G_1$ b_S_max_o_u1$) $x11914)) (= $x10172 (and $x11911 $x11914)))))
(let ((@x11950 (monotonicity @x11947 @x11944 (= $x10547 (and (and $x11911 $x11914) (and (and $x11432 $x11907) $x11936))))))
(let ((@x11956 (monotonicity (monotonicity (rewrite (= $x10074 $x11260)) (= $x10168 $x11951)) @x11950 $x11955)))
(let ((@x11964 (monotonicity (trans @x11956 (rewrite $x11958) (= $x10557 $x11957)) (= (not $x10557) $x11962))))
(let ((@x11975 (trans (monotonicity @x11964 @x11967 (= $x11162 (or $x11962 (or $x11481 $x11862)))) (rewrite (= (or $x11962 (or $x11481 $x11862)) $x11971)) (= $x11162 $x11971))))
(let ((@x11978 (monotonicity (monotonicity (rewrite (= $x10074 $x11260)) (= $x10168 $x11951)) @x11975 (= $x11167 (and $x11951 $x11971)))))
(let (($x11404 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10163)) 0)))
(let (($x11388 (>= ?0 1)))
(let (($x11389 (not $x11388)))
(let (($x11395 (and $x2815 $x3115 $x11389)))
(let (($x11400 (not $x11395)))
(let (($x11408 (or $x11400 $x11404)))
(let (($x10164 (<= ?x10163 v_b_L_H_max_G_0$)))
(let (($x10519 (or (not (and $x3098 (< ?0 1))) $x10164)))
(let ((@x11394 (monotonicity @x3124 (rewrite (= (< ?0 1) $x11389)) (= (and $x3098 (< ?0 1)) (and (and $x2815 $x3115) $x11389)))))
(let ((@x11399 (trans @x11394 (rewrite (= (and (and $x2815 $x3115) $x11389) $x11395)) (= (and $x3098 (< ?0 1)) $x11395))))
(let ((@x11410 (monotonicity (monotonicity @x11399 (= (not (and $x3098 (< ?0 1))) $x11400)) (rewrite (= $x10164 $x11404)) (= $x10519 $x11408))))
(let ((@x11416 (monotonicity (quant-intro @x11410 (= $x10522 $x11411)) (= (not $x10522) $x11414))))
(let ((@x11986 (monotonicity @x11416 (trans @x11978 (rewrite (= (and $x11951 $x11971) $x11979)) (= $x11167 $x11979)) (= $x11174 $x11984))))
(let ((@x11992 (monotonicity (monotonicity (rewrite (= $x10159 $x11382)) (= (not $x10159) $x11385)) (monotonicity (quant-intro @x11410 (= $x10522 $x11411)) @x11986 (= $x11179 $x11987)) (= $x11186 $x11990))))
(let (($x11368 (and $x10145 (and $x10146 (and $x10147 (and $x10148 (and true (and true true))))))))
(let (($x11366 (= $x10509 (and $x10146 (and $x10147 (and $x10148 (and true (and true true))))))))
(let ((@x11355 (monotonicity (rewrite (= $x10149 true)) (rewrite (= $x10150 true)) (= $x10497 (and true true)))))
(let ((@x11358 (monotonicity (rewrite (= $x10149 true)) @x11355 (= $x10500 (and true (and true true))))))
(let ((@x11361 (monotonicity @x11358 (= $x10503 (and $x10148 (and true (and true true)))))))
(let ((@x11364 (monotonicity @x11361 (= $x10506 (and $x10147 (and $x10148 (and true (and true true))))))))
(let ((@x11373 (monotonicity (monotonicity (monotonicity @x11364 $x11366) (= $x10512 $x11368)) (= $x10515 (and $x10142 $x11368)))))
(let ((@x11381 (monotonicity (trans @x11373 (rewrite (= (and $x10142 $x11368) $x11374)) (= $x10515 $x11374)) (= (not $x10515) $x11379))))
(let ((@x11998 (monotonicity @x11381 (monotonicity (rewrite (= $x10159 $x11382)) @x11992 (= $x11191 $x11993)) (= $x11198 $x11996))))
(let ((@x12006 (trans (monotonicity @x11998 (= $x11203 (and $x10142 $x11996))) (rewrite (= (and $x10142 $x11996) $x12002)) (= $x11203 $x12002))))
(let ((@x12012 (monotonicity (monotonicity @x12006 (= $x11210 $x12007)) (= $x11215 (and $x10140 $x12007)))))
(let ((@x12020 (monotonicity (trans @x12012 (rewrite (= (and $x10140 $x12007) $x12013)) (= $x11215 $x12013)) (= $x11222 $x12018))))
(let (($x11306 (and $x11256 (and $x10108 (and $x10109 (and $x10112 (and $x10439 (and $x11243 $x11245))))))))
(let (($x11327 (and (and $x11268 $x11270) (and $x11264 (and $x11260 (and $x10094 (and $x10095 (and $x10098 $x11306))))))))
(let ((@x11344 (rewrite (= (and (and $x11284 $x11286) (and (and $x11276 $x11278) $x11327)) $x11342))))
(let (($x11322 (= $x10476 (and $x11264 (and $x11260 (and $x10094 (and $x10095 (and $x10098 $x11306))))))))
(let (($x11304 (= $x10451 (and $x10108 (and $x10109 (and $x10112 (and $x10439 (and $x11243 $x11245))))))))
(let ((@x11293 (monotonicity (rewrite (= (<= 0 v_b_P_H_len$) $x11243)) (rewrite (= (<= v_b_P_H_len$ b_S_max_o_u4$) $x11245)) (= $x10119 (and $x11243 $x11245)))))
(let ((@x11299 (monotonicity (monotonicity @x11293 (= $x10442 (and $x10439 (and $x11243 $x11245)))) (= $x10445 (and $x10112 (and $x10439 (and $x11243 $x11245)))))))
(let ((@x11302 (monotonicity @x11299 (= $x10448 (and $x10109 (and $x10112 (and $x10439 (and $x11243 $x11245))))))))
(let (($x11251 (>= (+ (b_S_frame_n_level$ ?0) (* (- 1) b_S_current_n_frame_n_level$)) 0)))
(let (($x11250 (not $x11251)))
(let ((@x11255 (rewrite (= (< (b_S_frame_n_level$ ?0) b_S_current_n_frame_n_level$) $x11250))))
(let ((@x11308 (monotonicity (quant-intro @x11255 (= $x10104 $x11256)) (monotonicity @x11302 $x11304) (= $x10454 $x11306))))
(let ((@x11314 (monotonicity (monotonicity @x11308 (= $x10457 (and $x10098 $x11306))) (= $x10460 (and $x10095 (and $x10098 $x11306))))))
(let ((@x11320 (monotonicity (rewrite (= $x10074 $x11260)) (monotonicity @x11314 (= $x10470 (and $x10094 (and $x10095 (and $x10098 $x11306))))) (= $x10473 (and $x11260 (and $x10094 (and $x10095 (and $x10098 $x11306))))))))
(let ((@x11326 (monotonicity (rewrite (= (<= 0 v_b_SL_H_witness$) $x11268)) (rewrite (= (<= v_b_SL_H_witness$ b_S_max_o_u4$) $x11270)) (= $x10071 (and $x11268 $x11270)))))
(let ((@x11329 (monotonicity @x11326 (monotonicity (rewrite (= $x10073 $x11264)) @x11320 $x11322) (= $x10479 $x11327))))
(let ((@x11332 (monotonicity (rewrite (= (<= 0 v_b_L_H_p$) $x11276)) (rewrite (= (<= v_b_L_H_p$ b_S_max_o_u4$) $x11278)) (= $x10067 (and $x11276 $x11278)))))
(let ((@x11338 (monotonicity (rewrite (= (<= 0 v_b_L_H_max$) $x11284)) (rewrite (= (<= v_b_L_H_max$ b_S_max_o_u1$) $x11286)) (= $x10063 (and $x11284 $x11286)))))
(let ((@x11341 (monotonicity @x11338 (monotonicity @x11332 @x11329 (= $x10482 (and (and $x11276 $x11278) $x11327))) (= $x10485 (and (and $x11284 $x11286) (and (and $x11276 $x11278) $x11327))))))
(let ((@x11349 (monotonicity (trans @x11341 @x11344 (= $x10485 $x11342)) (= (not $x10485) (not $x11342)))))
(let ((@x12026 (monotonicity @x11349 (monotonicity @x12020 (= $x11227 $x12021)) (= $x11234 (or (not $x11342) $x12021)))))
(let ((@x10656 (monotonicity (rewrite (= (=> $x10242 true) true)) (= $x10244 (and $x10242 true)))))
(let ((@x10663 (monotonicity (quant-intro (rewrite (= (=> $x10234 $x10235) $x10646)) (= $x10237 $x10649)) (trans @x10656 (rewrite (= (and $x10242 true) $x10242)) (= $x10244 $x10242)) (= $x10245 (=> $x10649 $x10242)))))
(let ((@x10672 (monotonicity (quant-intro (rewrite (= (=> $x10234 $x10235) $x10646)) (= $x10237 $x10649)) (trans @x10663 (rewrite (= (=> $x10649 $x10242) $x10665)) (= $x10245 $x10665)) (= (and $x10237 $x10245) $x10670))))
(let (($x10614 (= (and $x10218 (and $x10220 (and $x10222 true))) (and $x10218 (and $x10220 $x10222)))))
(let ((@x10612 (monotonicity (rewrite (= (and $x10222 true) $x10222)) (= (and $x10220 (and $x10222 true)) (and $x10220 $x10222)))))
(let ((@x10618 (monotonicity (monotonicity @x10612 $x10614) (= (and $x10216 (and $x10218 (and $x10220 (and $x10222 true)))) $x10616))))
(let ((@x10625 (trans (monotonicity @x10618 (= $x10227 (and true $x10616))) (rewrite (= (and true $x10616) $x10616)) (= $x10227 $x10616))))
(let ((@x10631 (monotonicity (monotonicity @x10625 (= (and $x10182 $x10227) $x10626)) (= (and $x10182 (and $x10182 $x10227)) $x10629))))
(let ((@x10638 (trans (monotonicity @x10631 (= $x10230 (and true $x10629))) (rewrite (= (and true $x10629) $x10629)) (= $x10230 $x10629))))
(let ((@x10644 (monotonicity (monotonicity @x10638 (= (and $x10182 $x10230) $x10639)) (= (and b_S_position_n_marker$ (and $x10182 $x10230)) $x10642))))
(let ((@x10681 (trans (monotonicity @x10644 @x10672 (= $x10247 (=> $x10642 $x10670))) (rewrite (= (=> $x10642 $x10670) $x10677)) (= $x10247 $x10677))))
(let (($x11117 (and $x10410 $x10182)))
(let (($x11120 (and $x10182 $x11117)))
(let ((@x10568 (rewrite (= (and $x10182 $x10182) $x10182))))
(let ((@x10563 (rewrite (= $x10206 $x10182))))
(let ((@x10570 (trans (monotonicity @x10563 (= $x10207 (and $x10182 $x10182))) @x10568 (= $x10207 $x10182))))
(let ((@x11108 (trans (monotonicity @x10570 (= $x10411 (and $x10182 $x10182))) @x10568 (= $x10411 $x10182))))
(let ((@x11114 (monotonicity (trans (monotonicity @x11108 (= $x10412 $x10206)) @x10563 (= $x10412 $x10182)) (= $x10413 (and $x10182 $x10182)))))
(let ((@x11119 (monotonicity (trans @x11114 @x10568 (= $x10413 $x10182)) (= (and $x10410 $x10413) $x11117))))
(let ((@x11125 (monotonicity (monotonicity @x11119 (= (and $x10182 (and $x10410 $x10413)) $x11120)) (= $x10416 (and true $x11120)))))
(let ((@x11132 (monotonicity (trans @x11125 (rewrite (= (and true $x11120) $x11120)) (= $x10416 $x11120)) (monotonicity @x10681 (= $x10248 $x10682)) (= $x10417 (=> $x11120 $x10682)))))
(let ((@x10938 (monotonicity (rewrite (= (and $x10375 false) false)) (= $x10377 (=> false true)))))
(let ((@x10942 (trans @x10938 (rewrite (= (=> false true) true)) (= $x10377 true))))
(let ((@x10949 (trans (monotonicity @x10942 (= $x10378 (and $x10375 true))) (rewrite (= (and $x10375 true) $x10375)) (= $x10378 $x10375))))
(let ((@x10933 (quant-intro (rewrite (= (=> (and $x3098 (< ?0 v_b_L_H_p_G_1$)) $x10368) $x10928)) (= $x10370 $x10931))))
(let ((@x10958 (trans (monotonicity @x10933 @x10949 (= $x10379 (=> $x10931 $x10375))) (rewrite (= (=> $x10931 $x10375) $x10954)) (= $x10379 $x10954))))
(let ((@x10964 (monotonicity (monotonicity @x10933 @x10958 (= (and $x10370 $x10379) $x10959)) (= $x10381 (=> $x10365 $x10959)))))
(let ((@x10973 (monotonicity (trans @x10964 (rewrite (= (=> $x10365 $x10959) $x10966)) (= $x10381 $x10966)) (= (and $x10365 $x10381) $x10971))))
(let ((@x10920 (monotonicity (rewrite (= (and $x10360 true) $x10360)) (= (and $x10358 (and $x10360 true)) $x10918))))
(let ((@x10903 (rewrite (= (+ v_b_L_H_p_G_0$ 1) ?x10901))))
(let ((@x10915 (monotonicity @x10903 (= (= v_b_L_H_p_G_1$ (+ v_b_L_H_p_G_0$ 1)) $x10913))))
(let ((@x10909 (monotonicity @x10903 (= (<= (+ v_b_L_H_p_G_0$ 1) b_S_max_o_u4$) $x10907))))
(let ((@x10912 (monotonicity (monotonicity @x10903 (= (<= 0 (+ v_b_L_H_p_G_0$ 1)) $x10904)) @x10909 (= $x10355 $x10910))))
(let ((@x10926 (monotonicity @x10912 (monotonicity @x10915 @x10920 (= $x10363 $x10921)) (= (and $x10355 $x10363) $x10924))))
(let ((@x10982 (trans (monotonicity @x10926 @x10973 (= $x10383 (=> $x10924 $x10971))) (rewrite (= (=> $x10924 $x10971) $x10978)) (= $x10383 $x10978))))
(let ((@x11021 (monotonicity (rewrite (= (and true $x10342) $x10342)) (= (and $x10392 (and true $x10342)) $x11019))))
(let ((@x11024 (monotonicity @x11021 (= (and $x10391 (and $x10392 (and true $x10342))) $x11022))))
(let ((@x11031 (trans (monotonicity @x11024 (= $x10395 (and true $x11022))) (rewrite (= (and true $x11022) $x11022)) (= $x10395 $x11022))))
(let ((@x11037 (monotonicity (monotonicity @x11031 (= (and $x10182 $x10395) $x11032)) (= (and $x10182 (and $x10182 $x10395)) $x11035))))
(let ((@x11044 (trans (monotonicity @x11037 (= $x10398 (and true $x11035))) (rewrite (= (and true $x11035) $x11035)) (= $x10398 $x11035))))
(let ((@x11050 (monotonicity (monotonicity @x11044 (= (and $x10182 $x10398) $x11045)) (= (and $x10390 (and $x10182 $x10398)) $x11048))))
(let ((@x11056 (monotonicity (monotonicity @x11050 (= (and $x10182 (and $x10390 (and $x10182 $x10398))) $x11051)) (= $x10402 (and true $x11051)))))
(let ((@x11063 (monotonicity (trans @x11056 (rewrite (= (and true $x11051) $x11051)) (= $x10402 $x11051)) (monotonicity @x10912 @x10982 (= $x10384 $x10983)) (= $x10403 (=> $x11051 $x10983)))))
(let (($x10896 (= (and $x10333 (and $x10334 (and $x10335 (and (and $x10181 $x10181) $x10346)))) $x10895)))
(let ((@x10875 (monotonicity (rewrite (= (and true $x10342) $x10342)) (= (and $x10340 (and true $x10342)) $x10873))))
(let ((@x10878 (monotonicity @x10875 (= (and $x10338 (and $x10340 (and true $x10342))) $x10876))))
(let ((@x10885 (trans (monotonicity @x10878 (= $x10346 (and true $x10876))) (rewrite (= (and true $x10876) $x10876)) (= $x10346 $x10876))))
(let ((@x10888 (monotonicity (rewrite (= (and $x10181 $x10181) $x10181)) @x10885 (= (and (and $x10181 $x10181) $x10346) $x10886))))
(let ((@x10894 (monotonicity (monotonicity @x10888 (= (and $x10335 (and (and $x10181 $x10181) $x10346)) $x10889)) (= (and $x10334 (and $x10335 (and (and $x10181 $x10181) $x10346))) $x10892))))
(let ((@x10988 (monotonicity (monotonicity (monotonicity @x10894 $x10896) (= $x10351 $x10898)) (monotonicity @x10912 @x10982 (= $x10384 $x10983)) (= $x10385 (=> $x10898 $x10983)))))
(let ((@x10997 (monotonicity (trans @x10988 (rewrite (= (=> $x10898 $x10983) $x10990)) (= $x10385 $x10990)) (= (and $x10325 $x10385) $x10995))))
(let ((@x11006 (trans (monotonicity @x10997 (= $x10387 (=> $x10323 $x10995))) (rewrite (= (=> $x10323 $x10995) $x11002)) (= $x10387 $x11002))))
(let ((@x10861 (monotonicity (monotonicity @x10570 (= (and $x10328 $x10207) $x10856)) (= (and $x10182 (and $x10328 $x10207)) $x10859))))
(let ((@x10868 (trans (monotonicity @x10861 (= $x10331 (and true $x10859))) (rewrite (= (and true $x10859) $x10859)) (= $x10331 $x10859))))
(let ((@x11012 (monotonicity @x10868 (monotonicity @x11006 (= (and $x10323 $x10387) $x11007)) (= $x10389 (=> $x10859 $x11007)))))
(let ((@x11072 (monotonicity (trans @x11012 (rewrite (= (=> $x10859 $x11007) $x11014)) (= $x10389 $x11014)) (trans @x11063 (rewrite (= (=> $x11051 $x10983) $x11065)) (= $x10403 $x11065)) (= (and $x10389 $x10403) $x11070))))
(let ((@x11081 (trans (monotonicity @x11072 (= $x10405 (=> $x10326 $x11070))) (rewrite (= (=> $x10326 $x11070) $x11077)) (= $x10405 $x11077))))
(let ((@x11087 (monotonicity (monotonicity @x11081 (= (and $x10325 $x10405) $x11082)) (= $x10407 (=> $x10323 $x11082)))))
(let ((@x11095 (monotonicity (trans @x11087 (rewrite (= (=> $x10323 $x11082) $x11088)) (= $x10407 $x11088)) (= (and $x10323 $x10407) $x11093))))
(let ((@x10848 (monotonicity (monotonicity @x10570 (= (and $x10316 $x10207) $x10843)) (= (and $x10182 (and $x10316 $x10207)) $x10846))))
(let ((@x10855 (trans (monotonicity @x10848 (= $x10319 (and true $x10846))) (rewrite (= (and true $x10846) $x10846)) (= $x10319 $x10846))))
(let ((@x11104 (trans (monotonicity @x10855 @x11095 (= $x10409 (=> $x10846 $x11093))) (rewrite (= (=> $x10846 $x11093) $x11100)) (= $x10409 $x11100))))
(let ((@x11141 (monotonicity @x11104 (trans @x11132 (rewrite (= (=> $x11120 $x10682) $x11134)) (= $x10417 $x11134)) (= (and $x10409 $x10417) $x11139))))
(let (($x10802 (= (and $x10291 (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x10301))))) $x10801)))
(let ((@x10777 (rewrite (= (= (b_S_statusmap$ v_b_S_s$) (b_S_statusmap$ v_b_S_s$)) true))))
(let ((@x10780 (monotonicity (rewrite (= (= ?x10272 ?x10272) true)) @x10777 (= $x10300 (and true true)))))
(let ((@x10784 (trans @x10780 (rewrite (= (and true true) true)) (= $x10300 true))))
(let ((@x10791 (monotonicity (trans (monotonicity @x10784 (= $x10301 $x10206)) @x10563 (= $x10301 $x10182)) (= (and $x10297 $x10301) $x10789))))
(let ((@x10797 (monotonicity (monotonicity @x10791 (= (and $x10294 (and $x10297 $x10301)) $x10792)) (= (and $x10293 (and $x10294 (and $x10297 $x10301))) $x10795))))
(let ((@x10800 (monotonicity @x10797 (= (and $x10292 (and $x10293 (and $x10294 (and $x10297 $x10301)))) $x10798))))
(let ((@x10809 (monotonicity (monotonicity (monotonicity @x10800 $x10802) (= $x10307 $x10804)) (= (and $x10286 $x10307) $x10807))))
(let ((@x10759 (rewrite (= (and true $x10286) $x10286))))
(let (($x10748 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_tm$ (b_S_typemap$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let (($x10260 (b_S_thread_n_local$ v_b_S_s$ ?0)))
(let (($x10275 (and (= (b_S_select_o_tm$ ?x10272 ?0) (b_S_select_o_tm$ ?x10272 ?0)) $x10260)))
(let (($x10276 (=> $x10260 $x10275)))
(let ((@x10714 (rewrite (= (=> $x10260 $x10260) true))))
(let ((@x10707 (rewrite (= (and true $x10260) $x10260))))
(let (($x10738 (= (= (b_S_select_o_tm$ ?x10272 ?0) (b_S_select_o_tm$ ?x10272 ?0)) true)))
(let ((@x10743 (trans (monotonicity (rewrite $x10738) (= $x10275 (and true $x10260))) @x10707 (= $x10275 $x10260))))
(let ((@x10747 (trans (monotonicity @x10743 (= $x10276 (=> $x10260 $x10260))) @x10714 (= $x10276 true))))
(let ((@x10754 (trans (quant-intro @x10747 (= $x10278 $x10748)) (elim-unused (= $x10748 true)) (= $x10278 true))))
(let ((@x10761 (trans (monotonicity @x10754 (= $x10287 (and true $x10286))) @x10759 (= $x10287 $x10286))))
(let (($x10694 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let ((?x10256 (b_S_statusmap$ v_b_S_s$)))
(let ((?x10257 (b_S_select_o_sm$ ?x10256 ?0)))
(let (($x10269 (and (= ?x10257 ?x10257) $x10260)))
(let (($x10270 (=> $x10260 $x10269)))
(let ((@x10727 (monotonicity (rewrite (= (= ?x10257 ?x10257) true)) (= $x10269 (and true $x10260)))))
(let ((@x10731 (monotonicity (trans @x10727 @x10707 (= $x10269 $x10260)) (= $x10270 (=> $x10260 $x10260)))))
(let ((@x10737 (trans (quant-intro (trans @x10731 @x10714 (= $x10270 true)) (= $x10271 $x10694)) (elim-unused (= $x10694 true)) (= $x10271 true))))
(let ((@x10765 (trans (monotonicity @x10737 @x10761 (= $x10288 (and true $x10286))) @x10759 (= $x10288 $x10286))))
(let (($x10717 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_mem$ (b_S_memory$ v_b_S_s$) ?v0) ) :qid k!704))
))
(let ((?x10261 (b_S_memory$ v_b_S_s$)))
(let ((?x10262 (b_S_select_o_mem$ ?x10261 ?0)))
(let (($x10264 (and (= ?x10262 ?x10262) $x10260)))
(let (($x10265 (=> $x10260 $x10264)))
(let ((@x10705 (monotonicity (rewrite (= (= ?x10262 ?x10262) true)) (= $x10264 (and true $x10260)))))
(let ((@x10712 (monotonicity (trans @x10705 @x10707 (= $x10264 $x10260)) (= $x10265 (=> $x10260 $x10260)))))
(let ((@x10723 (trans (quant-intro (trans @x10712 @x10714 (= $x10265 true)) (= $x10267 $x10717)) (elim-unused (= $x10717 true)) (= $x10267 true))))
(let ((@x10769 (trans (monotonicity @x10723 @x10765 (= $x10289 (and true $x10286))) @x10759 (= $x10289 $x10286))))
(let (($x10253 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_owner$ v_b_S_s$ ?0))) b_S_kind_n_thread$)))
(let ((@x10696 (quant-intro (rewrite (= (=> (not $x10253) (not $x10253)) true)) (= $x10259 $x10694))))
(let ((@x10771 (monotonicity (trans @x10696 (elim-unused (= $x10694 true)) (= $x10259 true)) @x10769 (= $x10290 (and true $x10286)))))
(let ((@x10812 (monotonicity (trans @x10771 @x10759 (= $x10290 $x10286)) @x10809 (= (and $x10290 (and $x10286 $x10307)) $x10810))))
(let ((@x10818 (monotonicity (monotonicity @x10812 (= (and $x10182 (and $x10290 (and $x10286 $x10307))) $x10813)) (= $x10311 (and true $x10813)))))
(let ((@x10825 (monotonicity (trans @x10818 (rewrite (= (and true $x10813) $x10813)) (= $x10311 $x10813)) (= (and $x10182 $x10311) $x10823))))
(let ((@x10832 (trans (monotonicity @x10825 (= $x10313 (and true $x10823))) (rewrite (= (and true $x10823) $x10823)) (= $x10313 $x10823))))
(let ((@x10838 (monotonicity (monotonicity @x10832 (= (and $x10182 $x10313) $x10833)) (= $x10315 (and true $x10833)))))
(let ((@x11144 (monotonicity (trans @x10838 (rewrite (= (and true $x10833) $x10833)) (= $x10315 $x10833)) @x11141 (= $x10419 (=> $x10833 $x11139)))))
(let ((@x10591 (rewrite (= (and false (and $x10182 (and $x10182 (and $x10205 $x10182)))) false))))
(let (($x10585 (= (and $x10182 (and true (and $x10182 (and $x10205 $x10207)))) (and $x10182 (and $x10182 (and $x10205 $x10182))))))
(let (($x10574 (and $x10182 (and $x10205 $x10182))))
(let (($x10210 (and true (and $x10182 (and $x10205 $x10207)))))
(let ((@x10576 (monotonicity (monotonicity @x10570 (= (and $x10205 $x10207) (and $x10205 $x10182))) (= (and $x10182 (and $x10205 $x10207)) $x10574))))
(let ((@x10583 (trans (monotonicity @x10576 (= $x10210 (and true $x10574))) (rewrite (= (and true $x10574) $x10574)) (= $x10210 $x10574))))
(let ((@x10589 (monotonicity (rewrite (= $x10203 false)) (monotonicity @x10583 $x10585) (= $x10212 (and false (and $x10182 $x10574))))))
(let ((@x10596 (monotonicity (trans @x10589 @x10591 (= $x10212 false)) (= $x10213 (and $x10182 false)))))
(let ((@x10600 (trans @x10596 (rewrite (= (and $x10182 false) false)) (= $x10213 false))))
(let ((@x10607 (trans (monotonicity @x10600 (= $x10214 (and true false))) (rewrite (= (and true false) false)) (= $x10214 false))))
(let ((@x10687 (monotonicity @x10607 (monotonicity @x10681 (= $x10248 $x10682)) (= $x10249 (=> false $x10682)))))
(let ((@x10691 (trans @x10687 (rewrite (= (=> false $x10682) true)) (= $x10249 true))))
(let ((@x11153 (monotonicity @x10691 (trans @x11144 (rewrite (= (=> $x10833 $x11139) $x11146)) (= $x10419 $x11146)) (= $x10420 (and true $x11146)))))
(let (($x10545 (= (and $x10176 (and $x10180 (and $x10182 (and $x10183 (and $x10188 $x10194))))) $x10544)))
(let ((@x10531 (quant-intro (rewrite (= (=> (and $x3098 (< ?0 v_b_L_H_p_G_0$)) $x10186) $x10526)) (= $x10188 $x10529))))
(let ((@x10537 (monotonicity (monotonicity @x10531 (= (and $x10188 $x10194) $x10532)) (= (and $x10183 (and $x10188 $x10194)) $x10535))))
(let ((@x10543 (monotonicity (monotonicity @x10537 (= (and $x10182 (and $x10183 (and $x10188 $x10194))) $x10538)) (= (and $x10180 (and $x10182 (and $x10183 (and $x10188 $x10194)))) $x10541))))
(let ((@x10552 (monotonicity (monotonicity (monotonicity @x10543 $x10545) (= $x10200 $x10547)) (= $x10201 (and true $x10547)))))
(let ((@x10559 (monotonicity (trans @x10552 (rewrite (= (and true $x10547) $x10547)) (= $x10201 $x10547)) (= (and $x10168 $x10201) $x10557))))
(let ((@x11160 (monotonicity @x10559 (trans @x11153 (rewrite (= (and true $x11146) $x11146)) (= $x10420 $x11146)) (= $x10421 (=> $x10557 $x11146)))))
(let ((@x11169 (monotonicity (trans @x11160 (rewrite (= (=> $x10557 $x11146) $x11162)) (= $x10421 $x11162)) (= (and $x10168 $x10421) $x11167))))
(let ((@x10524 (quant-intro (rewrite (= (=> (and $x3098 (< ?0 1)) $x10164) $x10519)) (= $x10166 $x10522))))
(let ((@x11178 (trans (monotonicity @x10524 @x11169 (= $x10423 (=> $x10522 $x11167))) (rewrite (= (=> $x10522 $x11167) $x11174)) (= $x10423 $x11174))))
(let ((@x11184 (monotonicity (monotonicity @x10524 @x11178 (= (and $x10166 $x10423) $x11179)) (= $x10425 (=> $x10159 $x11179)))))
(let ((@x11193 (monotonicity (trans @x11184 (rewrite (= (=> $x10159 $x11179) $x11186)) (= $x10425 $x11186)) (= (and $x10159 $x10425) $x11191))))
(let ((@x10499 (monotonicity (rewrite (= (and $x10150 $x10150) $x10150)) (= (and $x10149 (and $x10150 $x10150)) $x10497))))
(let ((@x10505 (monotonicity (monotonicity @x10499 (= (and $x10149 (and $x10149 (and $x10150 $x10150))) $x10500)) (= $x10154 $x10503))))
(let ((@x10511 (monotonicity (monotonicity @x10505 (= (and $x10147 $x10154) $x10506)) (= (and $x10146 (and $x10147 $x10154)) $x10509))))
(let ((@x10517 (monotonicity (monotonicity @x10511 (= (and $x10145 (and $x10146 (and $x10147 $x10154))) $x10512)) (= (and $x10142 (and $x10145 (and $x10146 (and $x10147 $x10154)))) $x10515))))
(let ((@x11202 (trans (monotonicity @x10517 @x11193 (= $x10427 (=> $x10515 $x11191))) (rewrite (= (=> $x10515 $x11191) $x11198)) (= $x10427 $x11198))))
(let ((@x11208 (monotonicity (monotonicity @x11202 (= (and $x10142 $x10427) $x11203)) (= $x10429 (=> $x10140 $x11203)))))
(let ((@x11217 (monotonicity (trans @x11208 (rewrite (= (=> $x10140 $x11203) $x11210)) (= $x10429 $x11210)) (= (and $x10140 $x10429) $x11215))))
(let ((@x11226 (trans (monotonicity @x11217 (= $x10431 (=> $x10136 $x11215))) (rewrite (= (=> $x10136 $x11215) $x11222)) (= $x10431 $x11222))))
(let (($x10483 (= (and $x10067 (and $x10071 (and $x10073 (and $x10074 (and $x10094 $x10127))))) $x10482)))
(let (($x10455 (= (and $x10104 (and $x10108 (and $x10109 (and $x10112 (and $x10116 $x10119))))) $x10454)))
(let (($x10113 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?0)))
(let (($x10436 (not $x10113)))
(let ((@x10444 (monotonicity (quant-intro (rewrite (= (= $x10113 false) $x10436)) (= $x10116 $x10439)) (= (and $x10116 $x10119) $x10442))))
(let ((@x10450 (monotonicity (monotonicity @x10444 (= (and $x10112 (and $x10116 $x10119)) $x10445)) (= (and $x10109 (and $x10112 (and $x10116 $x10119))) $x10448))))
(let ((@x10453 (monotonicity @x10450 (= (and $x10108 (and $x10109 (and $x10112 (and $x10116 $x10119)))) $x10451))))
(let ((@x10462 (monotonicity (monotonicity (monotonicity @x10453 $x10455) (= $x10125 $x10457)) (= (and $x10095 $x10125) $x10460))))
(let ((@x10469 (trans (monotonicity @x10462 (= $x10127 (and true $x10460))) (rewrite (= (and true $x10460) $x10460)) (= $x10127 $x10460))))
(let ((@x10475 (monotonicity (monotonicity @x10469 (= (and $x10094 $x10127) $x10470)) (= (and $x10074 (and $x10094 $x10127)) $x10473))))
(let ((@x10481 (monotonicity (monotonicity @x10475 (= (and $x10073 (and $x10074 (and $x10094 $x10127))) $x10476)) (= (and $x10071 (and $x10073 (and $x10074 (and $x10094 $x10127)))) $x10479))))
(let ((@x10490 (monotonicity (monotonicity (monotonicity @x10481 $x10483) (= $x10133 $x10485)) (= $x10134 (and true $x10485)))))
(let ((@x11232 (monotonicity (trans @x10490 (rewrite (= (and true $x10485) $x10485)) (= $x10134 $x10485)) (monotonicity @x11226 (= (and $x10136 $x10431) $x11227)) (= $x10433 (=> $x10485 $x11227)))))
(let ((@x11241 (monotonicity (trans @x11232 (rewrite (= (=> $x10485 $x11227) $x11234)) (= $x10433 $x11234)) (= $x10434 (not $x11234)))))
(let ((@x12031 (trans @x11241 (monotonicity @x12026 (= (not $x11234) $x12027)) (= $x10434 $x12027))))
(let ((@x12033 (not-or-elim (mp (asserted $x10434) @x12031 $x12027) $x11342)))
(let ((@x12044 (and-elim @x12033 $x10084)))
(let (($x9607 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (or (not (b_S_is$ ?v0 ?v1)) (= ?v0 (b_S_ptr$ ?v1 (b_S_ref$ ?v0)))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!622))
))
(let (($x9604 (or (not (b_S_is$ ?1 ?0)) (= ?1 (b_S_ptr$ ?0 (b_S_ref$ ?1))))))
(let (($x9601 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let (($x9596 (b_S_is$ ?v0 ?v1)))
(=> $x9596 (= ?v0 (b_S_ptr$ ?v1 (b_S_ref$ ?v0))))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!622))
))
(let (($x9605 (= (=> (b_S_is$ ?1 ?0) (= ?1 (b_S_ptr$ ?0 (b_S_ref$ ?1)))) $x9604)))
(let ((@x15336 (mp~ (mp (asserted $x9601) (quant-intro (rewrite $x9605) (= $x9601 $x9607)) $x9607) (nnf-pos (refl (~ $x9604 $x9604)) (~ $x9607 $x9607)) $x9607)))
(let (($x21982 (not $x10084)))
(let (($x21994 (not $x9607)))
(let (($x21995 (or $x21994 $x21982 $x21990)))
(let ((@x22000 (mp ((_ quant-inst (b_S_ptr$ ?x10076 ?x10079) (b_S_array$ b_T_T_u1$ v_b_P_H_len$)) (or $x21994 (or $x21982 $x21990))) (rewrite (= (or $x21994 (or $x21982 $x21990)) $x21995)) $x21995)))
(let ((@x23670 (symm (unit-resolution @x22000 @x15336 @x12044 $x21990) (= ?x21983 ?x10080))))
(let ((@x23502 (monotonicity (trans @x23670 (symm @x23680 (= ?x10080 ?x22595)) (= ?x21983 ?x22595)) (= (b_S_set_n_in$ ?x21983 ?x22343) $x22596))))
(let (($x22344 (b_S_set_n_in$ ?x21983 ?x22343)))
(let (($x22362 (forall ((?v3 B_S_ptr$) )(! (let ((?x10078 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10079 (b_S_ref$ ?x10078)))
(let ((?x10076 (b_S_array$ b_T_T_u1$ v_b_P_H_len$)))
(let ((?x10080 (b_S_ptr$ ?x10076 ?x10079)))
(let ((?x21014 (b_S_ref$ ?x10080)))
(let ((?x21983 (b_S_ptr$ ?x10076 ?x21014)))
(let ((?x22357 (b_S_read_n_version$ v_b_S_s$ ?x21983)))
(let ((?x22358 (b_S_ver_n_domain$ ?x22357)))
(let ((?x22234 (b_S_typ$ ?x21983)))
(let (($x22353 (b_S_has_n_volatile_n_owns_n_set$ ?x22234)))
(or $x22353 (not (b_S_set_n_in$ ?v3 (b_S_owns$ v_b_S_s$ ?x21983))) (b_S_set_n_in2$ ?v3 ?x22358)))))))))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ v_b_S_s$ (b_S_ptr$ (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ (b_S_ptr$ (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$))))))) ) :qid k!564))
))
(let (($x22363 (not $x22362)))
(let (($x22248 (b_S_closed$ v_b_S_s$ ?x21983)))
(let (($x22272 (not $x22248)))
(let (($x22352 (not $x22344)))
(let (($x22364 (or $x22352 $x22272 $x22363)))
(let (($x22365 (not $x22364)))
(let (($x22318 (b_S_in_n_domain$ v_b_S_s$ ?x21983 ?x21983)))
(let (($x22317 (b_S_in_n_domain_n_lab$ v_b_S_s$ ?x21983 ?x21983 b_l_H_public$)))
(let (($x22326 (= $x22317 $x22318)))
(let (($x8728 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) (?v3 B_S_label$) )(! (let (($x8719 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8718 (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3)))
(= $x8718 $x8719))) :pattern ( (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3) ) :qid k!567))
))
(let (($x8719 (b_S_in_n_domain$ ?3 ?2 ?1)))
(let (($x8718 (b_S_in_n_domain_n_lab$ ?3 ?2 ?1 ?0)))
(let (($x8725 (= $x8718 $x8719)))
(let (($x8723 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) (?v3 B_S_label$) )(! (let (($x8719 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8718 (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3)))
(= $x8718 $x8719))) :pattern ( (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3) ) :qid k!567))
))
(let ((@x8733 (mp (asserted $x8723) (quant-intro (rewrite (= (= $x8718 $x8719) $x8725)) (= $x8723 $x8728)) $x8728)))
(let ((@x15021 (mp~ @x8733 (nnf-pos (refl (~ $x8725 $x8725)) (~ $x8728 $x8728)) $x8728)))
(let (($x22699 (or (not $x8728) $x22326)))
(let ((@x23229 ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10076 ?x21014) (b_S_ptr$ ?x10076 ?x21014) b_l_H_public$) $x22699)))
(let ((@x22990 (unit-resolution @x23229 @x15021 $x22326)))
(let ((@x23563 (symm (monotonicity @x23670 @x23670 (= $x22317 $x10136)) (= $x10136 $x22317))))
(let (($x35 (= b_S_kind_n_primitive$ b_S_kind_n_array$)))
(let (($x36 (not $x35)))
(let (($x22421 (= $x36 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x21983)) b_S_kind_n_primitive$)))))
(let ((?x22234 (b_S_typ$ ?x21983)))
(let ((?x22387 (b_S_kind_n_of$ ?x22234)))
(let (($x22388 (= ?x22387 b_S_kind_n_primitive$)))
(let (($x22148 (= ?x10086 b_S_kind_n_array$)))
(let (($x21115 (b_S_is_n_arraytype$ ?x10076)))
(let (($x22149 (= $x21115 $x22148)))
(let (($x9869 (forall ((?v0 B_S_ctype$) )(! (let ((?x9849 (b_S_kind_n_of$ ?v0)))
(let (($x9861 (= ?x9849 b_S_kind_n_array$)))
(let (($x7848 (b_S_is_n_arraytype$ ?v0)))
(= $x7848 $x9861)))) :pattern ( (b_S_is_n_arraytype$ ?v0) ) :qid k!662))
))
(let ((?x9849 (b_S_kind_n_of$ ?0)))
(let (($x9861 (= ?x9849 b_S_kind_n_array$)))
(let (($x7848 (b_S_is_n_arraytype$ ?0)))
(let (($x9866 (= $x7848 $x9861)))
(let (($x9864 (forall ((?v0 B_S_ctype$) )(! (let ((?x9849 (b_S_kind_n_of$ ?v0)))
(let (($x9861 (= ?x9849 b_S_kind_n_array$)))
(let (($x7848 (b_S_is_n_arraytype$ ?v0)))
(= $x7848 $x9861)))) :pattern ( (b_S_is_n_arraytype$ ?v0) ) :qid k!662))
))
(let ((@x9874 (mp (asserted $x9864) (quant-intro (rewrite (= (= $x7848 $x9861) $x9866)) (= $x9864 $x9869)) $x9869)))
(let ((@x15446 (mp~ @x9874 (nnf-pos (refl (~ $x9866 $x9866)) (~ $x9869 $x9869)) $x9869)))
(let (($x22159 (or (not $x9869) $x22149)))
(let ((@x22160 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$)) $x22159)))
(let (($x7229 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (let ((?x6561 (b_S_array$ ?v0 ?v1)))
(b_S_is_n_arraytype$ ?x6561)) :pattern ( (b_S_array$ ?v0 ?v1) ) :qid k!502))
))
(let ((?x6561 (b_S_array$ ?1 ?0)))
(let (($x7228 (b_S_is_n_arraytype$ ?x6561)))
(let ((@x14576 (mp~ (asserted $x7229) (nnf-pos (refl (~ $x7228 $x7228)) (~ $x7229 $x7229)) $x7229)))
(let (($x21122 (or (not $x7229) $x21115)))
(let ((@x21123 ((_ quant-inst b_T_T_u1$ v_b_P_H_len$) $x21122)))
(let ((@x22382 (unit-resolution (def-axiom (or (not $x22149) (not $x21115) $x22148)) (unit-resolution @x21123 @x14576 $x21115) (or (not $x22149) $x22148))))
(let ((?x21180 (b_S_typ$ ?x10080)))
(let (($x21183 (= ?x21180 ?x10076)))
(let (($x19841 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_typ$ (b_S_ptr$ ?v0 ?v1)) ?v0) :pattern ( (b_S_ptr$ ?v0 ?v1) ) :qid k!628))
))
(let (($x9659 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_typ$ (b_S_ptr$ ?v0 ?v1)) ?v0) :qid k!628))
))
(let (($x9658 (= (b_S_typ$ (b_S_ptr$ ?1 ?0)) ?1)))
(let ((@x15361 (mp~ (asserted $x9659) (nnf-pos (refl (~ $x9658 $x9658)) (~ $x9659 $x9659)) $x9659)))
(let ((@x19846 (mp @x15361 (quant-intro (refl (= $x9658 $x9658)) (= $x9659 $x19841)) $x19841)))
(let (($x21147 (not $x19841)))
(let (($x21188 (or $x21147 $x21183)))
(let ((@x21189 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ ?x10078)) $x21188)))
(let ((@x22406 (trans (monotonicity @x23670 (= ?x22234 ?x21180)) (unit-resolution @x21189 @x19846 $x21183) (= ?x22234 ?x10076))))
(let ((@x22335 (trans (monotonicity @x22406 (= ?x22387 ?x10086)) (unit-resolution @x22382 (unit-resolution @x22160 @x15446 $x22149) $x22148) (= ?x22387 b_S_kind_n_array$))))
(let ((@x22369 (monotonicity @x22335 (= $x22388 (= b_S_kind_n_array$ b_S_kind_n_primitive$)))))
(let ((@x22393 (trans @x22369 (commutativity (= (= b_S_kind_n_array$ b_S_kind_n_primitive$) $x35)) (= $x22388 $x35))))
(let (($x41 (= b_S_kind_n_thread$ b_S_kind_n_array$)))
(let (($x42 (not $x41)))
(let (($x39 (= b_S_kind_n_composite$ b_S_kind_n_array$)))
(let (($x40 (not $x39)))
(let (($x37 (= b_S_kind_n_composite$ b_S_kind_n_thread$)))
(let (($x38 (not $x37)))
(let (($x32 (= b_S_kind_n_primitive$ b_S_kind_n_thread$)))
(let (($x33 (not $x32)))
(let (($x29 (= b_S_kind_n_primitive$ b_S_kind_n_composite$)))
(let (($x30 (not $x29)))
(let (($x67 (and $x30 $x33 $x36 $x38 $x40 $x42)))
(let (($x48 (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 (and $x42 true))))))))
(let (($x68 (= (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 $x42))))) $x67)))
(let (($x65 (= $x48 (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 $x42))))))))
(let (($x62 (= (and $x33 (and $x36 (and $x38 (and $x40 (and $x42 true))))) (and $x33 (and $x36 (and $x38 (and $x40 $x42)))))))
(let (($x59 (= (and $x36 (and $x38 (and $x40 (and $x42 true)))) (and $x36 (and $x38 (and $x40 $x42))))))
(let (($x56 (= (and $x38 (and $x40 (and $x42 true))) (and $x38 (and $x40 $x42)))))
(let ((@x54 (monotonicity (rewrite (= (and $x42 true) $x42)) (= (and $x40 (and $x42 true)) (and $x40 $x42)))))
(let ((@x66 (monotonicity (monotonicity (monotonicity (monotonicity @x54 $x56) $x59) $x62) $x65)))
(let ((@x72 (mp (asserted $x48) (trans @x66 (rewrite $x68) (= $x48 $x67)) $x67)))
(let ((@x75 (and-elim @x72 $x36)))
(let (($x22333 (not $x22318)))
(let (($x22336 (not $x22317)))
(let ((@x22397 (unit-resolution (def-axiom (or (not $x22326) $x22317 $x22333)) (mp (hypothesis $x11221) (monotonicity @x23563 (= $x11221 $x22336)) $x22336) @x22990 $x22333)))
(let (($x22368 (b_S_is$ ?x21983 ?x22234)))
(let ((@x23420 (mp @x12044 (symm (monotonicity @x23670 @x22406 (= $x22368 $x10084)) (= $x10084 $x22368)) $x22368)))
(let (($x22385 (b_S_typed$ v_b_S_s$ ?x21983)))
(let ((@x12045 (and-elim @x12033 $x10085)))
(let ((@x22419 (mp @x12045 (symm (monotonicity @x23670 (= $x22385 $x10085)) (= $x10085 $x22385)) $x22385)))
(let ((?x22243 (b_S_owner$ v_b_S_s$ ?x21983)))
(let (($x22259 (= ?x22243 b_S_me$)))
(let ((@x12043 (and-elim @x12033 $x10083)))
(let ((@x12042 (and-elim @x12033 $x10081)))
(let ((@x22437 (mp @x12042 (symm (monotonicity @x23670 (= $x22248 $x10081)) (= $x10081 $x22248)) $x22248)))
(let (($x22235 (b_S_is_n_non_n_primitive$ ?x22234)))
(let ((@x12047 (and-elim @x12033 $x10089)))
(let ((@x22500 (mp @x12047 (symm (monotonicity @x22406 (= $x22235 $x10089)) (= $x10089 $x22235)) $x22235)))
(let ((@x12050 (and-elim @x12033 $x10097)))
(let (($x18905 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8613 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x9239 (not $x2351)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9531 (not $x2488)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let (($x16299 (not $x2487)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x16298 (not $x2486)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x9185 (not $x2471)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x16426 (not $x2687)))
(or $x16426 $x9185 $x16298 $x16299 $x9531 $x2249 $x9239 $x8613))))))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!563))
))
(let (($x8634 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8613 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8625 (and $x2687 $x2471 $x2486 $x2487 $x2488 $x2294 $x2351)))
(let (($x8628 (not $x8625)))
(or $x8628 $x8613)))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!563))
))
(let (($x8613 (b_S_in_n_domain$ ?1 ?0 ?0)))
(let ((?x2247 (b_S_typ$ ?0)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x9239 (not $x2351)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2488 (b_S_typed$ ?1 ?0)))
(let (($x9531 (not $x2488)))
(let (($x2487 (b_S_is$ ?0 ?x2247)))
(let (($x16299 (not $x2487)))
(let ((?x2484 (b_S_owner$ ?1 ?0)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x16298 (not $x2486)))
(let (($x2471 (b_S_closed$ ?1 ?0)))
(let (($x9185 (not $x2471)))
(let (($x2687 (b_S_full_n_stop$ ?1)))
(let (($x16426 (not $x2687)))
(let (($x18900 (or $x16426 $x9185 $x16298 $x16299 $x9531 $x2249 $x9239 $x8613)))
(let (($x2294 (not $x2249)))
(let (($x8625 (and $x2687 $x2471 $x2486 $x2487 $x2488 $x2294 $x2351)))
(let (($x8628 (not $x8625)))
(let (($x8631 (or $x8628 $x8613)))
(let ((@x18902 (rewrite (= (or (or $x16426 $x9185 $x16298 $x16299 $x9531 $x2249 $x9239) $x8613) $x18900))))
(let (($x18886 (or $x16426 $x9185 $x16298 $x16299 $x9531 $x2249 $x9239)))
(let ((@x18892 (monotonicity (rewrite (= $x8625 (not $x18886))) (= $x8628 (not (not $x18886))))))
(let ((@x18899 (monotonicity (trans @x18892 (rewrite (= (not (not $x18886)) $x18886)) (= $x8628 $x18886)) (= $x8631 (or $x18886 $x8613)))))
(let (($x8616 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8613 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8612 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(=> $x8612 $x8613))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!563))
))
(let (($x8622 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8613 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8612 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(or (not $x8612) $x8613))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!563))
))
(let (($x8612 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(let (($x8619 (or (not $x8612) $x8613)))
(let ((@x8633 (monotonicity (monotonicity (rewrite (= $x8612 $x8625)) (= (not $x8612) $x8628)) (= $x8619 $x8631))))
(let ((@x8638 (trans (quant-intro (rewrite (= (=> $x8612 $x8613) $x8619)) (= $x8616 $x8622)) (quant-intro @x8633 (= $x8622 $x8634)) (= $x8616 $x8634))))
(let ((@x14989 (mp~ (mp (asserted $x8616) @x8638 $x8634) (nnf-pos (refl (~ $x8631 $x8631)) (~ $x8634 $x8634)) $x8634)))
(let ((@x18908 (mp @x14989 (quant-intro (trans @x18899 @x18902 (= $x8631 $x18900)) (= $x8634 $x18905)) $x18905)))
(let (($x22242 (not $x22235)))
(let (($x22386 (not $x22385)))
(let (($x22384 (not $x22368)))
(let (($x23422 (or (not $x18905) $x19677 $x22272 (not $x22259) $x22384 $x22386 $x22388 $x22242 $x22318)))
(let (($x23058 (= (or (not $x18905) (or $x19677 $x22272 (not $x22259) $x22384 $x22386 $x22388 $x22242 $x22318)) $x23422)))
(let ((@x23077 ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10076 ?x21014)) (or (not $x18905) (or $x19677 $x22272 (not $x22259) $x22384 $x22386 $x22388 $x22242 $x22318)))))
(let ((@x22720 (mp @x23077 (rewrite $x23058) $x23422)))
(let ((@x22519 (unit-resolution @x22720 @x18908 @x12050 @x22500 @x22437 (trans (monotonicity @x23670 (= ?x22243 ?x10082)) @x12043 $x22259) (or $x22384 $x22386 $x22388 $x22318))))
(let ((@x22507 (unit-resolution @x22519 @x22419 @x23420 @x22397 (mp @x75 (monotonicity (symm @x22393 (= $x35 $x22388)) $x22421) (not $x22388)) false)))
(let ((@x22508 (lemma @x22507 $x10136)))
(let ((@x23561 (def-axiom (or (not $x22326) $x22336 $x22318))))
(let (($x22366 (or $x22333 $x22365)))
(let (($x18945 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x18929 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let ((?x6628 (b_S_typ$ ?v1)))
(let (($x8640 (b_S_has_n_volatile_n_owns_n_set$ ?x6628)))
(or $x8640 (not (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))) $x8646)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!564))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8955 (not $x2554)))
(let (($x8428 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x18744 (not $x8428)))
(let (($x18937 (not (or $x18744 $x8955 (not $x18929)))))
(let (($x8461 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8672 (not $x8461)))
(or $x8672 $x18937))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!564))
))
(let (($x8687 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8660 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8643 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8644 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8643)))
(let (($x8656 (not $x8644)))
(or $x8656 $x8646))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!564))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8428 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8681 (and $x8428 $x2554 $x8660)))
(let (($x8461 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8672 (not $x8461)))
(or $x8672 $x8681))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!564))
))
(let (($x18929 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let ((?x6628 (b_S_typ$ ?1)))
(let (($x8640 (b_S_has_n_volatile_n_owns_n_set$ ?x6628)))
(or $x8640 (not (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))) $x8646)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!564))
))
(let (($x2554 (b_S_closed$ ?2 ?1)))
(let (($x8955 (not $x2554)))
(let (($x8428 (b_S_set_n_in$ ?1 (b_S_domain$ ?2 ?0))))
(let (($x18744 (not $x8428)))
(let (($x18937 (not (or $x18744 $x8955 (not $x18929)))))
(let (($x8461 (b_S_in_n_domain$ ?2 ?1 ?0)))
(let (($x8672 (not $x8461)))
(let (($x8660 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let (($x8643 (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))))
(let (($x8644 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?1))) $x8643)))
(let (($x8656 (not $x8644)))
(or $x8656 $x8646))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!564))
))
(let (($x8681 (and $x8428 $x2554 $x8660)))
(let (($x8684 (or $x8672 $x8681)))
(let (($x8646 (b_S_set_n_in2$ ?0 (b_S_ver_n_domain$ (b_S_read_n_version$ ?3 ?1)))))
(let ((?x6628 (b_S_typ$ ?2)))
(let (($x8640 (b_S_has_n_volatile_n_owns_n_set$ ?x6628)))
(let (($x18924 (or $x8640 (not (b_S_set_n_in$ ?0 (b_S_owns$ ?3 ?2))) $x8646)))
(let (($x8643 (b_S_set_n_in$ ?0 (b_S_owns$ ?3 ?2))))
(let (($x8644 (and (not $x8640) $x8643)))
(let (($x8656 (not $x8644)))
(let (($x8657 (or $x8656 $x8646)))
(let ((@x18918 (rewrite (= (not (not (or $x8640 (not $x8643)))) (or $x8640 (not $x8643))))))
(let ((@x18916 (monotonicity (rewrite (= $x8644 (not (or $x8640 (not $x8643))))) (= $x8656 (not (not (or $x8640 (not $x8643))))))))
(let ((@x18923 (monotonicity (trans @x18916 @x18918 (= $x8656 (or $x8640 (not $x8643)))) (= $x8657 (or (or $x8640 (not $x8643)) $x8646)))))
(let ((@x18928 (trans @x18923 (rewrite (= (or (or $x8640 (not $x8643)) $x8646) $x18924)) (= $x8657 $x18924))))
(let ((@x18934 (monotonicity (quant-intro @x18928 (= $x8660 $x18929)) (= $x8681 (and $x8428 $x2554 $x18929)))))
(let ((@x18941 (trans @x18934 (rewrite (= (and $x8428 $x2554 $x18929) $x18937)) (= $x8681 $x18937))))
(let ((@x18947 (quant-intro (monotonicity @x18941 (= $x8684 (or $x8672 $x18937))) (= $x8687 $x18945))))
(let ((@x15001 (monotonicity (refl (~ $x8428 $x8428)) (refl (~ $x2554 $x2554)) (nnf-pos (refl (~ $x8657 $x8657)) (~ $x8660 $x8660)) (~ $x8681 $x8681))))
(let ((@x15005 (nnf-pos (monotonicity (refl (~ $x8672 $x8672)) @x15001 (~ $x8684 $x8684)) (~ $x8687 $x8687))))
(let (($x8654 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8649 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8643 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8644 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8643)))
(=> $x8644 $x8646)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!564))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8428 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8461 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(=> $x8461 (and $x8428 (and $x2554 $x8649))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!564))
))
(let (($x8678 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8660 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8643 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8644 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8643)))
(let (($x8656 (not $x8644)))
(or $x8656 $x8646))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!564))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8428 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8666 (and $x8428 (and $x2554 $x8660))))
(let (($x8461 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8672 (not $x8461)))
(or $x8672 $x8666))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!564))
))
(let ((@x8686 (monotonicity (rewrite (= (and $x8428 (and $x2554 $x8660)) $x8681)) (= (or $x8672 (and $x8428 (and $x2554 $x8660))) $x8684))))
(let (($x8666 (and $x8428 (and $x2554 $x8660))))
(let (($x8673 (or $x8672 $x8666)))
(let (($x8649 (forall ((?v3 B_S_ptr$) )(! (let (($x8646 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let (($x8643 (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))))
(let (($x8644 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?1))) $x8643)))
(=> $x8644 $x8646)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!564))
))
(let (($x8652 (=> $x8461 (and $x8428 (and $x2554 $x8649)))))
(let ((@x8665 (monotonicity (quant-intro (rewrite (= (=> $x8644 $x8646) $x8657)) (= $x8649 $x8660)) (= (and $x2554 $x8649) (and $x2554 $x8660)))))
(let ((@x8671 (monotonicity (monotonicity @x8665 (= (and $x8428 (and $x2554 $x8649)) $x8666)) (= $x8652 (=> $x8461 $x8666)))))
(let ((@x8680 (quant-intro (trans @x8671 (rewrite (= (=> $x8461 $x8666) $x8673)) (= $x8652 $x8673)) (= $x8654 $x8678))))
(let ((@x8692 (mp (asserted $x8654) (trans @x8680 (quant-intro @x8686 (= $x8678 $x8687)) (= $x8654 $x8687)) $x8687)))
(let ((@x18948 (mp (mp~ @x8692 @x15005 $x8687) @x18947 $x18945)))
(let (($x22501 (or (not $x18945) $x22333 $x22365)))
(let ((@x22512 (mp ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10076 ?x21014) (b_S_ptr$ ?x10076 ?x21014)) (or (not $x18945) $x22366)) (rewrite (= (or (not $x18945) $x22366) $x22501)) $x22501)))
(let ((@x24112 (unit-resolution (unit-resolution @x22512 @x18948 $x22366) (unit-resolution @x23561 (mp @x22508 @x23563 $x22317) @x22990 $x22318) $x22365)))
(let ((@x22487 (def-axiom (or $x22364 $x22344))))
(let ((@x12041 (and-elim @x12033 $x11260)))
(let (($x9768 (b_S_is_n_primitive$ b_T_T_u1$)))
(let ((@x9769 (asserted $x9768)))
(let (($x18667 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8245 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7097 (b_S_typemap$ ?v0)))
(let (($x18655 (or (not (b_S_typed$ ?v0 ?x8245)) (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245)))))
(let (($x18656 (not $x18655)))
(let (($x5403 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x3057 (>= ?v4 0)))
(let (($x16520 (not $x3057)))
(let (($x8240 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x18630 (not $x8240)))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8855 (not $x2704)))
(let (($x8236 (b_S_full_n_stop$ ?v0)))
(let (($x18629 (not $x8236)))
(or $x18629 $x8855 $x18630 $x16520 $x5403 $x18656)))))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!553))
))
(let (($x8307 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8245 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7097 (b_S_typemap$ ?v0)))
(let (($x8291 (and (b_S_typed$ ?v0 ?x8245) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245))))))
(let (($x5403 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x6757 (not $x5403)))
(let (($x3057 (>= ?v4 0)))
(let (($x8240 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8236 (b_S_full_n_stop$ ?v0)))
(let (($x8270 (and $x8236 $x2704 $x8240 $x3057 $x6757)))
(let (($x8275 (not $x8270)))
(or $x8275 $x8291)))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!553))
))
(let ((?x8245 (b_S_idx$ (b_S_ptr$ ?0 ?4) ?1 ?0)))
(let ((?x7097 (b_S_typemap$ ?5)))
(let (($x18655 (or (not (b_S_typed$ ?5 ?x8245)) (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245)))))
(let (($x18656 (not $x18655)))
(let (($x5403 (>= (+ ?1 (* (- 1) ?2)) 0)))
(let (($x3057 (>= ?1 0)))
(let (($x16520 (not $x3057)))
(let (($x8240 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?0 ?2) ?4) (b_S_domain$ ?5 ?3))))
(let (($x18630 (not $x8240)))
(let (($x2704 (b_S_is_n_primitive$ ?0)))
(let (($x8855 (not $x2704)))
(let (($x8236 (b_S_full_n_stop$ ?5)))
(let (($x18629 (not $x8236)))
(let (($x18662 (or $x18629 $x8855 $x18630 $x16520 $x5403 $x18656)))
(let (($x8291 (and (b_S_typed$ ?5 ?x8245) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245))))))
(let (($x6757 (not $x5403)))
(let (($x8270 (and $x8236 $x2704 $x8240 $x3057 $x6757)))
(let (($x8275 (not $x8270)))
(let (($x8304 (or $x8275 $x8291)))
(let (($x18631 (or $x18629 $x8855 $x18630 $x16520 $x5403)))
(let ((@x18637 (monotonicity (rewrite (= $x8270 (not $x18631))) (= $x8275 (not (not $x18631))))))
(let ((@x18661 (monotonicity (trans @x18637 (rewrite (= (not (not $x18631)) $x18631)) (= $x8275 $x18631)) (rewrite (= $x8291 $x18656)) (= $x8304 (or $x18631 $x18656)))))
(let ((@x18669 (quant-intro (trans @x18661 (rewrite (= (or $x18631 $x18656) $x18662)) (= $x8304 $x18662)) (= $x8307 $x18667))))
(let (($x8296 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8245 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7097 (b_S_typemap$ ?v0)))
(let (($x8291 (and (b_S_typed$ ?v0 ?x8245) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245))))))
(let (($x3027 (<= 0 ?v4)))
(let (($x6740 (and $x3027 (< ?v4 ?v3))))
(let (($x8240 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8236 (b_S_full_n_stop$ ?v0)))
(let (($x8243 (and $x8236 (and $x2704 (and $x8240 $x6740)))))
(=> $x8243 $x8291)))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!553))
))
(let (($x8301 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8245 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7097 (b_S_typemap$ ?v0)))
(let (($x8291 (and (b_S_typed$ ?v0 ?x8245) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7097 ?x8245))))))
(let (($x3027 (<= 0 ?v4)))
(let (($x6740 (and $x3027 (< ?v4 ?v3))))
(let (($x8240 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8236 (b_S_full_n_stop$ ?v0)))
(let (($x8243 (and $x8236 (and $x2704 (and $x8240 $x6740)))))
(let (($x8254 (not $x8243)))
(or $x8254 $x8291))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!553))
))
(let (($x8243 (and $x8236 (and $x2704 (and $x8240 (and (<= 0 ?1) (< ?1 ?2)))))))
(let (($x8254 (not $x8243)))
(let (($x8298 (or $x8254 $x8291)))
(let ((@x8272 (rewrite (= (and $x8236 (and $x2704 (and $x8240 (and $x3057 $x6757)))) $x8270))))
(let (($x8265 (= (and $x2704 (and $x8240 (and (<= 0 ?1) (< ?1 ?2)))) (and $x2704 (and $x8240 (and $x3057 $x6757))))))
(let (($x8262 (= (and $x8240 (and (<= 0 ?1) (< ?1 ?2))) (and $x8240 (and $x3057 $x6757)))))
(let ((@x3058 (rewrite (= (<= 0 ?1) $x3057))))
(let ((@x6762 (monotonicity @x3058 (rewrite (= (< ?1 ?2) $x6757)) (= (and (<= 0 ?1) (< ?1 ?2)) (and $x3057 $x6757)))))
(let ((@x8269 (monotonicity (monotonicity (monotonicity @x6762 $x8262) $x8265) (= $x8243 (and $x8236 (and $x2704 (and $x8240 (and $x3057 $x6757))))))))
(let ((@x8306 (monotonicity (monotonicity (trans @x8269 @x8272 (= $x8243 $x8270)) (= $x8254 $x8275)) (= $x8298 $x8304))))
(let ((@x8311 (trans (quant-intro (rewrite (= (=> $x8243 $x8291) $x8298)) (= $x8296 $x8301)) (quant-intro @x8306 (= $x8301 $x8307)) (= $x8296 $x8307))))
(let ((@x14905 (mp~ (mp (asserted $x8296) @x8311 $x8307) (nnf-pos (refl (~ $x8304 $x8304)) (~ $x8307 $x8307)) $x8307)))
(let ((@x18670 (mp @x14905 @x18669 $x18667)))
(let (($x22597 (not $x22596)))
(let (($x21489 (not $x9768)))
(let (($x22629 (not $x18667)))
(let (($x22732 (or $x22629 $x19677 $x21489 $x22597 $x11259 $x22604)))
(let ((?x11246 (* (- 1) v_b_P_H_len$)))
(let ((?x22600 (+ 0 ?x11246)))
(let (($x22601 (>= ?x22600 0)))
(let (($x22598 (>= 0 0)))
(let (($x22599 (not $x22598)))
(let (($x22605 (or $x19677 $x21489 $x22597 $x22599 $x22601 $x22604)))
(let (($x22774 (or $x22629 $x22605)))
(let (($x22742 (or $x19677 $x21489 $x22597 $x11259 $x22604)))
(let ((@x22706 (trans (monotonicity (rewrite (= ?x22600 ?x11246)) (= $x22601 (>= ?x11246 0))) (rewrite (= (>= ?x11246 0) $x11259)) (= $x22601 $x11259))))
(let ((@x22711 (trans (monotonicity (rewrite (= $x22598 true)) (= $x22599 $x10203)) (rewrite (= $x10203 false)) (= $x22599 false))))
(let ((@x22741 (monotonicity @x22711 @x22706 (= $x22605 (or $x19677 $x21489 $x22597 false $x11259 $x22604)))))
(let ((@x22731 (trans @x22741 (rewrite (= (or $x19677 $x21489 $x22597 false $x11259 $x22604) $x22742)) (= $x22605 $x22742))))
(let ((@x23093 (trans (monotonicity @x22731 (= $x22774 (or $x22629 $x22742))) (rewrite (= (or $x22629 $x22742) $x22732)) (= $x22774 $x22732))))
(let ((@x23490 (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ (b_S_ptr$ ?x10076 ?x21014) v_b_P_H_len$ 0 b_T_T_u1$) $x22774) @x23093 $x22732)))
(let ((@x24453 (unit-resolution @x23490 @x18670 @x9769 @x12041 @x12050 (mp (unit-resolution @x22487 @x24112 $x22344) @x23502 $x22596) (hypothesis $x22603) false)))
(let (($x20128 (or $x15502 $x15505 $x20125)))
(let (($x20131 (not $x20128)))
(let (($x20134 (or $x11221 $x20131)))
(let (($x20137 (not $x20134)))
(let (($x20140 (or $x11221 $x20137)))
(let (($x19617 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11800 (not $x10238))))))))) :qid k!704))
))
(let (($x19602 (forall ((?v0 Int) )(! (let ((?x11816 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11818 (<= (+ ?x10163 ?x11816) 0)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11800 $x11818))))))))) :qid k!704))
))
(let (($x19626 (not (or (not $x19602) (not $x19617)))))
(let (($x19631 (or $x19580 $x19626)))
(let (($x19643 (not (or $x15729 $x19474 $x19501 $x19637 $x19638 $x19639 $x19640 (not $x19631)))))
(let (($x19648 (or $x15729 $x19643)))
(let (($x19656 (not (or $x11487 $x19474 $x19501 (not $x19648)))))
(let (($x19408 (forall ((?v0 Int) )(! (let ((?x11631 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11633 (<= (+ ?x10163 ?x11631) 0)))
(let (($x11615 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11615 $x11633))))))))) :qid k!704))
))
(let (($x19428 (not (or (not $x19408) $x19413))))
(let (($x19433 (or $x19386 $x19428)))
(let (($x19441 (not (or $x11612 (not $x19433)))))
(let (($x19446 (or $x11612 $x19441)))
(let (($x19458 (not (or $x15611 $x15614 $x19452 $x19453 $x19454 $x19455 (not $x19446)))))
(let (($x19463 (or $x15611 $x15614 $x19458)))
(let (($x19475 (not $x19463)))
(let (($x19515 (not (or $x11515 $x19501 $x19512 $x19513 $x19474 $x19455 $x19475))))
(let (($x19477 (not (or $x15590 $x15599 $x19469 $x19470 $x19471 $x19472 $x19473 $x19474 $x19455 $x19475))))
(let (($x19482 (or $x15590 $x15599 $x19477)))
(let (($x19490 (not (or $x15590 $x15593 (not $x19482)))))
(let (($x19495 (or $x15590 $x15593 $x19490)))
(let (($x19504 (not (or $x11516 $x19474 $x19501 (not $x19495)))))
(let (($x19520 (or $x19504 $x19515)))
(let (($x19528 (not (or $x15590 $x15599 $x19474 $x19501 (not $x19520)))))
(let (($x19533 (or $x15590 $x15599 $x19528)))
(let (($x19541 (not (or $x15590 $x15593 (not $x19533)))))
(let (($x19546 (or $x15590 $x15593 $x19541)))
(let (($x19554 (not (or $x11486 $x19474 $x19501 (not $x19546)))))
(let (($x19661 (or $x19554 $x19656)))
(let (($x19362 (forall ((?v0 Int) )(! (let ((?x11887 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11889 (<= (+ ?x10163 ?x11887) 0)))
(let (($x11871 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11871 $x11889))))))))) :qid k!704))
))
(let (($x19685 (or $x11259 $x15548 $x19667 $x19668 $x19669 $x19670 $x19671 $x19672 (not $x19362) $x11867 $x19674 $x19675 $x19676 $x19677 $x19678 $x19679 $x19680 $x19681 $x19682 $x19683 $x19474 $x19501 (not $x19661))))
(let (($x19686 (not $x19685)))
(let (($x19691 (or $x11259 $x15548 $x19686)))
(let (($x19340 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11404 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10163)) 0)))
(let (($x11388 (>= ?v0 1)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x2815 (>= ?v0 0)))
(let (($x3763 (not $x2815)))
(or $x3763 $x16553 $x11388 $x11404)))))))) :qid k!704))
))
(let (($x19700 (not (or (not $x19340) (not $x19691)))))
(let (($x19705 (or $x19318 $x19700)))
(let (($x19713 (not (or $x11385 (not $x19705)))))
(let (($x19718 (or $x11385 $x19713)))
(let (($x19730 (not (or $x15502 $x15511 $x19724 $x19725 $x19726 $x19727 (not $x19718)))))
(let (($x19735 (or $x15502 $x15511 $x19730)))
(let (($x19743 (not (or $x15502 $x15505 (not $x19735)))))
(let (($x19748 (or $x15502 $x15505 $x19743)))
(let (($x19756 (not (or $x11221 (not $x19748)))))
(let (($x19761 (or $x11221 $x19756)))
(let (($x12168 (<= ?0 4294967295)))
(let (($x16553 (not $x12168)))
(let (($x3763 (not $x2815)))
(let (($x19606 (or $x3763 $x16553 $x11800 (not $x10238))))
(let ((@x20037 (monotonicity (quant-intro (refl (= $x19606 $x19606)) (= $x19617 $x20030)) (= (not $x19617) $x20035))))
(let ((@x20026 (quant-intro (refl (= (or $x3763 $x16553 $x11800 $x11818) (or $x3763 $x16553 $x11800 $x11818))) (= $x19602 $x20022))))
(let ((@x20040 (monotonicity (monotonicity @x20026 (= (not $x19602) $x20027)) @x20037 (= (or (not $x19602) (not $x19617)) $x20038))))
(let ((@x20049 (monotonicity (monotonicity (monotonicity @x20040 (= $x19626 $x20041)) (= $x19631 $x20044)) (= (not $x19631) $x20047))))
(let ((@x20052 (monotonicity @x20049 (= (or $x15729 $x19474 $x19501 $x19637 $x19638 $x19639 $x19640 (not $x19631)) $x20050))))
(let ((@x20061 (monotonicity (monotonicity (monotonicity @x20052 (= $x19643 $x20053)) (= $x19648 $x20056)) (= (not $x19648) $x20059))))
(let ((@x20067 (monotonicity (monotonicity @x20061 (= (or $x11487 $x19474 $x19501 (not $x19648)) $x20062)) (= $x19656 $x20065))))
(let ((@x19910 (quant-intro (refl (= (or $x3763 $x16553 $x11615 $x11633) (or $x3763 $x16553 $x11615 $x11633))) (= $x19408 $x19906))))
(let ((@x19916 (monotonicity (monotonicity @x19910 (= (not $x19408) $x19911)) (= (or (not $x19408) $x19413) $x19914))))
(let ((@x19925 (monotonicity (monotonicity (monotonicity @x19916 (= $x19428 $x19917)) (= $x19433 $x19920)) (= (not $x19433) $x19923))))
(let ((@x19931 (monotonicity (monotonicity @x19925 (= (or $x11612 (not $x19433)) $x19926)) (= $x19441 $x19929))))
(let ((@x19937 (monotonicity (monotonicity @x19931 (= $x19446 $x19932)) (= (not $x19446) $x19935))))
(let ((@x19940 (monotonicity @x19937 (= (or $x15611 $x15614 $x19452 $x19453 $x19454 $x19455 (not $x19446)) $x19938))))
(let ((@x19949 (monotonicity (monotonicity (monotonicity @x19940 (= $x19458 $x19941)) (= $x19463 $x19944)) (= $x19475 $x19947))))
(let ((@x19982 (monotonicity @x19949 (= (or $x11515 $x19501 $x19512 $x19513 $x19474 $x19455 $x19475) $x19980))))
(let ((@x19952 (monotonicity @x19949 (= (or $x15590 $x15599 $x19469 $x19470 $x19471 $x19472 $x19473 $x19474 $x19455 $x19475) $x19950))))
(let ((@x19961 (monotonicity (monotonicity (monotonicity @x19952 (= $x19477 $x19953)) (= $x19482 $x19956)) (= (not $x19482) $x19959))))
(let ((@x19967 (monotonicity (monotonicity @x19961 (= (or $x15590 $x15593 (not $x19482)) $x19962)) (= $x19490 $x19965))))
(let ((@x19973 (monotonicity (monotonicity @x19967 (= $x19495 $x19968)) (= (not $x19495) $x19971))))
(let ((@x19979 (monotonicity (monotonicity @x19973 (= (or $x11516 $x19474 $x19501 (not $x19495)) $x19974)) (= $x19504 $x19977))))
(let ((@x19988 (monotonicity @x19979 (monotonicity @x19982 (= $x19515 $x19983)) (= $x19520 $x19986))))
(let ((@x19994 (monotonicity (monotonicity @x19988 (= (not $x19520) $x19989)) (= (or $x15590 $x15599 $x19474 $x19501 (not $x19520)) $x19992))))
(let ((@x20003 (monotonicity (monotonicity (monotonicity @x19994 (= $x19528 $x19995)) (= $x19533 $x19998)) (= (not $x19533) $x20001))))
(let ((@x20009 (monotonicity (monotonicity @x20003 (= (or $x15590 $x15593 (not $x19533)) $x20004)) (= $x19541 $x20007))))
(let ((@x20015 (monotonicity (monotonicity @x20009 (= $x19546 $x20010)) (= (not $x19546) $x20013))))
(let ((@x20021 (monotonicity (monotonicity @x20015 (= (or $x11486 $x19474 $x19501 (not $x19546)) $x20016)) (= $x19554 $x20019))))
(let ((@x20073 (monotonicity (monotonicity @x20021 @x20067 (= $x19661 $x20068)) (= (not $x19661) $x20071))))
(let ((@x19902 (quant-intro (refl (= (or $x3763 $x16553 $x11871 $x11889) (or $x3763 $x16553 $x11871 $x11889))) (= $x19362 $x19898))))
(let ((@x20076 (monotonicity (monotonicity @x19902 (= (not $x19362) $x19903)) @x20073 (= $x19685 $x20074))))
(let ((@x20085 (monotonicity (monotonicity (monotonicity @x20076 (= $x19686 $x20077)) (= $x19691 $x20080)) (= (not $x19691) $x20083))))
(let ((@x19894 (quant-intro (refl (= (or $x3763 $x16553 $x11388 $x11404) (or $x3763 $x16553 $x11388 $x11404))) (= $x19340 $x19890))))
(let ((@x20088 (monotonicity (monotonicity @x19894 (= (not $x19340) $x19895)) @x20085 (= (or (not $x19340) (not $x19691)) $x20086))))
(let ((@x20097 (monotonicity (monotonicity (monotonicity @x20088 (= $x19700 $x20089)) (= $x19705 $x20092)) (= (not $x19705) $x20095))))
(let ((@x20103 (monotonicity (monotonicity @x20097 (= (or $x11385 (not $x19705)) $x20098)) (= $x19713 $x20101))))
(let ((@x20109 (monotonicity (monotonicity @x20103 (= $x19718 $x20104)) (= (not $x19718) $x20107))))
(let ((@x20112 (monotonicity @x20109 (= (or $x15502 $x15511 $x19724 $x19725 $x19726 $x19727 (not $x19718)) $x20110))))
(let ((@x20121 (monotonicity (monotonicity (monotonicity @x20112 (= $x19730 $x20113)) (= $x19735 $x20116)) (= (not $x19735) $x20119))))
(let ((@x20127 (monotonicity (monotonicity @x20121 (= (or $x15502 $x15505 (not $x19735)) $x20122)) (= $x19743 $x20125))))
(let ((@x20133 (monotonicity (monotonicity @x20127 (= $x19748 $x20128)) (= (not $x19748) $x20131))))
(let ((@x20139 (monotonicity (monotonicity @x20133 (= (or $x11221 (not $x19748)) $x20134)) (= $x19756 $x20137))))
(let (($x15761 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x13448 (and $x2815 $x12168 $x11802 $x10238)))
(not $x13448)))))))) :qid k!704))
))
(let (($x13442 (forall ((?v0 Int) )(! (let ((?x11816 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11818 (<= (+ ?x10163 ?x11816) 0)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x13433 (and $x2815 $x12168 $x11802)))
(let (($x13436 (not $x13433)))
(or $x13436 $x11818)))))))))) :qid k!704))
))
(let (($x15765 (and $x13442 $x15761)))
(let (($x16014 (not $x16009)))
(let (($x16017 (and $x15736 $x15737 $x16014)))
(let (($x16020 (not $x16017)))
(let (($x16036 (or $x16020 $x16031)))
(let (($x16039 (not $x16036)))
(let (($x16042 (or $x16039 $x15765)))
(let (($x16048 (and b_S_position_n_marker$ $x11429 $x11432 $x10216 $x10218 $x10220 $x10222 $x16042)))
(let (($x16053 (or $x15729 $x16048)))
(let (($x16059 (and $x11486 $x11429 $x11432 $x16053)))
(let (($x15648 (not $x11651)))
(let (($x13373 (forall ((?v0 Int) )(! (let ((?x11631 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11633 (<= (+ ?x10163 ?x11631) 0)))
(let (($x11615 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x11617 (not $x11615)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x13364 (and $x2815 $x12168 $x11617)))
(let (($x13367 (not $x13364)))
(or $x13367 $x11633)))))))))) :qid k!704))
))
(let (($x15651 (and $x13373 $x15648)))
(let (($x15876 (not $x15871)))
(let (($x15879 (and $x15626 $x15627 $x15876)))
(let (($x15882 (not $x15879)))
(let (($x15898 (or $x15882 $x15893)))
(let (($x15901 (not $x15898)))
(let (($x15904 (or $x15901 $x15651)))
(let (($x15907 (and $x11608 $x15904)))
(let (($x15910 (or $x11612 $x15907)))
(let (($x15916 (and $x11570 $x13353 $x11580 $x10358 $x11578 $x11536 $x15910)))
(let (($x15921 (or $x15611 $x15614 $x15916)))
(let (($x15959 (and $x11516 $x11432 $x10391 $x10392 $x11429 $x11536 $x15921)))
(let (($x15927 (and $x10321 $x10324 $x10333 $x10334 $x10335 $x10338 $x10340 $x11429 $x11536 $x15921)))
(let (($x15932 (or $x15590 $x15599 $x15927)))
(let (($x15938 (and $x10321 $x10322 $x15932)))
(let (($x15943 (or $x15590 $x15593 $x15938)))
(let (($x15949 (and $x11515 $x11429 $x11432 $x15943)))
(let (($x15964 (or $x15949 $x15959)))
(let (($x15970 (and $x10321 $x10324 $x11429 $x11432 $x15964)))
(let (($x15975 (or $x15590 $x15599 $x15970)))
(let (($x15981 (and $x10321 $x10322 $x15975)))
(let (($x15986 (or $x15590 $x15593 $x15981)))
(let (($x15992 (and $x11487 $x11429 $x11432 $x15986)))
(let (($x16064 (or $x15992 $x16059)))
(let (($x13340 (forall ((?v0 Int) )(! (let ((?x11887 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11889 (<= (+ ?x10163 ?x11887) 0)))
(let (($x11871 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x11873 (not $x11871)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x13331 (and $x2815 $x12168 $x11873)))
(let (($x13334 (not $x13331)))
(or $x13334 $x11889)))))))))) :qid k!704))
))
(let (($x16070 (and $x11260 $x10167 $x11911 $x13304 $x13315 $x11901 $x13326 $x11898 $x13340 $x11868 $x10192 $x10284 $x10204 $x10097 $x10291 $x10292 $x10293 $x10294 $x10295 $x10296 $x11429 $x11432 $x16064)))
(let (($x16075 (or $x11259 $x15548 $x16070)))
(let (($x13292 (forall ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x11404 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10163)) 0)))
(let (($x11388 (>= ?v0 1)))
(let (($x11389 (not $x11388)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x13283 (and $x2815 $x12168 $x11389)))
(let (($x13286 (not $x13283)))
(or $x13286 $x11404))))))))) :qid k!704))
))
(let (($x16078 (and $x13292 $x16075)))
(let (($x15528 (not (and $x15523 $x15524 (not $x15525)))))
(let (($x15534 (or $x15528 $x15533)))
(let (($x15535 (not $x15534)))
(let (($x16081 (or $x15535 $x16078)))
(let (($x16084 (and $x11382 $x16081)))
(let (($x16087 (or $x11385 $x16084)))
(let (($x16093 (and $x10138 $x10141 $x10145 $x10146 $x10147 $x10148 $x16087)))
(let (($x16098 (or $x15502 $x15511 $x16093)))
(let (($x16104 (and $x10138 $x10139 $x16098)))
(let (($x16109 (or $x15502 $x15505 $x16104)))
(let (($x16112 (and $x10136 $x16109)))
(let (($x16115 (or $x11221 $x16112)))
(let (($x19664 (and $x11260 $x10167 $x11911 $x13304 $x13315 $x11901 $x13326 $x11898 $x19362 $x11868 $x10192 $x10284 $x10204 $x10097 $x10291 $x10292 $x10293 $x10294 $x10295 $x10296 $x11429 $x11432 $x19661)))
(let (($x19644 (= (and b_S_position_n_marker$ $x11429 $x11432 $x10216 $x10218 $x10220 $x10222 $x19631) $x19643)))
(let (($x19635 (= $x16048 (and b_S_position_n_marker$ $x11429 $x11432 $x10216 $x10218 $x10220 $x10222 $x19631))))
(let ((@x19612 (monotonicity (rewrite (= (and $x2815 $x12168 $x11802 $x10238) (not $x19606))) (= (not (and $x2815 $x12168 $x11802 $x10238)) (not (not $x19606))))))
(let ((@x19616 (trans @x19612 (rewrite (= (not (not $x19606)) $x19606)) (= (not (and $x2815 $x12168 $x11802 $x10238)) $x19606))))
(let ((@x19599 (rewrite (= (or (or $x3763 $x16553 $x11800) $x11818) (or $x3763 $x16553 $x11800 $x11818)))))
(let (($x13433 (and $x2815 $x12168 $x11802)))
(let (($x13436 (not $x13433)))
(let (($x13439 (or $x13436 $x11818)))
(let ((@x19589 (monotonicity (rewrite (= $x13433 (not (or $x3763 $x16553 $x11800)))) (= $x13436 (not (not (or $x3763 $x16553 $x11800)))))))
(let ((@x19593 (trans @x19589 (rewrite (= (not (not (or $x3763 $x16553 $x11800))) (or $x3763 $x16553 $x11800))) (= $x13436 (or $x3763 $x16553 $x11800)))))
(let ((@x19601 (trans (monotonicity @x19593 (= $x13439 (or (or $x3763 $x16553 $x11800) $x11818))) @x19599 (= $x13439 (or $x3763 $x16553 $x11800 $x11818)))))
(let ((@x19622 (monotonicity (quant-intro @x19601 (= $x13442 $x19602)) (quant-intro @x19616 (= $x15761 $x19617)) (= $x15765 (and $x19602 $x19617)))))
(let ((@x19567 (monotonicity (rewrite (= $x16017 (not (or $x19559 $x19560 $x16009)))) (= $x16020 (not (not (or $x19559 $x19560 $x16009)))))))
(let ((@x19571 (trans @x19567 (rewrite (= (not (not (or $x19559 $x19560 $x16009))) (or $x19559 $x19560 $x16009))) (= $x16020 (or $x19559 $x19560 $x16009)))))
(let ((@x19579 (trans (monotonicity @x19571 (= $x16036 (or (or $x19559 $x19560 $x16009) $x16031))) (rewrite (= (or (or $x19559 $x19560 $x16009) $x16031) $x19575)) (= $x16036 $x19575))))
(let ((@x19633 (monotonicity (monotonicity @x19579 (= $x16039 $x19580)) (trans @x19622 (rewrite (= (and $x19602 $x19617) $x19626)) (= $x15765 $x19626)) (= $x16042 $x19631))))
(let ((@x19650 (monotonicity (trans (monotonicity @x19633 $x19635) (rewrite $x19644) (= $x16048 $x19643)) (= $x16053 $x19648))))
(let ((@x19660 (trans (monotonicity @x19650 (= $x16059 (and $x11486 $x11429 $x11432 $x19648))) (rewrite (= (and $x11486 $x11429 $x11432 $x19648) $x19656)) (= $x16059 $x19656))))
(let ((@x19422 (trans (monotonicity (rewrite (= $x11651 $x19413)) (= $x15648 (not $x19413))) (rewrite (= (not $x19413) $x19412)) (= $x15648 $x19412))))
(let ((@x19405 (rewrite (= (or (or $x3763 $x16553 $x11615) $x11633) (or $x3763 $x16553 $x11615 $x11633)))))
(let (($x13364 (and $x2815 $x12168 $x11617)))
(let (($x13367 (not $x13364)))
(let (($x13370 (or $x13367 $x11633)))
(let ((@x19395 (monotonicity (rewrite (= $x13364 (not (or $x3763 $x16553 $x11615)))) (= $x13367 (not (not (or $x3763 $x16553 $x11615)))))))
(let ((@x19399 (trans @x19395 (rewrite (= (not (not (or $x3763 $x16553 $x11615))) (or $x3763 $x16553 $x11615))) (= $x13367 (or $x3763 $x16553 $x11615)))))
(let ((@x19407 (trans (monotonicity @x19399 (= $x13370 (or (or $x3763 $x16553 $x11615) $x11633))) @x19405 (= $x13370 (or $x3763 $x16553 $x11615 $x11633)))))
(let ((@x19425 (monotonicity (quant-intro @x19407 (= $x13373 $x19408)) @x19422 (= $x15651 (and $x19408 $x19412)))))
(let ((@x19373 (monotonicity (rewrite (= $x15879 (not (or $x19365 $x19366 $x15871)))) (= $x15882 (not (not (or $x19365 $x19366 $x15871)))))))
(let ((@x19377 (trans @x19373 (rewrite (= (not (not (or $x19365 $x19366 $x15871))) (or $x19365 $x19366 $x15871))) (= $x15882 (or $x19365 $x19366 $x15871)))))
(let ((@x19385 (trans (monotonicity @x19377 (= $x15898 (or (or $x19365 $x19366 $x15871) $x15893))) (rewrite (= (or (or $x19365 $x19366 $x15871) $x15893) $x19381)) (= $x15898 $x19381))))
(let ((@x19435 (monotonicity (monotonicity @x19385 (= $x15901 $x19386)) (trans @x19425 (rewrite (= (and $x19408 $x19412) $x19428)) (= $x15651 $x19428)) (= $x15904 $x19433))))
(let ((@x19445 (trans (monotonicity @x19435 (= $x15907 (and $x11608 $x19433))) (rewrite (= (and $x11608 $x19433) $x19441)) (= $x15907 $x19441))))
(let ((@x19451 (monotonicity (monotonicity @x19445 (= $x15910 $x19446)) (= $x15916 (and $x11570 $x13353 $x11580 $x10358 $x11578 $x11536 $x19446)))))
(let ((@x19462 (trans @x19451 (rewrite (= (and $x11570 $x13353 $x11580 $x10358 $x11578 $x11536 $x19446) $x19458)) (= $x15916 $x19458))))
(let ((@x19511 (monotonicity (monotonicity @x19462 (= $x15921 $x19463)) (= $x15959 (and $x11516 $x11432 $x10391 $x10392 $x11429 $x11536 $x19463)))))
(let ((@x19519 (trans @x19511 (rewrite (= (and $x11516 $x11432 $x10391 $x10392 $x11429 $x11536 $x19463) $x19515)) (= $x15959 $x19515))))
(let ((@x19479 (rewrite (= (and $x10321 $x10324 $x10333 $x10334 $x10335 $x10338 $x10340 $x11429 $x11536 $x19463) $x19477))))
(let ((@x19468 (monotonicity (monotonicity @x19462 (= $x15921 $x19463)) (= $x15927 (and $x10321 $x10324 $x10333 $x10334 $x10335 $x10338 $x10340 $x11429 $x11536 $x19463)))))
(let ((@x19487 (monotonicity (monotonicity (trans @x19468 @x19479 (= $x15927 $x19477)) (= $x15932 $x19482)) (= $x15938 (and $x10321 $x10322 $x19482)))))
(let ((@x19494 (trans @x19487 (rewrite (= (and $x10321 $x10322 $x19482) $x19490)) (= $x15938 $x19490))))
(let ((@x19500 (monotonicity (monotonicity @x19494 (= $x15943 $x19495)) (= $x15949 (and $x11515 $x11429 $x11432 $x19495)))))
(let ((@x19508 (trans @x19500 (rewrite (= (and $x11515 $x11429 $x11432 $x19495) $x19504)) (= $x15949 $x19504))))
(let ((@x19525 (monotonicity (monotonicity @x19508 @x19519 (= $x15964 $x19520)) (= $x15970 (and $x10321 $x10324 $x11429 $x11432 $x19520)))))
(let ((@x19532 (trans @x19525 (rewrite (= (and $x10321 $x10324 $x11429 $x11432 $x19520) $x19528)) (= $x15970 $x19528))))
(let ((@x19538 (monotonicity (monotonicity @x19532 (= $x15975 $x19533)) (= $x15981 (and $x10321 $x10322 $x19533)))))
(let ((@x19545 (trans @x19538 (rewrite (= (and $x10321 $x10322 $x19533) $x19541)) (= $x15981 $x19541))))
(let ((@x19551 (monotonicity (monotonicity @x19545 (= $x15986 $x19546)) (= $x15992 (and $x11487 $x11429 $x11432 $x19546)))))
(let ((@x19558 (trans @x19551 (rewrite (= (and $x11487 $x11429 $x11432 $x19546) $x19554)) (= $x15992 $x19554))))
(let ((@x19359 (rewrite (= (or (or $x3763 $x16553 $x11871) $x11889) (or $x3763 $x16553 $x11871 $x11889)))))
(let (($x13331 (and $x2815 $x12168 $x11873)))
(let (($x13334 (not $x13331)))
(let (($x13337 (or $x13334 $x11889)))
(let ((@x19349 (monotonicity (rewrite (= $x13331 (not (or $x3763 $x16553 $x11871)))) (= $x13334 (not (not (or $x3763 $x16553 $x11871)))))))
(let ((@x19353 (trans @x19349 (rewrite (= (not (not (or $x3763 $x16553 $x11871))) (or $x3763 $x16553 $x11871))) (= $x13334 (or $x3763 $x16553 $x11871)))))
(let ((@x19361 (trans (monotonicity @x19353 (= $x13337 (or (or $x3763 $x16553 $x11871) $x11889))) @x19359 (= $x13337 (or $x3763 $x16553 $x11871 $x11889)))))
(let ((@x19666 (monotonicity (quant-intro @x19361 (= $x13340 $x19362)) (monotonicity @x19558 @x19660 (= $x16064 $x19661)) (= $x16070 $x19664))))
(let ((@x19693 (monotonicity (trans @x19666 (rewrite (= $x19664 $x19686)) (= $x16070 $x19686)) (= $x16075 $x19691))))
(let ((@x19337 (rewrite (= (or (or $x3763 $x16553 $x11388) $x11404) (or $x3763 $x16553 $x11388 $x11404)))))
(let (($x13283 (and $x2815 $x12168 $x11389)))
(let (($x13286 (not $x13283)))
(let (($x13289 (or $x13286 $x11404)))
(let ((@x19327 (monotonicity (rewrite (= $x13283 (not (or $x3763 $x16553 $x11388)))) (= $x13286 (not (not (or $x3763 $x16553 $x11388)))))))
(let ((@x19331 (trans @x19327 (rewrite (= (not (not (or $x3763 $x16553 $x11388))) (or $x3763 $x16553 $x11388))) (= $x13286 (or $x3763 $x16553 $x11388)))))
(let ((@x19339 (trans (monotonicity @x19331 (= $x13289 (or (or $x3763 $x16553 $x11388) $x11404))) @x19337 (= $x13289 (or $x3763 $x16553 $x11388 $x11404)))))
(let ((@x19696 (monotonicity (quant-intro @x19339 (= $x13292 $x19340)) @x19693 (= $x16078 (and $x19340 $x19691)))))
(let ((@x19305 (monotonicity (rewrite (= (and $x15523 $x15524 (not $x15525)) (not (or $x19297 $x19298 $x15525)))) (= $x15528 (not (not (or $x19297 $x19298 $x15525)))))))
(let ((@x19309 (trans @x19305 (rewrite (= (not (not (or $x19297 $x19298 $x15525))) (or $x19297 $x19298 $x15525))) (= $x15528 (or $x19297 $x19298 $x15525)))))
(let ((@x19317 (trans (monotonicity @x19309 (= $x15534 (or (or $x19297 $x19298 $x15525) $x15533))) (rewrite (= (or (or $x19297 $x19298 $x15525) $x15533) $x19313)) (= $x15534 $x19313))))
(let ((@x19707 (monotonicity (monotonicity @x19317 (= $x15535 $x19318)) (trans @x19696 (rewrite (= (and $x19340 $x19691) $x19700)) (= $x16078 $x19700)) (= $x16081 $x19705))))
(let ((@x19717 (trans (monotonicity @x19707 (= $x16084 (and $x11382 $x19705))) (rewrite (= (and $x11382 $x19705) $x19713)) (= $x16084 $x19713))))
(let ((@x19723 (monotonicity (monotonicity @x19717 (= $x16087 $x19718)) (= $x16093 (and $x10138 $x10141 $x10145 $x10146 $x10147 $x10148 $x19718)))))
(let ((@x19734 (trans @x19723 (rewrite (= (and $x10138 $x10141 $x10145 $x10146 $x10147 $x10148 $x19718) $x19730)) (= $x16093 $x19730))))
(let ((@x19740 (monotonicity (monotonicity @x19734 (= $x16098 $x19735)) (= $x16104 (and $x10138 $x10139 $x19735)))))
(let ((@x19747 (trans @x19740 (rewrite (= (and $x10138 $x10139 $x19735) $x19743)) (= $x16104 $x19743))))
(let ((@x19753 (monotonicity (monotonicity @x19747 (= $x16109 $x19748)) (= $x16112 (and $x10136 $x19748)))))
(let ((@x19763 (monotonicity (trans @x19753 (rewrite (= (and $x10136 $x19748) $x19756)) (= $x16112 $x19756)) (= $x16115 $x19761))))
(let (($x15746 (<= (+ ?x15744 (* (- 1) v_b_S_result_G_0$)) 0)))
(let (($x15748 (not (or (not (and $x15736 $x15737 (not (>= (+ ?v0!15 ?x11246) 0)))) $x15746))))
(let (($x15769 (or $x15748 $x15765)))
(let (($x15732 (not $x11797)))
(let (($x15773 (and $x15732 $x15769)))
(let (($x15777 (or $x15729 $x15773)))
(let (($x15726 (not $x11777)))
(let (($x15781 (and $x15726 $x15777)))
(let (($x15636 (<= (+ ?x15634 (* (- 1) v_b_L_H_max_G_3$)) 0)))
(let (($x15638 (not (or (not (and $x15626 $x15627 (not (>= (+ ?v0!14 ?x11581) 0)))) $x15636))))
(let (($x15655 (or $x15638 $x15651)))
(let (($x15622 (not $x11612)))
(let (($x15659 (and $x15622 $x15655)))
(let (($x15663 (or $x11612 $x15659)))
(let (($x13358 (and $x11570 $x13353 $x11580 $x10358 $x11578 $x11536)))
(let (($x13361 (not $x13358)))
(let (($x15617 (not $x13361)))
(let (($x15667 (and $x15617 $x15663)))
(let (($x15671 (or $x15611 $x15614 $x15667)))
(let (($x15695 (not $x11730)))
(let (($x15698 (and $x15695 $x15671)))
(let (($x15608 (not $x11567)))
(let (($x15675 (and $x15608 $x15671)))
(let (($x15679 (or $x15590 $x15599 $x15675)))
(let (($x15596 (not $x11001)))
(let (($x15683 (and $x15596 $x15679)))
(let (($x15687 (or $x15590 $x15593 $x15683)))
(let (($x15605 (not $x11532)))
(let (($x15691 (and $x15605 $x15687)))
(let (($x15702 (or $x15691 $x15698)))
(let (($x15602 (not $x11512)))
(let (($x15706 (and $x15602 $x15702)))
(let (($x15710 (or $x15590 $x15599 $x15706)))
(let (($x15714 (and $x15596 $x15710)))
(let (($x15718 (or $x15590 $x15593 $x15714)))
(let (($x15587 (not $x11501)))
(let (($x15722 (and $x15587 $x15718)))
(let (($x15785 (or $x15722 $x15781)))
(let (($x15584 (not $x11481)))
(let (($x13343 (and $x11260 $x10167 $x11911 $x13304 $x13315 $x11901 $x13326 $x11898 $x13340 $x11868 $x10192 $x11429 $x11432)))
(let (($x15789 (and $x13343 $x15584 $x15785)))
(let (($x15545 (not $x11260)))
(let (($x15793 (or $x15545 $x15548 $x15789)))
(let (($x15797 (and $x13292 $x15793)))
(let (($x15801 (or $x15535 $x15797)))
(let (($x15519 (not $x11385)))
(let (($x15805 (and $x15519 $x15801)))
(let (($x15809 (or $x11385 $x15805)))
(let (($x15514 (not $x11379)))
(let (($x15813 (and $x15514 $x15809)))
(let (($x15817 (or $x15502 $x15511 $x15813)))
(let (($x15508 (not $x11209)))
(let (($x15821 (and $x15508 $x15817)))
(let (($x15825 (or $x15502 $x15505 $x15821)))
(let (($x15499 (not $x11221)))
(let (($x15829 (and $x15499 $x15825)))
(let (($x15833 (or $x11221 $x15829)))
(let (($x16037 (= (or (not (and $x15736 $x15737 (not (>= (+ ?v0!15 ?x11246) 0)))) $x15746) $x16036)))
(let (($x16024 (= (+ ?x15744 (* (- 1) v_b_S_result_G_0$)) (+ (* (- 1) v_b_S_result_G_0$) ?x15744))))
(let ((@x16028 (monotonicity (rewrite $x16024) (= $x15746 (<= (+ (* (- 1) v_b_S_result_G_0$) ?x15744) 0)))))
(let ((@x16035 (trans @x16028 (rewrite (= (<= (+ (* (- 1) v_b_S_result_G_0$) ?x15744) 0) $x16031)) (= $x15746 $x16031))))
(let ((@x16006 (monotonicity (rewrite (= (+ ?v0!15 ?x11246) (+ ?x11246 ?v0!15))) (= (>= (+ ?v0!15 ?x11246) 0) (>= (+ ?x11246 ?v0!15) 0)))))
(let ((@x16013 (trans @x16006 (rewrite (= (>= (+ ?x11246 ?v0!15) 0) $x16009)) (= (>= (+ ?v0!15 ?x11246) 0) $x16009))))
(let ((@x16019 (monotonicity (monotonicity @x16013 (= (not (>= (+ ?v0!15 ?x11246) 0)) $x16014)) (= (and $x15736 $x15737 (not (>= (+ ?v0!15 ?x11246) 0))) $x16017))))
(let ((@x16022 (monotonicity @x16019 (= (not (and $x15736 $x15737 (not (>= (+ ?v0!15 ?x11246) 0)))) $x16020))))
(let ((@x16044 (monotonicity (monotonicity (monotonicity @x16022 @x16035 $x16037) (= $x15748 $x16039)) (= $x15769 $x16042))))
(let ((@x16047 (monotonicity (rewrite (= $x15732 $x11792)) @x16044 (= $x15773 (and $x11792 $x16042)))))
(let ((@x16055 (monotonicity (trans @x16047 (rewrite (= (and $x11792 $x16042) $x16048)) (= $x15773 $x16048)) (= $x15777 $x16053))))
(let ((@x16058 (monotonicity (rewrite (= $x15726 $x11772)) @x16055 (= $x15781 (and $x11772 $x16053)))))
(let (($x15899 (= (or (not (and $x15626 $x15627 (not (>= (+ ?v0!14 ?x11581) 0)))) $x15636) $x15898)))
(let (($x15886 (= (+ ?x15634 (* (- 1) v_b_L_H_max_G_3$)) (+ (* (- 1) v_b_L_H_max_G_3$) ?x15634))))
(let ((@x15890 (monotonicity (rewrite $x15886) (= $x15636 (<= (+ (* (- 1) v_b_L_H_max_G_3$) ?x15634) 0)))))
(let ((@x15897 (trans @x15890 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_3$) ?x15634) 0) $x15893)) (= $x15636 $x15893))))
(let ((@x15868 (monotonicity (rewrite (= (+ ?v0!14 ?x11581) (+ ?x11581 ?v0!14))) (= (>= (+ ?v0!14 ?x11581) 0) (>= (+ ?x11581 ?v0!14) 0)))))
(let ((@x15875 (trans @x15868 (rewrite (= (>= (+ ?x11581 ?v0!14) 0) $x15871)) (= (>= (+ ?v0!14 ?x11581) 0) $x15871))))
(let ((@x15881 (monotonicity (monotonicity @x15875 (= (not (>= (+ ?v0!14 ?x11581) 0)) $x15876)) (= (and $x15626 $x15627 (not (>= (+ ?v0!14 ?x11581) 0))) $x15879))))
(let ((@x15884 (monotonicity @x15881 (= (not (and $x15626 $x15627 (not (>= (+ ?v0!14 ?x11581) 0)))) $x15882))))
(let ((@x15906 (monotonicity (monotonicity (monotonicity @x15884 @x15897 $x15899) (= $x15638 $x15901)) (= $x15655 $x15904))))
(let ((@x15912 (monotonicity (monotonicity (rewrite (= $x15622 $x11608)) @x15906 (= $x15659 $x15907)) (= $x15663 $x15910))))
(let ((@x15915 (monotonicity (rewrite (= $x15617 $x13358)) @x15912 (= $x15667 (and $x13358 $x15910)))))
(let ((@x15923 (monotonicity (trans @x15915 (rewrite (= (and $x13358 $x15910) $x15916)) (= $x15667 $x15916)) (= $x15671 $x15921))))
(let ((@x15958 (monotonicity (rewrite (= $x15695 $x11725)) @x15923 (= $x15698 (and $x11725 $x15921)))))
(let ((@x15926 (monotonicity (rewrite (= $x15608 $x11562)) @x15923 (= $x15675 (and $x11562 $x15921)))))
(let ((@x15934 (monotonicity (trans @x15926 (rewrite (= (and $x11562 $x15921) $x15927)) (= $x15675 $x15927)) (= $x15679 $x15932))))
(let ((@x15937 (monotonicity (rewrite (= $x15596 $x10323)) @x15934 (= $x15683 (and $x10323 $x15932)))))
(let ((@x15945 (monotonicity (trans @x15937 (rewrite (= (and $x10323 $x15932) $x15938)) (= $x15683 $x15938)) (= $x15687 $x15943))))
(let ((@x15948 (monotonicity (rewrite (= $x15605 $x11527)) @x15945 (= $x15691 (and $x11527 $x15943)))))
(let ((@x15966 (monotonicity (trans @x15948 (rewrite (= (and $x11527 $x15943) $x15949)) (= $x15691 $x15949)) (trans @x15958 (rewrite (= (and $x11725 $x15921) $x15959)) (= $x15698 $x15959)) (= $x15702 $x15964))))
(let ((@x15969 (monotonicity (rewrite (= $x15602 $x11507)) @x15966 (= $x15706 (and $x11507 $x15964)))))
(let ((@x15977 (monotonicity (trans @x15969 (rewrite (= (and $x11507 $x15964) $x15970)) (= $x15706 $x15970)) (= $x15710 $x15975))))
(let ((@x15980 (monotonicity (rewrite (= $x15596 $x10323)) @x15977 (= $x15714 (and $x10323 $x15975)))))
(let ((@x15988 (monotonicity (trans @x15980 (rewrite (= (and $x10323 $x15975) $x15981)) (= $x15714 $x15981)) (= $x15718 $x15986))))
(let ((@x15991 (monotonicity (rewrite (= $x15587 $x11496)) @x15988 (= $x15722 (and $x11496 $x15986)))))
(let ((@x16066 (monotonicity (trans @x15991 (rewrite (= (and $x11496 $x15986) $x15992)) (= $x15722 $x15992)) (trans @x16058 (rewrite (= (and $x11772 $x16053) $x16059)) (= $x15781 $x16059)) (= $x15785 $x16064))))
(let ((@x16069 (monotonicity (rewrite (= $x15584 $x11476)) @x16066 (= $x15789 (and $x13343 $x11476 $x16064)))))
(let ((@x16074 (trans @x16069 (rewrite (= (and $x13343 $x11476 $x16064) $x16070)) (= $x15789 $x16070))))
(let ((@x16080 (monotonicity (monotonicity (rewrite (= $x15545 $x11259)) @x16074 (= $x15793 $x16075)) (= $x15797 $x16078))))
(let ((@x16086 (monotonicity (rewrite (= $x15519 $x11382)) (monotonicity @x16080 (= $x15801 $x16081)) (= $x15805 $x16084))))
(let ((@x16092 (monotonicity (rewrite (= $x15514 $x11374)) (monotonicity @x16086 (= $x15809 $x16087)) (= $x15813 (and $x11374 $x16087)))))
(let ((@x16100 (monotonicity (trans @x16092 (rewrite (= (and $x11374 $x16087) $x16093)) (= $x15813 $x16093)) (= $x15817 $x16098))))
(let ((@x16103 (monotonicity (rewrite (= $x15508 $x10140)) @x16100 (= $x15821 (and $x10140 $x16098)))))
(let ((@x16111 (monotonicity (trans @x16103 (rewrite (= (and $x10140 $x16098) $x16104)) (= $x15821 $x16104)) (= $x15825 $x16109))))
(let ((@x16117 (monotonicity (monotonicity (rewrite (= $x15499 $x10136)) @x16111 (= $x15829 $x16112)) (= $x15833 $x16115))))
(let (($x13451 (exists ((?v0 Int) )(! (let ((?x10163 (b_S_read_n_u1$ v_b_S_s$ (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$))))
(let (($x10238 (= ?x10163 v_b_S_result_G_0$)))
(let (($x11800 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11802 (not $x11800)))
(let (($x12168 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(and $x2815 $x12168 $x11802 $x10238))))))) :qid k!704))
))
(let (($x13445 (not $x13442)))
(let (($x13454 (or $x13445 $x13451)))
(let (($x13457 (and $x13442 $x13454)))
(let (($x13460 (or $x11797 $x13457)))
(let (($x13463 (and b_S_position_n_marker$ $x13460)))
(let (($x13466 (or $x11777 $x13463)))
(let (($x13376 (not $x13373)))
(let (($x13379 (or $x13376 $x11651)))
(let (($x13382 (and $x13373 $x13379)))
(let (($x13385 (or $x11612 $x13382)))
(let (($x13388 (and $x11608 $x13385)))
(let (($x13391 (or $x13361 $x13388)))
(let (($x13394 (and $x11570 $x13353 $x13391)))
(let (($x13412 (or $x11730 $x13394)))
(let (($x13397 (or $x11567 $x13394)))
(let (($x13400 (and $x10321 $x10324 $x13397)))
(let (($x13403 (or $x11001 $x13400)))
(let (($x13406 (and $x10321 $x10322 $x13403)))
(let (($x13409 (or $x11532 $x13406)))
(let (($x13415 (and $x13409 $x13412)))
(let (($x13418 (or $x11512 $x13415)))
(let (($x13421 (and $x10321 $x10324 $x13418)))
(let (($x13424 (or $x11001 $x13421)))
(let (($x13427 (and $x10321 $x10322 $x13424)))
(let (($x13430 (or $x11501 $x13427)))
(let (($x13469 (and $x13430 $x13466)))
(let (($x13346 (not $x13343)))
(let (($x13472 (or $x13346 $x11481 $x13469)))
(let (($x13475 (and $x11260 $x10167 $x13472)))
(let (($x13295 (not $x13292)))
(let (($x13478 (or $x13295 $x13475)))
(let (($x13481 (and $x13292 $x13478)))
(let (($x13484 (or $x11385 $x13481)))
(let (($x13487 (and $x11382 $x13484)))
(let (($x13490 (or $x11379 $x13487)))
(let (($x13493 (and $x10138 $x10141 $x13490)))
(let (($x13496 (or $x11209 $x13493)))
(let (($x13499 (and $x10138 $x10139 $x13496)))
(let (($x13502 (or $x11221 $x13499)))
(let (($x13508 (not (and $x10136 $x13502))))
(let ((@x15760 (refl (~ (not (and $x2815 $x12168 $x11802 $x10238)) (not (and $x2815 $x12168 $x11802 $x10238))))))
(let ((@x15757 (nnf-neg (nnf-pos (refl (~ $x13439 $x13439)) (~ $x13442 $x13442)) (~ (not $x13445) $x13442))))
(let ((@x15768 (nnf-neg @x15757 (nnf-neg @x15760 (~ (not $x13451) $x15761)) (~ (not $x13454) $x15765))))
(let ((@x15776 (nnf-neg (refl (~ $x15732 $x15732)) (nnf-neg (sk (~ $x13445 $x15748)) @x15768 (~ (not $x13457) $x15769)) (~ (not $x13460) $x15773))))
(let ((@x15784 (nnf-neg (refl (~ $x15726 $x15726)) (nnf-neg (refl (~ $x15729 $x15729)) @x15776 (~ (not $x13463) $x15777)) (~ (not $x13466) $x15781))))
(let ((@x15647 (nnf-neg (nnf-pos (refl (~ $x13370 $x13370)) (~ $x13373 $x13373)) (~ (not $x13376) $x13373))))
(let ((@x15658 (nnf-neg (sk (~ $x13376 $x15638)) (nnf-neg @x15647 (refl (~ $x15648 $x15648)) (~ (not $x13379) $x15651)) (~ (not $x13382) $x15655))))
(let ((@x15666 (nnf-neg (refl (~ $x11612 $x11612)) (nnf-neg (refl (~ $x15622 $x15622)) @x15658 (~ (not $x13385) $x15659)) (~ (not $x13388) $x15663))))
(let ((@x15674 (nnf-neg (refl (~ $x15611 $x15611)) (refl (~ $x15614 $x15614)) (nnf-neg (refl (~ $x15617 $x15617)) @x15666 (~ (not $x13391) $x15667)) (~ (not $x13394) $x15671))))
(let ((@x15592 (refl (~ $x15590 $x15590))))
(let ((@x15682 (nnf-neg @x15592 (refl (~ $x15599 $x15599)) (nnf-neg (refl (~ $x15608 $x15608)) @x15674 (~ (not $x13397) $x15675)) (~ (not $x13400) $x15679))))
(let ((@x15690 (nnf-neg @x15592 (refl (~ $x15593 $x15593)) (nnf-neg (refl (~ $x15596 $x15596)) @x15682 (~ (not $x13403) $x15683)) (~ (not $x13406) $x15687))))
(let ((@x15705 (nnf-neg (nnf-neg (refl (~ $x15605 $x15605)) @x15690 (~ (not $x13409) $x15691)) (nnf-neg (refl (~ $x15695 $x15695)) @x15674 (~ (not $x13412) $x15698)) (~ (not $x13415) $x15702))))
(let ((@x15713 (nnf-neg @x15592 (refl (~ $x15599 $x15599)) (nnf-neg (refl (~ $x15602 $x15602)) @x15705 (~ (not $x13418) $x15706)) (~ (not $x13421) $x15710))))
(let ((@x15721 (nnf-neg @x15592 (refl (~ $x15593 $x15593)) (nnf-neg (refl (~ $x15596 $x15596)) @x15713 (~ (not $x13424) $x15714)) (~ (not $x13427) $x15718))))
(let ((@x15788 (nnf-neg (nnf-neg (refl (~ $x15587 $x15587)) @x15721 (~ (not $x13430) $x15722)) @x15784 (~ (not $x13469) $x15785))))
(let ((@x15580 (monotonicity (refl (~ $x11260 $x11260)) (refl (~ $x10167 $x10167)) (refl (~ $x11911 $x11911)) (refl (~ $x13304 $x13304)) (refl (~ $x13315 $x13315)) (refl (~ $x11901 $x11901)) (refl (~ $x13326 $x13326)) (refl (~ $x11898 $x11898)) (nnf-pos (refl (~ $x13337 $x13337)) (~ $x13340 $x13340)) (refl (~ $x11868 $x11868)) (refl (~ $x10192 $x10192)) (refl (~ $x11429 $x11429)) (refl (~ $x11432 $x11432)) (~ $x13343 $x13343))))
(let ((@x15792 (nnf-neg (nnf-neg @x15580 (~ (not $x13346) $x13343)) (refl (~ $x15584 $x15584)) @x15788 (~ (not $x13472) $x15789))))
(let ((@x15796 (nnf-neg (refl (~ $x15545 $x15545)) (refl (~ $x15548 $x15548)) @x15792 (~ (not $x13475) $x15793))))
(let ((@x15544 (nnf-neg (nnf-pos (refl (~ $x13289 $x13289)) (~ $x13292 $x13292)) (~ (not $x13295) $x13292))))
(let ((@x15804 (nnf-neg (sk (~ $x13295 $x15535)) (nnf-neg @x15544 @x15796 (~ (not $x13478) $x15797)) (~ (not $x13481) $x15801))))
(let ((@x15812 (nnf-neg (refl (~ $x11385 $x11385)) (nnf-neg (refl (~ $x15519 $x15519)) @x15804 (~ (not $x13484) $x15805)) (~ (not $x13487) $x15809))))
(let ((@x15820 (nnf-neg (refl (~ $x15502 $x15502)) (refl (~ $x15511 $x15511)) (nnf-neg (refl (~ $x15514 $x15514)) @x15812 (~ (not $x13490) $x15813)) (~ (not $x13493) $x15817))))
(let ((@x15828 (nnf-neg (refl (~ $x15502 $x15502)) (refl (~ $x15505 $x15505)) (nnf-neg (refl (~ $x15508 $x15508)) @x15820 (~ (not $x13496) $x15821)) (~ (not $x13499) $x15825))))
(let ((@x15835 (nnf-neg (refl (~ $x11221 $x11221)) (nnf-neg (refl (~ $x15499 $x15499)) @x15828 (~ (not $x13502) $x15829)) (~ $x13508 $x15833))))
(let (($x6441 (= b_S_max_o_u4$ 4294967295)))
(let ((@x6435 (monotonicity (rewrite (= (* 65536 65536) 4294967296)) (= (- (* 65536 65536) 1) (- 4294967296 1)))))
(let ((@x6440 (trans @x6435 (rewrite (= (- 4294967296 1) 4294967295)) (= (- (* 65536 65536) 1) 4294967295))))
(let ((@x6443 (monotonicity @x6440 (= (= b_S_max_o_u4$ (- (* 65536 65536) 1)) $x6441))))
(let ((@x6446 (mp (asserted (= b_S_max_o_u4$ (- (* 65536 65536) 1))) @x6443 $x6441)))
(let ((@x12140 (trans (monotonicity @x6446 (= ?x3113 (* (- 1) 4294967295))) (rewrite (= (* (- 1) 4294967295) (- 4294967295))) (= ?x3113 (- 4294967295)))))
(let ((@x12164 (trans (monotonicity @x12140 (= ?x3114 (+ ?0 (- 4294967295)))) (rewrite (= (+ ?0 (- 4294967295)) (+ (- 4294967295) ?0))) (= ?x3114 (+ (- 4294967295) ?0)))))
(let ((@x12172 (trans (monotonicity @x12164 (= $x3115 (<= (+ (- 4294967295) ?0) 0))) (rewrite (= (<= (+ (- 4294967295) ?0) 0) $x12168)) (= $x3115 $x12168))))
(let ((@x13453 (quant-intro (monotonicity @x12172 (= $x11839 (and $x2815 $x12168 $x11802 $x10238))) (= $x11844 $x13451))))
(let ((@x13441 (monotonicity (monotonicity (monotonicity @x12172 (= $x11808 $x13433)) (= $x11813 $x13436)) (= $x11821 $x13439))))
(let ((@x13456 (monotonicity (monotonicity (quant-intro @x13441 (= $x11824 $x13442)) (= $x11827 $x13445)) @x13453 (= $x11847 $x13454))))
(let ((@x13462 (monotonicity (monotonicity (quant-intro @x13441 (= $x11824 $x13442)) @x13456 (= $x11850 $x13457)) (= $x11853 $x13460))))
(let ((@x13372 (monotonicity (monotonicity (monotonicity @x12172 (= $x11623 $x13364)) (= $x11628 $x13367)) (= $x11636 $x13370))))
(let ((@x13381 (monotonicity (monotonicity (quant-intro @x13372 (= $x11639 $x13373)) (= $x11642 $x13376)) (= $x11654 $x13379))))
(let ((@x13387 (monotonicity (monotonicity (quant-intro @x13372 (= $x11639 $x13373)) @x13381 (= $x11657 $x13382)) (= $x11660 $x13385))))
(let ((@x13351 (monotonicity (monotonicity @x6446 (= ?x11574 (+ 4294967295 ?x11484))) (= $x11573 (>= (+ 4294967295 ?x11484) 1)))))
(let ((@x13357 (trans @x13351 (rewrite (= (>= (+ 4294967295 ?x11484) 1) $x13353)) (= $x11573 $x13353))))
(let ((@x13393 (monotonicity (monotonicity (monotonicity @x13357 (= $x11600 $x13358)) (= $x11605 $x13361)) (monotonicity @x13387 (= $x11663 $x13388)) (= $x11666 $x13391))))
(let ((@x13414 (monotonicity (monotonicity @x13357 @x13393 (= $x11672 $x13394)) (= $x11733 $x13412))))
(let ((@x13399 (monotonicity (monotonicity @x13357 @x13393 (= $x11672 $x13394)) (= $x11677 $x13397))))
(let ((@x13408 (monotonicity (monotonicity (monotonicity @x13399 (= $x11683 $x13400)) (= $x11688 $x13403)) (= $x11694 $x13406))))
(let ((@x13417 (monotonicity (monotonicity @x13408 (= $x11699 $x13409)) @x13414 (= $x11736 $x13415))))
(let ((@x13426 (monotonicity (monotonicity (monotonicity @x13417 (= $x11739 $x13418)) (= $x11745 $x13421)) (= $x11750 $x13424))))
(let ((@x13471 (monotonicity (monotonicity (monotonicity @x13426 (= $x11756 $x13427)) (= $x11761 $x13430)) (monotonicity (monotonicity @x13462 (= $x11856 $x13463)) (= $x11859 $x13466)) (= $x11862 $x13469))))
(let ((@x13339 (monotonicity (monotonicity (monotonicity @x12172 (= $x11879 $x13331)) (= $x11884 $x13334)) (= $x11892 $x13337))))
(let ((@x13325 (monotonicity (monotonicity @x6446 (= ?x11574 (+ 4294967295 ?x11484))) (= $x11904 (>= (+ 4294967295 ?x11484) 0)))))
(let ((@x13330 (trans @x13325 (rewrite (= (>= (+ 4294967295 ?x11484) 0) $x13326)) (= $x11904 $x13326))))
(let ((@x13317 (rewrite (= (>= (+ 4294967295 (* (- 1) v_b_SL_H_witness_G_0$)) 0) $x13315))))
(let (($x13310 (= (+ b_S_max_o_u4$ (* (- 1) v_b_SL_H_witness_G_0$)) (+ 4294967295 (* (- 1) v_b_SL_H_witness_G_0$)))))
(let ((@x13314 (monotonicity (monotonicity @x6446 $x13310) (= $x11907 (>= (+ 4294967295 (* (- 1) v_b_SL_H_witness_G_0$)) 0)))))
(let (($x13299 (= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max_G_1$)) (+ 255 (* (- 1) v_b_L_H_max_G_1$)))))
(let (($x6449 (= b_S_max_o_u1$ 255)))
(let ((@x6450 (asserted $x6449)))
(let ((@x13303 (monotonicity (monotonicity @x6450 $x13299) (= $x11914 (>= (+ 255 (* (- 1) v_b_L_H_max_G_1$)) 0)))))
(let ((@x13308 (trans @x13303 (rewrite (= (>= (+ 255 (* (- 1) v_b_L_H_max_G_1$)) 0) $x13304)) (= $x11914 $x13304))))
(let ((@x13345 (monotonicity @x13308 (trans @x13314 @x13317 (= $x11907 $x13315)) @x13330 (quant-intro @x13339 (= $x11895 $x13340)) (= $x11957 $x13343))))
(let ((@x13474 (monotonicity (monotonicity @x13345 (= $x11962 $x13346)) @x13471 (= $x11971 $x13472))))
(let ((@x13291 (monotonicity (monotonicity (monotonicity @x12172 (= $x11395 $x13283)) (= $x11400 $x13286)) (= $x11408 $x13289))))
(let ((@x13480 (monotonicity (monotonicity (quant-intro @x13291 (= $x11411 $x13292)) (= $x11414 $x13295)) (monotonicity @x13474 (= $x11979 $x13475)) (= $x11984 $x13478))))
(let ((@x13486 (monotonicity (monotonicity (quant-intro @x13291 (= $x11411 $x13292)) @x13480 (= $x11987 $x13481)) (= $x11990 $x13484))))
(let ((@x13495 (monotonicity (monotonicity (monotonicity @x13486 (= $x11993 $x13487)) (= $x11996 $x13490)) (= $x12002 $x13493))))
(let ((@x13504 (monotonicity (monotonicity (monotonicity @x13495 (= $x12007 $x13496)) (= $x12013 $x13499)) (= $x12018 $x13502))))
(let ((@x13510 (monotonicity (monotonicity @x13504 (= $x12021 (and $x10136 $x13502))) (= (not $x12021) $x13508))))
(let ((@x13511 (mp (not-or-elim (mp (asserted $x10434) @x12031 $x12027) (not $x12021)) @x13510 $x13508)))
(let ((@x20143 (mp (mp (mp (mp~ @x13511 @x15835 $x15833) @x16117 $x16115) @x19763 $x19761) (monotonicity @x20139 (= $x19761 $x20140)) $x20140)))
(let ((@x24003 (unit-resolution (def-axiom (or $x20134 $x20128)) (unit-resolution @x20143 @x22508 $x20137) $x20128)))
(let ((?x22514 (b_S_typ$ ?x10137)))
(let (($x22515 (= ?x22514 b_T_T_u1$)))
(let ((?x21175 (b_S_typ$ ?x10078)))
(let (($x21176 (= ?x21175 b_T_T_u1$)))
(let (($x21181 (or $x21147 $x21176)))
(let ((@x21182 ((_ quant-inst b_T_T_u1$ v_b_P_H_arr$) $x21181)))
(let ((?x22553 (b_S_ptr$ b_T_T_u1$ ?x10079)))
(let (($x22556 (= ?x10137 ?x22553)))
(let (($x22559 (not $x22556)))
(let (($x22523 (b_S_extent_n_hint$ ?x10137 ?x10078)))
(let (($x22524 (not $x22523)))
(let (($x22562 (or $x22524 $x22559)))
(let (($x22565 (not $x22562)))
(let (($x18180 (forall ((?v0 B_S_ptr$) (?v1 Int) (?v2 B_S_ctype$) )(! (let ((?x7205 (b_S_idx$ ?v0 ?v1 ?v2)))
(let (($x7213 (= ?x7205 (b_S_ptr$ ?v2 (+ (b_S_ref$ ?v0) (* ?v1 (b_S_sizeof$ ?v2)))))))
(not (or (not (b_S_extent_n_hint$ ?x7205 ?v0)) (not $x7213))))) :pattern ( (b_S_idx$ ?v0 ?v1 ?v2) ) :qid k!499))
))
(let (($x7216 (forall ((?v0 B_S_ptr$) (?v1 Int) (?v2 B_S_ctype$) )(! (let ((?x7205 (b_S_idx$ ?v0 ?v1 ?v2)))
(let (($x7213 (= ?x7205 (b_S_ptr$ ?v2 (+ (b_S_ref$ ?v0) (* ?v1 (b_S_sizeof$ ?v2)))))))
(and (b_S_extent_n_hint$ ?x7205 ?v0) $x7213))) :pattern ( (b_S_idx$ ?v0 ?v1 ?v2) ) :qid k!499))
))
(let ((?x7205 (b_S_idx$ ?2 ?1 ?0)))
(let (($x7213 (= ?x7205 (b_S_ptr$ ?0 (+ (b_S_ref$ ?2) (* ?1 (b_S_sizeof$ ?0)))))))
(let (($x7214 (and (b_S_extent_n_hint$ ?x7205 ?2) $x7213)))
(let ((@x18179 (rewrite (= $x7214 (not (or (not (b_S_extent_n_hint$ ?x7205 ?2)) (not $x7213)))))))
(let ((@x14561 (mp~ (asserted $x7216) (nnf-pos (refl (~ $x7214 $x7214)) (~ $x7216 $x7216)) $x7216)))
(let ((@x18183 (mp @x14561 (quant-intro @x18179 (= $x7216 $x18180)) $x18180)))
(let (($x22568 (not $x18180)))
(let (($x22569 (or $x22568 $x22565)))
(let ((?x10045 (b_S_sizeof$ b_T_T_u1$)))
(let ((?x22537 (* 0 ?x10045)))
(let ((?x22538 (+ ?x10079 ?x22537)))
(let ((?x22539 (b_S_ptr$ b_T_T_u1$ ?x22538)))
(let (($x22540 (= ?x10137 ?x22539)))
(let (($x22541 (not $x22540)))
(let (($x22542 (or $x22524 $x22541)))
(let (($x22543 (not $x22542)))
(let ((@x22552 (trans (monotonicity (rewrite (= ?x22537 0)) (= ?x22538 (+ ?x10079 0))) (rewrite (= (+ ?x10079 0) ?x10079)) (= ?x22538 ?x10079))))
(let ((@x22561 (monotonicity (monotonicity (monotonicity @x22552 (= ?x22539 ?x22553)) (= $x22540 $x22556)) (= $x22541 $x22559))))
(let ((@x22573 (monotonicity (monotonicity (monotonicity @x22561 (= $x22542 $x22562)) (= $x22543 $x22565)) (= (or $x22568 $x22543) $x22569))))
(let ((@x22577 (mp ((_ quant-inst (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) 0 b_T_T_u1$) (or $x22568 $x22543)) (trans @x22573 (rewrite (= $x22569 $x22569)) (= (or $x22568 $x22543) $x22569)) $x22569)))
(let ((@x23444 (unit-resolution (def-axiom (or $x22562 $x22556)) (unit-resolution @x22577 @x18183 $x22565) $x22556)))
(let ((@x22640 (monotonicity (trans @x23444 (monotonicity @x23445 (= ?x22553 ?x10078)) (= ?x10137 ?x10078)) (= ?x22514 ?x21175))))
(let (($x22526 (not $x22515)))
(let (($x22522 (= $x10138 $x22515)))
(let (($x19828 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6636 (b_S_typ$ ?v0)))
(let (($x7865 (= ?x6636 ?v1)))
(let (($x9596 (b_S_is$ ?v0 ?v1)))
(= $x9596 $x7865)))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!623))
))
(let (($x9617 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6636 (b_S_typ$ ?v0)))
(let (($x7865 (= ?x6636 ?v1)))
(let (($x9596 (b_S_is$ ?v0 ?v1)))
(= $x9596 $x7865)))) :qid k!623))
))
(let ((?x6636 (b_S_typ$ ?1)))
(let (($x7865 (= ?x6636 ?0)))
(let (($x9596 (b_S_is$ ?1 ?0)))
(let (($x9614 (= $x9596 $x7865)))
(let (($x9611 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6636 (b_S_typ$ ?v0)))
(let (($x7865 (= ?x6636 ?v1)))
(let (($x9596 (b_S_is$ ?v0 ?v1)))
(= $x9596 $x7865)))) :qid k!623))
))
(let ((@x9622 (mp (asserted $x9611) (quant-intro (rewrite (= (= $x9596 $x7865) $x9614)) (= $x9611 $x9617)) $x9617)))
(let ((@x19833 (mp (mp~ @x9622 (nnf-pos (refl (~ $x9614 $x9614)) (~ $x9617 $x9617)) $x9617) (quant-intro (refl (= $x9614 $x9614)) (= $x9617 $x19828)) $x19828)))
(let (($x22002 (not $x19828)))
(let (($x22619 (or $x22002 $x22522)))
(let ((@x22534 ((_ quant-inst (b_S_idx$ ?x10078 0 b_T_T_u1$) b_T_T_u1$) $x22619)))
(let ((@x22471 (unit-resolution (def-axiom (or (not $x22522) $x10138 $x22526)) (hypothesis $x15502) (or (not $x22522) $x22526))))
(let ((@x22636 (unit-resolution (unit-resolution @x22471 (unit-resolution @x22534 @x19833 $x22522) $x22526) (trans @x22640 (unit-resolution @x21182 @x19846 $x21176) $x22515) false)))
(let ((@x23411 (lemma @x22636 $x10138)))
(let ((@x23982 (unit-resolution (def-axiom (or $x20131 $x15502 $x15505 $x20125)) @x23411 @x24003 (or $x15505 $x20125))))
(let ((@x23983 (unit-resolution @x23982 (unit-resolution (def-axiom (or $x22603 $x10139)) (lemma @x24453 $x22604) $x10139) $x20125)))
(let ((?x22805 (b_S_ts_n_emb$ ?x22478)))
(let ((?x22433 (b_S_owner$ v_b_S_s$ ?x22805)))
(let (($x22451 (= ?x22433 b_S_me$)))
(let ((?x22485 (b_S_ref$ ?x10137)))
(let ((?x22505 (b_S_ptr$ b_T_T_u1$ ?x22485)))
(let (($x22506 (= ?x10137 ?x22505)))
(let (($x24124 (or $x21994 $x15502 $x22506)))
(let ((@x24271 (mp ((_ quant-inst (b_S_idx$ ?x10078 0 b_T_T_u1$) b_T_T_u1$) (or $x21994 (or $x15502 $x22506))) (rewrite (= (or $x21994 (or $x15502 $x22506)) $x24124)) $x24124)))
(let ((@x23969 (unit-resolution @x24271 @x15336 @x23411 $x22506)))
(let ((?x23622 (b_S_ref$ ?x21983)))
(let ((?x23636 (b_S_ptr$ b_T_T_u1$ ?x23622)))
(let ((?x23613 (b_S_idx$ ?x21983 0 b_T_T_u1$)))
(let (($x23639 (= ?x23613 ?x23636)))
(let (($x23642 (not $x23639)))
(let (($x23614 (b_S_extent_n_hint$ ?x23613 ?x21983)))
(let (($x23621 (not $x23614)))
(let (($x23645 (or $x23621 $x23642)))
(let (($x23648 (not $x23645)))
(let (($x23651 (or $x22568 $x23648)))
(let (($x23628 (not (or $x23621 (not (= ?x23613 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 ?x22537))))))))
(let (($x23646 (= (or $x23621 (not (= ?x23613 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 ?x22537))))) $x23645)))
(let ((@x22545 (rewrite (= ?x22537 0))))
(let ((@x23635 (trans (monotonicity @x22545 (= (+ ?x23622 ?x22537) (+ ?x23622 0))) (rewrite (= (+ ?x23622 0) ?x23622)) (= (+ ?x23622 ?x22537) ?x23622))))
(let ((@x23641 (monotonicity (monotonicity @x23635 (= (b_S_ptr$ b_T_T_u1$ (+ ?x23622 ?x22537)) ?x23636)) (= (= ?x23613 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 ?x22537))) $x23639))))
(let ((@x23644 (monotonicity @x23641 (= (not (= ?x23613 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 ?x22537)))) $x23642))))
(let ((@x23655 (monotonicity (monotonicity (monotonicity @x23644 $x23646) (= $x23628 $x23648)) (= (or $x22568 $x23628) $x23651))))
(let ((@x23659 (mp ((_ quant-inst (b_S_ptr$ ?x10076 ?x21014) 0 b_T_T_u1$) (or $x22568 $x23628)) (trans @x23655 (rewrite (= $x23651 $x23651)) (= (or $x22568 $x23628) $x23651)) $x23651)))
(let ((@x23663 (def-axiom (or $x23645 $x23639))))
(let ((@x24001 (unit-resolution @x23663 (lemma (unit-resolution @x23659 @x18183 (hypothesis $x23645) false) $x23648) $x23639)))
(let ((?x23546 (b_S_idx$ ?x22595 0 b_T_T_u1$)))
(let ((?x23547 (b_S_select_o_tm$ ?x10272 ?x23546)))
(let ((?x23548 (b_S_ts_n_emb$ ?x23547)))
(let (($x23549 (= ?x23548 ?x22595)))
(let (($x23554 (b_S_typed$ v_b_S_s$ ?x23546)))
(let (($x23555 (not $x23554)))
(let (($x23551 (b_S_ts_n_is_n_volatile$ ?x23547)))
(let (($x23550 (not $x23549)))
(let (($x23556 (or $x23550 $x23551 (not (b_S_ts_n_is_n_array_n_elt$ ?x23547)) $x23555)))
(let (($x23557 (not $x23556)))
(let (($x23538 (b_S_typed$ v_b_S_s$ ?x22595)))
(let ((@x23606 (mp @x12045 (symm (monotonicity @x23680 (= $x23538 $x10085)) (= $x10085 $x23538)) $x23538)))
(let ((@x23608 (lemma (unit-resolution (hypothesis (not $x23538)) @x23606 false) $x23538)))
(let (($x17964 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6905 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6897 (b_S_typemap$ ?v0)))
(let ((?x6899 (b_S_select_o_tm$ ?x6897 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6904 (b_S_ts_n_is_n_array_n_elt$ ?x6899)))
(let (($x17952 (or (not (= (b_S_ts_n_emb$ ?x6899) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1))) (b_S_ts_n_is_n_volatile$ ?x6899) (not $x6904) (not $x6905))))
(let (($x17953 (not $x17952)))
(let (($x4862 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x2815 (>= ?v4 0)))
(let (($x3763 (not $x2815)))
(or (not (b_S_typed$ ?v0 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1))) $x3763 $x4862 $x17953)))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!493))
))
(let (($x6943 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6905 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6897 (b_S_typemap$ ?v0)))
(let ((?x6899 (b_S_select_o_tm$ ?x6897 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6904 (b_S_ts_n_is_n_array_n_elt$ ?x6899)))
(let ((?x6894 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6901 (= (b_S_ts_n_emb$ ?x6899) ?x6894)))
(let (($x6937 (and $x6901 (not (b_S_ts_n_is_n_volatile$ ?x6899)) $x6904 $x6905)))
(let (($x4862 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x6603 (not $x4862)))
(let (($x2815 (>= ?v4 0)))
(let (($x6895 (b_S_typed$ ?v0 ?x6894)))
(let (($x6929 (and $x6895 $x2815 $x6603)))
(let (($x6934 (not $x6929)))
(or $x6934 $x6937)))))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!493))
))
(let (($x6905 (b_S_typed$ ?4 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?2 ?1) ?3) ?0 ?2))))
(let ((?x6897 (b_S_typemap$ ?4)))
(let ((?x6899 (b_S_select_o_tm$ ?x6897 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?2 ?1) ?3) ?0 ?2))))
(let (($x6904 (b_S_ts_n_is_n_array_n_elt$ ?x6899)))
(let (($x17952 (or (not (= (b_S_ts_n_emb$ ?x6899) (b_S_ptr$ (b_S_array$ ?2 ?1) ?3))) (b_S_ts_n_is_n_volatile$ ?x6899) (not $x6904) (not $x6905))))
(let (($x17953 (not $x17952)))
(let (($x4862 (>= (+ ?0 (* (- 1) ?1)) 0)))
(let (($x17959 (or (not (b_S_typed$ ?4 (b_S_ptr$ (b_S_array$ ?2 ?1) ?3))) $x3763 $x4862 $x17953)))
(let ((?x6894 (b_S_ptr$ (b_S_array$ ?2 ?1) ?3)))
(let (($x6901 (= (b_S_ts_n_emb$ ?x6899) ?x6894)))
(let (($x6937 (and $x6901 (not (b_S_ts_n_is_n_volatile$ ?x6899)) $x6904 $x6905)))
(let (($x6603 (not $x4862)))
(let (($x6895 (b_S_typed$ ?4 ?x6894)))
(let (($x6929 (and $x6895 $x2815 $x6603)))
(let (($x6934 (not $x6929)))
(let (($x6940 (or $x6934 $x6937)))
(let (($x17938 (or (not $x6895) $x3763 $x4862)))
(let ((@x17944 (monotonicity (rewrite (= $x6929 (not $x17938))) (= $x6934 (not (not $x17938))))))
(let ((@x17958 (monotonicity (trans @x17944 (rewrite (= (not (not $x17938)) $x17938)) (= $x6934 $x17938)) (rewrite (= $x6937 $x17953)) (= $x6940 (or $x17938 $x17953)))))
(let ((@x17966 (quant-intro (trans @x17958 (rewrite (= (or $x17938 $x17953) $x17959)) (= $x6940 $x17959)) (= $x6943 $x17964))))
(let (($x6917 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6905 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6897 (b_S_typemap$ ?v0)))
(let ((?x6899 (b_S_select_o_tm$ ?x6897 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6904 (b_S_ts_n_is_n_array_n_elt$ ?x6899)))
(let ((?x6894 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6901 (= (b_S_ts_n_emb$ ?x6899) ?x6894)))
(let (($x6908 (and $x6901 (and (not (b_S_ts_n_is_n_volatile$ ?x6899)) (and $x6904 $x6905)))))
(let (($x2766 (<= 0 ?v4)))
(let (($x6566 (and $x2766 (< ?v4 ?v3))))
(let (($x6895 (b_S_typed$ ?v0 ?x6894)))
(let (($x6896 (and $x6895 $x6566)))
(=> $x6896 $x6908)))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!493))
))
(let (($x6923 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6905 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6897 (b_S_typemap$ ?v0)))
(let ((?x6899 (b_S_select_o_tm$ ?x6897 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6904 (b_S_ts_n_is_n_array_n_elt$ ?x6899)))
(let ((?x6894 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6901 (= (b_S_ts_n_emb$ ?x6899) ?x6894)))
(let (($x6908 (and $x6901 (and (not (b_S_ts_n_is_n_volatile$ ?x6899)) (and $x6904 $x6905)))))
(let (($x2766 (<= 0 ?v4)))
(let (($x6566 (and $x2766 (< ?v4 ?v3))))
(let (($x6895 (b_S_typed$ ?v0 ?x6894)))
(let (($x6896 (and $x6895 $x6566)))
(or (not $x6896) $x6908)))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!493))
))
(let (($x6908 (and $x6901 (and (not (b_S_ts_n_is_n_volatile$ ?x6899)) (and $x6904 $x6905)))))
(let (($x6920 (or (not (and $x6895 (and $x2766 (< ?0 ?1)))) $x6908)))
(let (($x6566 (and $x2766 (< ?0 ?1))))
(let (($x6896 (and $x6895 $x6566)))
(let ((@x6608 (monotonicity @x2814 (rewrite (= (< ?0 ?1) $x6603)) (= $x6566 (and $x2815 $x6603)))))
(let ((@x6933 (trans (monotonicity @x6608 (= $x6896 (and $x6895 (and $x2815 $x6603)))) (rewrite (= (and $x6895 (and $x2815 $x6603)) $x6929)) (= $x6896 $x6929))))
(let ((@x6942 (monotonicity (monotonicity @x6933 (= (not $x6896) $x6934)) (rewrite (= $x6908 $x6937)) (= $x6920 $x6940))))
(let ((@x6947 (trans (quant-intro (rewrite (= (=> $x6896 $x6908) $x6920)) (= $x6917 $x6923)) (quant-intro @x6942 (= $x6923 $x6943)) (= $x6917 $x6943))))
(let ((@x14355 (mp~ (mp (asserted $x6917) @x6947 $x6943) (nnf-pos (refl (~ $x6940 $x6940)) (~ $x6943 $x6943)) $x6943)))
(let ((@x17967 (mp @x14355 @x17966 $x17964)))
(let (($x23539 (not $x23538)))
(let (($x23587 (not $x17964)))
(let (($x23588 (or $x23587 $x23539 $x11259 $x23557)))
(let (($x23558 (or $x23539 $x22599 $x22601 $x23557)))
(let (($x23589 (or $x23587 $x23558)))
(let ((@x23586 (trans (monotonicity @x22711 @x22706 (= $x23558 (or $x23539 false $x11259 $x23557))) (rewrite (= (or $x23539 false $x11259 $x23557) (or $x23539 $x11259 $x23557))) (= $x23558 (or $x23539 $x11259 $x23557)))))
(let ((@x23610 (trans (monotonicity @x23586 (= $x23589 (or $x23587 (or $x23539 $x11259 $x23557)))) (rewrite (= (or $x23587 (or $x23539 $x11259 $x23557)) $x23588)) (= $x23589 $x23588))))
(let ((@x23661 (unit-resolution (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ b_T_T_u1$ v_b_P_H_len$ 0) $x23589) @x23610 $x23588) @x17967 @x12041 @x23608 (hypothesis $x23556) false)))
(let ((@x23442 (hypothesis $x22506)))
(let ((@x23451 (symm @x23444 (= ?x22553 ?x10137))))
(let ((@x23449 (monotonicity (symm @x23445 (= v_b_P_H_arr$ ?x10079)) (= ?x10078 ?x22553))))
(let (($x21186 (= ?x21014 ?x10079)))
(let (($x21191 (or $x21152 $x21186)))
(let ((@x21192 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ ?x10078)) $x21191)))
(let ((@x23674 (trans (monotonicity @x23670 (= ?x23622 ?x21014)) (unit-resolution @x21192 @x19840 $x21186) (= ?x23622 ?x10079))))
(let ((@x23682 (trans @x23680 (unit-resolution @x22000 @x15336 @x12044 $x21990) (= ?x22595 ?x21983))))
(let ((@x23781 (trans (monotonicity @x23682 (= ?x23546 ?x23613)) (hypothesis $x23639) (= ?x23546 ?x23636))))
(let ((@x23782 (trans @x23781 (monotonicity (trans @x23674 @x23445 (= ?x23622 v_b_P_H_arr$)) (= ?x23636 ?x10078)) (= ?x23546 ?x10078))))
(let ((@x23785 (trans (trans (trans @x23782 @x23449 (= ?x23546 ?x22553)) @x23451 (= ?x23546 ?x10137)) @x23442 (= ?x23546 ?x22505))))
(let ((@x23787 (symm (monotonicity @x23785 (= ?x23547 (b_S_select_o_tm$ ?x10272 ?x22505))) (= (b_S_select_o_tm$ ?x10272 ?x22505) ?x23547))))
(let ((@x23788 (monotonicity @x23787 (= (b_S_ts_n_emb$ (b_S_select_o_tm$ ?x10272 ?x22505)) ?x23548))))
(let ((@x23704 (monotonicity (monotonicity @x23442 (= ?x22478 (b_S_select_o_tm$ ?x10272 ?x22505))) (= ?x22805 (b_S_ts_n_emb$ (b_S_select_o_tm$ ?x10272 ?x22505))))))
(let ((@x23790 (trans (trans @x23704 @x23788 (= ?x22805 ?x23548)) (unit-resolution (def-axiom (or $x23556 $x23549)) (lemma @x23661 $x23557) $x23549) (= ?x22805 ?x22595))))
(let ((@x23794 (trans (monotonicity (trans @x23790 @x23680 (= ?x22805 ?x10080)) (= ?x22433 ?x10082)) @x12043 $x22451)))
(let ((@x23797 (lemma (unit-resolution (hypothesis (not $x22451)) @x23794 false) (or $x23642 $x22451 (not $x22506)))))
(let ((@x24045 (unit-resolution (unit-resolution @x23797 @x24001 (or $x22451 (not $x22506))) @x23969 $x22451)))
(let ((?x22806 (b_S_typ$ ?x22805)))
(let ((?x22809 (b_S_kind_n_of$ ?x22806)))
(let (($x22810 (= ?x22809 b_S_kind_n_primitive$)))
(let (($x22807 (not $x22810)))
(let ((?x22655 (b_S_select_o_tm$ ?x10272 ?x22505)))
(let ((?x22658 (b_S_ts_n_emb$ ?x22655)))
(let ((?x22663 (b_S_typ$ ?x22658)))
(let ((?x22664 (b_S_kind_n_of$ ?x22663)))
(let (($x22665 (= ?x22664 b_S_kind_n_primitive$)))
(let ((@x22763 (monotonicity (monotonicity (symm @x23704 (= ?x22658 ?x22805)) (= ?x22663 ?x22806)) (= ?x22664 ?x22809))))
(let (($x22767 (not (or $x22665 (not (b_S_is_n_non_n_primitive$ ?x22663))))))
(let (($x19234 (forall ((?v0 B_S_type_n_state$) )(! (let (($x9543 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))) b_S_kind_n_primitive$)))
(let (($x19230 (or $x9543 (not (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?v0)))))))
(not $x19230))) :pattern ( (b_S_ts_n_emb$ ?v0) ) :qid k!618))
))
(let (($x9548 (forall ((?v0 B_S_type_n_state$) )(! (let (($x9543 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))) b_S_kind_n_primitive$)))
(and (not $x9543) (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))))) :pattern ( (b_S_ts_n_emb$ ?v0) ) :qid k!618))
))
(let (($x9543 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?0))) b_S_kind_n_primitive$)))
(let (($x19230 (or $x9543 (not (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?0)))))))
(let (($x9546 (and (not $x9543) (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?0))))))
(let ((@x15316 (mp~ (asserted $x9548) (nnf-pos (refl (~ $x9546 $x9546)) (~ $x9548 $x9548)) $x9548)))
(let ((@x19237 (mp @x15316 (quant-intro (rewrite (= $x9546 (not $x19230))) (= $x9548 $x19234)) $x19234)))
(let ((@x23507 (def-axiom (or (or $x22665 (not (b_S_is_n_non_n_primitive$ ?x22663))) (not $x22665)))))
(let ((@x23501 (unit-resolution @x23507 (unit-resolution ((_ quant-inst (b_S_select_o_tm$ ?x10272 ?x22505)) (or (not $x19234) $x22767)) @x19237 $x22767) (not $x22665))))
(let ((@x23573 (lemma (unit-resolution @x23501 (trans @x22763 (hypothesis $x22810) $x22665) false) (or $x22807 (not $x22506)))))
(let (($x22432 (not (or (not $x22602) (not (b_S_closed$ v_b_S_s$ ?x22805))))))
(let (($x22436 (= (b_S_kind_n_of$ ?x22514) b_S_kind_n_primitive$)))
(let (($x22427 (not $x22436)))
(let (($x22455 (or $x22427 $x22432 $x22810 (not (or $x22451 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x22805))))))
(let (($x22447 (or (= (b_S_owner$ v_b_S_s$ ?x10137) b_S_me$) (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x10137))))
(let (($x22456 (not $x22455)))
(let (($x22463 (not (or $x22456 (not (or $x22436 (not $x22447)))))))
(let (($x22464 (or $x15505 $x22463)))
(let (($x22465 (not $x22464)))
(let (($x22466 (= $x10141 $x22465)))
(let (($x19072 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x9039 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x9020 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x9024 (b_S_ts_n_emb$ ?x9020)))
(let (($x9035 (or (= (b_S_owner$ ?v0 ?x9024) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x9024))))
(let (($x9022 (b_S_ts_n_is_n_volatile$ ?x9020)))
(let (($x9023 (not $x9022)))
(let (($x9027 (or $x9023 (not (b_S_closed$ ?v0 ?x9024)))))
(let (($x2294 (not $x2249)))
(let (($x19047 (or $x2294 (not $x9027) (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$) (not $x9035))))
(let (($x19056 (or (not $x19047) (not (or $x2249 (not (or $x2486 $x9039)))))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9531 (not $x2488)))
(let (($x19064 (not (or $x9531 (not $x19056)))))
(let (($x9019 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x9019 $x19064))))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!583))
))
(let (($x9066 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x9039 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9041 (and $x2294 (or $x2486 $x9039))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x9020 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x9024 (b_S_ts_n_emb$ ?x9020)))
(let (($x9035 (or (= (b_S_owner$ ?v0 ?x9024) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x9024))))
(let (($x9022 (b_S_ts_n_is_n_volatile$ ?x9020)))
(let (($x9023 (not $x9022)))
(let (($x9027 (or $x9023 (not (b_S_closed$ ?v0 ?x9024)))))
(let (($x9054 (and $x2249 $x9027 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$)) $x9035)))
(let (($x9057 (or $x9054 $x9041)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9060 (and $x2488 $x9057)))
(let (($x9019 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x9019 $x9060))))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!583))
))
(let ((?x2769 (b_S_typemap$ ?1)))
(let ((?x9020 (b_S_select_o_tm$ ?x2769 ?0)))
(let ((?x9024 (b_S_ts_n_emb$ ?x9020)))
(let (($x9035 (or (= (b_S_owner$ ?1 ?x9024) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?1 ?x9024))))
(let (($x9022 (b_S_ts_n_is_n_volatile$ ?x9020)))
(let (($x9023 (not $x9022)))
(let (($x9027 (or $x9023 (not (b_S_closed$ ?1 ?x9024)))))
(let (($x19047 (or $x2294 (not $x9027) (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$) (not $x9035))))
(let (($x19056 (or (not $x19047) (not (or $x2249 (not (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0))))))))
(let (($x19064 (not (or $x9531 (not $x19056)))))
(let (($x9019 (b_S_thread_n_local$ ?1 ?0)))
(let (($x9041 (and $x2294 (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0)))))
(let (($x9054 (and $x2249 $x9027 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$)) $x9035)))
(let (($x9057 (or $x9054 $x9041)))
(let (($x9060 (and $x2488 $x9057)))
(let (($x9063 (= $x9019 $x9060)))
(let (($x19054 (= $x9041 (not (or $x2249 (not (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0))))))))
(let ((@x19058 (monotonicity (rewrite (= $x9054 (not $x19047))) (rewrite $x19054) (= $x9057 $x19056))))
(let ((@x19068 (trans (monotonicity @x19058 (= $x9060 (and $x2488 $x19056))) (rewrite (= (and $x2488 $x19056) $x19064)) (= $x9060 $x19064))))
(let ((@x19074 (quant-intro (monotonicity @x19068 (= $x9063 (= $x9019 $x19064))) (= $x9066 $x19072))))
(let (($x9046 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x9039 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9041 (and $x2294 (or $x2486 $x9039))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x9020 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x9024 (b_S_ts_n_emb$ ?x9020)))
(let (($x9035 (or (= (b_S_owner$ ?v0 ?x9024) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x9024))))
(let (($x9036 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$)) $x9035)))
(let (($x9022 (b_S_ts_n_is_n_volatile$ ?x9020)))
(let (($x9023 (not $x9022)))
(let (($x9027 (or $x9023 (not (b_S_closed$ ?v0 ?x9024)))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9043 (and $x2488 (or (and $x2249 (and $x9027 $x9036)) $x9041))))
(let (($x9019 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x9019 $x9043)))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!583))
))
(let (($x9051 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x9039 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9041 (and $x2294 (or $x2486 $x9039))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x9020 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x9024 (b_S_ts_n_emb$ ?x9020)))
(let (($x9035 (or (= (b_S_owner$ ?v0 ?x9024) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x9024))))
(let (($x9036 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$)) $x9035)))
(let (($x9022 (b_S_ts_n_is_n_volatile$ ?x9020)))
(let (($x9023 (not $x9022)))
(let (($x9027 (or $x9023 (not (b_S_closed$ ?v0 ?x9024)))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9043 (and $x2488 (or (and $x2249 (and $x9027 $x9036)) $x9041))))
(let (($x9019 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x9019 $x9043)))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!583))
))
(let (($x9036 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x9024)) b_S_kind_n_primitive$)) $x9035)))
(let (($x9043 (and $x2488 (or (and $x2249 (and $x9027 $x9036)) $x9041))))
(let (($x9048 (= $x9019 $x9043)))
(let ((@x9059 (monotonicity (rewrite (= (and $x2249 (and $x9027 $x9036)) $x9054)) (= (or (and $x2249 (and $x9027 $x9036)) $x9041) $x9057))))
(let ((@x9068 (quant-intro (monotonicity (monotonicity @x9059 (= $x9043 $x9060)) (= $x9048 $x9063)) (= $x9051 $x9066))))
(let ((@x9070 (trans (quant-intro (rewrite (= (= $x9019 $x9043) $x9048)) (= $x9046 $x9051)) @x9068 (= $x9046 $x9066))))
(let ((@x15111 (mp~ (mp (asserted $x9046) @x9070 $x9066) (nnf-pos (refl (~ $x9063 $x9063)) (~ $x9066 $x9066)) $x9066)))
(let ((@x19075 (mp @x15111 @x19074 $x19072)))
(let ((@x22884 (unit-resolution (def-axiom (or (not $x22466) $x10141 $x22464)) (hypothesis $x15511) (or (not $x22466) $x22464))))
(let ((@x22831 (unit-resolution @x22884 (unit-resolution ((_ quant-inst v_b_S_s$ (b_S_idx$ ?x10078 0 b_T_T_u1$)) (or (not $x19072) $x22466)) @x19075 $x22466) $x22464)))
(let ((@x23475 (unit-resolution (def-axiom (or $x22465 $x15505 $x22463)) (hypothesis $x10139) (or $x22465 $x22463))))
(let ((@x22517 (unit-resolution (def-axiom (or (or $x22456 (not (or $x22436 (not $x22447)))) $x22455)) (unit-resolution @x23475 @x22831 $x22463) $x22455)))
(let ((?x21472 (b_S_kind_n_of$ b_T_T_u1$)))
(let (($x21473 (= ?x21472 b_S_kind_n_primitive$)))
(let (($x21480 (= $x9768 $x21473)))
(let (($x9891 (forall ((?v0 B_S_ctype$) )(! (let ((?x9849 (b_S_kind_n_of$ ?v0)))
(let (($x9883 (= ?x9849 b_S_kind_n_primitive$)))
(let (($x2704 (b_S_is_n_primitive$ ?v0)))
(= $x2704 $x9883)))) :pattern ( (b_S_is_n_primitive$ ?v0) ) :qid k!664))
))
(let (($x9883 (= ?x9849 b_S_kind_n_primitive$)))
(let (($x9888 (= $x2704 $x9883)))
(let (($x9886 (forall ((?v0 B_S_ctype$) )(! (let ((?x9849 (b_S_kind_n_of$ ?v0)))
(let (($x9883 (= ?x9849 b_S_kind_n_primitive$)))
(let (($x2704 (b_S_is_n_primitive$ ?v0)))
(= $x2704 $x9883)))) :pattern ( (b_S_is_n_primitive$ ?v0) ) :qid k!664))
))
(let ((@x9896 (mp (asserted $x9886) (quant-intro (rewrite (= (= $x2704 $x9883) $x9888)) (= $x9886 $x9891)) $x9891)))
(let ((@x15456 (mp~ @x9896 (nnf-pos (refl (~ $x9888 $x9888)) (~ $x9891 $x9891)) $x9891)))
(let (($x21224 (not $x9891)))
(let (($x21483 (or $x21224 $x21480)))
(let ((@x21484 ((_ quant-inst b_T_T_u1$) $x21483)))
(let ((@x22996 (unit-resolution (def-axiom (or (not $x21480) $x21489 $x21473)) @x9769 (or (not $x21480) $x21473))))
(let ((@x22988 (unit-resolution (def-axiom (or (not $x22522) $x15502 $x22515)) @x23411 (or (not $x22522) $x22515))))
(let ((@x22744 (monotonicity (unit-resolution @x22988 (unit-resolution @x22534 @x19833 $x22522) $x22515) (= (b_S_kind_n_of$ ?x22514) ?x21472))))
(let ((@x23400 (trans @x22744 (unit-resolution @x22996 (unit-resolution @x21484 @x15456 $x21480) $x21473) $x22436)))
(let (($x22453 (or $x22451 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x22805))))
(let ((@x23008 (unit-resolution (def-axiom (or $x22453 (not $x22451))) (hypothesis $x22451) $x22453)))
(let ((@x23085 (unit-resolution (def-axiom (or $x22456 $x22427 $x22432 $x22810 (not $x22453))) (hypothesis $x22807) @x23008 (or $x22456 $x22427 $x22432))))
(let ((@x22334 (def-axiom (or (or (not $x22602) (not (b_S_closed$ v_b_S_s$ ?x22805))) $x22602))))
(let ((@x23029 (unit-resolution (def-axiom (or $x22603 (not $x22602))) (unit-resolution @x22334 (unit-resolution @x23085 @x23400 @x22517 $x22432) $x22602) $x22603)))
(let ((@x23005 (unit-resolution (unit-resolution @x22512 @x18948 $x22366) (unit-resolution @x23561 (mp (hypothesis $x10136) @x23563 $x22317) @x22990 $x22318) $x22365)))
(let ((@x23505 (unit-resolution @x23490 @x18670 @x9769 @x12041 @x12050 (mp (unit-resolution @x22487 @x23005 $x22344) @x23502 $x22596) @x23029 false)))
(let ((@x24068 (unit-resolution (lemma @x23505 (or $x11221 $x22810 $x15505 $x10141 (not $x22451))) @x22508 (or $x22810 $x15505 $x10141 (not $x22451)))))
(let ((@x24055 (unit-resolution @x24068 (unit-resolution @x23573 @x23969 $x22807) (unit-resolution (def-axiom (or $x22603 $x10139)) (lemma @x24453 $x22604) $x10139) @x24045 $x10141)))
(let ((@x24059 (unit-resolution (def-axiom (or $x20119 $x15502 $x15511 $x20113)) @x23411 (or $x20119 $x15511 $x20113))))
(let ((@x23997 (unit-resolution @x24059 @x24055 (unit-resolution (def-axiom (or $x20122 $x20116)) @x23983 $x20116) $x20113)))
(let ((@x23272 (mp (hypothesis $x10145) (symm (commutativity (= $x10167 $x10145)) (= $x10145 $x10167)) $x10167)))
(let ((@x24048 (unit-resolution (lemma (unit-resolution (hypothesis $x15548) @x23272 false) (or $x19724 $x10167)) (unit-resolution (def-axiom (or $x20110 $x10145)) @x23997 $x10145) $x10167)))
(let ((@x24123 (unit-resolution (def-axiom (or $x20107 $x11385 $x20101)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x11259 $x11382)) @x12041 $x11382) (or $x20107 $x20101))))
(let ((@x24138 (unit-resolution @x24123 (unit-resolution (def-axiom (or $x20110 $x20104)) @x23997 $x20104) $x20101)))
(let ((?x22963 (* (- 1) ?x10144)))
(let ((?x22964 (+ v_b_L_H_max_G_0$ ?x22963)))
(let (($x22965 (>= ?x22964 0)))
(let ((@x24119 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19724 $x22965)) (unit-resolution (def-axiom (or $x20110 $x10145)) @x23997 $x10145) $x22965)))
(let ((@x24012 (hypothesis $x19318)))
(let ((@x24017 ((_ th-lemma arith eq-propagate 0 0) (unit-resolution (def-axiom (or $x19313 $x15523)) @x24012 $x15523) (unit-resolution (def-axiom (or $x19313 (not $x15525))) @x24012 (not $x15525)) (= ?v0!13 0))))
(let ((@x24022 (symm (monotonicity (monotonicity @x24017 (= ?x15529 ?x10137)) (= ?x15530 ?x10144)) (= ?x10144 ?x15530))))
(let ((@x24026 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x10144 ?x15530)) (>= (+ ?x10144 ?x15531) 0))) @x24022 (>= (+ ?x10144 ?x15531) 0))))
(let ((@x24027 ((_ th-lemma arith farkas 1 -1 1) @x24026 (unit-resolution (def-axiom (or $x19313 (not $x15533))) @x24012 (not $x15533)) (hypothesis $x22965) false)))
(let ((@x24121 (unit-resolution (def-axiom (or $x20095 $x19318 $x20089)) (unit-resolution (lemma @x24027 (or $x19313 (not $x22965))) @x24119 $x19313) (unit-resolution (def-axiom (or $x20098 $x20092)) @x24138 $x20092) $x20089)))
(let ((@x24141 (unit-resolution (def-axiom (or $x20083 $x11259 $x15548 $x20077)) @x12041 (or $x20083 $x15548 $x20077))))
(let ((@x24113 (unit-resolution @x24141 (unit-resolution (def-axiom (or $x20086 $x20080)) @x24121 $x20080) @x24048 $x20077)))
(let ((@x24140 (unit-resolution (def-axiom (or $x20074 $x11901)) @x24113 $x11901)))
(let (($x23088 (= v_b_L_H_max_G_1$ v_b_S_result_G_0$)))
(let ((@x9231 (asserted b_S_position_n_marker$)))
(let ((@x23316 (unit-resolution (unit-resolution (def-axiom (or $x20059 $x15729 $x20053)) @x9231 (or $x20059 $x20053)) (unit-resolution (def-axiom (or $x20062 $x20056)) (hypothesis $x20065) $x20056) $x20053)))
(let (($x23320 (or (not $x23088) (<= (+ v_b_L_H_max_G_1$ (* (- 1) v_b_S_result_G_0$)) 0))))
(let ((@x23322 (unit-resolution ((_ th-lemma arith triangle-eq) $x23320) (symm (unit-resolution (def-axiom (or $x20050 $x10222)) @x23316 $x10222) $x23088) (<= (+ v_b_L_H_max_G_1$ (* (- 1) v_b_S_result_G_0$)) 0))))
(let ((@x23180 (hypothesis $x11868)))
(let ((@x23177 (trans (hypothesis $x10192) (symm (hypothesis $x10222) $x23088) (= ?x10191 v_b_S_result_G_0$))))
(let (($x23140 (not (= ?x10191 v_b_S_result_G_0$))))
(let (($x23145 (or $x20035 $x19501 $x19669 $x11867 $x23140)))
(let (($x23036 (>= (+ v_b_SL_H_witness_G_0$ ?x11246) 0)))
(let (($x23141 (or $x19501 $x19669 $x23036 $x23140)))
(let (($x23146 (or $x20035 $x23141)))
(let ((@x23042 (rewrite (= (+ v_b_SL_H_witness_G_0$ ?x11246) (+ ?x11246 v_b_SL_H_witness_G_0$)))))
(let ((@x23045 (monotonicity @x23042 (= $x23036 (>= (+ ?x11246 v_b_SL_H_witness_G_0$) 0)))))
(let ((@x23049 (trans @x23045 (rewrite (= (>= (+ ?x11246 v_b_SL_H_witness_G_0$) 0) $x11867)) (= $x23036 $x11867))))
(let ((@x23150 (monotonicity (monotonicity @x23049 (= $x23141 (or $x19501 $x19669 $x11867 $x23140))) (= $x23146 (or $x20035 (or $x19501 $x19669 $x11867 $x23140))))))
(let ((@x23154 (trans @x23150 (rewrite (= (or $x20035 (or $x19501 $x19669 $x11867 $x23140)) $x23145)) (= $x23146 $x23145))))
(let ((@x23182 (unit-resolution (mp ((_ quant-inst v_b_SL_H_witness_G_0$) $x23146) @x23154 $x23145) (hypothesis $x13315) @x23180 (hypothesis $x11432) (hypothesis $x20030) @x23177 false)))
(let ((@x23324 (unit-resolution (lemma @x23182 (or $x20035 $x19669 $x11867 $x19501 $x19674 $x19640)) (unit-resolution (def-axiom (or $x20050 $x10222)) @x23316 $x10222) @x23180 (hypothesis $x11432) (hypothesis $x10192) (hypothesis $x13315) $x20035)))
(let ((@x23326 (unit-resolution (def-axiom (or $x20047 $x19580 $x20041)) (unit-resolution (def-axiom (or $x20038 $x20030)) @x23324 $x20038) (unit-resolution (def-axiom (or $x20050 $x20044)) @x23316 $x20044) $x19580)))
(let (($x23188 (>= (+ v_b_L_H_max_G_1$ ?x16029) 0)))
(let (($x23310 (or (not (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)) $x16009 $x11487)))
(let ((@x23308 ((_ th-lemma arith farkas -1 1 1) (hypothesis $x16014) (hypothesis (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)) (hypothesis $x11486) false)))
(let ((@x23330 (unit-resolution (lemma @x23308 $x23310) (unit-resolution (def-axiom (or $x19575 $x16014)) @x23326 $x16014) (unit-resolution (def-axiom (or $x20062 $x11486)) (hypothesis $x20065) $x11486) (not (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)))))
(let ((@x23333 (hypothesis $x19898)))
(let (($x23168 (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)))
(let (($x23196 (or $x19903 $x19559 $x19560 $x23168 $x23188)))
(let (($x23134 (<= (+ ?x15744 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x23114 (>= (+ ?v0!15 ?x11484) 0)))
(let (($x23135 (or $x19559 $x19560 $x23114 $x23134)))
(let (($x23197 (or $x19903 $x23135)))
(let (($x23173 (= (+ ?x15744 (* (- 1) v_b_L_H_max_G_1$)) (+ (* (- 1) v_b_L_H_max_G_1$) ?x15744))))
(let ((@x23186 (monotonicity (rewrite $x23173) (= $x23134 (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15744) 0)))))
(let ((@x23192 (trans @x23186 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15744) 0) $x23188)) (= $x23134 $x23188))))
(let ((@x23166 (monotonicity (rewrite (= (+ ?v0!15 ?x11484) (+ ?x11484 ?v0!15))) (= $x23114 (>= (+ ?x11484 ?v0!15) 0)))))
(let ((@x23171 (trans @x23166 (rewrite (= (>= (+ ?x11484 ?v0!15) 0) $x23168)) (= $x23114 $x23168))))
(let ((@x23201 (monotonicity (monotonicity @x23171 @x23192 (= $x23135 (or $x19559 $x19560 $x23168 $x23188))) (= $x23197 (or $x19903 (or $x19559 $x19560 $x23168 $x23188))))))
(let ((@x23205 (trans @x23201 (rewrite (= (or $x19903 (or $x19559 $x19560 $x23168 $x23188)) $x23196)) (= $x23197 $x23196))))
(let ((@x23335 (unit-resolution (mp ((_ quant-inst ?v0!15) $x23197) @x23205 $x23196) @x23333 (unit-resolution (def-axiom (or $x19575 $x15736)) @x23326 $x15736) (unit-resolution (def-axiom (or $x19575 $x15737)) @x23326 $x15737) (or $x23168 $x23188))))
(let ((@x23337 ((_ th-lemma arith farkas -1 1 1) (unit-resolution @x23335 @x23330 $x23188) (unit-resolution (def-axiom (or $x19575 (not $x16031))) @x23326 (not $x16031)) @x23322 false)))
(let ((@x24129 (unit-resolution (lemma @x23337 (or $x20062 $x19903 $x11867 $x19501 $x19674 $x19669)) (unit-resolution (def-axiom (or $x20074 $x19898)) @x24113 $x19898) (unit-resolution (def-axiom (or $x20074 $x11868)) @x24113 $x11868) (unit-resolution (def-axiom (or $x20074 $x11432)) @x24113 $x11432) (unit-resolution (def-axiom (or $x20074 $x10192)) @x24113 $x10192) (unit-resolution (def-axiom (or $x20074 $x13315)) @x24113 $x13315) $x20062)))
(let ((@x20858 (def-axiom (or $x20071 $x20019 $x20065))))
(let ((@x24135 (unit-resolution @x20858 (unit-resolution (def-axiom (or $x20074 $x20068)) @x24113 $x20068) @x24129 $x20019)))
(let ((@x24136 (unit-resolution (def-axiom (or $x20016 $x11487)) @x24135 $x11487)))
(let ((@x23427 (hypothesis $x11487)))
(let (($x24307 (or $x23587 $x23539 $x19670 $x11486 $x24616)))
(let (($x23367 (>= (+ v_b_L_H_p_G_0$ ?x11246) 0)))
(let (($x24617 (or $x23539 $x19670 $x23367 $x24616)))
(let (($x24303 (or $x23587 $x24617)))
(let ((@x23377 (monotonicity (rewrite (= (+ v_b_L_H_p_G_0$ ?x11246) (+ ?x11246 v_b_L_H_p_G_0$))) (= $x23367 (>= (+ ?x11246 v_b_L_H_p_G_0$) 0)))))
(let ((@x23381 (trans @x23377 (rewrite (= (>= (+ ?x11246 v_b_L_H_p_G_0$) 0) $x11486)) (= $x23367 $x11486))))
(let ((@x24641 (monotonicity (monotonicity @x23381 (= $x24617 (or $x23539 $x19670 $x11486 $x24616))) (= $x24303 (or $x23587 (or $x23539 $x19670 $x11486 $x24616))))))
(let ((@x24645 (trans @x24641 (rewrite (= (or $x23587 (or $x23539 $x19670 $x11486 $x24616)) $x24307)) (= $x24303 $x24307))))
(let ((@x24637 (unit-resolution (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ b_T_T_u1$ v_b_P_H_len$ v_b_L_H_p_G_0$) $x24303) @x24645 $x24307) @x17967 (hypothesis $x11901) @x23427 @x23608 (hypothesis $x24615) false)))
(let ((@x24149 (unit-resolution (def-axiom (or $x24615 $x24606)) (unit-resolution (lemma @x24637 (or $x24616 $x19670 $x11486)) @x24136 @x24140 $x24616) $x24606)))
(let ((?x24147 (b_S_ref$ ?x10320)))
(let ((?x24169 (b_S_ptr$ b_T_T_u1$ ?x24147)))
(let ((?x24320 (b_S_select_o_tm$ ?x10272 ?x24169)))
(let ((?x24323 (b_S_ts_n_emb$ ?x24320)))
(let ((?x24331 (b_S_owner$ v_b_S_s$ ?x24323)))
(let (($x24332 (= ?x24331 b_S_me$)))
(let (($x24385 (not $x24332)))
(let ((?x23162 (b_S_select_o_tm$ ?x10272 ?x10320)))
(let (($x23368 (b_S_ts_n_is_n_volatile$ ?x23162)))
(let (($x23369 (or $x15593 $x23368)))
(let (($x23370 (not $x23369)))
(let (($x23385 (or $x22629 $x19677 $x21489 $x22597 $x19670 $x11486 $x23370)))
(let (($x23371 (or $x19677 $x21489 $x22597 $x19670 $x23367 $x23370)))
(let (($x23386 (or $x22629 $x23371)))
(let ((@x23390 (monotonicity (monotonicity @x23381 (= $x23371 (or $x19677 $x21489 $x22597 $x19670 $x11486 $x23370))) (= $x23386 (or $x22629 (or $x19677 $x21489 $x22597 $x19670 $x11486 $x23370))))))
(let ((@x23394 (trans @x23390 (rewrite (= (or $x22629 (or $x19677 $x21489 $x22597 $x19670 $x11486 $x23370)) $x23385)) (= $x23386 $x23385))))
(let ((@x23429 (unit-resolution (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ (b_S_ptr$ ?x10076 ?x21014) v_b_P_H_len$ v_b_L_H_p_G_0$ b_T_T_u1$) $x23386) @x23394 $x23385) @x18670 @x9769 @x12050 (hypothesis $x11901) @x23427 (hypothesis $x22596) (hypothesis $x23369) false)))
(let ((@x24150 (unit-resolution (lemma @x23429 (or $x23370 $x19670 $x11486 $x22597)) (mp (unit-resolution @x22487 @x24112 $x22344) @x23502 $x22596) (or $x23370 $x19670 $x11486))))
(let ((@x24176 (unit-resolution (def-axiom (or $x23369 $x10322)) (unit-resolution @x24150 @x24136 @x24140 $x23370) $x10322)))
(let ((?x23294 (b_S_typ$ ?x10320)))
(let (($x23295 (= ?x23294 b_T_T_u1$)))
(let ((?x23287 (* ?x10045 v_b_L_H_p_G_0$)))
(let ((?x22911 (b_S_ref$ ?x22505)))
(let ((?x23291 (+ ?x22911 ?x23287)))
(let ((?x23296 (b_S_ptr$ b_T_T_u1$ ?x23291)))
(let ((?x23403 (b_S_typ$ ?x23296)))
(let (($x23404 (= ?x23403 b_T_T_u1$)))
(let ((?x23276 (b_S_idx$ ?x22505 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let (($x23115 (= ?x23276 ?x23296)))
(let (($x23222 (or (not (b_S_extent_n_hint$ ?x23276 ?x22505)) (not $x23115))))
(let (($x23225 (not $x23222)))
(let (($x23355 (or $x22568 $x23225)))
(let (($x23293 (not (= ?x23276 (b_S_ptr$ b_T_T_u1$ (+ ?x22911 (* v_b_L_H_p_G_0$ ?x10045)))))))
(let (($x23289 (not (or (not (b_S_extent_n_hint$ ?x23276 ?x22505)) $x23293))))
(let (($x23129 (= (= ?x23276 (b_S_ptr$ b_T_T_u1$ (+ ?x22911 (* v_b_L_H_p_G_0$ ?x10045)))) $x23115)))
(let ((@x23250 (rewrite (= (* v_b_L_H_p_G_0$ ?x10045) ?x23287))))
(let ((@x23130 (monotonicity (monotonicity @x23250 (= (+ ?x22911 (* v_b_L_H_p_G_0$ ?x10045)) ?x23291)) (= (b_S_ptr$ b_T_T_u1$ (+ ?x22911 (* v_b_L_H_p_G_0$ ?x10045))) ?x23296))))
(let ((@x23224 (monotonicity (monotonicity (monotonicity @x23130 $x23129) (= $x23293 (not $x23115))) (= (or (not (b_S_extent_n_hint$ ?x23276 ?x22505)) $x23293) $x23222))))
(let ((@x23359 (monotonicity (monotonicity @x23224 (= $x23289 $x23225)) (= (or $x22568 $x23289) $x23355))))
(let ((@x23348 (mp ((_ quant-inst (b_S_ptr$ b_T_T_u1$ ?x22485) v_b_L_H_p_G_0$ b_T_T_u1$) (or $x22568 $x23289)) (trans @x23359 (rewrite (= $x23355 $x23355)) (= (or $x22568 $x23289) $x23355)) $x23355)))
(let ((@x23441 (unit-resolution (def-axiom (or $x23222 $x23115)) (unit-resolution @x23348 @x18183 $x23225) $x23115)))
(let ((@x23457 (monotonicity (trans (trans @x23449 @x23451 (= ?x10078 ?x10137)) @x23442 (= ?x10078 ?x22505)) (= ?x10320 ?x23276))))
(let ((@x23462 (trans (monotonicity (trans @x23457 @x23441 (= ?x10320 ?x23296)) (= ?x23294 ?x23403)) (unit-resolution ((_ quant-inst b_T_T_u1$ (+ ?x22911 ?x23287)) (or $x21147 $x23404)) @x19846 $x23404) $x23295)))
(let (($x23298 (not $x23295)))
(let (($x23297 (= $x10321 $x23295)))
(let ((@x23437 (unit-resolution (def-axiom (or (not $x23297) $x10321 $x23298)) (hypothesis $x15590) (or (not $x23297) $x23298))))
(let ((@x23438 (unit-resolution @x23437 (unit-resolution ((_ quant-inst (b_S_idx$ ?x10078 v_b_L_H_p_G_0$ b_T_T_u1$) b_T_T_u1$) (or $x22002 $x23297)) @x19833 $x23297) $x23298)))
(let ((@x24166 (unit-resolution (lemma (unit-resolution @x23438 @x23462 false) (or $x10321 (not $x22506))) @x23969 $x10321)))
(let (($x23397 (not $x23368)))
(let ((@x24155 (unit-resolution (def-axiom (or $x23369 $x23397)) (unit-resolution @x24150 @x24136 @x24140 $x23370) $x23397)))
(let (($x13277 (<= v_b_P_H_len$ 4294967295)))
(let ((@x13276 (monotonicity (monotonicity @x6446 (= (+ b_S_max_o_u4$ ?x11246) (+ 4294967295 ?x11246))) (= $x11245 (>= (+ 4294967295 ?x11246) 0)))))
(let ((@x13281 (trans @x13276 (rewrite (= (>= (+ 4294967295 ?x11246) 0) $x13277)) (= $x11245 $x13277))))
(let ((@x13282 (mp (and-elim @x12033 $x11245) @x13281 $x13277)))
(let ((@x24996 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x13353 (not $x13277) $x11486)) @x13282 (or $x13353 $x11486))))
(let ((@x24971 (hypothesis $x11570)))
(let ((@x25230 (hypothesis $x10322)))
(let ((@x24666 (hypothesis $x10321)))
(let ((@x25234 (unit-resolution @x20858 (unit-resolution (def-axiom (or $x20074 $x20068)) (hypothesis $x20077) $x20068) (unit-resolution (def-axiom (or $x20062 $x11486)) @x23427 $x20062) $x20019)))
(let ((@x20784 (def-axiom (or $x20013 $x15590 $x15593 $x20007))))
(let ((@x25236 (unit-resolution @x20784 (unit-resolution (def-axiom (or $x20016 $x20010)) @x25234 $x20010) @x24666 @x25230 $x20007)))
(let (($x24170 (= ?x10320 ?x24169)))
(let ((@x24159 (mp ((_ quant-inst (b_S_idx$ ?x10078 v_b_L_H_p_G_0$ b_T_T_u1$) b_T_T_u1$) (or $x21994 (or $x15590 $x24170))) (rewrite (= (or $x21994 (or $x15590 $x24170)) (or $x21994 $x15590 $x24170))) (or $x21994 $x15590 $x24170))))
(let ((@x25240 (unit-resolution (def-axiom (or (not $x23297) $x15590 $x23295)) @x24666 (or (not $x23297) $x23295))))
(let ((@x25241 (unit-resolution @x25240 (unit-resolution ((_ quant-inst (b_S_idx$ ?x10078 v_b_L_H_p_G_0$ b_T_T_u1$) b_T_T_u1$) (or $x22002 $x23297)) @x19833 $x23297) $x23295)))
(let (($x24314 (b_S_typed$ v_b_S_s$ ?x24169)))
(let ((@x25244 (mp @x25230 (monotonicity (unit-resolution @x24159 @x15336 @x24666 $x24170) (= $x10322 $x24314)) $x24314)))
(let (($x24341 (or (= (b_S_owner$ v_b_S_s$ ?x24169) b_S_me$) (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x24169))))
(let (($x24318 (= (b_S_kind_n_of$ (b_S_typ$ ?x24169)) b_S_kind_n_primitive$)))
(let (($x24330 (= (b_S_kind_n_of$ (b_S_typ$ ?x24323)) b_S_kind_n_primitive$)))
(let (($x24321 (b_S_ts_n_is_n_volatile$ ?x24320)))
(let (($x24322 (not $x24321)))
(let (($x24326 (or $x24322 (not (b_S_closed$ v_b_S_s$ ?x24323)))))
(let (($x24327 (not $x24326)))
(let (($x24319 (not $x24318)))
(let (($x24336 (or $x24319 $x24327 $x24330 (not (or $x24332 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x24323))))))
(let (($x24337 (not $x24336)))
(let (($x24346 (not (or $x24337 (not (or $x24318 (not $x24341)))))))
(let (($x24315 (not $x24314)))
(let (($x24347 (or $x24315 $x24346)))
(let (($x24348 (not $x24347)))
(let (($x24313 (b_S_thread_n_local$ v_b_S_s$ ?x24169)))
(let (($x24349 (= $x24313 $x24348)))
(let ((@x24281 (symm (monotonicity (symm (hypothesis $x24170) (= ?x24169 ?x10320)) (= $x24313 $x10324)) (= $x10324 $x24313))))
(let ((@x24575 (mp (hypothesis $x15599) (monotonicity @x24281 (= $x15599 (not $x24313))) (not $x24313))))
(let ((@x24566 (unit-resolution (def-axiom (or (not $x24349) $x24313 $x24347)) @x24575 (unit-resolution ((_ quant-inst v_b_S_s$ (b_S_ptr$ b_T_T_u1$ ?x24147)) (or (not $x19072) $x24349)) @x19075 $x24349) $x24347)))
(let ((@x24590 (unit-resolution (def-axiom (or $x24348 $x24315 $x24346)) (hypothesis $x24314) (or $x24348 $x24346))))
(let ((@x24603 (monotonicity (symm (hypothesis $x24170) (= ?x24169 ?x10320)) (= (b_S_typ$ ?x24169) ?x23294))))
(let ((@x24647 (monotonicity (trans @x24603 (hypothesis $x23295) (= (b_S_typ$ ?x24169) b_T_T_u1$)) (= (b_S_kind_n_of$ (b_S_typ$ ?x24169)) ?x21472))))
(let ((@x24650 (trans @x24647 (unit-resolution @x22996 (unit-resolution @x21484 @x15456 $x21480) $x21473) $x24318)))
(let ((@x24633 (monotonicity (symm (monotonicity (hypothesis $x24170) (= ?x23162 ?x24320)) (= ?x24320 ?x23162)) (= $x24321 $x23368))))
(let ((@x24657 (mp (hypothesis $x23397) (monotonicity (symm @x24633 (= $x23368 $x24321)) (= $x23397 $x24322)) $x24322)))
(let (($x24333 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x24323)))
(let (($x24334 (or $x24332 $x24333)))
(let ((?x24328 (b_S_typ$ ?x24323)))
(let (($x24480 (b_S_is_n_non_n_primitive$ ?x24328)))
(let (($x24481 (not $x24480)))
(let (($x24364 (or $x24330 $x24481)))
(let (($x24365 (not $x24364)))
(let ((@x24467 (unit-resolution ((_ quant-inst (b_S_select_o_tm$ ?x10272 ?x24169)) (or (not $x19234) $x24365)) @x19237 (hypothesis $x24364) false)))
(let ((@x24663 (unit-resolution (def-axiom (or $x24364 (not $x24330))) (lemma @x24467 $x24365) (not $x24330))))
(let ((@x24661 (unit-resolution (def-axiom (or $x24337 $x24319 $x24327 $x24330 (not $x24334))) @x24663 (unit-resolution (def-axiom (or $x24334 $x24385)) (hypothesis $x24332) $x24334) (or $x24337 $x24319 $x24327))))
(let ((@x24785 (unit-resolution @x24661 (unit-resolution (def-axiom (or $x24326 $x24321)) @x24657 $x24326) @x24650 $x24337)))
(let ((@x24756 (unit-resolution (def-axiom (or (or $x24337 (not (or $x24318 (not $x24341)))) $x24336)) @x24785 (unit-resolution @x24590 @x24566 $x24346) false)))
(let ((@x25245 (unit-resolution (lemma @x24756 (or $x10324 $x24315 $x23298 (not $x24170) $x23368 $x24385)) @x25244 @x25241 (unit-resolution @x24159 @x15336 @x24666 $x24170) (hypothesis $x23397) (hypothesis $x24332) $x10324)))
(let ((@x20768 (def-axiom (or $x20001 $x15590 $x15599 $x19995))))
(let ((@x25246 (unit-resolution @x20768 @x25245 @x24666 (unit-resolution (def-axiom (or $x20004 $x19998)) @x25236 $x19998) $x19995)))
(let ((@x20758 (def-axiom (or $x19992 $x19986))))
(let ((@x20662 (def-axiom (or $x19947 $x15611 $x15614 $x19941))))
(let ((@x24977 (unit-resolution @x20662 (unit-resolution (def-axiom (or $x19950 $x19944)) (hypothesis $x19953) $x19944) @x24971 (unit-resolution @x24996 @x23427 $x13353) $x19941)))
(let ((@x20652 (def-axiom (or $x19938 $x19932))))
(let (($x20596 (>= ?x11582 (- 1))))
(let ((@x24640 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19452 $x20596)) (unit-resolution (def-axiom (or $x19938 $x11580)) @x24977 $x11580) $x20596)))
(let ((?x11631 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x20720 (+ v_b_L_H_max_G_1$ ?x11631)))
(let (($x20721 (<= ?x20720 0)))
(let ((?x24669 (+ ?x10327 ?x11631)))
(let (($x24665 (<= ?x24669 0)))
(let (($x24691 (= ?x10327 v_b_L_H_max_G_3$)))
(let ((@x24748 (trans (monotonicity (hypothesis $x10338) (= $x24691 (= ?x10327 v_b_L_H_max_G_2$))) (commutativity (= (= ?x10327 v_b_L_H_max_G_2$) $x10333)) (= $x24691 $x10333))))
(let ((@x24239 (unit-resolution (hypothesis (not $x24691)) (mp (hypothesis $x10333) (symm @x24748 (= $x10333 $x24691)) $x24691) false)))
(let ((@x24667 (unit-resolution (lemma @x24239 (or $x24691 $x19469 $x19472)) (unit-resolution (def-axiom (or $x19950 $x10333)) (hypothesis $x19953) $x10333) (unit-resolution (def-axiom (or $x19950 $x10338)) (hypothesis $x19953) $x10338) $x24691)))
(let ((@x24699 (unit-resolution @x20768 (unit-resolution (def-axiom (or $x19950 $x10324)) (hypothesis $x19953) $x10324) @x24666 (hypothesis $x19998) $x19995)))
(let (($x20719 (= v_b_L_H_max_G_1$ v_b_L_H_max_G_3$)))
(let ((@x22521 (hypothesis $x24665)))
(let (($x20722 (>= ?x20720 0)))
(let ((@x24987 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x20722 $x20721)) (hypothesis (not $x20721)) $x20722)))
(let ((@x25026 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis $x11515) (hypothesis $x20722) @x22521 false) (or $x11516 (not $x20722) (not $x24665)))))
(let ((@x25004 (unit-resolution (def-axiom (or $x19974 $x11515)) (unit-resolution @x25026 @x24987 @x22521 $x11516) $x19974)))
(let ((@x20748 (def-axiom (or $x19989 $x19977 $x19983))))
(let ((@x20732 (def-axiom (or $x19980 $x10391))))
(let ((@x24978 (unit-resolution @x20732 (unit-resolution @x20748 @x25004 (hypothesis $x19986) $x19983) $x10391)))
(let ((@x25028 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20719) $x20721)) (hypothesis (not $x20721)) (not $x20719))))
(let ((@x24992 (unit-resolution @x25028 (mp @x24978 (symm (commutativity (= $x20719 $x10391)) (= $x10391 $x20719)) $x20719) false)))
(let ((@x24755 (unit-resolution (lemma @x24992 (or $x20721 $x19989 (not $x24665))) (unit-resolution @x20758 @x24699 $x19986) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24691) $x24665)) @x24667 $x24665) $x20721)))
(let ((@x24801 (monotonicity (monotonicity (hypothesis $x10340) (= ?x10372 ?x10320)) (= ?x10373 ?x10327))))
(let ((@x24798 (trans @x24801 (symm (hypothesis $x10333) (= ?x10327 v_b_L_H_max_G_2$)) (= ?x10373 v_b_L_H_max_G_2$))))
(let ((@x24758 (trans @x24798 (symm (hypothesis $x10338) (= v_b_L_H_max_G_2$ v_b_L_H_max_G_3$)) $x10374)))
(let ((@x24760 (lemma (unit-resolution (hypothesis $x19411) @x24758 false) (or $x10374 $x19472 $x19469 $x19473))))
(let ((@x25092 (unit-resolution @x24760 (unit-resolution (def-axiom (or $x19950 $x10338)) (hypothesis $x19953) $x10338) (unit-resolution (def-axiom (or $x19950 $x10333)) (hypothesis $x19953) $x10333) (unit-resolution (def-axiom (or $x19950 $x10340)) (hypothesis $x19953) $x10340) $x10374)))
(let ((?x11645 (* (- 1) v_b_SL_H_witness_G_1$)))
(let ((?x24983 (+ v_b_L_H_p_G_0$ ?x11645)))
(let (($x24986 (>= ?x24983 0)))
(let (($x25036 (= v_b_L_H_p_G_0$ v_b_SL_H_witness_G_1$)))
(let ((@x24772 (mp (hypothesis $x10340) (symm (commutativity (= $x25036 $x10340)) (= $x10340 $x25036)) $x25036)))
(let ((@x25067 (lemma (unit-resolution (hypothesis (not $x25036)) @x24772 false) (or $x25036 $x19473))))
(let ((@x25089 (unit-resolution @x25067 (unit-resolution (def-axiom (or $x19950 $x10340)) (hypothesis $x19953) $x10340) $x25036)))
(let ((@x25136 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x24986) (hypothesis $x11647) @x23427 false) (or (not $x24986) $x11648 $x11486))))
(let ((@x25093 (unit-resolution @x25136 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x25036) $x24986)) @x25089 $x24986) @x23427 $x11648)))
(let ((@x20614 (def-axiom (or $x19413 $x11647 $x19411))))
(let ((@x20618 (def-axiom (or $x19914 $x19412))))
(let ((?x15869 (* (- 1) ?v0!14)))
(let ((?x24928 (+ v_b_L_H_p_G_0$ ?x15869)))
(let (($x25152 (>= ?x24928 0)))
(let (($x25082 (not $x25152)))
(let (($x25159 (= v_b_L_H_p_G_0$ ?v0!14)))
(let (($x25184 (not $x25159)))
(let (($x25165 (= ?x10327 ?x15634)))
(let (($x25169 (not $x25165)))
(let ((?x23824 (+ ?x10327 ?x15891)))
(let (($x23830 (>= ?x23824 0)))
(let (($x23816 (not $x23830)))
(let ((@x23818 (hypothesis (not $x15893))))
(let ((@x23838 (lemma ((_ th-lemma arith farkas -1 -1 1) @x22521 @x23818 (hypothesis $x23830) false) (or $x23816 (not $x24665) $x15893))))
(let ((@x25123 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x25169 $x23830)) (unit-resolution @x23838 @x22521 @x23818 $x23816) $x25169)))
(let ((@x25179 (monotonicity (symm (hypothesis $x25159) (= ?v0!14 v_b_L_H_p_G_0$)) (= ?x15633 ?x10320))))
(let ((@x25183 (unit-resolution (hypothesis $x25169) (symm (monotonicity @x25179 (= ?x15634 ?x10327)) $x25165) false)))
(let (($x24929 (<= ?x24928 0)))
(let (($x24941 (>= (+ v_b_L_H_max_G_1$ ?x15891) 0)))
(let (($x23835 (not $x24941)))
(let ((@x25078 (unit-resolution ((_ th-lemma arith assign-bounds 1 1) (or $x23835 $x15893 (not $x20721))) (hypothesis $x20721) @x23818 $x23835)))
(let ((@x25066 (hypothesis $x20596)))
(let ((@x23813 ((_ th-lemma arith assign-bounds -1 -1) (or $x11608 $x11486 (not $x20596)))))
(let ((@x20638 (def-axiom (or $x19935 $x11612 $x19929))))
(let ((@x25144 (unit-resolution @x20638 (unit-resolution @x23813 @x25066 @x23427 $x11608) (hypothesis $x19932) $x19929)))
(let ((@x20630 (def-axiom (or $x19926 $x19920))))
(let ((@x20626 (def-axiom (or $x19923 $x19386 $x19917))))
(let ((@x25132 (unit-resolution @x20626 (unit-resolution @x20630 @x25144 $x19920) (hypothesis $x19914) $x19386)))
(let (($x24949 (or $x19903 $x19365 $x19366 $x24929 $x24941)))
(let (($x24778 (<= (+ ?x15634 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x24909 (>= (+ ?v0!14 ?x11484) 0)))
(let (($x24784 (or $x19365 $x19366 $x24909 $x24778)))
(let (($x24950 (or $x19903 $x24784)))
(let (($x24935 (= (+ ?x15634 (* (- 1) v_b_L_H_max_G_1$)) (+ (* (- 1) v_b_L_H_max_G_1$) ?x15634))))
(let ((@x24939 (monotonicity (rewrite $x24935) (= $x24778 (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15634) 0)))))
(let ((@x24945 (trans @x24939 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15634) 0) $x24941)) (= $x24778 $x24941))))
(let ((@x24905 (monotonicity (rewrite (= (+ ?v0!14 ?x11484) (+ ?x11484 ?v0!14))) (= $x24909 (>= (+ ?x11484 ?v0!14) 0)))))
(let ((@x24933 (trans @x24905 (rewrite (= (>= (+ ?x11484 ?v0!14) 0) $x24929)) (= $x24909 $x24929))))
(let ((@x24954 (monotonicity (monotonicity @x24933 @x24945 (= $x24784 (or $x19365 $x19366 $x24929 $x24941))) (= $x24950 (or $x19903 (or $x19365 $x19366 $x24929 $x24941))))))
(let ((@x24958 (trans @x24954 (rewrite (= (or $x19903 (or $x19365 $x19366 $x24929 $x24941)) $x24949)) (= $x24950 $x24949))))
(let ((@x23833 (unit-resolution (mp ((_ quant-inst ?v0!14) $x24950) @x24958 $x24949) @x23333 (unit-resolution (def-axiom (or $x19381 $x15626)) @x25132 $x15626) (unit-resolution (def-axiom (or $x19381 $x15627)) @x25132 $x15627) (or $x24929 $x24941))))
(let ((@x25097 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x25159 (not $x24929) $x25082)) (unit-resolution @x23833 @x25078 $x24929) (or $x25159 $x25082))))
(let ((@x25098 (unit-resolution @x25097 (unit-resolution (lemma @x25183 (or $x25184 $x25165)) @x25123 $x25184) $x25082)))
(let ((@x25100 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution (def-axiom (or $x19381 $x15876)) @x25132 $x15876) @x25066 @x25098 false)))
(let ((@x25087 (lemma @x25100 (or (not $x24665) (not $x20596) $x15893 $x19903 (not $x20721) $x19917 $x19935 $x11486))))
(let ((@x25104 (unit-resolution @x25087 (unit-resolution @x20618 (unit-resolution @x20614 @x25093 @x25092 $x19413) $x19914) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24691) $x24665)) @x24667 $x24665) @x23333 @x24755 @x24640 (unit-resolution @x20652 @x24977 $x19932) @x23427 $x15893)))
(let ((@x25102 (unit-resolution @x20638 (unit-resolution @x23813 @x24640 @x23427 $x11608) (unit-resolution @x20652 @x24977 $x19932) $x19929)))
(let ((@x25125 (unit-resolution @x20626 (unit-resolution @x20618 (unit-resolution @x20614 @x25093 @x25092 $x19413) $x19914) (unit-resolution @x20630 @x25102 $x19920) $x19386)))
(let ((@x20605 (def-axiom (or $x19381 (not $x15893)))))
(let ((@x25095 (lemma (unit-resolution @x20605 @x25125 @x25104 false) (or $x19950 $x19903 $x11486 $x15611 $x15590 $x20001))))
(let ((@x25249 (unit-resolution @x25095 (unit-resolution (def-axiom (or $x20074 $x19898)) (hypothesis $x20077) $x19898) @x23427 @x24971 @x24666 (unit-resolution (def-axiom (or $x20004 $x19998)) @x25236 $x19998) $x19950)))
(let ((@x25250 (unit-resolution (def-axiom (or $x19959 $x15590 $x15599 $x19953)) @x25245 @x24666 @x25249 $x19959)))
(let ((@x25252 (unit-resolution (def-axiom (or $x19971 $x15590 $x15593 $x19965)) (unit-resolution (def-axiom (or $x19962 $x19956)) @x25250 $x19962) @x24666 @x25230 $x19971)))
(let ((@x25254 (unit-resolution @x20748 (unit-resolution (def-axiom (or $x19974 $x19968)) @x25252 $x19974) (unit-resolution @x20758 @x25246 $x19986) $x19983)))
(let ((@x25256 (unit-resolution @x20662 (unit-resolution (def-axiom (or $x19980 $x19944)) @x25254 $x19944) @x24971 (unit-resolution @x24996 @x23427 $x13353) $x19941)))
(let ((@x25259 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19452 $x20596)) (unit-resolution (def-axiom (or $x19938 $x11580)) @x25256 $x11580) $x20596)))
(let ((@x25261 (unit-resolution @x20638 (unit-resolution @x23813 @x25259 @x23427 $x11608) (unit-resolution @x20652 @x25256 $x19932) $x19929)))
(let ((@x25267 (monotonicity (unit-resolution (def-axiom (or $x19980 $x10392)) @x25254 $x10392) (= ?x10372 ?x10190))))
(let ((@x25272 (trans (monotonicity @x25267 (= ?x10373 ?x10191)) (unit-resolution (def-axiom (or $x20074 $x10192)) (hypothesis $x20077) $x10192) (= ?x10373 v_b_L_H_max_G_1$))))
(let ((?x20724 (+ v_b_SL_H_witness_G_0$ ?x11645)))
(let (($x20726 (>= ?x20724 0)))
(let (($x20723 (= v_b_SL_H_witness_G_0$ v_b_SL_H_witness_G_1$)))
(let ((@x25279 (mp (unit-resolution (def-axiom (or $x19980 $x10392)) @x25254 $x10392) (symm (commutativity (= $x20723 $x10392)) (= $x10392 $x20723)) $x20723)))
(let ((@x25229 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x20726) (hypothesis $x11647) @x23180 false) (or $x11648 (not $x20726) $x11867))))
(let ((@x25284 (unit-resolution @x25229 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20723) $x20726)) @x25279 $x20726) (unit-resolution (def-axiom (or $x20074 $x11868)) (hypothesis $x20077) $x11868) $x11648)))
(let ((@x25285 (unit-resolution @x20614 @x25284 (trans @x25272 (symm (unit-resolution @x20732 @x25254 $x10391) $x20719) $x10374) $x19413)))
(let ((@x25287 (unit-resolution @x20626 (unit-resolution @x20618 @x25285 $x19914) (unit-resolution @x20630 @x25261 $x19920) $x19386)))
(let ((@x25289 (mp (unit-resolution @x20732 @x25254 $x10391) (symm (commutativity (= $x20719 $x10391)) (= $x10391 $x20719)) $x20719)))
(let ((@x25293 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x24665 $x11515 (not $x20721))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20719) $x20721)) @x25289 $x20721) (unit-resolution (def-axiom (or $x19980 $x11516)) @x25254 $x11516) $x24665)))
(let ((@x25294 (unit-resolution @x25087 (unit-resolution @x20618 @x25285 $x19914) (unit-resolution @x20652 @x25256 $x19932) (unit-resolution (def-axiom (or $x20074 $x19898)) (hypothesis $x20077) $x19898) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20719) $x20721)) @x25289 $x20721) @x25293 @x25259 @x23427 $x15893)))
(let ((@x25297 (lemma (unit-resolution @x20605 @x25294 @x25287 false) (or $x20074 $x11486 $x15611 $x15590 $x15593 $x23368 $x24385))))
(let ((@x24156 (unit-resolution @x25297 @x24155 @x24113 @x24166 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x11570 $x19670)) @x24140 $x11570) @x24136 @x24176 $x24385)))
(let ((?x24715 (+ ?x23287 ?x23622)))
(let ((?x24720 (b_S_ptr$ b_T_T_u1$ ?x24715)))
(let ((?x24697 (b_S_idx$ ?x21983 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let (($x24723 (= ?x24697 ?x24720)))
(let (($x24726 (not $x24723)))
(let (($x24698 (b_S_extent_n_hint$ ?x24697 ?x21983)))
(let (($x24705 (not $x24698)))
(let (($x24729 (or $x24705 $x24726)))
(let (($x24732 (not $x24729)))
(let (($x24735 (or $x22568 $x24732)))
(let (($x24709 (not (= ?x24697 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 (* v_b_L_H_p_G_0$ ?x10045)))))))
(let (($x24711 (not (or $x24705 $x24709))))
(let (($x24724 (= (= ?x24697 (b_S_ptr$ b_T_T_u1$ (+ ?x23622 (* v_b_L_H_p_G_0$ ?x10045)))) $x24723)))
(let ((@x24714 (monotonicity @x23250 (= (+ ?x23622 (* v_b_L_H_p_G_0$ ?x10045)) (+ ?x23622 ?x23287)))))
(let ((@x24719 (trans @x24714 (rewrite (= (+ ?x23622 ?x23287) ?x24715)) (= (+ ?x23622 (* v_b_L_H_p_G_0$ ?x10045)) ?x24715))))
(let ((@x24722 (monotonicity @x24719 (= (b_S_ptr$ b_T_T_u1$ (+ ?x23622 (* v_b_L_H_p_G_0$ ?x10045))) ?x24720))))
(let ((@x24731 (monotonicity (monotonicity (monotonicity @x24722 $x24724) (= $x24709 $x24726)) (= (or $x24705 $x24709) $x24729))))
(let ((@x24739 (monotonicity (monotonicity @x24731 (= $x24711 $x24732)) (= (or $x22568 $x24711) $x24735))))
(let ((@x24743 (mp ((_ quant-inst (b_S_ptr$ ?x10076 ?x21014) v_b_L_H_p_G_0$ b_T_T_u1$) (or $x22568 $x24711)) (trans @x24739 (rewrite (= $x24735 $x24735)) (= (or $x22568 $x24711) $x24735)) $x24735)))
(let ((@x24747 (def-axiom (or $x24729 $x24723))))
(let ((@x23880 (unit-resolution @x24747 (lemma (unit-resolution @x24743 @x18183 (hypothesis $x24729) false) $x24732) $x24723)))
(let ((?x24111 (+ ?x10079 ?x23287)))
(let ((?x24114 (b_S_ptr$ b_T_T_u1$ ?x24111)))
(let (($x23925 (= ?x10320 ?x24114)))
(let (($x23973 (or (not (b_S_extent_n_hint$ ?x10320 ?x10078)) (not $x23925))))
(let (($x23975 (not $x23973)))
(let (($x23999 (or $x22568 $x23975)))
(let (($x24108 (not (= ?x10320 (b_S_ptr$ b_T_T_u1$ (+ ?x10079 (* v_b_L_H_p_G_0$ ?x10045)))))))
(let (($x24110 (not (or (not (b_S_extent_n_hint$ ?x10320 ?x10078)) $x24108))))
(let (($x23928 (= (= ?x10320 (b_S_ptr$ b_T_T_u1$ (+ ?x10079 (* v_b_L_H_p_G_0$ ?x10045)))) $x23925)))
(let ((@x23927 (monotonicity (monotonicity @x23250 (= (+ ?x10079 (* v_b_L_H_p_G_0$ ?x10045)) ?x24111)) (= (b_S_ptr$ b_T_T_u1$ (+ ?x10079 (* v_b_L_H_p_G_0$ ?x10045))) ?x24114))))
(let ((@x23972 (monotonicity (monotonicity (monotonicity @x23927 $x23928) (= $x24108 (not $x23925))) (= (or (not (b_S_extent_n_hint$ ?x10320 ?x10078)) $x24108) $x23973))))
(let ((@x23964 (monotonicity (monotonicity @x23972 (= $x24110 $x23975)) (= (or $x22568 $x24110) $x23999))))
(let ((@x23967 (mp ((_ quant-inst (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) v_b_L_H_p_G_0$ b_T_T_u1$) (or $x22568 $x24110)) (trans @x23964 (rewrite (= $x23999 $x23999)) (= (or $x22568 $x24110) $x23999)) $x23999)))
(let ((@x24824 (unit-resolution (def-axiom (or $x23973 $x23925)) (unit-resolution @x23967 @x18183 $x23975) $x23925)))
(let ((?x24252 (+ ?x10079 ?x23287 (* (- 1) (b_S_ref$ ?x24114)))))
(let (($x24242 (= ?x24252 0)))
(let (($x24247 (or $x21152 $x24242)))
(let ((@x24254 (monotonicity (rewrite (= (= (b_S_ref$ ?x24114) ?x24111) $x24242)) (= (or $x21152 (= (b_S_ref$ ?x24114) ?x24111)) $x24247))))
(let ((@x24256 (trans @x24254 (rewrite (= $x24247 $x24247)) (= (or $x21152 (= (b_S_ref$ ?x24114) ?x24111)) $x24247))))
(let ((@x24827 (unit-resolution (mp ((_ quant-inst b_T_T_u1$ (+ ?x10079 ?x23287)) (or $x21152 (= (b_S_ref$ ?x24114) ?x24111))) @x24256 $x24247) @x19840 $x24242)))
(let ((@x24831 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24242) (<= ?x24252 0))) @x24827 (<= ?x24252 0))))
(let ((@x24834 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24242) (>= ?x24252 0))) @x24827 (>= ?x24252 0))))
(let (($x24814 (= ?x24111 ?x24715)))
(let ((?x24815 (* (- 1) ?x24715)))
(let ((?x24818 (+ ?x24111 ?x24815)))
(let (($x24819 (<= ?x24818 0)))
(let ((?x24234 (* (- 1) ?x21014)))
(let ((?x24214 (+ ?x10079 ?x24234)))
(let (($x24215 (<= ?x24214 0)))
(let ((@x24854 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x10079 ?x21014)) $x24215)) (symm (unit-resolution @x21192 @x19840 $x21186) (= ?x10079 ?x21014)) $x24215)))
(let ((?x24751 (* (- 1) ?x23622)))
(let ((?x24752 (+ ?x21014 ?x24751)))
(let (($x24753 (<= ?x24752 0)))
(let ((@x24857 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x21014 ?x23622)) $x24753)) (symm (monotonicity @x23670 (= ?x23622 ?x21014)) (= ?x21014 ?x23622)) $x24753)))
(let ((@x24862 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1) (or $x24819 (not $x24753) (not $x24215))) @x24857 @x24854 $x24819)))
(let (($x24820 (>= ?x24818 0)))
(let (($x24216 (>= ?x24214 0)))
(let ((@x24841 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x10079 ?x21014)) $x24216)) (symm (unit-resolution @x21192 @x19840 $x21186) (= ?x10079 ?x21014)) $x24216)))
(let (($x24754 (>= ?x24752 0)))
(let ((@x24846 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x21014 ?x23622)) $x24754)) (symm (monotonicity @x23670 (= ?x23622 ?x21014)) (= ?x21014 ?x23622)) $x24754)))
(let ((@x24851 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1) (or $x24820 (not $x24754) (not $x24216))) @x24846 @x24841 $x24820)))
(let ((@x24907 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x24814 (not $x24819) (not $x24820))) @x24851 @x24862 $x24814)))
(let ((@x24911 (trans (symm @x24907 (= ?x24715 ?x24111)) ((_ th-lemma arith eq-propagate -1 -1) @x24834 @x24831 (= ?x24111 (b_S_ref$ ?x24114))) (= ?x24715 (b_S_ref$ ?x24114)))))
(let ((@x24912 (trans @x24911 (monotonicity (symm @x24824 (= ?x24114 ?x10320)) (= (b_S_ref$ ?x24114) ?x24147)) (= ?x24715 ?x24147))))
(let ((@x24915 (trans (monotonicity @x23682 (= ?x24598 ?x24697)) (hypothesis $x24723) (= ?x24598 ?x24720))))
(let ((@x24917 (monotonicity (trans @x24915 (monotonicity @x24912 (= ?x24720 ?x24169)) (= ?x24598 ?x24169)) (= ?x24302 ?x24320))))
(let ((@x24920 (trans (monotonicity (symm @x24917 (= ?x24320 ?x24302)) (= ?x24323 ?x24605)) (hypothesis $x24606) (= ?x24323 ?x22595))))
(let ((@x24924 (trans (monotonicity (trans @x24920 @x23680 (= ?x24323 ?x10080)) (= ?x24331 ?x10082)) @x12043 $x24332)))
(let ((@x24927 (lemma (unit-resolution (hypothesis $x24385) @x24924 false) (or $x24726 $x24332 $x24607))))
(unit-resolution (unit-resolution @x24927 @x23880 (or $x24332 $x24607)) @x24156 @x24149 false

06100f97c3a244ddafdb8cd3437991e2729cce2c 3051 0
unsat
((set-logic AUFLIA)
(declare-fun ?v0!14 () Int)
(declare-fun ?v0!15 () Int)
(declare-fun ?v0!13 () Int)
(proof
(let ((?x11604 (* (- 1) v_b_SL_H_witness_G_1$)))
(let ((?x20744 (+ v_b_SL_H_witness_G_0$ ?x11604)))
(let (($x20746 (>= ?x20744 0)))
(let (($x20743 (= v_b_SL_H_witness_G_0$ v_b_SL_H_witness_G_1$)))
(let ((@x25111 (commutativity (= $x20743 (= v_b_SL_H_witness_G_1$ v_b_SL_H_witness_G_0$)))))
(let ((@x25113 (symm @x25111 (= (= v_b_SL_H_witness_G_1$ v_b_SL_H_witness_G_0$) $x20743))))
(let (($x10351 (= v_b_SL_H_witness_G_1$ v_b_SL_H_witness_G_0$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10331 (b_S_idx$ ?x10037 v_b_SL_H_witness_G_1$ b_T_T_u1$)))
(let ((?x10332 (b_S_read_n_u1$ v_b_S_s$ ?x10331)))
(let (($x10333 (= ?x10332 v_b_L_H_max_G_3$)))
(let (($x11606 (<= (+ v_b_P_H_len$ ?x11604) 0)))
(let (($x19430 (or $x11606 (not $x10333))))
(let (($x19431 (not $x19430)))
(let (($x20349 (forall ((?v0 Int) )(! (let ((?x11590 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11592 (<= (+ ?x10122 ?x11590) 0)))
(let (($x11574 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11574 $x11592))))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!705))
))
(let (($x20354 (not $x20349)))
(let (($x20357 (or $x20354 $x19431)))
(let (($x20360 (not $x20357)))
(let ((?x15673 (b_S_idx$ ?x10037 ?v0!14 b_T_T_u1$)))
(let ((?x15674 (b_S_read_n_u1$ v_b_S_s$ ?x15673)))
(let ((?x15920 (* (- 1) ?x15674)))
(let (($x15922 (>= (+ v_b_L_H_max_G_3$ ?x15920) 0)))
(let (($x15900 (<= (+ v_b_L_H_p_G_1$ (* (- 1) ?v0!14)) 0)))
(let (($x15667 (<= ?v0!14 4294967295)))
(let (($x19384 (not $x15667)))
(let (($x15666 (>= ?v0!14 0)))
(let (($x19383 (not $x15666)))
(let (($x19399 (or $x19383 $x19384 $x15900 $x15922)))
(let (($x19404 (not $x19399)))
(let (($x20363 (or $x19404 $x20360)))
(let (($x20366 (not $x20363)))
(let ((?x11540 (* (- 1) v_b_L_H_p_G_1$)))
(let ((?x11568 (+ v_b_P_H_len$ ?x11540)))
(let (($x11567 (>= ?x11568 0)))
(let (($x11571 (not $x11567)))
(let (($x20369 (or $x11571 $x20366)))
(let (($x20372 (not $x20369)))
(let (($x20375 (or $x11571 $x20372)))
(let (($x20378 (not $x20375)))
(let (($x11495 (>= v_b_SL_H_witness_G_1$ 0)))
(let (($x19473 (not $x11495)))
(let (($x11537 (>= v_b_L_H_p_G_1$ 2)))
(let (($x19472 (not $x11537)))
(let (($x10317 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_24$ b_H_loc_o_p$ v_b_L_H_p_G_1$ b_T_T_u4$)))
(let (($x19471 (not $x10317)))
(let ((?x11541 (+ v_b_L_H_p_G_0$ ?x11540)))
(let (($x11539 (= ?x11541 (- 1))))
(let (($x19470 (not $x11539)))
(let (($x12582 (<= v_b_L_H_p_G_0$ 4294967294)))
(let (($x15654 (not $x12582)))
(let (($x11529 (>= v_b_L_H_p_G_0$ (- 1))))
(let (($x15651 (not $x11529)))
(let (($x20381 (or $x15651 $x15654 $x19470 $x19471 $x19472 $x19473 $x20378)))
(let (($x20384 (not $x20381)))
(let (($x20387 (or $x15651 $x15654 $x20384)))
(let (($x20390 (not $x20387)))
(let (($x11388 (>= v_b_L_H_p_G_0$ 1)))
(let (($x19492 (not $x11388)))
(let (($x19531 (not $x10351)))
(let (($x10350 (= v_b_L_H_max_G_3$ v_b_L_H_max_G_1$)))
(let (($x19530 (not $x10350)))
(let (($x11391 (>= v_b_SL_H_witness_G_0$ 0)))
(let (($x19519 (not $x11391)))
(let ((?x10279 (b_S_idx$ ?x10037 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let ((?x10286 (b_S_read_n_u1$ v_b_S_s$ ?x10279)))
(let ((?x11476 (* (- 1) ?x10286)))
(let ((?x11477 (+ v_b_L_H_max_G_1$ ?x11476)))
(let (($x11475 (>= ?x11477 0)))
(let (($x11474 (not $x11475)))
(let (($x20423 (or $x11474 $x19519 $x19530 $x19531 $x19492 $x19473 $x20390)))
(let (($x20426 (not $x20423)))
(let (($x10299 (= v_b_SL_H_witness_G_1$ v_b_L_H_p_G_0$)))
(let (($x19491 (not $x10299)))
(let (($x10297 (= v_b_L_H_max_G_3$ v_b_L_H_max_G_2$)))
(let (($x19490 (not $x10297)))
(let (($x10294 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_24_o_47$ b_H_loc_o_witness$ v_b_L_H_p_G_0$ b_T_T_u4$)))
(let (($x19489 (not $x10294)))
(let (($x10293 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_23_o_7$ b_H_loc_o_max$ v_b_L_H_max_G_2$ b_T_T_u1$)))
(let (($x19488 (not $x10293)))
(let (($x10292 (= v_b_L_H_max_G_2$ ?x10286)))
(let (($x19487 (not $x10292)))
(let (($x10283 (b_S_thread_n_local$ v_b_S_s$ ?x10279)))
(let (($x15639 (not $x10283)))
(let (($x10280 (b_S_is$ ?x10279 b_T_T_u1$)))
(let (($x15630 (not $x10280)))
(let (($x20393 (or $x15630 $x15639 $x19487 $x19488 $x19489 $x19490 $x19491 $x19492 $x19473 $x20390)))
(let (($x20396 (not $x20393)))
(let (($x20399 (or $x15630 $x15639 $x20396)))
(let (($x20402 (not $x20399)))
(let (($x10281 (b_S_typed$ v_b_S_s$ ?x10279)))
(let (($x15633 (not $x10281)))
(let (($x20405 (or $x15630 $x15633 $x20402)))
(let (($x20408 (not $x20405)))
(let (($x20411 (or $x15630 $x15633 $x20408)))
(let (($x20414 (not $x20411)))
(let (($x20417 (or $x11475 $x19492 $x19519 $x20414)))
(let (($x24901 (= v_b_L_H_p_G_0$ v_b_SL_H_witness_G_1$)))
(let ((@x24227 (hypothesis $x20396)))
(let ((@x24923 (unit-resolution (def-axiom (or $x20393 $x10299)) @x24227 $x10299)))
(let (($x24944 (not $x24901)))
(let ((@x25016 (unit-resolution (def-axiom (or $x20393 $x10292)) @x24227 $x10292)))
(let ((@x24980 (unit-resolution (def-axiom (or $x20393 $x10297)) @x24227 $x10297)))
(let ((?x24895 (+ v_b_L_H_p_G_0$ ?x11604)))
(let (($x24790 (>= ?x24895 0)))
(let ((@x24834 ((_ th-lemma arith triangle-eq) (or $x24944 $x24790))))
(let ((@x25134 (monotonicity (monotonicity (hypothesis $x10299) (= ?x10331 ?x10279)) (= ?x10332 ?x10286))))
(let ((@x25137 (trans @x25134 (symm (hypothesis $x10292) (= ?x10286 v_b_L_H_max_G_2$)) (= ?x10332 v_b_L_H_max_G_2$))))
(let ((@x25138 (trans @x25137 (symm (hypothesis $x10297) (= v_b_L_H_max_G_2$ v_b_L_H_max_G_3$)) $x10333)))
(let ((?x23065 (b_S_ref$ ?x10279)))
(let ((?x23183 (b_S_ptr$ b_T_T_u1$ ?x23065)))
(let ((?x24253 (b_S_typ$ ?x23183)))
(let ((?x24254 (b_S_kind_n_of$ ?x24253)))
(let (($x24255 (= ?x24254 b_S_kind_n_primitive$)))
(let ((?x21475 (b_S_kind_n_of$ b_T_T_u1$)))
(let (($x21476 (= ?x21475 b_S_kind_n_primitive$)))
(let (($x9727 (b_S_is_n_primitive$ b_T_T_u1$)))
(let (($x21483 (= $x9727 $x21476)))
(let (($x9850 (forall ((?v0 B_S_ctype$) )(! (let ((?x9808 (b_S_kind_n_of$ ?v0)))
(let (($x9842 (= ?x9808 b_S_kind_n_primitive$)))
(let (($x2704 (b_S_is_n_primitive$ ?v0)))
(= $x2704 $x9842)))) :pattern ( (b_S_is_n_primitive$ ?v0) ) :qid k!665))
))
(let ((?x9808 (b_S_kind_n_of$ ?0)))
(let (($x9842 (= ?x9808 b_S_kind_n_primitive$)))
(let (($x2704 (b_S_is_n_primitive$ ?0)))
(let (($x9847 (= $x2704 $x9842)))
(let (($x9845 (forall ((?v0 B_S_ctype$) )(! (let ((?x9808 (b_S_kind_n_of$ ?v0)))
(let (($x9842 (= ?x9808 b_S_kind_n_primitive$)))
(let (($x2704 (b_S_is_n_primitive$ ?v0)))
(= $x2704 $x9842)))) :pattern ( (b_S_is_n_primitive$ ?v0) ) :qid k!665))
))
(let ((@x9855 (mp (asserted $x9845) (quant-intro (rewrite (= (= $x2704 $x9842) $x9847)) (= $x9845 $x9850)) $x9850)))
(let ((@x15496 (mp~ @x9855 (nnf-pos (refl (~ $x9847 $x9847)) (~ $x9850 $x9850)) $x9850)))
(let (($x21227 (not $x9850)))
(let (($x21486 (or $x21227 $x21483)))
(let ((@x21487 ((_ quant-inst b_T_T_u1$) $x21486)))
(let ((@x9728 (asserted $x9727)))
(let ((@x23038 (unit-resolution (def-axiom (or (not $x21483) (not $x9727) $x21476)) @x9728 (or (not $x21483) $x21476))))
(let ((?x23196 (b_S_typ$ ?x10279)))
(let (($x23197 (= ?x23196 b_T_T_u1$)))
(let (($x23206 (= $x10280 $x23197)))
(let (($x20261 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6595 (b_S_typ$ ?v0)))
(let (($x7824 (= ?x6595 ?v1)))
(let (($x9555 (b_S_is$ ?v0 ?v1)))
(= $x9555 $x7824)))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!624))
))
(let (($x9576 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6595 (b_S_typ$ ?v0)))
(let (($x7824 (= ?x6595 ?v1)))
(let (($x9555 (b_S_is$ ?v0 ?v1)))
(= $x9555 $x7824)))) :qid k!624))
))
(let ((?x6595 (b_S_typ$ ?1)))
(let (($x7824 (= ?x6595 ?0)))
(let (($x9555 (b_S_is$ ?1 ?0)))
(let (($x9573 (= $x9555 $x7824)))
(let (($x9570 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let ((?x6595 (b_S_typ$ ?v0)))
(let (($x7824 (= ?x6595 ?v1)))
(let (($x9555 (b_S_is$ ?v0 ?v1)))
(= $x9555 $x7824)))) :qid k!624))
))
(let ((@x9581 (mp (asserted $x9570) (quant-intro (rewrite (= (= $x9555 $x7824) $x9573)) (= $x9570 $x9576)) $x9576)))
(let ((@x20266 (mp (mp~ @x9581 (nnf-pos (refl (~ $x9573 $x9573)) (~ $x9576 $x9576)) $x9576) (quant-intro (refl (= $x9573 $x9573)) (= $x9576 $x20261)) $x20261)))
(let (($x22005 (not $x20261)))
(let (($x24534 (or $x22005 $x23206)))
(let ((@x24536 ((_ quant-inst (b_S_idx$ ?x10037 v_b_L_H_p_G_0$ b_T_T_u1$) b_T_T_u1$) $x24534)))
(let ((?x10004 (b_S_sizeof$ b_T_T_u1$)))
(let ((?x23293 (times$ v_b_L_H_p_G_0$ ?x10004)))
(let ((?x10038 (b_S_ref$ ?x10037)))
(let ((?x23294 (+ ?x10038 ?x23293)))
(let ((?x23295 (b_S_ptr$ b_T_T_u1$ ?x23294)))
(let ((?x24201 (b_S_typ$ ?x23295)))
(let (($x24202 (= ?x24201 b_T_T_u1$)))
(let (($x20274 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_typ$ (b_S_ptr$ ?v0 ?v1)) ?v0) :pattern ( (b_S_ptr$ ?v0 ?v1) ) :qid k!629))
))
(let (($x9618 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_typ$ (b_S_ptr$ ?v0 ?v1)) ?v0) :qid k!629))
))
(let (($x9617 (= (b_S_typ$ (b_S_ptr$ ?1 ?0)) ?1)))
(let ((@x15401 (mp~ (asserted $x9618) (nnf-pos (refl (~ $x9617 $x9617)) (~ $x9618 $x9618)) $x9618)))
(let ((@x20279 (mp @x15401 (quant-intro (refl (= $x9617 $x9617)) (= $x9618 $x20274)) $x20274)))
(let (($x23296 (= ?x10279 ?x23295)))
(let (($x23297 (not $x23296)))
(let (($x23291 (b_S_extent_n_hint$ ?x10279 ?x10037)))
(let (($x23292 (not $x23291)))
(let (($x23298 (or $x23292 $x23297)))
(let (($x23299 (not $x23298)))
(let (($x18198 (forall ((?v0 B_S_ptr$) (?v1 Int) (?v2 B_S_ctype$) )(! (let ((?x7164 (b_S_idx$ ?v0 ?v1 ?v2)))
(let (($x7172 (= ?x7164 (b_S_ptr$ ?v2 (+ (b_S_ref$ ?v0) (times$ ?v1 (b_S_sizeof$ ?v2)))))))
(not (or (not (b_S_extent_n_hint$ ?x7164 ?v0)) (not $x7172))))) :pattern ( (b_S_idx$ ?v0 ?v1 ?v2) ) :qid k!500))
))
(let (($x7175 (forall ((?v0 B_S_ptr$) (?v1 Int) (?v2 B_S_ctype$) )(! (let ((?x7164 (b_S_idx$ ?v0 ?v1 ?v2)))
(let (($x7172 (= ?x7164 (b_S_ptr$ ?v2 (+ (b_S_ref$ ?v0) (times$ ?v1 (b_S_sizeof$ ?v2)))))))
(and (b_S_extent_n_hint$ ?x7164 ?v0) $x7172))) :pattern ( (b_S_idx$ ?v0 ?v1 ?v2) ) :qid k!500))
))
(let ((?x7164 (b_S_idx$ ?2 ?1 ?0)))
(let (($x7172 (= ?x7164 (b_S_ptr$ ?0 (+ (b_S_ref$ ?2) (times$ ?1 (b_S_sizeof$ ?0)))))))
(let (($x7173 (and (b_S_extent_n_hint$ ?x7164 ?2) $x7172)))
(let ((@x18197 (rewrite (= $x7173 (not (or (not (b_S_extent_n_hint$ ?x7164 ?2)) (not $x7172)))))))
(let ((@x14601 (mp~ (asserted $x7175) (nnf-pos (refl (~ $x7173 $x7173)) (~ $x7175 $x7175)) $x7175)))
(let ((@x18201 (mp @x14601 (quant-intro @x18197 (= $x7175 $x18198)) $x18198)))
(let (($x22554 (not $x18198)))
(let (($x24176 (or $x22554 $x23299)))
(let ((@x24177 ((_ quant-inst (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) v_b_L_H_p_G_0$ b_T_T_u1$) $x24176)))
(let ((@x24838 (unit-resolution (def-axiom (or $x23298 $x23296)) (unit-resolution @x24177 @x18201 $x23299) $x23296)))
(let ((@x24213 (trans (monotonicity @x24838 (= ?x23196 ?x24201)) (unit-resolution ((_ quant-inst b_T_T_u1$ (+ ?x10038 ?x23293)) (or (not $x20274) $x24202)) @x20279 $x24202) $x23197)))
(let (($x24134 (not $x23197)))
(let ((@x24238 (unit-resolution (def-axiom (or (not $x23206) $x10280 $x24134)) (hypothesis $x15630) (or (not $x23206) $x24134))))
(let ((@x24214 (unit-resolution (unit-resolution @x24238 (unit-resolution @x24536 @x20266 $x23206) $x24134) @x24213 false)))
(let ((@x24216 (lemma @x24214 $x10280)))
(let ((@x24153 (unit-resolution (def-axiom (or (not $x23206) $x15630 $x23197)) @x24216 (or (not $x23206) $x23197))))
(let (($x23184 (= ?x10279 ?x23183)))
(let (($x9566 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (or (not (b_S_is$ ?v0 ?v1)) (= ?v0 (b_S_ptr$ ?v1 (b_S_ref$ ?v0)))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!623))
))
(let (($x9563 (or (not $x9555) (= ?1 (b_S_ptr$ ?0 (b_S_ref$ ?1))))))
(let (($x9560 (forall ((?v0 B_S_ptr$) (?v1 B_S_ctype$) )(! (let (($x9555 (b_S_is$ ?v0 ?v1)))
(=> $x9555 (= ?v0 (b_S_ptr$ ?v1 (b_S_ref$ ?v0))))) :pattern ( (b_S_is$ ?v0 ?v1) ) :qid k!623))
))
(let ((@x9565 (rewrite (= (=> $x9555 (= ?1 (b_S_ptr$ ?0 (b_S_ref$ ?1)))) $x9563))))
(let ((@x15376 (mp~ (mp (asserted $x9560) (quant-intro @x9565 (= $x9560 $x9566)) $x9566) (nnf-pos (refl (~ $x9563 $x9563)) (~ $x9566 $x9566)) $x9566)))
(let (($x21997 (not $x9566)))
(let (($x24681 (or $x21997 $x15630 $x23184)))
(let ((@x24130 (mp ((_ quant-inst (b_S_idx$ ?x10037 v_b_L_H_p_G_0$ b_T_T_u1$) b_T_T_u1$) (or $x21997 (or $x15630 $x23184))) (rewrite (= (or $x21997 (or $x15630 $x23184)) $x24681)) $x24681)))
(let ((@x25031 (symm (unit-resolution @x24130 @x15376 @x24216 $x23184) (= ?x23183 ?x10279))))
(let ((@x24431 (trans (monotonicity @x25031 (= ?x24253 ?x23196)) (unit-resolution @x24153 (unit-resolution @x24536 @x20266 $x23206) $x23197) (= ?x24253 b_T_T_u1$))))
(let ((@x24423 (trans (monotonicity @x24431 (= ?x24254 ?x21475)) (unit-resolution @x23038 (unit-resolution @x21487 @x15496 $x21483) $x21476) $x24255)))
(let ((?x10231 (b_S_typemap$ v_b_S_s$)))
(let ((?x24594 (b_S_select_o_tm$ ?x10231 ?x23183)))
(let ((?x24595 (b_S_ts_n_emb$ ?x24594)))
(let (($x24248 (b_S_closed$ v_b_S_s$ ?x24595)))
(let (($x24257 (b_S_ts_n_is_n_volatile$ ?x24594)))
(let (($x24258 (not $x24257)))
(let (($x24247 (or $x24258 (not $x24248))))
(let ((@x24430 (monotonicity (monotonicity @x25031 (= ?x24594 (b_S_select_o_tm$ ?x10231 ?x10279))) (= $x24257 (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x10231 ?x10279))))))
(let ((@x24428 (symm @x24430 (= (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x10231 ?x10279)) $x24257))))
(let ((@x24487 (monotonicity @x24428 (= (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x10231 ?x10279))) $x24258))))
(let ((?x23060 (b_S_select_o_tm$ ?x10231 ?x10279)))
(let (($x23316 (b_S_ts_n_is_n_volatile$ ?x23060)))
(let (($x23317 (not $x23316)))
(let (($x23432 (or $x15633 $x23316)))
(let (($x23433 (not $x23432)))
(let ((?x10035 (b_S_array$ b_T_T_u1$ v_b_P_H_len$)))
(let ((?x10039 (b_S_ptr$ ?x10035 ?x10038)))
(let ((?x21017 (b_S_ref$ ?x10039)))
(let ((?x21986 (b_S_ptr$ ?x10035 ?x21017)))
(let ((?x22346 (b_S_domain$ v_b_S_s$ ?x21986)))
(let ((?x22567 (b_S_ptr$ ?x10035 v_b_P_H_arr$)))
(let (($x22568 (b_S_set_n_in$ ?x22567 ?x22346)))
(let (($x21993 (= ?x10039 ?x21986)))
(let (($x10043 (b_S_is$ ?x10039 ?x10035)))
(let (($x11204 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11202 (>= v_b_P_H_len$ 0)))
(let (($x10398 (forall ((?v0 B_S_ptr$) )(! (let (($x10072 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0)))
(not $x10072)) :pattern ( (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0) ) :qid k!705))
))
(let ((?x10070 (b_S_current_n_timestamp$ v_b_S_s$)))
(let (($x10071 (= v_b_H_wrTime_S_1_T_6_o_1$ ?x10070)))
(let (($x10068 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_len$ v_b_P_H_len$ b_T_T_u4$)))
(let ((?x2238 (b_S_ptr_n_to$ b_T_T_u1$)))
(let (($x10066 (b_S_local_n_value_n_is_n_ptr$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_arr$ ?x10037 ?x2238)))
(let ((?x10064 (b_S_ptr_n_to_n_int$ ?x10037)))
(let (($x10065 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_6_o_1$ b_H_loc_o_arr$ ?x10064 ?x2238)))
(let (($x11215 (forall ((?v0 B_S_pure_n_function$) )(! (let (($x11210 (>= (+ (b_S_frame_n_level$ ?v0) (* (- 1) b_S_current_n_frame_n_level$)) 0)))
(not $x11210)) :pattern ( (b_S_frame_n_level$ ?v0) ) :qid k!705))
))
(let (($x10056 (b_S_full_n_stop$ v_b_S_s$)))
(let (($x10055 (b_S_good_n_state_n_ext$ b_H_tok_S_1_T_6_o_1$ v_b_S_s$)))
(let (($x10054 (b_S_function_n_entry$ v_b_S_s$)))
(let (($x10048 (b_S_is_n_non_n_primitive$ ?x10035)))
(let ((?x10045 (b_S_kind_n_of$ ?x10035)))
(let (($x10046 (= ?x10045 b_S_kind_n_primitive$)))
(let (($x10047 (not $x10046)))
(let (($x10044 (b_S_typed$ v_b_S_s$ ?x10039)))
(let ((?x10041 (b_S_owner$ v_b_S_s$ ?x10039)))
(let (($x10042 (= ?x10041 b_S_me$)))
(let (($x10040 (b_S_closed$ v_b_S_s$ ?x10039)))
(let (($x11218 (<= v_b_P_H_len$ 0)))
(let (($x11219 (not $x11218)))
(let (($x11222 (>= v_b_P_H_len$ 1099511627776)))
(let (($x11223 (not $x11222)))
(let (($x11229 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_SL_H_witness$)) 0)))
(let (($x11227 (>= v_b_SL_H_witness$ 0)))
(let (($x11237 (>= (+ b_S_max_o_u4$ (* (- 1) v_b_L_H_p$)) 0)))
(let (($x11235 (>= v_b_L_H_p$ 0)))
(let (($x11245 (>= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max$)) 0)))
(let (($x11243 (>= v_b_L_H_max$ 0)))
(let (($x11301 (and $x11243 $x11245 $x11235 $x11237 $x11227 $x11229 $x11223 $x11219 $x10040 $x10042 $x10043 $x10044 $x10047 $x10048 $x10054 $x10055 $x10056 $x11215 $x10065 $x10066 $x10068 $x10071 $x10398 $x11202 $x11204)))
(let (($x11803 (exists ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?v0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?v0 0)))
(and $x2815 $x3095 $x11761 $x10197))))))))))) :qid k!705))
))
(let (($x11783 (forall ((?v0 Int) )(! (let ((?x11775 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11777 (<= (+ ?x10122 ?x11775) 0)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?v0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11767 (and $x2815 $x3095 $x11761)))
(let (($x11772 (not $x11767)))
(or $x11772 $x11777)))))))))))))) :qid k!705))
))
(let (($x11786 (not $x11783)))
(let (($x11806 (or $x11786 $x11803)))
(let (($x11809 (and $x11783 $x11806)))
(let (($x10181 (= v_b_S_result_G_0$ v_b_L_H_max_G_1$)))
(let (($x10179 (= v_b_SL_H_witness_G_2$ v_b_SL_H_witness_G_0$)))
(let (($x10177 (= v_b_L_H_p_G_2$ v_b_L_H_p_G_0$)))
(let (($x10175 (= v_b_L_H_max_G_4$ v_b_L_H_max_G_1$)))
(let (($x11751 (and b_S_position_n_marker$ $x11388 $x11391 $x10175 $x10177 $x10179 $x10181)))
(let (($x11756 (not $x11751)))
(let (($x11812 (or $x11756 $x11809)))
(let (($x11815 (and b_S_position_n_marker$ $x11812)))
(let ((?x11443 (* (- 1) v_b_L_H_p_G_0$)))
(let ((?x11444 (+ v_b_P_H_len$ ?x11443)))
(let (($x11445 (<= ?x11444 0)))
(let (($x11731 (and $x11445 $x11388 $x11391)))
(let (($x11736 (not $x11731)))
(let (($x11818 (or $x11736 $x11815)))
(let (($x11607 (not $x11606)))
(let (($x11610 (and $x11607 $x10333)))
(let (($x11598 (forall ((?v0 Int) )(! (let ((?x11590 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11592 (<= (+ ?x10122 ?x11590) 0)))
(let (($x11574 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x11576 (not $x11574)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?v0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11582 (and $x2815 $x3095 $x11576)))
(let (($x11587 (not $x11582)))
(or $x11587 $x11592)))))))))))))) :qid k!705))
))
(let (($x11601 (not $x11598)))
(let (($x11613 (or $x11601 $x11610)))
(let (($x11616 (and $x11598 $x11613)))
(let (($x11619 (or $x11571 $x11616)))
(let (($x11622 (and $x11567 $x11619)))
(let ((?x11533 (+ b_S_max_o_u4$ ?x11443)))
(let (($x11532 (>= ?x11533 1)))
(let (($x11559 (and $x11529 $x11532 $x11539 $x10317 $x11537 $x11495)))
(let (($x11564 (not $x11559)))
(let (($x11625 (or $x11564 $x11622)))
(let (($x11631 (and $x11529 $x11532 $x11625)))
(let (($x11684 (and $x11475 $x11391 $x10350 $x10351 $x11388 $x11495)))
(let (($x11689 (not $x11684)))
(let (($x11692 (or $x11689 $x11631)))
(let (($x11521 (and $x10280 $x10283 $x10292 $x10293 $x10294 $x10297 $x10299 $x11388 $x11495)))
(let (($x11526 (not $x11521)))
(let (($x11636 (or $x11526 $x11631)))
(let (($x11642 (and $x10280 $x10283 $x11636)))
(let (($x10282 (and $x10280 $x10281)))
(let (($x10960 (not $x10282)))
(let (($x11647 (or $x10960 $x11642)))
(let (($x11653 (and $x10280 $x10281 $x11647)))
(let (($x11486 (and $x11474 $x11388 $x11391)))
(let (($x11491 (not $x11486)))
(let (($x11658 (or $x11491 $x11653)))
(let (($x11695 (and $x11658 $x11692)))
(let (($x11466 (and $x10280 $x10283 $x11388 $x11391)))
(let (($x11471 (not $x11466)))
(let (($x11698 (or $x11471 $x11695)))
(let (($x11704 (and $x10280 $x10283 $x11698)))
(let (($x11709 (or $x10960 $x11704)))
(let (($x11715 (and $x10280 $x10281 $x11709)))
(let (($x11446 (not $x11445)))
(let (($x11455 (and $x11446 $x11388 $x11391)))
(let (($x11460 (not $x11455)))
(let (($x11720 (or $x11460 $x11715)))
(let (($x11821 (and $x11720 $x11818)))
(let (($x10255 (b_S_local_n_value_n_is_n_ptr$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_arr$ ?x10037 ?x2238)))
(let (($x10254 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_arr$ ?x10064 ?x2238)))
(let (($x10253 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_len$ v_b_P_H_len$ b_T_T_u4$)))
(let (($x10252 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_max$ v_b_L_H_max_G_1$ b_T_T_u1$)))
(let (($x10251 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_witness$ v_b_SL_H_witness_G_0$ b_T_T_u4$)))
(let (($x10250 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_3$ b_H_loc_o_p$ v_b_L_H_p_G_0$ b_T_T_u4$)))
(let (($x10163 (b_S_good_n_state_n_ext$ b_H_tok_S_1_T_16_o_3$ v_b_S_s$)))
(let (($x10243 (b_S_call_n_transition$ v_b_S_s$ v_b_S_s$)))
(let (($x11435 (and $x10243 $x10163 $x10056 $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391)))
(let (($x11440 (not $x11435)))
(let ((?x10149 (b_S_idx$ ?x10037 v_b_SL_H_witness_G_0$ b_T_T_u1$)))
(let ((?x10150 (b_S_read_n_u1$ v_b_S_s$ ?x10149)))
(let (($x10151 (= ?x10150 v_b_L_H_max_G_1$)))
(let ((?x11824 (* (- 1) v_b_SL_H_witness_G_0$)))
(let ((?x11825 (+ v_b_P_H_len$ ?x11824)))
(let (($x11826 (<= ?x11825 0)))
(let (($x11827 (not $x11826)))
(let (($x11854 (forall ((?v0 Int) )(! (let ((?x11846 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11848 (<= (+ ?x10122 ?x11846) 0)))
(let (($x11830 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x11832 (not $x11830)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?v0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11838 (and $x2815 $x3095 $x11832)))
(let (($x11843 (not $x11838)))
(or $x11843 $x11848)))))))))))))) :qid k!705))
))
(let (($x11857 (>= ?x11444 0)))
(let (($x11863 (>= ?x11533 0)))
(let (($x11860 (>= v_b_L_H_p_G_0$ 0)))
(let (($x11866 (>= (+ b_S_max_o_u4$ ?x11824) 0)))
(let (($x11873 (>= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x11870 (>= v_b_L_H_max_G_1$ 0)))
(let ((?x10096 (b_S_idx$ ?x10037 0 b_T_T_u1$)))
(let ((?x10103 (b_S_read_n_u1$ v_b_S_s$ ?x10096)))
(let (($x10126 (= ?x10103 v_b_L_H_max_G_0$)))
(let (($x11916 (and $x11219 $x10126 $x11870 $x11873 $x11866 $x11860 $x11863 $x11857 $x11854 $x11827 $x10151 $x11388 $x11391)))
(let (($x11921 (not $x11916)))
(let (($x11930 (or $x11921 $x11440 $x11821)))
(let (($x11938 (and $x11219 $x10126 $x11930)))
(let (($x11370 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11363 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10122)) 0)))
(let (($x11347 (>= ?v0 1)))
(let (($x11348 (not $x11347)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?v0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?v0 0)))
(let (($x11354 (and $x2815 $x3095 $x11348)))
(let (($x11359 (not $x11354)))
(or $x11359 $x11363))))))))))))) :qid k!705))
))
(let (($x11373 (not $x11370)))
(let (($x11943 (or $x11373 $x11938)))
(let (($x11946 (and $x11370 $x11943)))
(let (($x11341 (>= v_b_P_H_len$ 1)))
(let (($x11344 (not $x11341)))
(let (($x11949 (or $x11344 $x11946)))
(let (($x11952 (and $x11341 $x11949)))
(let (($x10107 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_16_o_8$ b_H_loc_o_p$ 1 b_T_T_u4$)))
(let (($x10106 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_14_o_3$ b_H_loc_o_witness$ 0 b_T_T_u4$)))
(let (($x10105 (b_S_local_n_value_n_is$ v_b_S_s$ b_H_tok_S_1_T_12_o_3$ b_H_loc_o_max$ v_b_L_H_max_G_0$ b_T_T_u1$)))
(let (($x10104 (= v_b_L_H_max_G_0$ ?x10103)))
(let (($x10100 (b_S_thread_n_local$ v_b_S_s$ ?x10096)))
(let (($x10097 (b_S_is$ ?x10096 b_T_T_u1$)))
(let (($x11333 (and $x10097 $x10100 $x10104 $x10105 $x10106 $x10107)))
(let (($x11338 (not $x11333)))
(let (($x11955 (or $x11338 $x11952)))
(let (($x11961 (and $x10097 $x10100 $x11955)))
(let (($x10098 (b_S_typed$ v_b_S_s$ ?x10096)))
(let (($x10099 (and $x10097 $x10098)))
(let (($x11168 (not $x10099)))
(let (($x11966 (or $x11168 $x11961)))
(let (($x11972 (and $x10097 $x10098 $x11966)))
(let (($x10095 (b_S_in_n_domain_n_lab$ v_b_S_s$ ?x10039 ?x10039 b_l_H_public$)))
(let (($x11180 (not $x10095)))
(let (($x11977 (or $x11180 $x11972)))
(let (($x11980 (and $x10095 $x11977)))
(let (($x11986 (not (or (not $x11301) $x11980))))
(let (($x10201 (exists ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x10192 (< ?v0 v_b_P_H_len$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(and $x2766 (and $x3077 (and $x10192 $x10197)))))))))) :qid k!705))
))
(let (($x10203 (and $x10201 (=> $x10201 true))))
(let (($x10196 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10194 (<= ?x10122 v_b_S_result_G_0$)))
(let (($x10192 (< ?v0 v_b_P_H_len$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10193 (and $x3078 $x10192)))
(=> $x10193 $x10194)))))))))) :qid k!705))
))
(let (($x10204 (=> $x10196 $x10203)))
(let (($x10186 (and true (and $x10175 (and $x10177 (and $x10179 (and $x10181 true)))))))
(let (($x10133 (<= 0 v_b_SL_H_witness_G_0$)))
(let (($x10140 (<= 1 v_b_L_H_p_G_0$)))
(let (($x10141 (and $x10140 $x10133)))
(let (($x10189 (and true (and $x10141 (and $x10141 $x10186)))))
(let (($x10206 (=> (and b_S_position_n_marker$ (and $x10141 $x10189)) (and $x10196 $x10204))))
(let (($x10207 (and b_S_position_n_marker$ $x10206)))
(let (($x10165 (and true $x10141)))
(let (($x10166 (and $x10141 $x10165)))
(let (($x10370 (and $x10141 $x10166)))
(let (($x10371 (and true $x10370)))
(let (($x10372 (and $x10141 $x10371)))
(let (($x10369 (<= v_b_P_H_len$ v_b_L_H_p_G_0$)))
(let (($x10375 (and true (and $x10141 (and $x10369 $x10372)))))
(let (($x10376 (=> $x10375 $x10207)))
(let (($x10336 (=> (and (and (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x10333) false) true)))
(let (($x10334 (and (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x10333)))
(let (($x10337 (and $x10334 $x10336)))
(let (($x10329 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10327 (<= ?x10122 v_b_L_H_max_G_3$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10326 (and $x3078 (< ?v0 v_b_L_H_p_G_1$))))
(=> $x10326 $x10327))))))))) :qid k!705))
))
(let (($x10338 (=> $x10329 $x10337)))
(let (($x10324 (<= v_b_L_H_p_G_1$ v_b_P_H_len$)))
(let (($x10340 (=> $x10324 (and $x10329 $x10338))))
(let (($x10300 (<= 0 v_b_SL_H_witness_G_1$)))
(let (($x10319 (and (<= 2 v_b_L_H_p_G_1$) $x10300)))
(let (($x10322 (and (= v_b_L_H_p_G_1$ (+ v_b_L_H_p_G_0$ 1)) (and $x10317 (and $x10319 true)))))
(let (($x10314 (and (<= 0 (+ v_b_L_H_p_G_0$ 1)) (<= (+ v_b_L_H_p_G_0$ 1) b_S_max_o_u4$))))
(let (($x10342 (=> (and $x10314 $x10322) (and $x10324 $x10340))))
(let (($x10343 (and $x10314 $x10342)))
(let (($x10354 (and true (and $x10350 (and $x10351 (and true (and $x10140 $x10300)))))))
(let (($x10357 (and true (and $x10141 (and $x10141 $x10354)))))
(let (($x10349 (<= ?x10286 v_b_L_H_max_G_1$)))
(let (($x10361 (and true (and $x10141 (and $x10349 (and $x10141 $x10357))))))
(let (($x10362 (=> $x10361 $x10343)))
(let (($x10305 (and true (and $x10297 (and $x10299 (and true (and $x10140 $x10300)))))))
(let (($x10284 (and $x10280 $x10283)))
(let (($x10310 (and $x10284 (and $x10292 (and $x10293 (and $x10294 (and (and $x10140 $x10140) $x10305)))))))
(let (($x10344 (=> $x10310 $x10343)))
(let (($x10346 (=> $x10282 (and $x10284 $x10344))))
(let (($x10290 (and true (and $x10141 (and (< v_b_L_H_max_G_1$ ?x10286) $x10166)))))
(let (($x10348 (=> $x10290 (and $x10282 $x10346))))
(let (($x10285 (and $x10284 $x10141)))
(let (($x10364 (=> $x10285 (and $x10348 $x10362))))
(let (($x10366 (=> $x10282 (and $x10284 $x10364))))
(let (($x10278 (and true (and $x10141 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10166)))))
(let (($x10368 (=> $x10278 (and $x10282 $x10366))))
(let (($x10259 (and (= ?x10231 ?x10231) (= (b_S_statusmap$ v_b_S_s$) (b_S_statusmap$ v_b_S_s$)))))
(let (($x10260 (and $x10259 $x10141)))
(let (($x10256 (and $x10254 $x10255)))
(let (($x10164 (and $x10163 $x10056)))
(let (($x10266 (and $x10164 (and $x10250 (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x10260))))))))
(let (($x10242 (forall ((?v0 B_S_ptr$) )(! (let ((?x10239 (b_S_timestamp$ v_b_S_s$ ?v0)))
(<= ?x10239 ?x10239)) :pattern ( (b_S_timestamp$ v_b_S_s$ ?v0) ) :qid k!705))
))
(let (($x10245 (and (<= ?x10070 ?x10070) (and $x10242 $x10243))))
(let (($x10237 (forall ((?v0 B_S_ptr$) )(! (let (($x10219 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10231 (b_S_typemap$ v_b_S_s$)))
(let ((?x10232 (b_S_select_o_tm$ ?x10231 ?v0)))
(let (($x10234 (and (= ?x10232 ?x10232) $x10219)))
(=> $x10219 $x10234))))) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let (($x10246 (and $x10237 $x10245)))
(let (($x10230 (forall ((?v0 B_S_ptr$) )(! (let (($x10219 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10215 (b_S_statusmap$ v_b_S_s$)))
(let ((?x10216 (b_S_select_o_sm$ ?x10215 ?v0)))
(let (($x10228 (and (= ?x10216 ?x10216) $x10219)))
(=> $x10219 $x10228))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let (($x10247 (and $x10230 $x10246)))
(let (($x10226 (forall ((?v0 B_S_ptr$) )(! (let (($x10219 (b_S_thread_n_local$ v_b_S_s$ ?v0)))
(let ((?x10220 (b_S_memory$ v_b_S_s$)))
(let ((?x10221 (b_S_select_o_mem$ ?x10220 ?v0)))
(let (($x10223 (and (= ?x10221 ?x10221) $x10219)))
(=> $x10219 $x10223))))) :pattern ( (b_S_select_o_mem$ (b_S_memory$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let (($x10248 (and $x10226 $x10247)))
(let (($x10218 (forall ((?v0 B_S_ptr$) )(! (let (($x10212 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_owner$ v_b_S_s$ ?v0))) b_S_kind_n_thread$)))
(=> (not $x10212) (not $x10212))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let (($x10249 (and $x10218 $x10248)))
(let (($x10270 (and true (and $x10141 (and $x10249 (and $x10245 $x10266))))))
(let (($x10272 (and true (and $x10141 $x10270))))
(let (($x10274 (and true (and $x10141 $x10272))))
(let (($x10378 (=> $x10274 (and $x10368 $x10376))))
(let (($x10162 (not true)))
(let (($x10171 (and $x10162 (and $x10141 (and true (and $x10141 (and $x10164 $x10166)))))))
(let (($x10172 (and $x10141 $x10171)))
(let (($x10173 (and true $x10172)))
(let (($x10208 (=> $x10173 $x10207)))
(let (($x10379 (and $x10208 $x10378)))
(let (($x10153 (and (and (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x10151) $x10141)))
(let (($x10147 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10145 (<= ?x10122 v_b_L_H_max_G_1$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10144 (and $x3078 (< ?v0 v_b_L_H_p_G_0$))))
(=> $x10144 $x10145))))))))) :qid k!705))
))
(let (($x10142 (<= v_b_L_H_p_G_0$ v_b_P_H_len$)))
(let (($x10139 (and (<= 0 v_b_L_H_p_G_0$) (<= v_b_L_H_p_G_0$ b_S_max_o_u4$))))
(let (($x10135 (and $x10133 (<= v_b_SL_H_witness_G_0$ b_S_max_o_u4$))))
(let (($x10131 (and (<= 0 v_b_L_H_max_G_1$) (<= v_b_L_H_max_G_1$ b_S_max_o_u1$))))
(let (($x10159 (and $x10131 (and $x10135 (and $x10139 (and $x10141 (and $x10142 (and $x10147 $x10153))))))))
(let (($x10160 (and true $x10159)))
(let (($x10033 (< 0 v_b_P_H_len$)))
(let (($x10127 (and $x10033 $x10126)))
(let (($x10380 (=> (and $x10127 $x10160) $x10379)))
(let (($x10125 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10123 (<= ?x10122 v_b_L_H_max_G_0$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10120 (and $x3078 (< ?v0 1))))
(=> $x10120 $x10123))))))))) :qid k!705))
))
(let (($x10382 (=> $x10125 (and $x10127 $x10380))))
(let (($x10118 (<= 1 v_b_P_H_len$)))
(let (($x10384 (=> $x10118 (and $x10125 $x10382))))
(let (($x10108 (<= 1 1)))
(let (($x10113 (and $x10107 (and $x10108 (and $x10108 (and (<= 0 0) (<= 0 0)))))))
(let (($x10101 (and $x10097 $x10100)))
(let (($x10386 (=> (and $x10101 (and $x10104 (and $x10105 (and $x10106 $x10113)))) (and $x10118 $x10384))))
(let (($x10388 (=> $x10099 (and $x10101 $x10386))))
(let (($x10390 (=> $x10095 (and $x10099 $x10388))))
(let (($x10078 (and (<= 0 v_b_P_H_len$) (<= v_b_P_H_len$ b_S_max_o_u4$))))
(let (($x10075 (forall ((?v0 B_S_ptr$) )(! (let (($x10072 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0)))
(= $x10072 false)) :pattern ( (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?v0) ) :qid k!705))
))
(let (($x10067 (and $x10065 $x10066)))
(let (($x10063 (forall ((?v0 B_S_pure_n_function$) )(! (let ((?x10059 (b_S_frame_n_level$ ?v0)))
(< ?x10059 b_S_current_n_frame_n_level$)) :pattern ( (b_S_frame_n_level$ ?v0) ) :qid k!705))
))
(let (($x10057 (and $x10055 $x10056)))
(let (($x10084 (and $x10057 (and $x10063 (and $x10067 (and $x10068 (and $x10071 (and $x10075 $x10078))))))))
(let (($x10086 (and true (and $x10054 $x10084))))
(let (($x10053 (and $x10040 (and $x10042 (and $x10043 (and $x10044 (and $x10047 $x10048)))))))
(let (($x10032 (< v_b_P_H_len$ 1099511627776)))
(let (($x10030 (and (<= 0 v_b_SL_H_witness$) (<= v_b_SL_H_witness$ b_S_max_o_u4$))))
(let (($x10026 (and (<= 0 v_b_L_H_p$) (<= v_b_L_H_p$ b_S_max_o_u4$))))
(let (($x10022 (and (<= 0 v_b_L_H_max$) (<= v_b_L_H_max$ b_S_max_o_u1$))))
(let (($x10092 (and $x10022 (and $x10026 (and $x10030 (and $x10032 (and $x10033 (and $x10053 $x10086))))))))
(let (($x10093 (and true $x10092)))
(let (($x10392 (=> $x10093 (and $x10095 $x10390))))
(let (($x10393 (not $x10392)))
(let (($x10608 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10194 (<= ?x10122 v_b_S_result_G_0$)))
(let (($x10192 (< ?v0 v_b_P_H_len$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10193 (and $x3078 $x10192)))
(or (not $x10193) $x10194)))))))))) :qid k!705))
))
(let (($x10624 (or (not $x10608) $x10201)))
(let (($x10629 (and $x10608 $x10624)))
(let (($x10575 (and $x10175 (and $x10177 (and $x10179 $x10181)))))
(let (($x10585 (and $x10141 $x10575)))
(let (($x10588 (and $x10141 $x10585)))
(let (($x10598 (and $x10141 $x10588)))
(let (($x10601 (and b_S_position_n_marker$ $x10598)))
(let (($x10636 (or (not $x10601) $x10629)))
(let (($x10641 (and b_S_position_n_marker$ $x10636)))
(let (($x11093 (or (not (and $x10141 (and $x10369 $x10141))) $x10641)))
(let (($x10890 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10327 (<= ?x10122 v_b_L_H_max_G_3$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10326 (and $x3078 (< ?v0 v_b_L_H_p_G_1$))))
(or (not $x10326) $x10327))))))))) :qid k!705))
))
(let (($x10913 (or (not $x10890) $x10334)))
(let (($x10918 (and $x10890 $x10913)))
(let (($x10925 (or (not $x10324) $x10918)))
(let (($x10930 (and $x10324 $x10925)))
(let (($x10877 (and $x10317 $x10319)))
(let ((?x10860 (+ 1 v_b_L_H_p_G_0$)))
(let (($x10872 (= v_b_L_H_p_G_1$ ?x10860)))
(let (($x10880 (and $x10872 $x10877)))
(let (($x10866 (<= ?x10860 b_S_max_o_u4$)))
(let (($x10863 (<= 0 ?x10860)))
(let (($x10869 (and $x10863 $x10866)))
(let (($x10883 (and $x10869 $x10880)))
(let (($x10937 (or (not $x10883) $x10930)))
(let (($x10942 (and $x10869 $x10937)))
(let (($x10301 (and $x10140 $x10300)))
(let (($x10978 (and $x10351 $x10301)))
(let (($x10981 (and $x10350 $x10978)))
(let (($x10991 (and $x10141 $x10981)))
(let (($x10994 (and $x10141 $x10991)))
(let (($x11004 (and $x10141 $x10994)))
(let (($x11007 (and $x10349 $x11004)))
(let (($x11010 (and $x10141 $x11007)))
(let (($x11024 (or (not $x11010) $x10942)))
(let (($x10832 (and $x10299 $x10301)))
(let (($x10835 (and $x10297 $x10832)))
(let (($x10845 (and $x10140 $x10835)))
(let (($x10848 (and $x10294 $x10845)))
(let (($x10851 (and $x10293 $x10848)))
(let (($x10854 (and $x10292 $x10851)))
(let (($x10857 (and $x10284 $x10854)))
(let (($x10949 (or (not $x10857) $x10942)))
(let (($x10954 (and $x10284 $x10949)))
(let (($x10961 (or $x10960 $x10954)))
(let (($x10966 (and $x10282 $x10961)))
(let (($x10973 (or (not (and $x10141 (and (< v_b_L_H_max_G_1$ ?x10286) $x10141))) $x10966)))
(let (($x11029 (and $x10973 $x11024)))
(let (($x11036 (or (not $x10285) $x11029)))
(let (($x11041 (and $x10284 $x11036)))
(let (($x11047 (or $x10960 $x11041)))
(let (($x11052 (and $x10282 $x11047)))
(let (($x11059 (or (not (and $x10141 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10141))) $x11052)))
(let (($x11098 (and $x11059 $x11093)))
(let (($x10748 (and $x10256 $x10141)))
(let (($x10751 (and $x10253 $x10748)))
(let (($x10754 (and $x10252 $x10751)))
(let (($x10757 (and $x10251 $x10754)))
(let (($x10760 (and $x10250 $x10757)))
(let (($x10763 (and $x10164 $x10760)))
(let (($x10766 (and $x10245 $x10763)))
(let (($x10769 (and $x10245 $x10766)))
(let (($x10772 (and $x10141 $x10769)))
(let (($x10782 (and $x10141 $x10772)))
(let (($x10792 (and $x10141 $x10782)))
(let (($x11105 (or (not $x10792) $x11098)))
(let (($x10488 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10145 (<= ?x10122 v_b_L_H_max_G_1$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10144 (and $x3078 (< ?v0 v_b_L_H_p_G_0$))))
(or (not $x10144) $x10145))))))))) :qid k!705))
))
(let (($x10491 (and $x10488 $x10153)))
(let (($x10494 (and $x10142 $x10491)))
(let (($x10497 (and $x10141 $x10494)))
(let (($x10500 (and $x10139 $x10497)))
(let (($x10503 (and $x10135 $x10500)))
(let (($x10506 (and $x10131 $x10503)))
(let (($x10516 (and $x10127 $x10506)))
(let (($x11121 (or (not $x10516) $x11105)))
(let (($x11126 (and $x10127 $x11121)))
(let (($x10481 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10123 (<= ?x10122 v_b_L_H_max_G_0$)))
(let (($x3077 (<= ?v0 b_S_max_o_u4$)))
(let (($x2766 (<= 0 ?v0)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10120 (and $x3078 (< ?v0 1))))
(or (not $x10120) $x10123))))))))) :qid k!705))
))
(let (($x11133 (or (not $x10481) $x11126)))
(let (($x11138 (and $x10481 $x11133)))
(let (($x11145 (or (not $x10118) $x11138)))
(let (($x11150 (and $x10118 $x11145)))
(let (($x10109 (<= 0 0)))
(let (($x10456 (and $x10108 $x10109)))
(let (($x10459 (and $x10108 $x10456)))
(let (($x10462 (and $x10107 $x10459)))
(let (($x10465 (and $x10106 $x10462)))
(let (($x10468 (and $x10105 $x10465)))
(let (($x10471 (and $x10104 $x10468)))
(let (($x10474 (and $x10101 $x10471)))
(let (($x11157 (or (not $x10474) $x11150)))
(let (($x11162 (and $x10101 $x11157)))
(let (($x11169 (or $x11168 $x11162)))
(let (($x11174 (and $x10099 $x11169)))
(let (($x11181 (or $x11180 $x11174)))
(let (($x11186 (and $x10095 $x11181)))
(let (($x10401 (and $x10398 $x10078)))
(let (($x10404 (and $x10071 $x10401)))
(let (($x10407 (and $x10068 $x10404)))
(let (($x10410 (and $x10067 $x10407)))
(let (($x10413 (and $x10063 $x10410)))
(let (($x10416 (and $x10057 $x10413)))
(let (($x10419 (and $x10054 $x10416)))
(let (($x10429 (and $x10053 $x10419)))
(let (($x10432 (and $x10033 $x10429)))
(let (($x10435 (and $x10032 $x10432)))
(let (($x10438 (and $x10030 $x10435)))
(let (($x10441 (and $x10026 $x10438)))
(let (($x10444 (and $x10022 $x10441)))
(let (($x11193 (or (not $x10444) $x11186)))
(let ((?x10121 (b_S_idx$ ?x10037 ?0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let ((?x3093 (* (- 1) b_S_max_o_u4$)))
(let ((?x3094 (+ ?0 ?x3093)))
(let (($x3095 (<= ?x3094 0)))
(let (($x2815 (>= ?0 0)))
(let (($x11798 (and $x2815 $x3095 $x11761 $x10197)))
(let (($x2766 (<= 0 ?0)))
(let (($x10200 (and $x2766 (and (<= ?0 b_S_max_o_u4$) (and (< ?0 v_b_P_H_len$) $x10197)))))
(let (($x11793 (= (and (<= ?0 b_S_max_o_u4$) (and (< ?0 v_b_P_H_len$) $x10197)) (and $x3095 (and $x11761 $x10197)))))
(let ((@x11791 (monotonicity (rewrite (= (< ?0 v_b_P_H_len$) $x11761)) (= (and (< ?0 v_b_P_H_len$) $x10197) (and $x11761 $x10197)))))
(let ((@x2814 (rewrite (= $x2766 $x2815))))
(let ((@x11797 (monotonicity @x2814 (monotonicity (rewrite (= (<= ?0 b_S_max_o_u4$) $x3095)) @x11791 $x11793) (= $x10200 (and $x2815 (and $x3095 (and $x11761 $x10197)))))))
(let ((@x11802 (trans @x11797 (rewrite (= (and $x2815 (and $x3095 (and $x11761 $x10197))) $x11798)) (= $x10200 $x11798))))
(let (($x11777 (<= (+ ?x10122 (* (- 1) v_b_S_result_G_0$)) 0)))
(let (($x11767 (and $x2815 $x3095 $x11761)))
(let (($x11772 (not $x11767)))
(let (($x11780 (or $x11772 $x11777)))
(let (($x10194 (<= ?x10122 v_b_S_result_G_0$)))
(let (($x10192 (< ?0 v_b_P_H_len$)))
(let (($x3077 (<= ?0 b_S_max_o_u4$)))
(let (($x3078 (and $x2766 $x3077)))
(let (($x10193 (and $x3078 $x10192)))
(let (($x10605 (or (not $x10193) $x10194)))
(let ((@x3104 (monotonicity @x2814 (rewrite (= $x3077 $x3095)) (= $x3078 (and $x2815 $x3095)))))
(let ((@x11766 (monotonicity @x3104 (rewrite (= $x10192 $x11761)) (= $x10193 (and (and $x2815 $x3095) $x11761)))))
(let ((@x11771 (trans @x11766 (rewrite (= (and (and $x2815 $x3095) $x11761) $x11767)) (= $x10193 $x11767))))
(let ((@x11782 (monotonicity (monotonicity @x11771 (= (not $x10193) $x11772)) (rewrite (= $x10194 $x11777)) (= $x10605 $x11780))))
(let ((@x11788 (monotonicity (quant-intro @x11782 (= $x10608 $x11783)) (= (not $x10608) $x11786))))
(let ((@x11811 (monotonicity (quant-intro @x11782 (= $x10608 $x11783)) (monotonicity @x11788 (quant-intro @x11802 (= $x10201 $x11803)) (= $x10624 $x11806)) (= $x10629 $x11809))))
(let (($x11393 (and $x11388 $x11391)))
(let (($x11752 (= (and b_S_position_n_marker$ (and $x11393 (and $x11393 (and $x11393 $x10575)))) $x11751)))
(let (($x11749 (= $x10601 (and b_S_position_n_marker$ (and $x11393 (and $x11393 (and $x11393 $x10575)))))))
(let ((@x11389 (rewrite (= $x10140 $x11388))))
(let ((@x11395 (monotonicity @x11389 (rewrite (= $x10133 $x11391)) (= $x10141 $x11393))))
(let ((@x11744 (monotonicity @x11395 (monotonicity @x11395 (= $x10585 (and $x11393 $x10575))) (= $x10588 (and $x11393 (and $x11393 $x10575))))))
(let ((@x11747 (monotonicity @x11395 @x11744 (= $x10598 (and $x11393 (and $x11393 (and $x11393 $x10575)))))))
(let ((@x11758 (monotonicity (trans (monotonicity @x11747 $x11749) (rewrite $x11752) (= $x10601 $x11751)) (= (not $x10601) $x11756))))
(let ((@x11817 (monotonicity (monotonicity @x11758 @x11811 (= $x10636 $x11812)) (= $x10641 $x11815))))
(let ((@x11727 (monotonicity (rewrite (= $x10369 $x11445)) @x11395 (= (and $x10369 $x10141) (and $x11445 $x11393)))))
(let ((@x11730 (monotonicity @x11395 @x11727 (= (and $x10141 (and $x10369 $x10141)) (and $x11393 (and $x11445 $x11393))))))
(let ((@x11735 (trans @x11730 (rewrite (= (and $x11393 (and $x11445 $x11393)) $x11731)) (= (and $x10141 (and $x10369 $x10141)) $x11731))))
(let ((@x11820 (monotonicity (monotonicity @x11735 (= (not (and $x10141 (and $x10369 $x10141))) $x11736)) @x11817 (= $x11093 $x11818))))
(let ((@x11612 (monotonicity (rewrite (= (< v_b_SL_H_witness_G_1$ v_b_P_H_len$) $x11607)) (= $x10334 $x11610))))
(let (($x11592 (<= (+ ?x10122 (* (- 1) v_b_L_H_max_G_3$)) 0)))
(let (($x11574 (>= (+ ?0 ?x11540) 0)))
(let (($x11576 (not $x11574)))
(let (($x11582 (and $x2815 $x3095 $x11576)))
(let (($x11587 (not $x11582)))
(let (($x11595 (or $x11587 $x11592)))
(let (($x10327 (<= ?x10122 v_b_L_H_max_G_3$)))
(let (($x10887 (or (not (and $x3078 (< ?0 v_b_L_H_p_G_1$))) $x10327)))
(let ((@x11581 (monotonicity @x3104 (rewrite (= (< ?0 v_b_L_H_p_G_1$) $x11576)) (= (and $x3078 (< ?0 v_b_L_H_p_G_1$)) (and (and $x2815 $x3095) $x11576)))))
(let ((@x11586 (trans @x11581 (rewrite (= (and (and $x2815 $x3095) $x11576) $x11582)) (= (and $x3078 (< ?0 v_b_L_H_p_G_1$)) $x11582))))
(let ((@x11589 (monotonicity @x11586 (= (not (and $x3078 (< ?0 v_b_L_H_p_G_1$))) $x11587))))
(let ((@x11600 (quant-intro (monotonicity @x11589 (rewrite (= $x10327 $x11592)) (= $x10887 $x11595)) (= $x10890 $x11598))))
(let ((@x11615 (monotonicity (monotonicity @x11600 (= (not $x10890) $x11601)) @x11612 (= $x10913 $x11613))))
(let ((@x11621 (monotonicity (monotonicity (rewrite (= $x10324 $x11567)) (= (not $x10324) $x11571)) (monotonicity @x11600 @x11615 (= $x10918 $x11616)) (= $x10925 $x11619))))
(let (($x11560 (= (and (and $x11529 $x11532) (and $x11539 (and $x10317 (and $x11537 $x11495)))) $x11559)))
(let (($x11557 (= $x10883 (and (and $x11529 $x11532) (and $x11539 (and $x10317 (and $x11537 $x11495)))))))
(let ((@x11546 (monotonicity (rewrite (= (<= 2 v_b_L_H_p_G_1$) $x11537)) (rewrite (= $x10300 $x11495)) (= $x10319 (and $x11537 $x11495)))))
(let ((@x11552 (monotonicity (rewrite (= $x10872 $x11539)) (monotonicity @x11546 (= $x10877 (and $x10317 (and $x11537 $x11495)))) (= $x10880 (and $x11539 (and $x10317 (and $x11537 $x11495)))))))
(let ((@x11555 (monotonicity (rewrite (= $x10863 $x11529)) (rewrite (= $x10866 $x11532)) (= $x10869 (and $x11529 $x11532)))))
(let ((@x11566 (monotonicity (trans (monotonicity @x11555 @x11552 $x11557) (rewrite $x11560) (= $x10883 $x11559)) (= (not $x10883) $x11564))))
(let ((@x11627 (monotonicity @x11566 (monotonicity (rewrite (= $x10324 $x11567)) @x11621 (= $x10930 $x11622)) (= $x10937 $x11625))))
(let ((@x11635 (trans (monotonicity @x11555 @x11627 (= $x10942 (and (and $x11529 $x11532) $x11625))) (rewrite (= (and (and $x11529 $x11532) $x11625) $x11631)) (= $x10942 $x11631))))
(let (($x11675 (and $x11393 (and $x11393 (and $x11393 (and $x10350 (and $x10351 (and $x11388 $x11495))))))))
(let (($x11673 (= $x10994 (and $x11393 (and $x11393 (and $x10350 (and $x10351 (and $x11388 $x11495))))))))
(let ((@x11499 (monotonicity @x11389 (rewrite (= $x10300 $x11495)) (= $x10301 (and $x11388 $x11495)))))
(let ((@x11668 (monotonicity (monotonicity @x11499 (= $x10978 (and $x10351 (and $x11388 $x11495)))) (= $x10981 (and $x10350 (and $x10351 (and $x11388 $x11495)))))))
(let ((@x11671 (monotonicity @x11395 @x11668 (= $x10991 (and $x11393 (and $x10350 (and $x10351 (and $x11388 $x11495))))))))
(let ((@x11680 (monotonicity (rewrite (= $x10349 $x11475)) (monotonicity @x11395 (monotonicity @x11395 @x11671 $x11673) (= $x11004 $x11675)) (= $x11007 (and $x11475 $x11675)))))
(let ((@x11688 (trans (monotonicity @x11395 @x11680 (= $x11010 (and $x11393 (and $x11475 $x11675)))) (rewrite (= (and $x11393 (and $x11475 $x11675)) $x11684)) (= $x11010 $x11684))))
(let ((@x11694 (monotonicity (monotonicity @x11688 (= (not $x11010) $x11689)) @x11635 (= $x11024 $x11692))))
(let (($x11512 (and $x10293 (and $x10294 (and $x11388 (and $x10297 (and $x10299 (and $x11388 $x11495))))))))
(let (($x11510 (= $x10848 (and $x10294 (and $x11388 (and $x10297 (and $x10299 (and $x11388 $x11495))))))))
(let ((@x11505 (monotonicity (monotonicity @x11499 (= $x10832 (and $x10299 (and $x11388 $x11495)))) (= $x10835 (and $x10297 (and $x10299 (and $x11388 $x11495)))))))
(let ((@x11508 (monotonicity @x11389 @x11505 (= $x10845 (and $x11388 (and $x10297 (and $x10299 (and $x11388 $x11495))))))))
(let ((@x11517 (monotonicity (monotonicity (monotonicity @x11508 $x11510) (= $x10851 $x11512)) (= $x10854 (and $x10292 $x11512)))))
(let ((@x11525 (trans (monotonicity @x11517 (= $x10857 (and $x10284 (and $x10292 $x11512)))) (rewrite (= (and $x10284 (and $x10292 $x11512)) $x11521)) (= $x10857 $x11521))))
(let ((@x11638 (monotonicity (monotonicity @x11525 (= (not $x10857) $x11526)) @x11635 (= $x10949 $x11636))))
(let ((@x11646 (trans (monotonicity @x11638 (= $x10954 (and $x10284 $x11636))) (rewrite (= (and $x10284 $x11636) $x11642)) (= $x10954 $x11642))))
(let ((@x11652 (monotonicity (monotonicity @x11646 (= $x10961 $x11647)) (= $x10966 (and $x10282 $x11647)))))
(let (($x10287 (< v_b_L_H_max_G_1$ ?x10286)))
(let (($x10815 (and $x10287 $x10141)))
(let (($x10818 (and $x10141 $x10815)))
(let ((@x11482 (monotonicity (rewrite (= $x10287 $x11474)) @x11395 (= $x10815 (and $x11474 $x11393)))))
(let ((@x11490 (trans (monotonicity @x11395 @x11482 (= $x10818 (and $x11393 (and $x11474 $x11393)))) (rewrite (= (and $x11393 (and $x11474 $x11393)) $x11486)) (= $x10818 $x11486))))
(let ((@x11660 (monotonicity (monotonicity @x11490 (= (not $x10818) $x11491)) (trans @x11652 (rewrite (= (and $x10282 $x11647) $x11653)) (= $x10966 $x11653)) (= $x10973 $x11658))))
(let ((@x11470 (trans (monotonicity @x11395 (= $x10285 (and $x10284 $x11393))) (rewrite (= (and $x10284 $x11393) $x11466)) (= $x10285 $x11466))))
(let ((@x11700 (monotonicity (monotonicity @x11470 (= (not $x10285) $x11471)) (monotonicity @x11660 @x11694 (= $x11029 $x11695)) (= $x11036 $x11698))))
(let ((@x11708 (trans (monotonicity @x11700 (= $x11041 (and $x10284 $x11698))) (rewrite (= (and $x10284 $x11698) $x11704)) (= $x11041 $x11704))))
(let ((@x11714 (monotonicity (monotonicity @x11708 (= $x11047 $x11709)) (= $x11052 (and $x10282 $x11709)))))
(let (($x11461 (= (not (and $x10141 (and (< v_b_L_H_p_G_0$ v_b_P_H_len$) $x10141))) $x11460)))
(let (($x10275 (< v_b_L_H_p_G_0$ v_b_P_H_len$)))
(let (($x10802 (and $x10275 $x10141)))
(let (($x10805 (and $x10141 $x10802)))
(let ((@x11451 (monotonicity (rewrite (= $x10275 $x11446)) @x11395 (= $x10802 (and $x11446 $x11393)))))
(let ((@x11459 (trans (monotonicity @x11395 @x11451 (= $x10805 (and $x11393 (and $x11446 $x11393)))) (rewrite (= (and $x11393 (and $x11446 $x11393)) $x11455)) (= $x10805 $x11455))))
(let ((@x11722 (monotonicity (monotonicity @x11459 $x11461) (trans @x11714 (rewrite (= (and $x10282 $x11709) $x11715)) (= $x11052 $x11715)) (= $x11059 $x11720))))
(let (($x11411 (and $x10164 (and $x10250 (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x11393))))))))
(let (($x11417 (and true (and true $x10243))))
(let (($x11436 (= (and $x11393 (and $x11393 (and $x11393 (and $x11417 (and $x11417 $x11411))))) $x11435)))
(let (($x11433 (= $x10792 (and $x11393 (and $x11393 (and $x11393 (and $x11417 (and $x11417 $x11411))))))))
(let (($x11409 (= $x10760 (and $x10250 (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x11393))))))))
(let ((@x11401 (monotonicity (monotonicity @x11395 (= $x10748 (and $x10256 $x11393))) (= $x10751 (and $x10253 (and $x10256 $x11393))))))
(let ((@x11407 (monotonicity (monotonicity @x11401 (= $x10754 (and $x10252 (and $x10253 (and $x10256 $x11393))))) (= $x10757 (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x11393))))))))
(let (($x11378 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_timestamp$ v_b_S_s$ ?v0) ) :qid k!705))
))
(let (($x11376 (= (<= (b_S_timestamp$ v_b_S_s$ ?0) (b_S_timestamp$ v_b_S_s$ ?0)) true)))
(let ((@x11384 (trans (quant-intro (rewrite $x11376) (= $x10242 $x11378)) (elim-unused (= $x11378 true)) (= $x10242 true))))
(let ((@x11419 (monotonicity (rewrite (= (<= ?x10070 ?x10070) true)) (monotonicity @x11384 (= (and $x10242 $x10243) (and true $x10243))) (= $x10245 $x11417))))
(let ((@x11422 (monotonicity @x11419 (monotonicity (monotonicity @x11407 $x11409) (= $x10763 $x11411)) (= $x10766 (and $x11417 $x11411)))))
(let ((@x11428 (monotonicity @x11395 (monotonicity @x11419 @x11422 (= $x10769 (and $x11417 (and $x11417 $x11411)))) (= $x10772 (and $x11393 (and $x11417 (and $x11417 $x11411)))))))
(let ((@x11431 (monotonicity @x11395 @x11428 (= $x10782 (and $x11393 (and $x11393 (and $x11417 (and $x11417 $x11411))))))))
(let ((@x11442 (monotonicity (trans (monotonicity @x11395 @x11431 $x11433) (rewrite $x11436) (= $x10792 $x11435)) (= (not $x10792) $x11440))))
(let ((@x11926 (monotonicity @x11442 (monotonicity @x11722 @x11820 (= $x11098 $x11821)) (= $x11105 (or $x11440 $x11821)))))
(let (($x11895 (and (and $x11860 $x11863) (and $x11393 (and $x11857 (and $x11854 (and (and $x11827 $x10151) $x11393)))))))
(let (($x11910 (and $x11219 $x10126)))
(let (($x11917 (= (and $x11910 (and (and $x11870 $x11873) (and (and $x11391 $x11866) $x11895))) $x11916)))
(let (($x11914 (= $x10516 (and $x11910 (and (and $x11870 $x11873) (and (and $x11391 $x11866) $x11895))))))
(let (($x11890 (= $x10497 (and $x11393 (and $x11857 (and $x11854 (and (and $x11827 $x10151) $x11393)))))))
(let (($x11878 (= (and (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x10151) (and $x11827 $x10151))))
(let ((@x11879 (monotonicity (rewrite (= (< v_b_SL_H_witness_G_0$ v_b_P_H_len$) $x11827)) $x11878)))
(let (($x11848 (<= (+ ?x10122 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x11830 (>= (+ ?0 ?x11443) 0)))
(let (($x11832 (not $x11830)))
(let (($x11838 (and $x2815 $x3095 $x11832)))
(let (($x11843 (not $x11838)))
(let (($x11851 (or $x11843 $x11848)))
(let (($x10145 (<= ?x10122 v_b_L_H_max_G_1$)))
(let (($x10485 (or (not (and $x3078 (< ?0 v_b_L_H_p_G_0$))) $x10145)))
(let ((@x11837 (monotonicity @x3104 (rewrite (= (< ?0 v_b_L_H_p_G_0$) $x11832)) (= (and $x3078 (< ?0 v_b_L_H_p_G_0$)) (and (and $x2815 $x3095) $x11832)))))
(let ((@x11842 (trans @x11837 (rewrite (= (and (and $x2815 $x3095) $x11832) $x11838)) (= (and $x3078 (< ?0 v_b_L_H_p_G_0$)) $x11838))))
(let ((@x11845 (monotonicity @x11842 (= (not (and $x3078 (< ?0 v_b_L_H_p_G_0$))) $x11843))))
(let ((@x11856 (quant-intro (monotonicity @x11845 (rewrite (= $x10145 $x11848)) (= $x10485 $x11851)) (= $x10488 $x11854))))
(let ((@x11885 (monotonicity @x11856 (monotonicity @x11879 @x11395 (= $x10153 (and (and $x11827 $x10151) $x11393))) (= $x10491 (and $x11854 (and (and $x11827 $x10151) $x11393))))))
(let ((@x11888 (monotonicity (rewrite (= $x10142 $x11857)) @x11885 (= $x10494 (and $x11857 (and $x11854 (and (and $x11827 $x10151) $x11393)))))))
(let ((@x11894 (monotonicity (rewrite (= (<= 0 v_b_L_H_p_G_0$) $x11860)) (rewrite (= (<= v_b_L_H_p_G_0$ b_S_max_o_u4$) $x11863)) (= $x10139 (and $x11860 $x11863)))))
(let ((@x11900 (monotonicity (rewrite (= $x10133 $x11391)) (rewrite (= (<= v_b_SL_H_witness_G_0$ b_S_max_o_u4$) $x11866)) (= $x10135 (and $x11391 $x11866)))))
(let ((@x11903 (monotonicity @x11900 (monotonicity @x11894 (monotonicity @x11395 @x11888 $x11890) (= $x10500 $x11895)) (= $x10503 (and (and $x11391 $x11866) $x11895)))))
(let ((@x11906 (monotonicity (rewrite (= (<= 0 v_b_L_H_max_G_1$) $x11870)) (rewrite (= (<= v_b_L_H_max_G_1$ b_S_max_o_u1$) $x11873)) (= $x10131 (and $x11870 $x11873)))))
(let ((@x11909 (monotonicity @x11906 @x11903 (= $x10506 (and (and $x11870 $x11873) (and (and $x11391 $x11866) $x11895))))))
(let ((@x11915 (monotonicity (monotonicity (rewrite (= $x10033 $x11219)) (= $x10127 $x11910)) @x11909 $x11914)))
(let ((@x11923 (monotonicity (trans @x11915 (rewrite $x11917) (= $x10516 $x11916)) (= (not $x10516) $x11921))))
(let ((@x11934 (trans (monotonicity @x11923 @x11926 (= $x11121 (or $x11921 (or $x11440 $x11821)))) (rewrite (= (or $x11921 (or $x11440 $x11821)) $x11930)) (= $x11121 $x11930))))
(let ((@x11937 (monotonicity (monotonicity (rewrite (= $x10033 $x11219)) (= $x10127 $x11910)) @x11934 (= $x11126 (and $x11910 $x11930)))))
(let (($x11363 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10122)) 0)))
(let (($x11347 (>= ?0 1)))
(let (($x11348 (not $x11347)))
(let (($x11354 (and $x2815 $x3095 $x11348)))
(let (($x11359 (not $x11354)))
(let (($x11367 (or $x11359 $x11363)))
(let (($x10123 (<= ?x10122 v_b_L_H_max_G_0$)))
(let (($x10478 (or (not (and $x3078 (< ?0 1))) $x10123)))
(let ((@x11353 (monotonicity @x3104 (rewrite (= (< ?0 1) $x11348)) (= (and $x3078 (< ?0 1)) (and (and $x2815 $x3095) $x11348)))))
(let ((@x11358 (trans @x11353 (rewrite (= (and (and $x2815 $x3095) $x11348) $x11354)) (= (and $x3078 (< ?0 1)) $x11354))))
(let ((@x11369 (monotonicity (monotonicity @x11358 (= (not (and $x3078 (< ?0 1))) $x11359)) (rewrite (= $x10123 $x11363)) (= $x10478 $x11367))))
(let ((@x11375 (monotonicity (quant-intro @x11369 (= $x10481 $x11370)) (= (not $x10481) $x11373))))
(let ((@x11945 (monotonicity @x11375 (trans @x11937 (rewrite (= (and $x11910 $x11930) $x11938)) (= $x11126 $x11938)) (= $x11133 $x11943))))
(let ((@x11951 (monotonicity (monotonicity (rewrite (= $x10118 $x11341)) (= (not $x10118) $x11344)) (monotonicity (quant-intro @x11369 (= $x10481 $x11370)) @x11945 (= $x11138 $x11946)) (= $x11145 $x11949))))
(let (($x11327 (and $x10104 (and $x10105 (and $x10106 (and $x10107 (and true (and true true))))))))
(let (($x11325 (= $x10468 (and $x10105 (and $x10106 (and $x10107 (and true (and true true))))))))
(let ((@x11314 (monotonicity (rewrite (= $x10108 true)) (rewrite (= $x10109 true)) (= $x10456 (and true true)))))
(let ((@x11317 (monotonicity (rewrite (= $x10108 true)) @x11314 (= $x10459 (and true (and true true))))))
(let ((@x11320 (monotonicity @x11317 (= $x10462 (and $x10107 (and true (and true true)))))))
(let ((@x11323 (monotonicity @x11320 (= $x10465 (and $x10106 (and $x10107 (and true (and true true))))))))
(let ((@x11332 (monotonicity (monotonicity (monotonicity @x11323 $x11325) (= $x10471 $x11327)) (= $x10474 (and $x10101 $x11327)))))
(let ((@x11340 (monotonicity (trans @x11332 (rewrite (= (and $x10101 $x11327) $x11333)) (= $x10474 $x11333)) (= (not $x10474) $x11338))))
(let ((@x11957 (monotonicity @x11340 (monotonicity (rewrite (= $x10118 $x11341)) @x11951 (= $x11150 $x11952)) (= $x11157 $x11955))))
(let ((@x11965 (trans (monotonicity @x11957 (= $x11162 (and $x10101 $x11955))) (rewrite (= (and $x10101 $x11955) $x11961)) (= $x11162 $x11961))))
(let ((@x11971 (monotonicity (monotonicity @x11965 (= $x11169 $x11966)) (= $x11174 (and $x10099 $x11966)))))
(let ((@x11979 (monotonicity (trans @x11971 (rewrite (= (and $x10099 $x11966) $x11972)) (= $x11174 $x11972)) (= $x11181 $x11977))))
(let (($x11265 (and $x11215 (and $x10067 (and $x10068 (and $x10071 (and $x10398 (and $x11202 $x11204))))))))
(let (($x11286 (and (and $x11227 $x11229) (and $x11223 (and $x11219 (and $x10053 (and $x10054 (and $x10057 $x11265))))))))
(let ((@x11303 (rewrite (= (and (and $x11243 $x11245) (and (and $x11235 $x11237) $x11286)) $x11301))))
(let (($x11281 (= $x10435 (and $x11223 (and $x11219 (and $x10053 (and $x10054 (and $x10057 $x11265))))))))
(let (($x11263 (= $x10410 (and $x10067 (and $x10068 (and $x10071 (and $x10398 (and $x11202 $x11204))))))))
(let ((@x11252 (monotonicity (rewrite (= (<= 0 v_b_P_H_len$) $x11202)) (rewrite (= (<= v_b_P_H_len$ b_S_max_o_u4$) $x11204)) (= $x10078 (and $x11202 $x11204)))))
(let ((@x11258 (monotonicity (monotonicity @x11252 (= $x10401 (and $x10398 (and $x11202 $x11204)))) (= $x10404 (and $x10071 (and $x10398 (and $x11202 $x11204)))))))
(let ((@x11261 (monotonicity @x11258 (= $x10407 (and $x10068 (and $x10071 (and $x10398 (and $x11202 $x11204))))))))
(let (($x11210 (>= (+ (b_S_frame_n_level$ ?0) (* (- 1) b_S_current_n_frame_n_level$)) 0)))
(let (($x11209 (not $x11210)))
(let ((@x11214 (rewrite (= (< (b_S_frame_n_level$ ?0) b_S_current_n_frame_n_level$) $x11209))))
(let ((@x11267 (monotonicity (quant-intro @x11214 (= $x10063 $x11215)) (monotonicity @x11261 $x11263) (= $x10413 $x11265))))
(let ((@x11273 (monotonicity (monotonicity @x11267 (= $x10416 (and $x10057 $x11265))) (= $x10419 (and $x10054 (and $x10057 $x11265))))))
(let ((@x11279 (monotonicity (rewrite (= $x10033 $x11219)) (monotonicity @x11273 (= $x10429 (and $x10053 (and $x10054 (and $x10057 $x11265))))) (= $x10432 (and $x11219 (and $x10053 (and $x10054 (and $x10057 $x11265))))))))
(let ((@x11285 (monotonicity (rewrite (= (<= 0 v_b_SL_H_witness$) $x11227)) (rewrite (= (<= v_b_SL_H_witness$ b_S_max_o_u4$) $x11229)) (= $x10030 (and $x11227 $x11229)))))
(let ((@x11288 (monotonicity @x11285 (monotonicity (rewrite (= $x10032 $x11223)) @x11279 $x11281) (= $x10438 $x11286))))
(let ((@x11291 (monotonicity (rewrite (= (<= 0 v_b_L_H_p$) $x11235)) (rewrite (= (<= v_b_L_H_p$ b_S_max_o_u4$) $x11237)) (= $x10026 (and $x11235 $x11237)))))
(let ((@x11297 (monotonicity (rewrite (= (<= 0 v_b_L_H_max$) $x11243)) (rewrite (= (<= v_b_L_H_max$ b_S_max_o_u1$) $x11245)) (= $x10022 (and $x11243 $x11245)))))
(let ((@x11300 (monotonicity @x11297 (monotonicity @x11291 @x11288 (= $x10441 (and (and $x11235 $x11237) $x11286))) (= $x10444 (and (and $x11243 $x11245) (and (and $x11235 $x11237) $x11286))))))
(let ((@x11308 (monotonicity (trans @x11300 @x11303 (= $x10444 $x11301)) (= (not $x10444) (not $x11301)))))
(let ((@x11985 (monotonicity @x11308 (monotonicity @x11979 (= $x11186 $x11980)) (= $x11193 (or (not $x11301) $x11980)))))
(let ((@x10615 (monotonicity (rewrite (= (=> $x10201 true) true)) (= $x10203 (and $x10201 true)))))
(let ((@x10622 (monotonicity (quant-intro (rewrite (= (=> $x10193 $x10194) $x10605)) (= $x10196 $x10608)) (trans @x10615 (rewrite (= (and $x10201 true) $x10201)) (= $x10203 $x10201)) (= $x10204 (=> $x10608 $x10201)))))
(let ((@x10631 (monotonicity (quant-intro (rewrite (= (=> $x10193 $x10194) $x10605)) (= $x10196 $x10608)) (trans @x10622 (rewrite (= (=> $x10608 $x10201) $x10624)) (= $x10204 $x10624)) (= (and $x10196 $x10204) $x10629))))
(let (($x10573 (= (and $x10177 (and $x10179 (and $x10181 true))) (and $x10177 (and $x10179 $x10181)))))
(let ((@x10571 (monotonicity (rewrite (= (and $x10181 true) $x10181)) (= (and $x10179 (and $x10181 true)) (and $x10179 $x10181)))))
(let ((@x10577 (monotonicity (monotonicity @x10571 $x10573) (= (and $x10175 (and $x10177 (and $x10179 (and $x10181 true)))) $x10575))))
(let ((@x10584 (trans (monotonicity @x10577 (= $x10186 (and true $x10575))) (rewrite (= (and true $x10575) $x10575)) (= $x10186 $x10575))))
(let ((@x10590 (monotonicity (monotonicity @x10584 (= (and $x10141 $x10186) $x10585)) (= (and $x10141 (and $x10141 $x10186)) $x10588))))
(let ((@x10597 (trans (monotonicity @x10590 (= $x10189 (and true $x10588))) (rewrite (= (and true $x10588) $x10588)) (= $x10189 $x10588))))
(let ((@x10603 (monotonicity (monotonicity @x10597 (= (and $x10141 $x10189) $x10598)) (= (and b_S_position_n_marker$ (and $x10141 $x10189)) $x10601))))
(let ((@x10640 (trans (monotonicity @x10603 @x10631 (= $x10206 (=> $x10601 $x10629))) (rewrite (= (=> $x10601 $x10629) $x10636)) (= $x10206 $x10636))))
(let (($x11076 (and $x10369 $x10141)))
(let (($x11079 (and $x10141 $x11076)))
(let ((@x10527 (rewrite (= (and $x10141 $x10141) $x10141))))
(let ((@x10522 (rewrite (= $x10165 $x10141))))
(let ((@x10529 (trans (monotonicity @x10522 (= $x10166 (and $x10141 $x10141))) @x10527 (= $x10166 $x10141))))
(let ((@x11067 (trans (monotonicity @x10529 (= $x10370 (and $x10141 $x10141))) @x10527 (= $x10370 $x10141))))
(let ((@x11073 (monotonicity (trans (monotonicity @x11067 (= $x10371 $x10165)) @x10522 (= $x10371 $x10141)) (= $x10372 (and $x10141 $x10141)))))
(let ((@x11078 (monotonicity (trans @x11073 @x10527 (= $x10372 $x10141)) (= (and $x10369 $x10372) $x11076))))
(let ((@x11084 (monotonicity (monotonicity @x11078 (= (and $x10141 (and $x10369 $x10372)) $x11079)) (= $x10375 (and true $x11079)))))
(let ((@x11091 (monotonicity (trans @x11084 (rewrite (= (and true $x11079) $x11079)) (= $x10375 $x11079)) (monotonicity @x10640 (= $x10207 $x10641)) (= $x10376 (=> $x11079 $x10641)))))
(let ((@x10897 (monotonicity (rewrite (= (and $x10334 false) false)) (= $x10336 (=> false true)))))
(let ((@x10901 (trans @x10897 (rewrite (= (=> false true) true)) (= $x10336 true))))
(let ((@x10908 (trans (monotonicity @x10901 (= $x10337 (and $x10334 true))) (rewrite (= (and $x10334 true) $x10334)) (= $x10337 $x10334))))
(let ((@x10892 (quant-intro (rewrite (= (=> (and $x3078 (< ?0 v_b_L_H_p_G_1$)) $x10327) $x10887)) (= $x10329 $x10890))))
(let ((@x10917 (trans (monotonicity @x10892 @x10908 (= $x10338 (=> $x10890 $x10334))) (rewrite (= (=> $x10890 $x10334) $x10913)) (= $x10338 $x10913))))
(let ((@x10923 (monotonicity (monotonicity @x10892 @x10917 (= (and $x10329 $x10338) $x10918)) (= $x10340 (=> $x10324 $x10918)))))
(let ((@x10932 (monotonicity (trans @x10923 (rewrite (= (=> $x10324 $x10918) $x10925)) (= $x10340 $x10925)) (= (and $x10324 $x10340) $x10930))))
(let ((@x10879 (monotonicity (rewrite (= (and $x10319 true) $x10319)) (= (and $x10317 (and $x10319 true)) $x10877))))
(let ((@x10862 (rewrite (= (+ v_b_L_H_p_G_0$ 1) ?x10860))))
(let ((@x10874 (monotonicity @x10862 (= (= v_b_L_H_p_G_1$ (+ v_b_L_H_p_G_0$ 1)) $x10872))))
(let ((@x10868 (monotonicity @x10862 (= (<= (+ v_b_L_H_p_G_0$ 1) b_S_max_o_u4$) $x10866))))
(let ((@x10871 (monotonicity (monotonicity @x10862 (= (<= 0 (+ v_b_L_H_p_G_0$ 1)) $x10863)) @x10868 (= $x10314 $x10869))))
(let ((@x10885 (monotonicity @x10871 (monotonicity @x10874 @x10879 (= $x10322 $x10880)) (= (and $x10314 $x10322) $x10883))))
(let ((@x10941 (trans (monotonicity @x10885 @x10932 (= $x10342 (=> $x10883 $x10930))) (rewrite (= (=> $x10883 $x10930) $x10937)) (= $x10342 $x10937))))
(let ((@x10980 (monotonicity (rewrite (= (and true $x10301) $x10301)) (= (and $x10351 (and true $x10301)) $x10978))))
(let ((@x10983 (monotonicity @x10980 (= (and $x10350 (and $x10351 (and true $x10301))) $x10981))))
(let ((@x10990 (trans (monotonicity @x10983 (= $x10354 (and true $x10981))) (rewrite (= (and true $x10981) $x10981)) (= $x10354 $x10981))))
(let ((@x10996 (monotonicity (monotonicity @x10990 (= (and $x10141 $x10354) $x10991)) (= (and $x10141 (and $x10141 $x10354)) $x10994))))
(let ((@x11003 (trans (monotonicity @x10996 (= $x10357 (and true $x10994))) (rewrite (= (and true $x10994) $x10994)) (= $x10357 $x10994))))
(let ((@x11009 (monotonicity (monotonicity @x11003 (= (and $x10141 $x10357) $x11004)) (= (and $x10349 (and $x10141 $x10357)) $x11007))))
(let ((@x11015 (monotonicity (monotonicity @x11009 (= (and $x10141 (and $x10349 (and $x10141 $x10357))) $x11010)) (= $x10361 (and true $x11010)))))
(let ((@x11022 (monotonicity (trans @x11015 (rewrite (= (and true $x11010) $x11010)) (= $x10361 $x11010)) (monotonicity @x10871 @x10941 (= $x10343 $x10942)) (= $x10362 (=> $x11010 $x10942)))))
(let (($x10855 (= (and $x10292 (and $x10293 (and $x10294 (and (and $x10140 $x10140) $x10305)))) $x10854)))
(let ((@x10834 (monotonicity (rewrite (= (and true $x10301) $x10301)) (= (and $x10299 (and true $x10301)) $x10832))))
(let ((@x10837 (monotonicity @x10834 (= (and $x10297 (and $x10299 (and true $x10301))) $x10835))))
(let ((@x10844 (trans (monotonicity @x10837 (= $x10305 (and true $x10835))) (rewrite (= (and true $x10835) $x10835)) (= $x10305 $x10835))))
(let ((@x10847 (monotonicity (rewrite (= (and $x10140 $x10140) $x10140)) @x10844 (= (and (and $x10140 $x10140) $x10305) $x10845))))
(let ((@x10853 (monotonicity (monotonicity @x10847 (= (and $x10294 (and (and $x10140 $x10140) $x10305)) $x10848)) (= (and $x10293 (and $x10294 (and (and $x10140 $x10140) $x10305))) $x10851))))
(let ((@x10947 (monotonicity (monotonicity (monotonicity @x10853 $x10855) (= $x10310 $x10857)) (monotonicity @x10871 @x10941 (= $x10343 $x10942)) (= $x10344 (=> $x10857 $x10942)))))
(let ((@x10956 (monotonicity (trans @x10947 (rewrite (= (=> $x10857 $x10942) $x10949)) (= $x10344 $x10949)) (= (and $x10284 $x10344) $x10954))))
(let ((@x10965 (trans (monotonicity @x10956 (= $x10346 (=> $x10282 $x10954))) (rewrite (= (=> $x10282 $x10954) $x10961)) (= $x10346 $x10961))))
(let ((@x10820 (monotonicity (monotonicity @x10529 (= (and $x10287 $x10166) $x10815)) (= (and $x10141 (and $x10287 $x10166)) $x10818))))
(let ((@x10827 (trans (monotonicity @x10820 (= $x10290 (and true $x10818))) (rewrite (= (and true $x10818) $x10818)) (= $x10290 $x10818))))
(let ((@x10971 (monotonicity @x10827 (monotonicity @x10965 (= (and $x10282 $x10346) $x10966)) (= $x10348 (=> $x10818 $x10966)))))
(let ((@x11031 (monotonicity (trans @x10971 (rewrite (= (=> $x10818 $x10966) $x10973)) (= $x10348 $x10973)) (trans @x11022 (rewrite (= (=> $x11010 $x10942) $x11024)) (= $x10362 $x11024)) (= (and $x10348 $x10362) $x11029))))
(let ((@x11040 (trans (monotonicity @x11031 (= $x10364 (=> $x10285 $x11029))) (rewrite (= (=> $x10285 $x11029) $x11036)) (= $x10364 $x11036))))
(let ((@x11046 (monotonicity (monotonicity @x11040 (= (and $x10284 $x10364) $x11041)) (= $x10366 (=> $x10282 $x11041)))))
(let ((@x11054 (monotonicity (trans @x11046 (rewrite (= (=> $x10282 $x11041) $x11047)) (= $x10366 $x11047)) (= (and $x10282 $x10366) $x11052))))
(let ((@x10807 (monotonicity (monotonicity @x10529 (= (and $x10275 $x10166) $x10802)) (= (and $x10141 (and $x10275 $x10166)) $x10805))))
(let ((@x10814 (trans (monotonicity @x10807 (= $x10278 (and true $x10805))) (rewrite (= (and true $x10805) $x10805)) (= $x10278 $x10805))))
(let ((@x11063 (trans (monotonicity @x10814 @x11054 (= $x10368 (=> $x10805 $x11052))) (rewrite (= (=> $x10805 $x11052) $x11059)) (= $x10368 $x11059))))
(let ((@x11100 (monotonicity @x11063 (trans @x11091 (rewrite (= (=> $x11079 $x10641) $x11093)) (= $x10376 $x11093)) (= (and $x10368 $x10376) $x11098))))
(let (($x10761 (= (and $x10250 (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x10260))))) $x10760)))
(let ((@x10736 (rewrite (= (= (b_S_statusmap$ v_b_S_s$) (b_S_statusmap$ v_b_S_s$)) true))))
(let ((@x10739 (monotonicity (rewrite (= (= ?x10231 ?x10231) true)) @x10736 (= $x10259 (and true true)))))
(let ((@x10743 (trans @x10739 (rewrite (= (and true true) true)) (= $x10259 true))))
(let ((@x10750 (monotonicity (trans (monotonicity @x10743 (= $x10260 $x10165)) @x10522 (= $x10260 $x10141)) (= (and $x10256 $x10260) $x10748))))
(let ((@x10756 (monotonicity (monotonicity @x10750 (= (and $x10253 (and $x10256 $x10260)) $x10751)) (= (and $x10252 (and $x10253 (and $x10256 $x10260))) $x10754))))
(let ((@x10759 (monotonicity @x10756 (= (and $x10251 (and $x10252 (and $x10253 (and $x10256 $x10260)))) $x10757))))
(let ((@x10768 (monotonicity (monotonicity (monotonicity @x10759 $x10761) (= $x10266 $x10763)) (= (and $x10245 $x10266) $x10766))))
(let ((@x10718 (rewrite (= (and true $x10245) $x10245))))
(let (($x10707 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_tm$ (b_S_typemap$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let (($x10219 (b_S_thread_n_local$ v_b_S_s$ ?0)))
(let (($x10234 (and (= (b_S_select_o_tm$ ?x10231 ?0) (b_S_select_o_tm$ ?x10231 ?0)) $x10219)))
(let (($x10235 (=> $x10219 $x10234)))
(let ((@x10673 (rewrite (= (=> $x10219 $x10219) true))))
(let ((@x10666 (rewrite (= (and true $x10219) $x10219))))
(let (($x10697 (= (= (b_S_select_o_tm$ ?x10231 ?0) (b_S_select_o_tm$ ?x10231 ?0)) true)))
(let ((@x10702 (trans (monotonicity (rewrite $x10697) (= $x10234 (and true $x10219))) @x10666 (= $x10234 $x10219))))
(let ((@x10706 (trans (monotonicity @x10702 (= $x10235 (=> $x10219 $x10219))) @x10673 (= $x10235 true))))
(let ((@x10713 (trans (quant-intro @x10706 (= $x10237 $x10707)) (elim-unused (= $x10707 true)) (= $x10237 true))))
(let ((@x10720 (trans (monotonicity @x10713 (= $x10246 (and true $x10245))) @x10718 (= $x10246 $x10245))))
(let (($x10653 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let ((?x10215 (b_S_statusmap$ v_b_S_s$)))
(let ((?x10216 (b_S_select_o_sm$ ?x10215 ?0)))
(let (($x10228 (and (= ?x10216 ?x10216) $x10219)))
(let (($x10229 (=> $x10219 $x10228)))
(let ((@x10686 (monotonicity (rewrite (= (= ?x10216 ?x10216) true)) (= $x10228 (and true $x10219)))))
(let ((@x10690 (monotonicity (trans @x10686 @x10666 (= $x10228 $x10219)) (= $x10229 (=> $x10219 $x10219)))))
(let ((@x10696 (trans (quant-intro (trans @x10690 @x10673 (= $x10229 true)) (= $x10230 $x10653)) (elim-unused (= $x10653 true)) (= $x10230 true))))
(let ((@x10724 (trans (monotonicity @x10696 @x10720 (= $x10247 (and true $x10245))) @x10718 (= $x10247 $x10245))))
(let (($x10676 (forall ((?v0 B_S_ptr$) )(! true :pattern ( (b_S_select_o_mem$ (b_S_memory$ v_b_S_s$) ?v0) ) :qid k!705))
))
(let ((?x10220 (b_S_memory$ v_b_S_s$)))
(let ((?x10221 (b_S_select_o_mem$ ?x10220 ?0)))
(let (($x10223 (and (= ?x10221 ?x10221) $x10219)))
(let (($x10224 (=> $x10219 $x10223)))
(let ((@x10664 (monotonicity (rewrite (= (= ?x10221 ?x10221) true)) (= $x10223 (and true $x10219)))))
(let ((@x10671 (monotonicity (trans @x10664 @x10666 (= $x10223 $x10219)) (= $x10224 (=> $x10219 $x10219)))))
(let ((@x10682 (trans (quant-intro (trans @x10671 @x10673 (= $x10224 true)) (= $x10226 $x10676)) (elim-unused (= $x10676 true)) (= $x10226 true))))
(let ((@x10728 (trans (monotonicity @x10682 @x10724 (= $x10248 (and true $x10245))) @x10718 (= $x10248 $x10245))))
(let (($x10212 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_owner$ v_b_S_s$ ?0))) b_S_kind_n_thread$)))
(let ((@x10655 (quant-intro (rewrite (= (=> (not $x10212) (not $x10212)) true)) (= $x10218 $x10653))))
(let ((@x10730 (monotonicity (trans @x10655 (elim-unused (= $x10653 true)) (= $x10218 true)) @x10728 (= $x10249 (and true $x10245)))))
(let ((@x10771 (monotonicity (trans @x10730 @x10718 (= $x10249 $x10245)) @x10768 (= (and $x10249 (and $x10245 $x10266)) $x10769))))
(let ((@x10777 (monotonicity (monotonicity @x10771 (= (and $x10141 (and $x10249 (and $x10245 $x10266))) $x10772)) (= $x10270 (and true $x10772)))))
(let ((@x10784 (monotonicity (trans @x10777 (rewrite (= (and true $x10772) $x10772)) (= $x10270 $x10772)) (= (and $x10141 $x10270) $x10782))))
(let ((@x10791 (trans (monotonicity @x10784 (= $x10272 (and true $x10782))) (rewrite (= (and true $x10782) $x10782)) (= $x10272 $x10782))))
(let ((@x10797 (monotonicity (monotonicity @x10791 (= (and $x10141 $x10272) $x10792)) (= $x10274 (and true $x10792)))))
(let ((@x11103 (monotonicity (trans @x10797 (rewrite (= (and true $x10792) $x10792)) (= $x10274 $x10792)) @x11100 (= $x10378 (=> $x10792 $x11098)))))
(let ((@x10550 (rewrite (= (and false (and $x10141 (and $x10141 (and $x10164 $x10141)))) false))))
(let (($x10544 (= (and $x10141 (and true (and $x10141 (and $x10164 $x10166)))) (and $x10141 (and $x10141 (and $x10164 $x10141))))))
(let (($x10533 (and $x10141 (and $x10164 $x10141))))
(let (($x10169 (and true (and $x10141 (and $x10164 $x10166)))))
(let ((@x10535 (monotonicity (monotonicity @x10529 (= (and $x10164 $x10166) (and $x10164 $x10141))) (= (and $x10141 (and $x10164 $x10166)) $x10533))))
(let ((@x10542 (trans (monotonicity @x10535 (= $x10169 (and true $x10533))) (rewrite (= (and true $x10533) $x10533)) (= $x10169 $x10533))))
(let ((@x10520 (rewrite (= $x10162 false))))
(let ((@x10548 (monotonicity @x10520 (monotonicity @x10542 $x10544) (= $x10171 (and false (and $x10141 $x10533))))))
(let ((@x10555 (monotonicity (trans @x10548 @x10550 (= $x10171 false)) (= $x10172 (and $x10141 false)))))
(let ((@x10559 (trans @x10555 (rewrite (= (and $x10141 false) false)) (= $x10172 false))))
(let ((@x10566 (trans (monotonicity @x10559 (= $x10173 (and true false))) (rewrite (= (and true false) false)) (= $x10173 false))))
(let ((@x10646 (monotonicity @x10566 (monotonicity @x10640 (= $x10207 $x10641)) (= $x10208 (=> false $x10641)))))
(let ((@x10650 (trans @x10646 (rewrite (= (=> false $x10641) true)) (= $x10208 true))))
(let ((@x11112 (monotonicity @x10650 (trans @x11103 (rewrite (= (=> $x10792 $x11098) $x11105)) (= $x10378 $x11105)) (= $x10379 (and true $x11105)))))
(let (($x10504 (= (and $x10135 (and $x10139 (and $x10141 (and $x10142 (and $x10147 $x10153))))) $x10503)))
(let ((@x10490 (quant-intro (rewrite (= (=> (and $x3078 (< ?0 v_b_L_H_p_G_0$)) $x10145) $x10485)) (= $x10147 $x10488))))
(let ((@x10496 (monotonicity (monotonicity @x10490 (= (and $x10147 $x10153) $x10491)) (= (and $x10142 (and $x10147 $x10153)) $x10494))))
(let ((@x10502 (monotonicity (monotonicity @x10496 (= (and $x10141 (and $x10142 (and $x10147 $x10153))) $x10497)) (= (and $x10139 (and $x10141 (and $x10142 (and $x10147 $x10153)))) $x10500))))
(let ((@x10511 (monotonicity (monotonicity (monotonicity @x10502 $x10504) (= $x10159 $x10506)) (= $x10160 (and true $x10506)))))
(let ((@x10518 (monotonicity (trans @x10511 (rewrite (= (and true $x10506) $x10506)) (= $x10160 $x10506)) (= (and $x10127 $x10160) $x10516))))
(let ((@x11119 (monotonicity @x10518 (trans @x11112 (rewrite (= (and true $x11105) $x11105)) (= $x10379 $x11105)) (= $x10380 (=> $x10516 $x11105)))))
(let ((@x11128 (monotonicity (trans @x11119 (rewrite (= (=> $x10516 $x11105) $x11121)) (= $x10380 $x11121)) (= (and $x10127 $x10380) $x11126))))
(let ((@x10483 (quant-intro (rewrite (= (=> (and $x3078 (< ?0 1)) $x10123) $x10478)) (= $x10125 $x10481))))
(let ((@x11137 (trans (monotonicity @x10483 @x11128 (= $x10382 (=> $x10481 $x11126))) (rewrite (= (=> $x10481 $x11126) $x11133)) (= $x10382 $x11133))))
(let ((@x11143 (monotonicity (monotonicity @x10483 @x11137 (= (and $x10125 $x10382) $x11138)) (= $x10384 (=> $x10118 $x11138)))))
(let ((@x11152 (monotonicity (trans @x11143 (rewrite (= (=> $x10118 $x11138) $x11145)) (= $x10384 $x11145)) (= (and $x10118 $x10384) $x11150))))
(let ((@x10458 (monotonicity (rewrite (= (and $x10109 $x10109) $x10109)) (= (and $x10108 (and $x10109 $x10109)) $x10456))))
(let ((@x10464 (monotonicity (monotonicity @x10458 (= (and $x10108 (and $x10108 (and $x10109 $x10109))) $x10459)) (= $x10113 $x10462))))
(let ((@x10470 (monotonicity (monotonicity @x10464 (= (and $x10106 $x10113) $x10465)) (= (and $x10105 (and $x10106 $x10113)) $x10468))))
(let ((@x10476 (monotonicity (monotonicity @x10470 (= (and $x10104 (and $x10105 (and $x10106 $x10113))) $x10471)) (= (and $x10101 (and $x10104 (and $x10105 (and $x10106 $x10113)))) $x10474))))
(let ((@x11161 (trans (monotonicity @x10476 @x11152 (= $x10386 (=> $x10474 $x11150))) (rewrite (= (=> $x10474 $x11150) $x11157)) (= $x10386 $x11157))))
(let ((@x11167 (monotonicity (monotonicity @x11161 (= (and $x10101 $x10386) $x11162)) (= $x10388 (=> $x10099 $x11162)))))
(let ((@x11176 (monotonicity (trans @x11167 (rewrite (= (=> $x10099 $x11162) $x11169)) (= $x10388 $x11169)) (= (and $x10099 $x10388) $x11174))))
(let ((@x11185 (trans (monotonicity @x11176 (= $x10390 (=> $x10095 $x11174))) (rewrite (= (=> $x10095 $x11174) $x11181)) (= $x10390 $x11181))))
(let (($x10442 (= (and $x10026 (and $x10030 (and $x10032 (and $x10033 (and $x10053 $x10086))))) $x10441)))
(let (($x10414 (= (and $x10063 (and $x10067 (and $x10068 (and $x10071 (and $x10075 $x10078))))) $x10413)))
(let (($x10072 (b_S_in_n_writes_n_at$ v_b_H_wrTime_S_1_T_6_o_1$ ?0)))
(let (($x10395 (not $x10072)))
(let ((@x10403 (monotonicity (quant-intro (rewrite (= (= $x10072 false) $x10395)) (= $x10075 $x10398)) (= (and $x10075 $x10078) $x10401))))
(let ((@x10409 (monotonicity (monotonicity @x10403 (= (and $x10071 (and $x10075 $x10078)) $x10404)) (= (and $x10068 (and $x10071 (and $x10075 $x10078))) $x10407))))
(let ((@x10412 (monotonicity @x10409 (= (and $x10067 (and $x10068 (and $x10071 (and $x10075 $x10078)))) $x10410))))
(let ((@x10421 (monotonicity (monotonicity (monotonicity @x10412 $x10414) (= $x10084 $x10416)) (= (and $x10054 $x10084) $x10419))))
(let ((@x10428 (trans (monotonicity @x10421 (= $x10086 (and true $x10419))) (rewrite (= (and true $x10419) $x10419)) (= $x10086 $x10419))))
(let ((@x10434 (monotonicity (monotonicity @x10428 (= (and $x10053 $x10086) $x10429)) (= (and $x10033 (and $x10053 $x10086)) $x10432))))
(let ((@x10440 (monotonicity (monotonicity @x10434 (= (and $x10032 (and $x10033 (and $x10053 $x10086))) $x10435)) (= (and $x10030 (and $x10032 (and $x10033 (and $x10053 $x10086)))) $x10438))))
(let ((@x10449 (monotonicity (monotonicity (monotonicity @x10440 $x10442) (= $x10092 $x10444)) (= $x10093 (and true $x10444)))))
(let ((@x11191 (monotonicity (trans @x10449 (rewrite (= (and true $x10444) $x10444)) (= $x10093 $x10444)) (monotonicity @x11185 (= (and $x10095 $x10390) $x11186)) (= $x10392 (=> $x10444 $x11186)))))
(let ((@x11200 (monotonicity (trans @x11191 (rewrite (= (=> $x10444 $x11186) $x11193)) (= $x10392 $x11193)) (= $x10393 (not $x11193)))))
(let ((@x11990 (trans @x11200 (monotonicity @x11985 (= (not $x11193) $x11986)) (= $x10393 $x11986))))
(let ((@x11992 (not-or-elim (mp (asserted $x10393) @x11990 $x11986) $x11301)))
(let ((@x12003 (and-elim @x11992 $x10043)))
(let (($x21985 (not $x10043)))
(let (($x21998 (or $x21997 $x21985 $x21993)))
(let ((@x22003 (mp ((_ quant-inst (b_S_ptr$ ?x10035 ?x10038) (b_S_array$ b_T_T_u1$ v_b_P_H_len$)) (or $x21997 (or $x21985 $x21993))) (rewrite (= (or $x21997 (or $x21985 $x21993)) $x21998)) $x21998)))
(let (($x21182 (= ?x10038 v_b_P_H_arr$)))
(let (($x20268 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_ref$ (b_S_ptr$ ?v0 ?v1)) ?v1) :pattern ( (b_S_ptr$ ?v0 ?v1) ) :qid k!628))
))
(let (($x9614 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (= (b_S_ref$ (b_S_ptr$ ?v0 ?v1)) ?v1) :qid k!628))
))
(let (($x9613 (= (b_S_ref$ (b_S_ptr$ ?1 ?0)) ?0)))
(let ((@x15396 (mp~ (asserted $x9614) (nnf-pos (refl (~ $x9613 $x9613)) (~ $x9614 $x9614)) $x9614)))
(let ((@x20273 (mp @x15396 (quant-intro (refl (= $x9613 $x9613)) (= $x9614 $x20268)) $x20268)))
(let (($x21155 (not $x20268)))
(let (($x21187 (or $x21155 $x21182)))
(let ((@x21188 ((_ quant-inst b_T_T_u1$ v_b_P_H_arr$) $x21187)))
(let ((@x23788 (monotonicity (symm (unit-resolution @x21188 @x20273 $x21182) (= v_b_P_H_arr$ ?x10038)) (= ?x22567 ?x10039))))
(let ((@x23790 (trans @x23788 (unit-resolution @x22003 @x15376 @x12003 $x21993) (= ?x22567 ?x21986))))
(let ((@x22721 (symm (monotonicity @x23790 (= $x22568 (b_S_set_n_in$ ?x21986 ?x22346))) (= (b_S_set_n_in$ ?x21986 ?x22346) $x22568))))
(let (($x22347 (b_S_set_n_in$ ?x21986 ?x22346)))
(let (($x22365 (forall ((?v3 B_S_ptr$) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10038 (b_S_ref$ ?x10037)))
(let ((?x10035 (b_S_array$ b_T_T_u1$ v_b_P_H_len$)))
(let ((?x10039 (b_S_ptr$ ?x10035 ?x10038)))
(let ((?x21017 (b_S_ref$ ?x10039)))
(let ((?x21986 (b_S_ptr$ ?x10035 ?x21017)))
(let ((?x22360 (b_S_read_n_version$ v_b_S_s$ ?x21986)))
(let ((?x22361 (b_S_ver_n_domain$ ?x22360)))
(let ((?x22237 (b_S_typ$ ?x21986)))
(let (($x22356 (b_S_has_n_volatile_n_owns_n_set$ ?x22237)))
(or $x22356 (not (b_S_set_n_in$ ?v3 (b_S_owns$ v_b_S_s$ ?x21986))) (b_S_set_n_in2$ ?v3 ?x22361)))))))))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ v_b_S_s$ (b_S_ptr$ (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ (b_S_ptr$ (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$))))))) ) :qid k!565))
))
(let (($x22366 (not $x22365)))
(let (($x22251 (b_S_closed$ v_b_S_s$ ?x21986)))
(let (($x22275 (not $x22251)))
(let (($x22355 (not $x22347)))
(let (($x22367 (or $x22355 $x22275 $x22366)))
(let (($x22368 (not $x22367)))
(let (($x22321 (b_S_in_n_domain$ v_b_S_s$ ?x21986 ?x21986)))
(let (($x22320 (b_S_in_n_domain_n_lab$ v_b_S_s$ ?x21986 ?x21986 b_l_H_public$)))
(let (($x22329 (= $x22320 $x22321)))
(let (($x8687 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) (?v3 B_S_label$) )(! (let (($x8678 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8677 (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3)))
(= $x8677 $x8678))) :pattern ( (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3) ) :qid k!568))
))
(let (($x8678 (b_S_in_n_domain$ ?3 ?2 ?1)))
(let (($x8677 (b_S_in_n_domain_n_lab$ ?3 ?2 ?1 ?0)))
(let (($x8684 (= $x8677 $x8678)))
(let (($x8682 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) (?v3 B_S_label$) )(! (let (($x8678 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8677 (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3)))
(= $x8677 $x8678))) :pattern ( (b_S_in_n_domain_n_lab$ ?v0 ?v1 ?v2 ?v3) ) :qid k!568))
))
(let ((@x8692 (mp (asserted $x8682) (quant-intro (rewrite (= (= $x8677 $x8678) $x8684)) (= $x8682 $x8687)) $x8687)))
(let ((@x15061 (mp~ @x8692 (nnf-pos (refl (~ $x8684 $x8684)) (~ $x8687 $x8687)) $x8687)))
(let (($x23869 (or (not $x8687) $x22329)))
(let ((@x23202 ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10035 ?x21017) (b_S_ptr$ ?x10035 ?x21017) b_l_H_public$) $x23869)))
(let ((@x22334 (symm (unit-resolution @x22003 @x15376 @x12003 $x21993) (= ?x21986 ?x10039))))
(let (($x35 (= b_S_kind_n_primitive$ b_S_kind_n_array$)))
(let (($x36 (not $x35)))
(let (($x22373 (= $x36 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x21986)) b_S_kind_n_primitive$)))))
(let ((?x22237 (b_S_typ$ ?x21986)))
(let ((?x22390 (b_S_kind_n_of$ ?x22237)))
(let (($x22391 (= ?x22390 b_S_kind_n_primitive$)))
(let (($x22151 (= ?x10045 b_S_kind_n_array$)))
(let (($x21118 (b_S_is_n_arraytype$ ?x10035)))
(let (($x22152 (= $x21118 $x22151)))
(let (($x9828 (forall ((?v0 B_S_ctype$) )(! (let ((?x9808 (b_S_kind_n_of$ ?v0)))
(let (($x9820 (= ?x9808 b_S_kind_n_array$)))
(let (($x7807 (b_S_is_n_arraytype$ ?v0)))
(= $x7807 $x9820)))) :pattern ( (b_S_is_n_arraytype$ ?v0) ) :qid k!663))
))
(let (($x9820 (= ?x9808 b_S_kind_n_array$)))
(let (($x7807 (b_S_is_n_arraytype$ ?0)))
(let (($x9825 (= $x7807 $x9820)))
(let (($x9823 (forall ((?v0 B_S_ctype$) )(! (let ((?x9808 (b_S_kind_n_of$ ?v0)))
(let (($x9820 (= ?x9808 b_S_kind_n_array$)))
(let (($x7807 (b_S_is_n_arraytype$ ?v0)))
(= $x7807 $x9820)))) :pattern ( (b_S_is_n_arraytype$ ?v0) ) :qid k!663))
))
(let ((@x9833 (mp (asserted $x9823) (quant-intro (rewrite (= (= $x7807 $x9820) $x9825)) (= $x9823 $x9828)) $x9828)))
(let ((@x15486 (mp~ @x9833 (nnf-pos (refl (~ $x9825 $x9825)) (~ $x9828 $x9828)) $x9828)))
(let (($x22162 (or (not $x9828) $x22152)))
(let ((@x22163 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$)) $x22162)))
(let (($x7188 (forall ((?v0 B_S_ctype$) (?v1 Int) )(! (let ((?x6520 (b_S_array$ ?v0 ?v1)))
(b_S_is_n_arraytype$ ?x6520)) :pattern ( (b_S_array$ ?v0 ?v1) ) :qid k!503))
))
(let ((?x6520 (b_S_array$ ?1 ?0)))
(let (($x7187 (b_S_is_n_arraytype$ ?x6520)))
(let ((@x14616 (mp~ (asserted $x7188) (nnf-pos (refl (~ $x7187 $x7187)) (~ $x7188 $x7188)) $x7188)))
(let (($x21125 (or (not $x7188) $x21118)))
(let ((@x21126 ((_ quant-inst b_T_T_u1$ v_b_P_H_len$) $x21125)))
(let ((@x22343 (unit-resolution (def-axiom (or (not $x22152) (not $x21118) $x22151)) (unit-resolution @x21126 @x14616 $x21118) (or (not $x22152) $x22151))))
(let ((?x21183 (b_S_typ$ ?x10039)))
(let (($x21186 (= ?x21183 ?x10035)))
(let (($x21150 (not $x20274)))
(let (($x21191 (or $x21150 $x21186)))
(let ((@x21192 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ ?x10037)) $x21191)))
(let ((@x22349 (trans (monotonicity @x22334 (= ?x22237 ?x21183)) (unit-resolution @x21192 @x20279 $x21186) (= ?x22237 ?x10035))))
(let ((@x22379 (trans (monotonicity @x22349 (= ?x22390 ?x10045)) (unit-resolution @x22343 (unit-resolution @x22163 @x15486 $x22152) $x22151) (= ?x22390 b_S_kind_n_array$))))
(let ((@x22382 (monotonicity @x22379 (= $x22391 (= b_S_kind_n_array$ b_S_kind_n_primitive$)))))
(let ((@x22386 (trans @x22382 (commutativity (= (= b_S_kind_n_array$ b_S_kind_n_primitive$) $x35)) (= $x22391 $x35))))
(let (($x41 (= b_S_kind_n_thread$ b_S_kind_n_array$)))
(let (($x42 (not $x41)))
(let (($x39 (= b_S_kind_n_composite$ b_S_kind_n_array$)))
(let (($x40 (not $x39)))
(let (($x37 (= b_S_kind_n_composite$ b_S_kind_n_thread$)))
(let (($x38 (not $x37)))
(let (($x32 (= b_S_kind_n_primitive$ b_S_kind_n_thread$)))
(let (($x33 (not $x32)))
(let (($x29 (= b_S_kind_n_primitive$ b_S_kind_n_composite$)))
(let (($x30 (not $x29)))
(let (($x67 (and $x30 $x33 $x36 $x38 $x40 $x42)))
(let (($x48 (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 (and $x42 true))))))))
(let (($x68 (= (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 $x42))))) $x67)))
(let (($x65 (= $x48 (and $x30 (and $x33 (and $x36 (and $x38 (and $x40 $x42))))))))
(let (($x62 (= (and $x33 (and $x36 (and $x38 (and $x40 (and $x42 true))))) (and $x33 (and $x36 (and $x38 (and $x40 $x42)))))))
(let (($x59 (= (and $x36 (and $x38 (and $x40 (and $x42 true)))) (and $x36 (and $x38 (and $x40 $x42))))))
(let (($x56 (= (and $x38 (and $x40 (and $x42 true))) (and $x38 (and $x40 $x42)))))
(let ((@x54 (monotonicity (rewrite (= (and $x42 true) $x42)) (= (and $x40 (and $x42 true)) (and $x40 $x42)))))
(let ((@x66 (monotonicity (monotonicity (monotonicity (monotonicity @x54 $x56) $x59) $x62) $x65)))
(let ((@x72 (mp (asserted $x48) (trans @x66 (rewrite $x68) (= $x48 $x67)) $x67)))
(let ((@x75 (and-elim @x72 $x36)))
(let (($x22336 (not $x22321)))
(let (($x22339 (not $x22320)))
(let ((@x22401 (monotonicity (symm (monotonicity @x22334 @x22334 (= $x22320 $x10095)) (= $x10095 $x22320)) (= $x11180 $x22339))))
(let ((@x22405 (unit-resolution (def-axiom (or (not $x22329) $x22320 $x22336)) (mp (hypothesis $x11180) @x22401 $x22339) (unit-resolution @x23202 @x15061 $x22329) $x22336)))
(let (($x22371 (b_S_is$ ?x21986 ?x22237)))
(let ((@x22409 (mp @x12003 (symm (monotonicity @x22334 @x22349 (= $x22371 $x10043)) (= $x10043 $x22371)) $x22371)))
(let (($x22388 (b_S_typed$ v_b_S_s$ ?x21986)))
(let ((@x12004 (and-elim @x11992 $x10044)))
(let ((@x22419 (mp @x12004 (symm (monotonicity @x22334 (= $x22388 $x10044)) (= $x10044 $x22388)) $x22388)))
(let ((?x22246 (b_S_owner$ v_b_S_s$ ?x21986)))
(let (($x22262 (= ?x22246 b_S_me$)))
(let ((@x12002 (and-elim @x11992 $x10042)))
(let ((@x12001 (and-elim @x11992 $x10040)))
(let ((@x22414 (mp @x12001 (symm (monotonicity @x22334 (= $x22251 $x10040)) (= $x10040 $x22251)) $x22251)))
(let (($x22238 (b_S_is_n_non_n_primitive$ ?x22237)))
(let ((@x12006 (and-elim @x11992 $x10048)))
(let ((@x22441 (mp @x12006 (symm (monotonicity @x22349 (= $x22238 $x10048)) (= $x10048 $x22238)) $x22238)))
(let ((@x12009 (and-elim @x11992 $x10056)))
(let (($x18923 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8572 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x9198 (not $x2351)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9490 (not $x2488)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let (($x16317 (not $x2487)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x16316 (not $x2486)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x9144 (not $x2471)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x16444 (not $x2687)))
(or $x16444 $x9144 $x16316 $x16317 $x9490 $x2249 $x9198 $x8572))))))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!564))
))
(let (($x8593 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8572 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8584 (and $x2687 $x2471 $x2486 $x2487 $x2488 $x2294 $x2351)))
(let (($x8587 (not $x8584)))
(or $x8587 $x8572)))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!564))
))
(let (($x8572 (b_S_in_n_domain$ ?1 ?0 ?0)))
(let ((?x2247 (b_S_typ$ ?0)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x9198 (not $x2351)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2488 (b_S_typed$ ?1 ?0)))
(let (($x9490 (not $x2488)))
(let (($x2487 (b_S_is$ ?0 ?x2247)))
(let (($x16317 (not $x2487)))
(let ((?x2484 (b_S_owner$ ?1 ?0)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x16316 (not $x2486)))
(let (($x2471 (b_S_closed$ ?1 ?0)))
(let (($x9144 (not $x2471)))
(let (($x2687 (b_S_full_n_stop$ ?1)))
(let (($x16444 (not $x2687)))
(let (($x18918 (or $x16444 $x9144 $x16316 $x16317 $x9490 $x2249 $x9198 $x8572)))
(let (($x2294 (not $x2249)))
(let (($x8584 (and $x2687 $x2471 $x2486 $x2487 $x2488 $x2294 $x2351)))
(let (($x8587 (not $x8584)))
(let (($x8590 (or $x8587 $x8572)))
(let ((@x18920 (rewrite (= (or (or $x16444 $x9144 $x16316 $x16317 $x9490 $x2249 $x9198) $x8572) $x18918))))
(let (($x18904 (or $x16444 $x9144 $x16316 $x16317 $x9490 $x2249 $x9198)))
(let ((@x18910 (monotonicity (rewrite (= $x8584 (not $x18904))) (= $x8587 (not (not $x18904))))))
(let ((@x18917 (monotonicity (trans @x18910 (rewrite (= (not (not $x18904)) $x18904)) (= $x8587 $x18904)) (= $x8590 (or $x18904 $x8572)))))
(let (($x8575 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8572 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8571 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(=> $x8571 $x8572))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!564))
))
(let (($x8581 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8572 (b_S_in_n_domain$ ?v0 ?v1 ?v1)))
(let ((?x2247 (b_S_typ$ ?v1)))
(let (($x2351 (b_S_is_n_non_n_primitive$ ?x2247)))
(let (($x2249 (= (b_S_kind_n_of$ ?x2247) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x2487 (b_S_is$ ?v1 ?x2247)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2471 (b_S_closed$ ?v0 ?v1)))
(let (($x2687 (b_S_full_n_stop$ ?v0)))
(let (($x8571 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(or (not $x8571) $x8572))))))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v1) ) :qid k!564))
))
(let (($x8571 (and $x2687 (and $x2471 (and $x2486 (and $x2487 (and $x2488 (and $x2294 $x2351))))))))
(let (($x8578 (or (not $x8571) $x8572)))
(let ((@x8592 (monotonicity (monotonicity (rewrite (= $x8571 $x8584)) (= (not $x8571) $x8587)) (= $x8578 $x8590))))
(let ((@x8597 (trans (quant-intro (rewrite (= (=> $x8571 $x8572) $x8578)) (= $x8575 $x8581)) (quant-intro @x8592 (= $x8581 $x8593)) (= $x8575 $x8593))))
(let ((@x15029 (mp~ (mp (asserted $x8575) @x8597 $x8593) (nnf-pos (refl (~ $x8590 $x8590)) (~ $x8593 $x8593)) $x8593)))
(let ((@x18926 (mp @x15029 (quant-intro (trans @x18917 @x18920 (= $x8590 $x18918)) (= $x8593 $x18923)) $x18923)))
(let (($x22245 (not $x22238)))
(let (($x22389 (not $x22388)))
(let (($x22387 (not $x22371)))
(let (($x20989 (not $x10056)))
(let (($x23398 (or (not $x18923) $x20989 $x22275 (not $x22262) $x22387 $x22389 $x22391 $x22245 $x22321)))
(let (($x23452 (= (or (not $x18923) (or $x20989 $x22275 (not $x22262) $x22387 $x22389 $x22391 $x22245 $x22321)) $x23398)))
(let ((@x23442 ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10035 ?x21017)) (or (not $x18923) (or $x20989 $x22275 (not $x22262) $x22387 $x22389 $x22391 $x22245 $x22321)))))
(let ((@x23448 (mp @x23442 (rewrite $x23452) $x23398)))
(let ((@x22430 (unit-resolution @x23448 @x18926 @x12009 @x22441 @x22414 (trans (monotonicity @x22334 (= ?x22246 ?x10041)) @x12002 $x22262) (or $x22387 $x22389 $x22391 $x22321))))
(let ((@x22432 (unit-resolution @x22430 @x22419 @x22409 @x22405 (mp @x75 (monotonicity (symm @x22386 (= $x35 $x22391)) $x22373) (not $x22391)) false)))
(let ((@x22433 (lemma @x22432 $x10095)))
(let ((@x22709 (mp @x22433 (symm (monotonicity @x22334 @x22334 (= $x22320 $x10095)) (= $x10095 $x22320)) $x22320)))
(let ((@x22714 (unit-resolution (def-axiom (or (not $x22329) $x22339 $x22321)) @x22709 (unit-resolution @x23202 @x15061 $x22329) $x22321)))
(let (($x22369 (or $x22336 $x22368)))
(let (($x18963 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x18947 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let ((?x6587 (b_S_typ$ ?v1)))
(let (($x8599 (b_S_has_n_volatile_n_owns_n_set$ ?x6587)))
(or $x8599 (not (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))) $x8605)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!565))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8914 (not $x2554)))
(let (($x8387 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x18762 (not $x8387)))
(let (($x18955 (not (or $x18762 $x8914 (not $x18947)))))
(let (($x8420 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8631 (not $x8420)))
(or $x8631 $x18955))))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!565))
))
(let (($x8646 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8619 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8602 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8603 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8602)))
(let (($x8615 (not $x8603)))
(or $x8615 $x8605))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!565))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8387 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8640 (and $x8387 $x2554 $x8619)))
(let (($x8420 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8631 (not $x8420)))
(or $x8631 $x8640))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!565))
))
(let (($x18947 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let ((?x6587 (b_S_typ$ ?1)))
(let (($x8599 (b_S_has_n_volatile_n_owns_n_set$ ?x6587)))
(or $x8599 (not (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))) $x8605)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!565))
))
(let (($x2554 (b_S_closed$ ?2 ?1)))
(let (($x8914 (not $x2554)))
(let (($x8387 (b_S_set_n_in$ ?1 (b_S_domain$ ?2 ?0))))
(let (($x18762 (not $x8387)))
(let (($x18955 (not (or $x18762 $x8914 (not $x18947)))))
(let (($x8420 (b_S_in_n_domain$ ?2 ?1 ?0)))
(let (($x8631 (not $x8420)))
(let (($x8619 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let (($x8602 (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))))
(let (($x8603 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?1))) $x8602)))
(let (($x8615 (not $x8603)))
(or $x8615 $x8605))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!565))
))
(let (($x8640 (and $x8387 $x2554 $x8619)))
(let (($x8643 (or $x8631 $x8640)))
(let (($x8605 (b_S_set_n_in2$ ?0 (b_S_ver_n_domain$ (b_S_read_n_version$ ?3 ?1)))))
(let ((?x6587 (b_S_typ$ ?2)))
(let (($x8599 (b_S_has_n_volatile_n_owns_n_set$ ?x6587)))
(let (($x18942 (or $x8599 (not (b_S_set_n_in$ ?0 (b_S_owns$ ?3 ?2))) $x8605)))
(let (($x8602 (b_S_set_n_in$ ?0 (b_S_owns$ ?3 ?2))))
(let (($x8603 (and (not $x8599) $x8602)))
(let (($x8615 (not $x8603)))
(let (($x8616 (or $x8615 $x8605)))
(let ((@x18936 (rewrite (= (not (not (or $x8599 (not $x8602)))) (or $x8599 (not $x8602))))))
(let ((@x18934 (monotonicity (rewrite (= $x8603 (not (or $x8599 (not $x8602))))) (= $x8615 (not (not (or $x8599 (not $x8602))))))))
(let ((@x18941 (monotonicity (trans @x18934 @x18936 (= $x8615 (or $x8599 (not $x8602)))) (= $x8616 (or (or $x8599 (not $x8602)) $x8605)))))
(let ((@x18946 (trans @x18941 (rewrite (= (or (or $x8599 (not $x8602)) $x8605) $x18942)) (= $x8616 $x18942))))
(let ((@x18952 (monotonicity (quant-intro @x18946 (= $x8619 $x18947)) (= $x8640 (and $x8387 $x2554 $x18947)))))
(let ((@x18959 (trans @x18952 (rewrite (= (and $x8387 $x2554 $x18947) $x18955)) (= $x8640 $x18955))))
(let ((@x18965 (quant-intro (monotonicity @x18959 (= $x8643 (or $x8631 $x18955))) (= $x8646 $x18963))))
(let ((@x15041 (monotonicity (refl (~ $x8387 $x8387)) (refl (~ $x2554 $x2554)) (nnf-pos (refl (~ $x8616 $x8616)) (~ $x8619 $x8619)) (~ $x8640 $x8640))))
(let ((@x15045 (nnf-pos (monotonicity (refl (~ $x8631 $x8631)) @x15041 (~ $x8643 $x8643)) (~ $x8646 $x8646))))
(let (($x8613 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8608 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8602 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8603 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8602)))
(=> $x8603 $x8605)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!565))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8387 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8420 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(=> $x8420 (and $x8387 (and $x2554 $x8608))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!565))
))
(let (($x8637 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) (?v2 B_S_ptr$) )(! (let (($x8619 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?v0 ?v2)))))
(let (($x8602 (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1))))
(let (($x8603 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?v1))) $x8602)))
(let (($x8615 (not $x8603)))
(or $x8615 $x8605))))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?v0 ?v1)) ) :qid k!565))
))
(let (($x2554 (b_S_closed$ ?v0 ?v1)))
(let (($x8387 (b_S_set_n_in$ ?v1 (b_S_domain$ ?v0 ?v2))))
(let (($x8625 (and $x8387 (and $x2554 $x8619))))
(let (($x8420 (b_S_in_n_domain$ ?v0 ?v1 ?v2)))
(let (($x8631 (not $x8420)))
(or $x8631 $x8625))))))) :pattern ( (b_S_in_n_domain$ ?v0 ?v1 ?v2) ) :qid k!565))
))
(let ((@x8645 (monotonicity (rewrite (= (and $x8387 (and $x2554 $x8619)) $x8640)) (= (or $x8631 (and $x8387 (and $x2554 $x8619))) $x8643))))
(let (($x8625 (and $x8387 (and $x2554 $x8619))))
(let (($x8632 (or $x8631 $x8625)))
(let (($x8608 (forall ((?v3 B_S_ptr$) )(! (let (($x8605 (b_S_set_n_in2$ ?v3 (b_S_ver_n_domain$ (b_S_read_n_version$ ?2 ?0)))))
(let (($x8602 (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1))))
(let (($x8603 (and (not (b_S_has_n_volatile_n_owns_n_set$ (b_S_typ$ ?1))) $x8602)))
(=> $x8603 $x8605)))) :pattern ( (b_S_set_n_in$ ?v3 (b_S_owns$ ?2 ?1)) ) :qid k!565))
))
(let (($x8611 (=> $x8420 (and $x8387 (and $x2554 $x8608)))))
(let ((@x8624 (monotonicity (quant-intro (rewrite (= (=> $x8603 $x8605) $x8616)) (= $x8608 $x8619)) (= (and $x2554 $x8608) (and $x2554 $x8619)))))
(let ((@x8630 (monotonicity (monotonicity @x8624 (= (and $x8387 (and $x2554 $x8608)) $x8625)) (= $x8611 (=> $x8420 $x8625)))))
(let ((@x8639 (quant-intro (trans @x8630 (rewrite (= (=> $x8420 $x8625) $x8632)) (= $x8611 $x8632)) (= $x8613 $x8637))))
(let ((@x8651 (mp (asserted $x8613) (trans @x8639 (quant-intro @x8645 (= $x8637 $x8646)) (= $x8613 $x8646)) $x8646)))
(let ((@x18966 (mp (mp~ @x8651 @x15045 $x8646) @x18965 $x18963)))
(let (($x23395 (or (not $x18963) $x22336 $x22368)))
(let ((@x23454 (mp ((_ quant-inst v_b_S_s$ (b_S_ptr$ ?x10035 ?x21017) (b_S_ptr$ ?x10035 ?x21017)) (or (not $x18963) $x22369)) (rewrite (= (or (not $x18963) $x22369) $x23395)) $x23395)))
(let ((@x22717 (unit-resolution (def-axiom (or $x22367 $x22347)) (unit-resolution (unit-resolution @x23454 @x18966 $x22369) @x22714 $x22368) $x22347)))
(let ((@x22724 (lemma (unit-resolution (hypothesis (not $x22568)) (mp @x22717 @x22721 $x22568) false) $x22568)))
(let (($x20420 (not $x20417)))
(let (($x20429 (or $x20420 $x20426)))
(let (($x20432 (not $x20429)))
(let (($x20435 (or $x15630 $x15639 $x19492 $x19519 $x20432)))
(let (($x20438 (not $x20435)))
(let (($x20441 (or $x15630 $x15639 $x20438)))
(let (($x20444 (not $x20441)))
(let (($x20447 (or $x15630 $x15633 $x20444)))
(let (($x20450 (not $x20447)))
(let (($x20453 (or $x15630 $x15633 $x20450)))
(let (($x20456 (not $x20453)))
(let (($x20459 (or $x11445 $x19492 $x19519 $x20456)))
(let (($x20462 (not $x20459)))
(let (($x20473 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11759 (not $x10197))))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!705))
))
(let (($x20478 (not $x20473)))
(let (($x20465 (forall ((?v0 Int) )(! (let ((?x11775 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11777 (<= (+ ?x10122 ?x11775) 0)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11759 $x11777))))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!705))
))
(let (($x20470 (not $x20465)))
(let (($x20481 (or $x20470 $x20478)))
(let (($x20484 (not $x20481)))
(let ((?x15780 (b_S_idx$ ?x10037 ?v0!15 b_T_T_u1$)))
(let ((?x15781 (b_S_read_n_u1$ v_b_S_s$ ?x15780)))
(let ((?x16058 (* (- 1) ?x15781)))
(let (($x16060 (>= (+ v_b_S_result_G_0$ ?x16058) 0)))
(let (($x16038 (<= (+ v_b_P_H_len$ (* (- 1) ?v0!15)) 0)))
(let (($x15774 (<= ?v0!15 4294967295)))
(let (($x19578 (not $x15774)))
(let (($x15773 (>= ?v0!15 0)))
(let (($x19577 (not $x15773)))
(let (($x19593 (or $x19577 $x19578 $x16038 $x16060)))
(let (($x19598 (not $x19593)))
(let (($x20487 (or $x19598 $x20484)))
(let (($x20490 (not $x20487)))
(let (($x19658 (not $x10181)))
(let (($x19657 (not $x10179)))
(let (($x19656 (not $x10177)))
(let (($x19655 (not $x10175)))
(let (($x20493 (or $x11446 $x19492 $x19519 $x19655 $x19656 $x19657 $x19658 $x20490)))
(let (($x20496 (not $x20493)))
(let (($x20499 (or $x20462 $x20496)))
(let (($x20502 (not $x20499)))
(let (($x19687 (not $x10255)))
(let (($x19686 (not $x10254)))
(let (($x19685 (not $x10253)))
(let (($x19684 (not $x10252)))
(let (($x19683 (not $x10251)))
(let (($x19682 (not $x10250)))
(let (($x19681 (not $x10163)))
(let (($x19680 (not $x10243)))
(let (($x19679 (not $x10151)))
(let (($x20341 (forall ((?v0 Int) )(! (let ((?x11846 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11848 (<= (+ ?x10122 ?x11846) 0)))
(let (($x11830 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11830 $x11848))))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!705))
))
(let (($x20346 (not $x20341)))
(let (($x19677 (not $x11857)))
(let (($x12733 (<= v_b_L_H_p_G_0$ 4294967295)))
(let (($x19676 (not $x12733)))
(let (($x19675 (not $x11860)))
(let (($x12382 (<= v_b_SL_H_witness_G_0$ 4294967295)))
(let (($x19674 (not $x12382)))
(let (($x12423 (<= v_b_L_H_max_G_1$ 255)))
(let (($x19673 (not $x12423)))
(let (($x19672 (not $x11870)))
(let (($x15588 (not $x10126)))
(let (($x20505 (or $x11218 $x15588 $x19672 $x19673 $x19674 $x19675 $x19676 $x19677 $x20346 $x11826 $x19679 $x19680 $x19681 $x19682 $x19683 $x19684 $x19685 $x19686 $x19687 $x19492 $x19519 $x20502)))
(let (($x20508 (not $x20505)))
(let (($x20511 (or $x11218 $x15588 $x20508)))
(let (($x20514 (not $x20511)))
(let (($x20333 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11363 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10122)) 0)))
(let (($x11347 (>= ?v0 1)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11347 $x11363)))))))))) :pattern ( (b_S_idx$ (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) ?v0 b_T_T_u1$) ) :qid k!705))
))
(let (($x20338 (not $x20333)))
(let (($x20517 (or $x20338 $x20514)))
(let (($x20520 (not $x20517)))
(let ((?x15569 (b_S_idx$ ?x10037 ?v0!13 b_T_T_u1$)))
(let ((?x15570 (b_S_read_n_u1$ v_b_S_s$ ?x15569)))
(let (($x15573 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x15570)) 0)))
(let (($x15565 (>= ?v0!13 1)))
(let (($x15564 (<= ?v0!13 4294967295)))
(let (($x19316 (not $x15564)))
(let (($x15563 (>= ?v0!13 0)))
(let (($x19315 (not $x15563)))
(let (($x19331 (or $x19315 $x19316 $x15565 $x15573)))
(let (($x15566 (not $x15565)))
(let (($x19336 (not $x19331)))
(let ((@x22637 (hypothesis $x19336)))
(let ((@x22640 ((_ th-lemma arith eq-propagate 0 0) (unit-resolution (def-axiom (or $x19331 $x15563)) @x22637 $x15563) (unit-resolution (def-axiom (or $x19331 $x15566)) @x22637 $x15566) (= ?v0!13 0))))
(let ((@x23963 (symm (monotonicity (monotonicity @x22640 (= ?x15569 ?x10096)) (= ?x15570 ?x10103)) (= ?x10103 ?x15570))))
(let (($x20523 (or $x19336 $x20520)))
(let (($x20526 (not $x20523)))
(let (($x20529 (or $x11344 $x20526)))
(let (($x20532 (not $x20529)))
(let (($x20535 (or $x11344 $x20532)))
(let (($x20538 (not $x20535)))
(let (($x19731 (not $x10107)))
(let (($x19730 (not $x10106)))
(let (($x19729 (not $x10105)))
(let (($x19728 (not $x10104)))
(let (($x15551 (not $x10100)))
(let (($x15542 (not $x10097)))
(let (($x20541 (or $x15542 $x15551 $x19728 $x19729 $x19730 $x19731 $x20538)))
(let (($x20544 (not $x20541)))
(let (($x20547 (or $x15542 $x15551 $x20544)))
(let (($x20550 (not $x20547)))
(let (($x15545 (not $x10098)))
(let (($x20553 (or $x15542 $x15545 $x20550)))
(let (($x20556 (not $x20553)))
(let ((?x22481 (b_S_select_o_tm$ ?x10231 ?x10096)))
(let (($x22574 (b_S_ts_n_is_n_volatile$ ?x22481)))
(let (($x22575 (or $x15545 $x22574)))
(let (($x22576 (not $x22575)))
(let ((@x12000 (and-elim @x11992 $x11219)))
(let (($x18685 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8204 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7056 (b_S_typemap$ ?v0)))
(let (($x18673 (or (not (b_S_typed$ ?v0 ?x8204)) (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204)))))
(let (($x18674 (not $x18673)))
(let (($x5372 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x3037 (>= ?v4 0)))
(let (($x16538 (not $x3037)))
(let (($x8199 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x18648 (not $x8199)))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8814 (not $x2704)))
(let (($x8195 (b_S_full_n_stop$ ?v0)))
(let (($x18647 (not $x8195)))
(or $x18647 $x8814 $x18648 $x16538 $x5372 $x18674)))))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!554))
))
(let (($x8266 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8204 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7056 (b_S_typemap$ ?v0)))
(let (($x8250 (and (b_S_typed$ ?v0 ?x8204) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204))))))
(let (($x5372 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x6716 (not $x5372)))
(let (($x3037 (>= ?v4 0)))
(let (($x8199 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8195 (b_S_full_n_stop$ ?v0)))
(let (($x8229 (and $x8195 $x2704 $x8199 $x3037 $x6716)))
(let (($x8234 (not $x8229)))
(or $x8234 $x8250)))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!554))
))
(let ((?x8204 (b_S_idx$ (b_S_ptr$ ?0 ?4) ?1 ?0)))
(let ((?x7056 (b_S_typemap$ ?5)))
(let (($x18673 (or (not (b_S_typed$ ?5 ?x8204)) (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204)))))
(let (($x18674 (not $x18673)))
(let (($x5372 (>= (+ ?1 (* (- 1) ?2)) 0)))
(let (($x3037 (>= ?1 0)))
(let (($x16538 (not $x3037)))
(let (($x8199 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?0 ?2) ?4) (b_S_domain$ ?5 ?3))))
(let (($x18648 (not $x8199)))
(let (($x8814 (not $x2704)))
(let (($x8195 (b_S_full_n_stop$ ?5)))
(let (($x18647 (not $x8195)))
(let (($x18680 (or $x18647 $x8814 $x18648 $x16538 $x5372 $x18674)))
(let (($x8250 (and (b_S_typed$ ?5 ?x8204) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204))))))
(let (($x6716 (not $x5372)))
(let (($x8229 (and $x8195 $x2704 $x8199 $x3037 $x6716)))
(let (($x8234 (not $x8229)))
(let (($x8263 (or $x8234 $x8250)))
(let (($x18649 (or $x18647 $x8814 $x18648 $x16538 $x5372)))
(let ((@x18655 (monotonicity (rewrite (= $x8229 (not $x18649))) (= $x8234 (not (not $x18649))))))
(let ((@x18679 (monotonicity (trans @x18655 (rewrite (= (not (not $x18649)) $x18649)) (= $x8234 $x18649)) (rewrite (= $x8250 $x18674)) (= $x8263 (or $x18649 $x18674)))))
(let ((@x18687 (quant-intro (trans @x18679 (rewrite (= (or $x18649 $x18674) $x18680)) (= $x8263 $x18680)) (= $x8266 $x18685))))
(let (($x8255 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8204 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7056 (b_S_typemap$ ?v0)))
(let (($x8250 (and (b_S_typed$ ?v0 ?x8204) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204))))))
(let (($x3007 (<= 0 ?v4)))
(let (($x6699 (and $x3007 (< ?v4 ?v3))))
(let (($x8199 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8195 (b_S_full_n_stop$ ?v0)))
(let (($x8202 (and $x8195 (and $x2704 (and $x8199 $x6699)))))
(=> $x8202 $x8250)))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!554))
))
(let (($x8260 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ptr$) (?v3 Int) (?v4 Int) (?v5 B_S_ctype$) )(! (let ((?x8204 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)))
(let ((?x7056 (b_S_typemap$ ?v0)))
(let (($x8250 (and (b_S_typed$ ?v0 ?x8204) (not (b_S_ts_n_is_n_volatile$ (b_S_select_o_tm$ ?x7056 ?x8204))))))
(let (($x3007 (<= 0 ?v4)))
(let (($x6699 (and $x3007 (< ?v4 ?v3))))
(let (($x8199 (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2))))
(let (($x2704 (b_S_is_n_primitive$ ?v5)))
(let (($x8195 (b_S_full_n_stop$ ?v0)))
(let (($x8202 (and $x8195 (and $x2704 (and $x8199 $x6699)))))
(let (($x8213 (not $x8202)))
(or $x8213 $x8250))))))))))) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :pattern ( (b_S_set_n_in$ (b_S_ptr$ (b_S_array$ ?v5 ?v3) ?v1) (b_S_domain$ ?v0 ?v2)) (b_S_owner$ ?v0 (b_S_idx$ (b_S_ptr$ ?v5 ?v1) ?v4 ?v5)) (b_S_is_n_primitive$ ?v5) ) :qid k!554))
))
(let (($x8202 (and $x8195 (and $x2704 (and $x8199 (and (<= 0 ?1) (< ?1 ?2)))))))
(let (($x8213 (not $x8202)))
(let (($x8257 (or $x8213 $x8250)))
(let ((@x8231 (rewrite (= (and $x8195 (and $x2704 (and $x8199 (and $x3037 $x6716)))) $x8229))))
(let (($x8224 (= (and $x2704 (and $x8199 (and (<= 0 ?1) (< ?1 ?2)))) (and $x2704 (and $x8199 (and $x3037 $x6716))))))
(let (($x8221 (= (and $x8199 (and (<= 0 ?1) (< ?1 ?2))) (and $x8199 (and $x3037 $x6716)))))
(let ((@x3038 (rewrite (= (<= 0 ?1) $x3037))))
(let ((@x6721 (monotonicity @x3038 (rewrite (= (< ?1 ?2) $x6716)) (= (and (<= 0 ?1) (< ?1 ?2)) (and $x3037 $x6716)))))
(let ((@x8228 (monotonicity (monotonicity (monotonicity @x6721 $x8221) $x8224) (= $x8202 (and $x8195 (and $x2704 (and $x8199 (and $x3037 $x6716))))))))
(let ((@x8265 (monotonicity (monotonicity (trans @x8228 @x8231 (= $x8202 $x8229)) (= $x8213 $x8234)) (= $x8257 $x8263))))
(let ((@x8270 (trans (quant-intro (rewrite (= (=> $x8202 $x8250) $x8257)) (= $x8255 $x8260)) (quant-intro @x8265 (= $x8260 $x8266)) (= $x8255 $x8266))))
(let ((@x14945 (mp~ (mp (asserted $x8255) @x8270 $x8266) (nnf-pos (refl (~ $x8263 $x8263)) (~ $x8266 $x8266)) $x8266)))
(let ((@x18688 (mp @x14945 @x18687 $x18685)))
(let (($x22569 (not $x22568)))
(let (($x21492 (not $x9727)))
(let (($x22580 (not $x18685)))
(let (($x22581 (or $x22580 $x20989 $x21492 $x22569 $x11218 $x22576)))
(let (($x22573 (>= (+ 0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x22570 (>= 0 0)))
(let (($x22571 (not $x22570)))
(let (($x22577 (or $x20989 $x21492 $x22569 $x22571 $x22573 $x22576)))
(let (($x22582 (or $x22580 $x22577)))
(let (($x23555 (or $x20989 $x21492 $x22569 $x11218 $x22576)))
(let ((@x22697 (rewrite (= (+ 0 (* (- 1) v_b_P_H_len$)) (* (- 1) v_b_P_H_len$)))))
(let ((@x22606 (trans (monotonicity @x22697 (= $x22573 (>= (* (- 1) v_b_P_H_len$) 0))) (rewrite (= (>= (* (- 1) v_b_P_H_len$) 0) $x11218)) (= $x22573 $x11218))))
(let ((@x22612 (trans (monotonicity (rewrite (= $x22570 true)) (= $x22571 $x10162)) @x10520 (= $x22571 false))))
(let ((@x22593 (monotonicity @x22612 @x22606 (= $x22577 (or $x20989 $x21492 $x22569 false $x11218 $x22576)))))
(let ((@x22601 (trans @x22593 (rewrite (= (or $x20989 $x21492 $x22569 false $x11218 $x22576) $x23555)) (= $x22577 $x23555))))
(let ((@x22729 (trans (monotonicity @x22601 (= $x22582 (or $x22580 $x23555))) (rewrite (= (or $x22580 $x23555) $x22581)) (= $x22582 $x22581))))
(let ((@x22712 (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ (b_S_ptr$ ?x10035 ?x21017) v_b_P_H_len$ 0 b_T_T_u1$) $x22582) @x22729 $x22581)))
(let ((@x22585 (unit-resolution @x22712 @x18688 @x9728 @x12000 @x12009 @x22724 (hypothesis $x22575) false)))
(let ((@x22589 (lemma @x22585 $x22576)))
(let ((?x22517 (b_S_typ$ ?x10096)))
(let (($x22518 (= ?x22517 b_T_T_u1$)))
(let ((?x22540 (times$ 0 ?x10004)))
(let ((?x22541 (+ ?x10038 ?x22540)))
(let ((?x22542 (b_S_ptr$ b_T_T_u1$ ?x22541)))
(let ((?x22707 (b_S_typ$ ?x22542)))
(let (($x22708 (= ?x22707 b_T_T_u1$)))
(let (($x22543 (= ?x10096 ?x22542)))
(let (($x22544 (not $x22543)))
(let (($x22526 (b_S_extent_n_hint$ ?x10096 ?x10037)))
(let (($x22527 (not $x22526)))
(let (($x22545 (or $x22527 $x22544)))
(let (($x22546 (not $x22545)))
(let (($x22555 (or $x22554 $x22546)))
(let ((@x22556 ((_ quant-inst (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$) 0 b_T_T_u1$) $x22555)))
(let ((@x23661 (unit-resolution (def-axiom (or $x22545 $x22543)) (unit-resolution @x22556 @x18201 $x22546) $x22543)))
(let ((@x22759 (trans (monotonicity @x23661 (= ?x22517 ?x22707)) (unit-resolution ((_ quant-inst b_T_T_u1$ (+ ?x10038 ?x22540)) (or $x21150 $x22708)) @x20279 $x22708) $x22518)))
(let (($x22519 (not $x22518)))
(let (($x22525 (= $x10097 $x22518)))
(let (($x23535 (or $x22005 $x22525)))
(let ((@x22583 ((_ quant-inst (b_S_idx$ ?x10037 0 b_T_T_u1$) b_T_T_u1$) $x23535)))
(let ((@x22743 (unit-resolution (def-axiom (or (not $x22525) $x10097 $x22519)) (hypothesis $x15542) (or (not $x22525) $x22519))))
(let ((@x22953 (unit-resolution (unit-resolution @x22743 (unit-resolution @x22583 @x20266 $x22525) $x22519) @x22759 false)))
(let ((@x22955 (lemma @x22953 $x10097)))
(let (($x20559 (or $x15542 $x15545 $x20556)))
(let (($x20562 (not $x20559)))
(let (($x20565 (or $x11180 $x20562)))
(let (($x20568 (not $x20565)))
(let (($x20571 (or $x11180 $x20568)))
(let (($x19635 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11759 (not $x10197))))))))))) :qid k!705))
))
(let (($x19620 (forall ((?v0 Int) )(! (let ((?x11775 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11777 (<= (+ ?x10122 ?x11775) 0)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11759 $x11777))))))))))) :qid k!705))
))
(let (($x19644 (not (or (not $x19620) (not $x19635)))))
(let (($x19649 (or $x19598 $x19644)))
(let (($x19661 (not (or $x11446 $x19492 $x19519 $x19655 $x19656 $x19657 $x19658 (not $x19649)))))
(let (($x19426 (forall ((?v0 Int) )(! (let ((?x11590 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11592 (<= (+ ?x10122 ?x11590) 0)))
(let (($x11574 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11574 $x11592))))))))))) :qid k!705))
))
(let (($x19446 (not (or (not $x19426) $x19431))))
(let (($x19451 (or $x19404 $x19446)))
(let (($x19459 (not (or $x11571 (not $x19451)))))
(let (($x19464 (or $x11571 $x19459)))
(let (($x19476 (not (or $x15651 $x15654 $x19470 $x19471 $x19472 $x19473 (not $x19464)))))
(let (($x19481 (or $x15651 $x15654 $x19476)))
(let (($x19493 (not $x19481)))
(let (($x19533 (not (or $x11474 $x19519 $x19530 $x19531 $x19492 $x19473 $x19493))))
(let (($x19495 (not (or $x15630 $x15639 $x19487 $x19488 $x19489 $x19490 $x19491 $x19492 $x19473 $x19493))))
(let (($x19500 (or $x15630 $x15639 $x19495)))
(let (($x19508 (not (or $x15630 $x15633 (not $x19500)))))
(let (($x19513 (or $x15630 $x15633 $x19508)))
(let (($x19522 (not (or $x11475 $x19492 $x19519 (not $x19513)))))
(let (($x19538 (or $x19522 $x19533)))
(let (($x19546 (not (or $x15630 $x15639 $x19492 $x19519 (not $x19538)))))
(let (($x19551 (or $x15630 $x15639 $x19546)))
(let (($x19559 (not (or $x15630 $x15633 (not $x19551)))))
(let (($x19564 (or $x15630 $x15633 $x19559)))
(let (($x19572 (not (or $x11445 $x19492 $x19519 (not $x19564)))))
(let (($x19666 (or $x19572 $x19661)))
(let (($x19380 (forall ((?v0 Int) )(! (let ((?x11846 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11848 (<= (+ ?x10122 ?x11846) 0)))
(let (($x11830 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11830 $x11848))))))))))) :qid k!705))
))
(let (($x19689 (or $x11218 $x15588 $x19672 $x19673 $x19674 $x19675 $x19676 $x19677 (not $x19380) $x11826 $x19679 $x19680 $x19681 $x19682 $x19683 $x19684 $x19685 $x19686 $x19687 $x19492 $x19519 (not $x19666))))
(let (($x19690 (not $x19689)))
(let (($x19695 (or $x11218 $x15588 $x19690)))
(let (($x19358 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11363 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10122)) 0)))
(let (($x11347 (>= ?v0 1)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x2815 (>= ?v0 0)))
(let (($x3743 (not $x2815)))
(or $x3743 $x16571 $x11347 $x11363)))))))))) :qid k!705))
))
(let (($x19704 (not (or (not $x19358) (not $x19695)))))
(let (($x19709 (or $x19336 $x19704)))
(let (($x19717 (not (or $x11344 (not $x19709)))))
(let (($x19722 (or $x11344 $x19717)))
(let (($x19734 (not (or $x15542 $x15551 $x19728 $x19729 $x19730 $x19731 (not $x19722)))))
(let (($x19739 (or $x15542 $x15551 $x19734)))
(let (($x19747 (not (or $x15542 $x15545 (not $x19739)))))
(let (($x19752 (or $x15542 $x15545 $x19747)))
(let (($x19760 (not (or $x11180 (not $x19752)))))
(let (($x19765 (or $x11180 $x19760)))
(let (($x12489 (<= ?0 4294967295)))
(let (($x16571 (not $x12489)))
(let (($x3743 (not $x2815)))
(let (($x19624 (or $x3743 $x16571 $x11759 (not $x10197))))
(let ((@x20480 (monotonicity (quant-intro (refl (= $x19624 $x19624)) (= $x19635 $x20473)) (= (not $x19635) $x20478))))
(let ((@x20469 (quant-intro (refl (= (or $x3743 $x16571 $x11759 $x11777) (or $x3743 $x16571 $x11759 $x11777))) (= $x19620 $x20465))))
(let ((@x20483 (monotonicity (monotonicity @x20469 (= (not $x19620) $x20470)) @x20480 (= (or (not $x19620) (not $x19635)) $x20481))))
(let ((@x20492 (monotonicity (monotonicity (monotonicity @x20483 (= $x19644 $x20484)) (= $x19649 $x20487)) (= (not $x19649) $x20490))))
(let ((@x20495 (monotonicity @x20492 (= (or $x11446 $x19492 $x19519 $x19655 $x19656 $x19657 $x19658 (not $x19649)) $x20493))))
(let ((@x20353 (quant-intro (refl (= (or $x3743 $x16571 $x11574 $x11592) (or $x3743 $x16571 $x11574 $x11592))) (= $x19426 $x20349))))
(let ((@x20359 (monotonicity (monotonicity @x20353 (= (not $x19426) $x20354)) (= (or (not $x19426) $x19431) $x20357))))
(let ((@x20368 (monotonicity (monotonicity (monotonicity @x20359 (= $x19446 $x20360)) (= $x19451 $x20363)) (= (not $x19451) $x20366))))
(let ((@x20374 (monotonicity (monotonicity @x20368 (= (or $x11571 (not $x19451)) $x20369)) (= $x19459 $x20372))))
(let ((@x20380 (monotonicity (monotonicity @x20374 (= $x19464 $x20375)) (= (not $x19464) $x20378))))
(let ((@x20383 (monotonicity @x20380 (= (or $x15651 $x15654 $x19470 $x19471 $x19472 $x19473 (not $x19464)) $x20381))))
(let ((@x20392 (monotonicity (monotonicity (monotonicity @x20383 (= $x19476 $x20384)) (= $x19481 $x20387)) (= $x19493 $x20390))))
(let ((@x20425 (monotonicity @x20392 (= (or $x11474 $x19519 $x19530 $x19531 $x19492 $x19473 $x19493) $x20423))))
(let ((@x20395 (monotonicity @x20392 (= (or $x15630 $x15639 $x19487 $x19488 $x19489 $x19490 $x19491 $x19492 $x19473 $x19493) $x20393))))
(let ((@x20404 (monotonicity (monotonicity (monotonicity @x20395 (= $x19495 $x20396)) (= $x19500 $x20399)) (= (not $x19500) $x20402))))
(let ((@x20410 (monotonicity (monotonicity @x20404 (= (or $x15630 $x15633 (not $x19500)) $x20405)) (= $x19508 $x20408))))
(let ((@x20416 (monotonicity (monotonicity @x20410 (= $x19513 $x20411)) (= (not $x19513) $x20414))))
(let ((@x20422 (monotonicity (monotonicity @x20416 (= (or $x11475 $x19492 $x19519 (not $x19513)) $x20417)) (= $x19522 $x20420))))
(let ((@x20431 (monotonicity @x20422 (monotonicity @x20425 (= $x19533 $x20426)) (= $x19538 $x20429))))
(let ((@x20437 (monotonicity (monotonicity @x20431 (= (not $x19538) $x20432)) (= (or $x15630 $x15639 $x19492 $x19519 (not $x19538)) $x20435))))
(let ((@x20446 (monotonicity (monotonicity (monotonicity @x20437 (= $x19546 $x20438)) (= $x19551 $x20441)) (= (not $x19551) $x20444))))
(let ((@x20452 (monotonicity (monotonicity @x20446 (= (or $x15630 $x15633 (not $x19551)) $x20447)) (= $x19559 $x20450))))
(let ((@x20458 (monotonicity (monotonicity @x20452 (= $x19564 $x20453)) (= (not $x19564) $x20456))))
(let ((@x20464 (monotonicity (monotonicity @x20458 (= (or $x11445 $x19492 $x19519 (not $x19564)) $x20459)) (= $x19572 $x20462))))
(let ((@x20501 (monotonicity @x20464 (monotonicity @x20495 (= $x19661 $x20496)) (= $x19666 $x20499))))
(let ((@x20345 (quant-intro (refl (= (or $x3743 $x16571 $x11830 $x11848) (or $x3743 $x16571 $x11830 $x11848))) (= $x19380 $x20341))))
(let ((@x20507 (monotonicity (monotonicity @x20345 (= (not $x19380) $x20346)) (monotonicity @x20501 (= (not $x19666) $x20502)) (= $x19689 $x20505))))
(let ((@x20516 (monotonicity (monotonicity (monotonicity @x20507 (= $x19690 $x20508)) (= $x19695 $x20511)) (= (not $x19695) $x20514))))
(let ((@x20337 (quant-intro (refl (= (or $x3743 $x16571 $x11347 $x11363) (or $x3743 $x16571 $x11347 $x11363))) (= $x19358 $x20333))))
(let ((@x20519 (monotonicity (monotonicity @x20337 (= (not $x19358) $x20338)) @x20516 (= (or (not $x19358) (not $x19695)) $x20517))))
(let ((@x20528 (monotonicity (monotonicity (monotonicity @x20519 (= $x19704 $x20520)) (= $x19709 $x20523)) (= (not $x19709) $x20526))))
(let ((@x20534 (monotonicity (monotonicity @x20528 (= (or $x11344 (not $x19709)) $x20529)) (= $x19717 $x20532))))
(let ((@x20540 (monotonicity (monotonicity @x20534 (= $x19722 $x20535)) (= (not $x19722) $x20538))))
(let ((@x20543 (monotonicity @x20540 (= (or $x15542 $x15551 $x19728 $x19729 $x19730 $x19731 (not $x19722)) $x20541))))
(let ((@x20552 (monotonicity (monotonicity (monotonicity @x20543 (= $x19734 $x20544)) (= $x19739 $x20547)) (= (not $x19739) $x20550))))
(let ((@x20558 (monotonicity (monotonicity @x20552 (= (or $x15542 $x15545 (not $x19739)) $x20553)) (= $x19747 $x20556))))
(let ((@x20564 (monotonicity (monotonicity @x20558 (= $x19752 $x20559)) (= (not $x19752) $x20562))))
(let ((@x20570 (monotonicity (monotonicity @x20564 (= (or $x11180 (not $x19752)) $x20565)) (= $x19760 $x20568))))
(let (($x15798 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x12141 (and $x2815 $x12489 $x11761 $x10197)))
(not $x12141)))))))))) :qid k!705))
))
(let (($x12765 (forall ((?v0 Int) )(! (let ((?x11775 (* (- 1) v_b_S_result_G_0$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11777 (<= (+ ?x10122 ?x11775) 0)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x12080 (and $x2815 $x12489 $x11761)))
(let (($x12041 (not $x12080)))
(or $x12041 $x11777)))))))))))) :qid k!705))
))
(let (($x15802 (and $x12765 $x15798)))
(let (($x16043 (not $x16038)))
(let (($x16046 (and $x15773 $x15774 $x16043)))
(let (($x16049 (not $x16046)))
(let (($x16065 (or $x16049 $x16060)))
(let (($x16068 (not $x16065)))
(let (($x16071 (or $x16068 $x15802)))
(let (($x16077 (and $x11445 $x11388 $x11391 $x10175 $x10177 $x10179 $x10181 $x16071)))
(let (($x15688 (not $x11610)))
(let (($x12122 (forall ((?v0 Int) )(! (let ((?x11590 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11592 (<= (+ ?x10122 ?x11590) 0)))
(let (($x11574 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_1$)) 0)))
(let (($x11576 (not $x11574)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x12107 (and $x2815 $x12489 $x11576)))
(let (($x13540 (not $x12107)))
(or $x13540 $x11592)))))))))))) :qid k!705))
))
(let (($x15691 (and $x12122 $x15688)))
(let (($x15905 (not $x15900)))
(let (($x15908 (and $x15666 $x15667 $x15905)))
(let (($x15911 (not $x15908)))
(let (($x15927 (or $x15911 $x15922)))
(let (($x15930 (not $x15927)))
(let (($x15933 (or $x15930 $x15691)))
(let (($x15936 (and $x11567 $x15933)))
(let (($x15939 (or $x11571 $x15936)))
(let (($x15945 (and $x11529 $x12582 $x11539 $x10317 $x11537 $x11495 $x15939)))
(let (($x15950 (or $x15651 $x15654 $x15945)))
(let (($x15988 (and $x11475 $x11391 $x10350 $x10351 $x11388 $x11495 $x15950)))
(let (($x15956 (and $x10280 $x10283 $x10292 $x10293 $x10294 $x10297 $x10299 $x11388 $x11495 $x15950)))
(let (($x15961 (or $x15630 $x15639 $x15956)))
(let (($x15967 (and $x10280 $x10281 $x15961)))
(let (($x15972 (or $x15630 $x15633 $x15967)))
(let (($x15978 (and $x11474 $x11388 $x11391 $x15972)))
(let (($x15993 (or $x15978 $x15988)))
(let (($x15999 (and $x10280 $x10283 $x11388 $x11391 $x15993)))
(let (($x16004 (or $x15630 $x15639 $x15999)))
(let (($x16010 (and $x10280 $x10281 $x16004)))
(let (($x16015 (or $x15630 $x15633 $x16010)))
(let (($x16021 (and $x11446 $x11388 $x11391 $x16015)))
(let (($x16082 (or $x16021 $x16077)))
(let (($x13515 (forall ((?v0 Int) )(! (let ((?x11846 (* (- 1) v_b_L_H_max_G_1$)))
(let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11848 (<= (+ ?x10122 ?x11846) 0)))
(let (($x11830 (>= (+ ?v0 (* (- 1) v_b_L_H_p_G_0$)) 0)))
(let (($x11832 (not $x11830)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x12334 (and $x2815 $x12489 $x11832)))
(let (($x12873 (not $x12334)))
(or $x12873 $x11848)))))))))))) :qid k!705))
))
(let (($x16088 (and $x11219 $x10126 $x11870 $x12423 $x12382 $x11860 $x12733 $x11857 $x13515 $x11827 $x10151 $x10243 $x10163 $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391 $x16082)))
(let (($x16093 (or $x11218 $x15588 $x16088)))
(let (($x12867 (forall ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x11363 (>= (+ v_b_L_H_max_G_0$ (* (- 1) ?x10122)) 0)))
(let (($x11347 (>= ?v0 1)))
(let (($x11348 (not $x11347)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(let (($x12578 (and $x2815 $x12489 $x11348)))
(let (($x12329 (not $x12578)))
(or $x12329 $x11363))))))))))) :qid k!705))
))
(let (($x16096 (and $x12867 $x16093)))
(let (($x15568 (not (and $x15563 $x15564 $x15566))))
(let (($x15574 (or $x15568 $x15573)))
(let (($x15575 (not $x15574)))
(let (($x16099 (or $x15575 $x16096)))
(let (($x16102 (and $x11341 $x16099)))
(let (($x16105 (or $x11344 $x16102)))
(let (($x16111 (and $x10097 $x10100 $x10104 $x10105 $x10106 $x10107 $x16105)))
(let (($x16116 (or $x15542 $x15551 $x16111)))
(let (($x16122 (and $x10097 $x10098 $x16116)))
(let (($x16127 (or $x15542 $x15545 $x16122)))
(let (($x16130 (and $x10095 $x16127)))
(let (($x16133 (or $x11180 $x16130)))
(let (($x19669 (and $x11219 $x10126 $x11870 $x12423 $x12382 $x11860 $x12733 $x11857 $x19380 $x11827 $x10151 $x10243 $x10163 $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391 $x19666)))
(let ((@x19630 (monotonicity (rewrite (= (and $x2815 $x12489 $x11761 $x10197) (not $x19624))) (= (not (and $x2815 $x12489 $x11761 $x10197)) (not (not $x19624))))))
(let ((@x19634 (trans @x19630 (rewrite (= (not (not $x19624)) $x19624)) (= (not (and $x2815 $x12489 $x11761 $x10197)) $x19624))))
(let ((@x19617 (rewrite (= (or (or $x3743 $x16571 $x11759) $x11777) (or $x3743 $x16571 $x11759 $x11777)))))
(let (($x12080 (and $x2815 $x12489 $x11761)))
(let (($x12041 (not $x12080)))
(let (($x12704 (or $x12041 $x11777)))
(let ((@x19607 (monotonicity (rewrite (= $x12080 (not (or $x3743 $x16571 $x11759)))) (= $x12041 (not (not (or $x3743 $x16571 $x11759)))))))
(let ((@x19611 (trans @x19607 (rewrite (= (not (not (or $x3743 $x16571 $x11759))) (or $x3743 $x16571 $x11759))) (= $x12041 (or $x3743 $x16571 $x11759)))))
(let ((@x19619 (trans (monotonicity @x19611 (= $x12704 (or (or $x3743 $x16571 $x11759) $x11777))) @x19617 (= $x12704 (or $x3743 $x16571 $x11759 $x11777)))))
(let ((@x19640 (monotonicity (quant-intro @x19619 (= $x12765 $x19620)) (quant-intro @x19634 (= $x15798 $x19635)) (= $x15802 (and $x19620 $x19635)))))
(let ((@x19585 (monotonicity (rewrite (= $x16046 (not (or $x19577 $x19578 $x16038)))) (= $x16049 (not (not (or $x19577 $x19578 $x16038)))))))
(let ((@x19589 (trans @x19585 (rewrite (= (not (not (or $x19577 $x19578 $x16038))) (or $x19577 $x19578 $x16038))) (= $x16049 (or $x19577 $x19578 $x16038)))))
(let ((@x19597 (trans (monotonicity @x19589 (= $x16065 (or (or $x19577 $x19578 $x16038) $x16060))) (rewrite (= (or (or $x19577 $x19578 $x16038) $x16060) $x19593)) (= $x16065 $x19593))))
(let ((@x19651 (monotonicity (monotonicity @x19597 (= $x16068 $x19598)) (trans @x19640 (rewrite (= (and $x19620 $x19635) $x19644)) (= $x15802 $x19644)) (= $x16071 $x19649))))
(let ((@x19654 (monotonicity @x19651 (= $x16077 (and $x11445 $x11388 $x11391 $x10175 $x10177 $x10179 $x10181 $x19649)))))
(let ((@x19665 (trans @x19654 (rewrite (= (and $x11445 $x11388 $x11391 $x10175 $x10177 $x10179 $x10181 $x19649) $x19661)) (= $x16077 $x19661))))
(let ((@x19440 (trans (monotonicity (rewrite (= $x11610 $x19431)) (= $x15688 (not $x19431))) (rewrite (= (not $x19431) $x19430)) (= $x15688 $x19430))))
(let ((@x19423 (rewrite (= (or (or $x3743 $x16571 $x11574) $x11592) (or $x3743 $x16571 $x11574 $x11592)))))
(let (($x12107 (and $x2815 $x12489 $x11576)))
(let (($x13540 (not $x12107)))
(let (($x12473 (or $x13540 $x11592)))
(let ((@x19413 (monotonicity (rewrite (= $x12107 (not (or $x3743 $x16571 $x11574)))) (= $x13540 (not (not (or $x3743 $x16571 $x11574)))))))
(let ((@x19417 (trans @x19413 (rewrite (= (not (not (or $x3743 $x16571 $x11574))) (or $x3743 $x16571 $x11574))) (= $x13540 (or $x3743 $x16571 $x11574)))))
(let ((@x19425 (trans (monotonicity @x19417 (= $x12473 (or (or $x3743 $x16571 $x11574) $x11592))) @x19423 (= $x12473 (or $x3743 $x16571 $x11574 $x11592)))))
(let ((@x19443 (monotonicity (quant-intro @x19425 (= $x12122 $x19426)) @x19440 (= $x15691 (and $x19426 $x19430)))))
(let ((@x19391 (monotonicity (rewrite (= $x15908 (not (or $x19383 $x19384 $x15900)))) (= $x15911 (not (not (or $x19383 $x19384 $x15900)))))))
(let ((@x19395 (trans @x19391 (rewrite (= (not (not (or $x19383 $x19384 $x15900))) (or $x19383 $x19384 $x15900))) (= $x15911 (or $x19383 $x19384 $x15900)))))
(let ((@x19403 (trans (monotonicity @x19395 (= $x15927 (or (or $x19383 $x19384 $x15900) $x15922))) (rewrite (= (or (or $x19383 $x19384 $x15900) $x15922) $x19399)) (= $x15927 $x19399))))
(let ((@x19453 (monotonicity (monotonicity @x19403 (= $x15930 $x19404)) (trans @x19443 (rewrite (= (and $x19426 $x19430) $x19446)) (= $x15691 $x19446)) (= $x15933 $x19451))))
(let ((@x19463 (trans (monotonicity @x19453 (= $x15936 (and $x11567 $x19451))) (rewrite (= (and $x11567 $x19451) $x19459)) (= $x15936 $x19459))))
(let ((@x19469 (monotonicity (monotonicity @x19463 (= $x15939 $x19464)) (= $x15945 (and $x11529 $x12582 $x11539 $x10317 $x11537 $x11495 $x19464)))))
(let ((@x19480 (trans @x19469 (rewrite (= (and $x11529 $x12582 $x11539 $x10317 $x11537 $x11495 $x19464) $x19476)) (= $x15945 $x19476))))
(let ((@x19529 (monotonicity (monotonicity @x19480 (= $x15950 $x19481)) (= $x15988 (and $x11475 $x11391 $x10350 $x10351 $x11388 $x11495 $x19481)))))
(let ((@x19537 (trans @x19529 (rewrite (= (and $x11475 $x11391 $x10350 $x10351 $x11388 $x11495 $x19481) $x19533)) (= $x15988 $x19533))))
(let ((@x19497 (rewrite (= (and $x10280 $x10283 $x10292 $x10293 $x10294 $x10297 $x10299 $x11388 $x11495 $x19481) $x19495))))
(let ((@x19486 (monotonicity (monotonicity @x19480 (= $x15950 $x19481)) (= $x15956 (and $x10280 $x10283 $x10292 $x10293 $x10294 $x10297 $x10299 $x11388 $x11495 $x19481)))))
(let ((@x19505 (monotonicity (monotonicity (trans @x19486 @x19497 (= $x15956 $x19495)) (= $x15961 $x19500)) (= $x15967 (and $x10280 $x10281 $x19500)))))
(let ((@x19512 (trans @x19505 (rewrite (= (and $x10280 $x10281 $x19500) $x19508)) (= $x15967 $x19508))))
(let ((@x19518 (monotonicity (monotonicity @x19512 (= $x15972 $x19513)) (= $x15978 (and $x11474 $x11388 $x11391 $x19513)))))
(let ((@x19526 (trans @x19518 (rewrite (= (and $x11474 $x11388 $x11391 $x19513) $x19522)) (= $x15978 $x19522))))
(let ((@x19543 (monotonicity (monotonicity @x19526 @x19537 (= $x15993 $x19538)) (= $x15999 (and $x10280 $x10283 $x11388 $x11391 $x19538)))))
(let ((@x19550 (trans @x19543 (rewrite (= (and $x10280 $x10283 $x11388 $x11391 $x19538) $x19546)) (= $x15999 $x19546))))
(let ((@x19556 (monotonicity (monotonicity @x19550 (= $x16004 $x19551)) (= $x16010 (and $x10280 $x10281 $x19551)))))
(let ((@x19563 (trans @x19556 (rewrite (= (and $x10280 $x10281 $x19551) $x19559)) (= $x16010 $x19559))))
(let ((@x19569 (monotonicity (monotonicity @x19563 (= $x16015 $x19564)) (= $x16021 (and $x11446 $x11388 $x11391 $x19564)))))
(let ((@x19576 (trans @x19569 (rewrite (= (and $x11446 $x11388 $x11391 $x19564) $x19572)) (= $x16021 $x19572))))
(let ((@x19377 (rewrite (= (or (or $x3743 $x16571 $x11830) $x11848) (or $x3743 $x16571 $x11830 $x11848)))))
(let (($x12334 (and $x2815 $x12489 $x11832)))
(let (($x12873 (not $x12334)))
(let (($x13074 (or $x12873 $x11848)))
(let ((@x19367 (monotonicity (rewrite (= $x12334 (not (or $x3743 $x16571 $x11830)))) (= $x12873 (not (not (or $x3743 $x16571 $x11830)))))))
(let ((@x19371 (trans @x19367 (rewrite (= (not (not (or $x3743 $x16571 $x11830))) (or $x3743 $x16571 $x11830))) (= $x12873 (or $x3743 $x16571 $x11830)))))
(let ((@x19379 (trans (monotonicity @x19371 (= $x13074 (or (or $x3743 $x16571 $x11830) $x11848))) @x19377 (= $x13074 (or $x3743 $x16571 $x11830 $x11848)))))
(let ((@x19671 (monotonicity (quant-intro @x19379 (= $x13515 $x19380)) (monotonicity @x19576 @x19665 (= $x16082 $x19666)) (= $x16088 $x19669))))
(let ((@x19697 (monotonicity (trans @x19671 (rewrite (= $x19669 $x19690)) (= $x16088 $x19690)) (= $x16093 $x19695))))
(let ((@x19355 (rewrite (= (or (or $x3743 $x16571 $x11347) $x11363) (or $x3743 $x16571 $x11347 $x11363)))))
(let (($x12578 (and $x2815 $x12489 $x11348)))
(let (($x12329 (not $x12578)))
(let (($x12150 (or $x12329 $x11363)))
(let ((@x19345 (monotonicity (rewrite (= $x12578 (not (or $x3743 $x16571 $x11347)))) (= $x12329 (not (not (or $x3743 $x16571 $x11347)))))))
(let ((@x19349 (trans @x19345 (rewrite (= (not (not (or $x3743 $x16571 $x11347))) (or $x3743 $x16571 $x11347))) (= $x12329 (or $x3743 $x16571 $x11347)))))
(let ((@x19357 (trans (monotonicity @x19349 (= $x12150 (or (or $x3743 $x16571 $x11347) $x11363))) @x19355 (= $x12150 (or $x3743 $x16571 $x11347 $x11363)))))
(let ((@x19700 (monotonicity (quant-intro @x19357 (= $x12867 $x19358)) @x19697 (= $x16096 (and $x19358 $x19695)))))
(let ((@x19323 (monotonicity (rewrite (= (and $x15563 $x15564 $x15566) (not (or $x19315 $x19316 $x15565)))) (= $x15568 (not (not (or $x19315 $x19316 $x15565)))))))
(let ((@x19327 (trans @x19323 (rewrite (= (not (not (or $x19315 $x19316 $x15565))) (or $x19315 $x19316 $x15565))) (= $x15568 (or $x19315 $x19316 $x15565)))))
(let ((@x19335 (trans (monotonicity @x19327 (= $x15574 (or (or $x19315 $x19316 $x15565) $x15573))) (rewrite (= (or (or $x19315 $x19316 $x15565) $x15573) $x19331)) (= $x15574 $x19331))))
(let ((@x19711 (monotonicity (monotonicity @x19335 (= $x15575 $x19336)) (trans @x19700 (rewrite (= (and $x19358 $x19695) $x19704)) (= $x16096 $x19704)) (= $x16099 $x19709))))
(let ((@x19721 (trans (monotonicity @x19711 (= $x16102 (and $x11341 $x19709))) (rewrite (= (and $x11341 $x19709) $x19717)) (= $x16102 $x19717))))
(let ((@x19727 (monotonicity (monotonicity @x19721 (= $x16105 $x19722)) (= $x16111 (and $x10097 $x10100 $x10104 $x10105 $x10106 $x10107 $x19722)))))
(let ((@x19738 (trans @x19727 (rewrite (= (and $x10097 $x10100 $x10104 $x10105 $x10106 $x10107 $x19722) $x19734)) (= $x16111 $x19734))))
(let ((@x19744 (monotonicity (monotonicity @x19738 (= $x16116 $x19739)) (= $x16122 (and $x10097 $x10098 $x19739)))))
(let ((@x19751 (trans @x19744 (rewrite (= (and $x10097 $x10098 $x19739) $x19747)) (= $x16122 $x19747))))
(let ((@x19757 (monotonicity (monotonicity @x19751 (= $x16127 $x19752)) (= $x16130 (and $x10095 $x19752)))))
(let ((@x19767 (monotonicity (trans @x19757 (rewrite (= (and $x10095 $x19752) $x19760)) (= $x16130 $x19760)) (= $x16133 $x19765))))
(let (($x15783 (<= (+ ?x15781 (* (- 1) v_b_S_result_G_0$)) 0)))
(let (($x15778 (and $x15773 $x15774 (not (>= (+ ?v0!15 (* (- 1) v_b_P_H_len$)) 0)))))
(let (($x15785 (not (or (not $x15778) $x15783))))
(let (($x15806 (or $x15785 $x15802)))
(let (($x13568 (and $x11388 $x11391 $x10175 $x10177 $x10179 $x10181)))
(let (($x13573 (not $x13568)))
(let (($x15769 (not $x13573)))
(let (($x15766 (not $x11736)))
(let (($x15810 (and $x15766 $x15769 $x15806)))
(let (($x15676 (<= (+ ?x15674 (* (- 1) v_b_L_H_max_G_3$)) 0)))
(let (($x15678 (not (or (not (and $x15666 $x15667 (not (>= (+ ?v0!14 ?x11540) 0)))) $x15676))))
(let (($x15695 (or $x15678 $x15691)))
(let (($x15662 (not $x11571)))
(let (($x15699 (and $x15662 $x15695)))
(let (($x15703 (or $x11571 $x15699)))
(let (($x12469 (and $x11529 $x12582 $x11539 $x10317 $x11537 $x11495)))
(let (($x12870 (not $x12469)))
(let (($x15657 (not $x12870)))
(let (($x15707 (and $x15657 $x15703)))
(let (($x15711 (or $x15651 $x15654 $x15707)))
(let (($x15735 (not $x11689)))
(let (($x15738 (and $x15735 $x15711)))
(let (($x15648 (not $x11526)))
(let (($x15715 (and $x15648 $x15711)))
(let (($x15719 (or $x15630 $x15639 $x15715)))
(let (($x15636 (not $x10960)))
(let (($x15723 (and $x15636 $x15719)))
(let (($x15727 (or $x15630 $x15633 $x15723)))
(let (($x15645 (not $x11491)))
(let (($x15731 (and $x15645 $x15727)))
(let (($x15742 (or $x15731 $x15738)))
(let (($x15642 (not $x11471)))
(let (($x15746 (and $x15642 $x15742)))
(let (($x15750 (or $x15630 $x15639 $x15746)))
(let (($x15754 (and $x15636 $x15750)))
(let (($x15758 (or $x15630 $x15633 $x15754)))
(let (($x15627 (not $x11460)))
(let (($x15762 (and $x15627 $x15758)))
(let (($x15814 (or $x15762 $x15810)))
(let (($x13557 (and $x10243 $x10163 $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391)))
(let (($x13562 (not $x13557)))
(let (($x15624 (not $x13562)))
(let (($x12668 (and $x11219 $x10126 $x11870 $x12423 $x12382 $x11860 $x12733 $x11857 $x13515 $x11827 $x10151 $x11388 $x11391)))
(let (($x15818 (and $x12668 $x15624 $x15814)))
(let (($x15585 (not $x11219)))
(let (($x15822 (or $x15585 $x15588 $x15818)))
(let (($x15826 (and $x12867 $x15822)))
(let (($x15830 (or $x15575 $x15826)))
(let (($x15559 (not $x11344)))
(let (($x15834 (and $x15559 $x15830)))
(let (($x15838 (or $x11344 $x15834)))
(let (($x15554 (not $x11338)))
(let (($x15842 (and $x15554 $x15838)))
(let (($x15846 (or $x15542 $x15551 $x15842)))
(let (($x15548 (not $x11168)))
(let (($x15850 (and $x15548 $x15846)))
(let (($x15854 (or $x15542 $x15545 $x15850)))
(let (($x15539 (not $x11180)))
(let (($x15858 (and $x15539 $x15854)))
(let (($x15862 (or $x11180 $x15858)))
(let (($x16053 (= (+ ?x15781 (* (- 1) v_b_S_result_G_0$)) (+ (* (- 1) v_b_S_result_G_0$) ?x15781))))
(let ((@x16057 (monotonicity (rewrite $x16053) (= $x15783 (<= (+ (* (- 1) v_b_S_result_G_0$) ?x15781) 0)))))
(let ((@x16064 (trans @x16057 (rewrite (= (<= (+ (* (- 1) v_b_S_result_G_0$) ?x15781) 0) $x16060)) (= $x15783 $x16060))))
(let (($x15776 (>= (+ ?v0!15 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x16031 (= (+ ?v0!15 (* (- 1) v_b_P_H_len$)) (+ (* (- 1) v_b_P_H_len$) ?v0!15))))
(let ((@x16035 (monotonicity (rewrite $x16031) (= $x15776 (>= (+ (* (- 1) v_b_P_H_len$) ?v0!15) 0)))))
(let ((@x16042 (trans @x16035 (rewrite (= (>= (+ (* (- 1) v_b_P_H_len$) ?v0!15) 0) $x16038)) (= $x15776 $x16038))))
(let ((@x16048 (monotonicity (monotonicity @x16042 (= (not $x15776) $x16043)) (= $x15778 $x16046))))
(let ((@x16067 (monotonicity (monotonicity @x16048 (= (not $x15778) $x16049)) @x16064 (= (or (not $x15778) $x15783) $x16065))))
(let ((@x16076 (monotonicity (rewrite (= $x15766 $x11731)) (rewrite (= $x15769 $x13568)) (monotonicity (monotonicity @x16067 (= $x15785 $x16068)) (= $x15806 $x16071)) (= $x15810 (and $x11731 $x13568 $x16071)))))
(let ((@x16081 (trans @x16076 (rewrite (= (and $x11731 $x13568 $x16071) $x16077)) (= $x15810 $x16077))))
(let (($x15928 (= (or (not (and $x15666 $x15667 (not (>= (+ ?v0!14 ?x11540) 0)))) $x15676) $x15927)))
(let (($x15915 (= (+ ?x15674 (* (- 1) v_b_L_H_max_G_3$)) (+ (* (- 1) v_b_L_H_max_G_3$) ?x15674))))
(let ((@x15919 (monotonicity (rewrite $x15915) (= $x15676 (<= (+ (* (- 1) v_b_L_H_max_G_3$) ?x15674) 0)))))
(let ((@x15926 (trans @x15919 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_3$) ?x15674) 0) $x15922)) (= $x15676 $x15922))))
(let ((@x15897 (monotonicity (rewrite (= (+ ?v0!14 ?x11540) (+ ?x11540 ?v0!14))) (= (>= (+ ?v0!14 ?x11540) 0) (>= (+ ?x11540 ?v0!14) 0)))))
(let ((@x15904 (trans @x15897 (rewrite (= (>= (+ ?x11540 ?v0!14) 0) $x15900)) (= (>= (+ ?v0!14 ?x11540) 0) $x15900))))
(let ((@x15910 (monotonicity (monotonicity @x15904 (= (not (>= (+ ?v0!14 ?x11540) 0)) $x15905)) (= (and $x15666 $x15667 (not (>= (+ ?v0!14 ?x11540) 0))) $x15908))))
(let ((@x15913 (monotonicity @x15910 (= (not (and $x15666 $x15667 (not (>= (+ ?v0!14 ?x11540) 0)))) $x15911))))
(let ((@x15935 (monotonicity (monotonicity (monotonicity @x15913 @x15926 $x15928) (= $x15678 $x15930)) (= $x15695 $x15933))))
(let ((@x15941 (monotonicity (monotonicity (rewrite (= $x15662 $x11567)) @x15935 (= $x15699 $x15936)) (= $x15703 $x15939))))
(let ((@x15944 (monotonicity (rewrite (= $x15657 $x12469)) @x15941 (= $x15707 (and $x12469 $x15939)))))
(let ((@x15952 (monotonicity (trans @x15944 (rewrite (= (and $x12469 $x15939) $x15945)) (= $x15707 $x15945)) (= $x15711 $x15950))))
(let ((@x15987 (monotonicity (rewrite (= $x15735 $x11684)) @x15952 (= $x15738 (and $x11684 $x15950)))))
(let ((@x15955 (monotonicity (rewrite (= $x15648 $x11521)) @x15952 (= $x15715 (and $x11521 $x15950)))))
(let ((@x15963 (monotonicity (trans @x15955 (rewrite (= (and $x11521 $x15950) $x15956)) (= $x15715 $x15956)) (= $x15719 $x15961))))
(let ((@x15966 (monotonicity (rewrite (= $x15636 $x10282)) @x15963 (= $x15723 (and $x10282 $x15961)))))
(let ((@x15974 (monotonicity (trans @x15966 (rewrite (= (and $x10282 $x15961) $x15967)) (= $x15723 $x15967)) (= $x15727 $x15972))))
(let ((@x15977 (monotonicity (rewrite (= $x15645 $x11486)) @x15974 (= $x15731 (and $x11486 $x15972)))))
(let ((@x15995 (monotonicity (trans @x15977 (rewrite (= (and $x11486 $x15972) $x15978)) (= $x15731 $x15978)) (trans @x15987 (rewrite (= (and $x11684 $x15950) $x15988)) (= $x15738 $x15988)) (= $x15742 $x15993))))
(let ((@x15998 (monotonicity (rewrite (= $x15642 $x11466)) @x15995 (= $x15746 (and $x11466 $x15993)))))
(let ((@x16006 (monotonicity (trans @x15998 (rewrite (= (and $x11466 $x15993) $x15999)) (= $x15746 $x15999)) (= $x15750 $x16004))))
(let ((@x16009 (monotonicity (rewrite (= $x15636 $x10282)) @x16006 (= $x15754 (and $x10282 $x16004)))))
(let ((@x16017 (monotonicity (trans @x16009 (rewrite (= (and $x10282 $x16004) $x16010)) (= $x15754 $x16010)) (= $x15758 $x16015))))
(let ((@x16020 (monotonicity (rewrite (= $x15627 $x11455)) @x16017 (= $x15762 (and $x11455 $x16015)))))
(let ((@x16084 (monotonicity (trans @x16020 (rewrite (= (and $x11455 $x16015) $x16021)) (= $x15762 $x16021)) @x16081 (= $x15814 $x16082))))
(let ((@x16087 (monotonicity (rewrite (= $x15624 $x13557)) @x16084 (= $x15818 (and $x12668 $x13557 $x16082)))))
(let ((@x16092 (trans @x16087 (rewrite (= (and $x12668 $x13557 $x16082) $x16088)) (= $x15818 $x16088))))
(let ((@x16098 (monotonicity (monotonicity (rewrite (= $x15585 $x11218)) @x16092 (= $x15822 $x16093)) (= $x15826 $x16096))))
(let ((@x16104 (monotonicity (rewrite (= $x15559 $x11341)) (monotonicity @x16098 (= $x15830 $x16099)) (= $x15834 $x16102))))
(let ((@x16110 (monotonicity (rewrite (= $x15554 $x11333)) (monotonicity @x16104 (= $x15838 $x16105)) (= $x15842 (and $x11333 $x16105)))))
(let ((@x16118 (monotonicity (trans @x16110 (rewrite (= (and $x11333 $x16105) $x16111)) (= $x15842 $x16111)) (= $x15846 $x16116))))
(let ((@x16121 (monotonicity (rewrite (= $x15548 $x10099)) @x16118 (= $x15850 (and $x10099 $x16116)))))
(let ((@x16129 (monotonicity (trans @x16121 (rewrite (= (and $x10099 $x16116) $x16122)) (= $x15850 $x16122)) (= $x15854 $x16127))))
(let ((@x16135 (monotonicity (monotonicity (rewrite (= $x15539 $x10095)) @x16129 (= $x15858 $x16130)) (= $x15862 $x16133))))
(let (($x12404 (exists ((?v0 Int) )(! (let ((?x10037 (b_S_ptr$ b_T_T_u1$ v_b_P_H_arr$)))
(let ((?x10121 (b_S_idx$ ?x10037 ?v0 b_T_T_u1$)))
(let ((?x10122 (b_S_read_n_u1$ v_b_S_s$ ?x10121)))
(let (($x10197 (= ?x10122 v_b_S_result_G_0$)))
(let (($x11759 (>= (+ ?v0 (* (- 1) v_b_P_H_len$)) 0)))
(let (($x11761 (not $x11759)))
(let (($x12489 (<= ?v0 4294967295)))
(let (($x2815 (>= ?v0 0)))
(and $x2815 $x12489 $x11761 $x10197))))))))) :qid k!705))
))
(let (($x12980 (not $x12765)))
(let (($x12419 (or $x12980 $x12404)))
(let (($x12072 (and $x12765 $x12419)))
(let (($x13431 (or $x11736 $x13573 $x12072)))
(let (($x12485 (not $x12122)))
(let (($x12024 (or $x12485 $x11610)))
(let (($x13333 (and $x12122 $x12024)))
(let (($x12126 (or $x11571 $x13333)))
(let (($x13439 (and $x11567 $x12126)))
(let (($x12390 (or $x12870 $x13439)))
(let (($x12021 (and $x11529 $x12582 $x12390)))
(let (($x13331 (or $x11689 $x12021)))
(let (($x12592 (or $x11526 $x12021)))
(let (($x13211 (and $x10280 $x10283 $x12592)))
(let (($x12794 (or $x10960 $x13211)))
(let (($x12323 (and $x10280 $x10281 $x12794)))
(let (($x12312 (or $x11491 $x12323)))
(let (($x12688 (and $x12312 $x13331)))
(let (($x12037 (or $x11471 $x12688)))
(let (($x12534 (and $x10280 $x10283 $x12037)))
(let (($x12635 (or $x10960 $x12534)))
(let (($x12814 (and $x10280 $x10281 $x12635)))
(let (($x12181 (or $x11460 $x12814)))
(let (($x12940 (and $x12181 $x13431)))
(let (($x13419 (not $x12668)))
(let (($x13199 (or $x13419 $x13562 $x12940)))
(let (($x13308 (and $x11219 $x10126 $x13199)))
(let (($x12116 (not $x12867)))
(let (($x12377 (or $x12116 $x13308)))
(let (($x12050 (and $x12867 $x12377)))
(let (($x13503 (or $x11344 $x12050)))
(let (($x12166 (and $x11341 $x13503)))
(let (($x12131 (or $x11338 $x12166)))
(let (($x13510 (and $x10097 $x10100 $x12131)))
(let (($x13219 (or $x11168 $x13510)))
(let (($x12612 (and $x10097 $x10098 $x13219)))
(let (($x12071 (or $x11180 $x12612)))
(let (($x12731 (not (and $x10095 $x12071))))
(let ((@x15797 (refl (~ (not (and $x2815 $x12489 $x11761 $x10197)) (not (and $x2815 $x12489 $x11761 $x10197))))))
(let ((@x15794 (nnf-neg (nnf-pos (refl (~ $x12704 $x12704)) (~ $x12765 $x12765)) (~ (not $x12980) $x12765))))
(let ((@x15805 (nnf-neg @x15794 (nnf-neg @x15797 (~ (not $x12404) $x15798)) (~ (not $x12419) $x15802))))
(let ((@x15813 (nnf-neg (refl (~ $x15766 $x15766)) (refl (~ $x15769 $x15769)) (nnf-neg (sk (~ $x12980 $x15785)) @x15805 (~ (not $x12072) $x15806)) (~ (not $x13431) $x15810))))
(let ((@x15687 (nnf-neg (nnf-pos (refl (~ $x12473 $x12473)) (~ $x12122 $x12122)) (~ (not $x12485) $x12122))))
(let ((@x15698 (nnf-neg (sk (~ $x12485 $x15678)) (nnf-neg @x15687 (refl (~ $x15688 $x15688)) (~ (not $x12024) $x15691)) (~ (not $x13333) $x15695))))
(let ((@x15706 (nnf-neg (refl (~ $x11571 $x11571)) (nnf-neg (refl (~ $x15662 $x15662)) @x15698 (~ (not $x12126) $x15699)) (~ (not $x13439) $x15703))))
(let ((@x15714 (nnf-neg (refl (~ $x15651 $x15651)) (refl (~ $x15654 $x15654)) (nnf-neg (refl (~ $x15657 $x15657)) @x15706 (~ (not $x12390) $x15707)) (~ (not $x12021) $x15711))))
(let ((@x15632 (refl (~ $x15630 $x15630))))
(let ((@x15722 (nnf-neg @x15632 (refl (~ $x15639 $x15639)) (nnf-neg (refl (~ $x15648 $x15648)) @x15714 (~ (not $x12592) $x15715)) (~ (not $x13211) $x15719))))
(let ((@x15730 (nnf-neg @x15632 (refl (~ $x15633 $x15633)) (nnf-neg (refl (~ $x15636 $x15636)) @x15722 (~ (not $x12794) $x15723)) (~ (not $x12323) $x15727))))
(let ((@x15745 (nnf-neg (nnf-neg (refl (~ $x15645 $x15645)) @x15730 (~ (not $x12312) $x15731)) (nnf-neg (refl (~ $x15735 $x15735)) @x15714 (~ (not $x13331) $x15738)) (~ (not $x12688) $x15742))))
(let ((@x15753 (nnf-neg @x15632 (refl (~ $x15639 $x15639)) (nnf-neg (refl (~ $x15642 $x15642)) @x15745 (~ (not $x12037) $x15746)) (~ (not $x12534) $x15750))))
(let ((@x15761 (nnf-neg @x15632 (refl (~ $x15633 $x15633)) (nnf-neg (refl (~ $x15636 $x15636)) @x15753 (~ (not $x12635) $x15754)) (~ (not $x12814) $x15758))))
(let ((@x15817 (nnf-neg (nnf-neg (refl (~ $x15627 $x15627)) @x15761 (~ (not $x12181) $x15762)) @x15813 (~ (not $x12940) $x15814))))
(let ((@x15620 (monotonicity (refl (~ $x11219 $x11219)) (refl (~ $x10126 $x10126)) (refl (~ $x11870 $x11870)) (refl (~ $x12423 $x12423)) (refl (~ $x12382 $x12382)) (refl (~ $x11860 $x11860)) (refl (~ $x12733 $x12733)) (refl (~ $x11857 $x11857)) (nnf-pos (refl (~ $x13074 $x13074)) (~ $x13515 $x13515)) (refl (~ $x11827 $x11827)) (refl (~ $x10151 $x10151)) (refl (~ $x11388 $x11388)) (refl (~ $x11391 $x11391)) (~ $x12668 $x12668))))
(let ((@x15821 (nnf-neg (nnf-neg @x15620 (~ (not $x13419) $x12668)) (refl (~ $x15624 $x15624)) @x15817 (~ (not $x13199) $x15818))))
(let ((@x15825 (nnf-neg (refl (~ $x15585 $x15585)) (refl (~ $x15588 $x15588)) @x15821 (~ (not $x13308) $x15822))))
(let ((@x15584 (nnf-neg (nnf-pos (refl (~ $x12150 $x12150)) (~ $x12867 $x12867)) (~ (not $x12116) $x12867))))
(let ((@x15833 (nnf-neg (sk (~ $x12116 $x15575)) (nnf-neg @x15584 @x15825 (~ (not $x12377) $x15826)) (~ (not $x12050) $x15830))))
(let ((@x15841 (nnf-neg (refl (~ $x11344 $x11344)) (nnf-neg (refl (~ $x15559 $x15559)) @x15833 (~ (not $x13503) $x15834)) (~ (not $x12166) $x15838))))
(let ((@x15849 (nnf-neg (refl (~ $x15542 $x15542)) (refl (~ $x15551 $x15551)) (nnf-neg (refl (~ $x15554 $x15554)) @x15841 (~ (not $x12131) $x15842)) (~ (not $x13510) $x15846))))
(let ((@x15857 (nnf-neg (refl (~ $x15542 $x15542)) (refl (~ $x15545 $x15545)) (nnf-neg (refl (~ $x15548 $x15548)) @x15849 (~ (not $x13219) $x15850)) (~ (not $x12612) $x15854))))
(let ((@x15864 (nnf-neg (refl (~ $x11180 $x11180)) (nnf-neg (refl (~ $x15539 $x15539)) @x15857 (~ (not $x12071) $x15858)) (~ $x12731 $x15862))))
(let (($x13589 (or $x11736 $x13573 $x11809)))
(let (($x13594 (and $x11720 $x13589)))
(let (($x13597 (or $x11921 $x13562 $x13594)))
(let (($x13600 (and $x11219 $x10126 $x13597)))
(let (($x13603 (or $x11373 $x13600)))
(let (($x13606 (and $x11370 $x13603)))
(let (($x13609 (or $x11344 $x13606)))
(let (($x13612 (and $x11341 $x13609)))
(let (($x13615 (or $x11338 $x13612)))
(let (($x13618 (and $x10097 $x10100 $x13615)))
(let (($x13621 (or $x11168 $x13618)))
(let (($x13624 (and $x10097 $x10098 $x13621)))
(let (($x13627 (or $x11180 $x13624)))
(let (($x13630 (and $x10095 $x13627)))
(let (($x13633 (not $x13630)))
(let (($x6400 (= b_S_max_o_u4$ 4294967295)))
(let ((@x6394 (monotonicity (rewrite (= (* 65536 65536) 4294967296)) (= (- (* 65536 65536) 1) (- 4294967296 1)))))
(let ((@x6399 (trans @x6394 (rewrite (= (- 4294967296 1) 4294967295)) (= (- (* 65536 65536) 1) 4294967295))))
(let ((@x6402 (monotonicity @x6399 (= (= b_S_max_o_u4$ (- (* 65536 65536) 1)) $x6400))))
(let ((@x6405 (mp (asserted (= b_S_max_o_u4$ (- (* 65536 65536) 1))) @x6402 $x6400)))
(let ((@x12085 (trans (monotonicity @x6405 (= ?x3093 (* (- 1) 4294967295))) (rewrite (= (* (- 1) 4294967295) (- 4294967295))) (= ?x3093 (- 4294967295)))))
(let ((@x12657 (trans (monotonicity @x12085 (= ?x3094 (+ ?0 (- 4294967295)))) (rewrite (= (+ ?0 (- 4294967295)) (+ (- 4294967295) ?0))) (= ?x3094 (+ (- 4294967295) ?0)))))
(let ((@x12345 (trans (monotonicity @x12657 (= $x3095 (<= (+ (- 4294967295) ?0) 0))) (rewrite (= (<= (+ (- 4294967295) ?0) 0) $x12489)) (= $x3095 $x12489))))
(let ((@x12418 (quant-intro (monotonicity @x12345 (= $x11798 (and $x2815 $x12489 $x11761 $x10197))) (= $x11803 $x12404))))
(let ((@x12764 (monotonicity (monotonicity (monotonicity @x12345 (= $x11767 $x12080)) (= $x11772 $x12041)) (= $x11780 $x12704))))
(let ((@x12431 (monotonicity (monotonicity (quant-intro @x12764 (= $x11783 $x12765)) (= $x11786 $x12980)) @x12418 (= $x11806 $x12419))))
(let ((@x12363 (monotonicity (monotonicity (quant-intro @x12764 (= $x11783 $x12765)) @x12431 (= $x11809 $x12072)) (= $x13589 $x13431))))
(let ((@x12999 (monotonicity (monotonicity (monotonicity @x12345 (= $x11582 $x12107)) (= $x11587 $x13540)) (= $x11595 $x12473))))
(let ((@x13332 (monotonicity (monotonicity (quant-intro @x12999 (= $x11598 $x12122)) (= $x11601 $x12485)) (= $x11613 $x12024))))
(let ((@x13438 (monotonicity (monotonicity (quant-intro @x12999 (= $x11598 $x12122)) @x13332 (= $x11616 $x13333)) (= $x11619 $x12126))))
(let ((@x13426 (monotonicity (monotonicity @x6405 (= ?x11533 (+ 4294967295 ?x11443))) (= $x11532 (>= (+ 4294967295 ?x11443) 1)))))
(let ((@x12468 (trans @x13426 (rewrite (= (>= (+ 4294967295 ?x11443) 1) $x12582)) (= $x11532 $x12582))))
(let ((@x12020 (monotonicity (monotonicity (monotonicity @x12468 (= $x11559 $x12469)) (= $x11564 $x12870)) (monotonicity @x13438 (= $x11622 $x13439)) (= $x11625 $x12390))))
(let ((@x12527 (monotonicity (monotonicity @x12468 @x12020 (= $x11631 $x12021)) (= $x11692 $x13331))))
(let ((@x13210 (monotonicity (monotonicity @x12468 @x12020 (= $x11631 $x12021)) (= $x11636 $x12592))))
(let ((@x12317 (monotonicity (monotonicity (monotonicity @x13210 (= $x11642 $x13211)) (= $x11647 $x12794)) (= $x11653 $x12323))))
(let ((@x12036 (monotonicity (monotonicity @x12317 (= $x11658 $x12312)) @x12527 (= $x11695 $x12688))))
(let ((@x13355 (monotonicity (monotonicity (monotonicity @x12036 (= $x11698 $x12037)) (= $x11704 $x12534)) (= $x11709 $x12635))))
(let ((@x13198 (monotonicity (monotonicity (monotonicity @x13355 (= $x11715 $x12814)) (= $x11720 $x12181)) @x12363 (= $x13594 $x12940))))
(let ((@x13514 (monotonicity (monotonicity (monotonicity @x12345 (= $x11838 $x12334)) (= $x11843 $x12873)) (= $x11851 $x13074))))
(let ((@x12732 (monotonicity (monotonicity @x6405 (= ?x11533 (+ 4294967295 ?x11443))) (= $x11863 (>= (+ 4294967295 ?x11443) 0)))))
(let ((@x12275 (trans @x12732 (rewrite (= (>= (+ 4294967295 ?x11443) 0) $x12733)) (= $x11863 $x12733))))
(let ((@x12591 (monotonicity (monotonicity @x6405 (= (+ b_S_max_o_u4$ ?x11824) (+ 4294967295 ?x11824))) (= $x11866 (>= (+ 4294967295 ?x11824) 0)))))
(let ((@x13248 (trans @x12591 (rewrite (= (>= (+ 4294967295 ?x11824) 0) $x12382)) (= $x11866 $x12382))))
(let (($x12358 (= (+ b_S_max_o_u1$ (* (- 1) v_b_L_H_max_G_1$)) (+ 255 (* (- 1) v_b_L_H_max_G_1$)))))
(let (($x6408 (= b_S_max_o_u1$ 255)))
(let ((@x6409 (asserted $x6408)))
(let ((@x12422 (monotonicity (monotonicity @x6409 $x12358) (= $x11873 (>= (+ 255 (* (- 1) v_b_L_H_max_G_1$)) 0)))))
(let ((@x13351 (trans @x12422 (rewrite (= (>= (+ 255 (* (- 1) v_b_L_H_max_G_1$)) 0) $x12423)) (= $x11873 $x12423))))
(let ((@x13418 (monotonicity @x13351 @x13248 @x12275 (quant-intro @x13514 (= $x11854 $x13515)) (= $x11916 $x12668))))
(let ((@x12525 (monotonicity (monotonicity @x13418 (= $x11921 $x13419)) @x13198 (= $x13597 $x13199))))
(let ((@x12866 (monotonicity (monotonicity (monotonicity @x12345 (= $x11354 $x12578)) (= $x11359 $x12329)) (= $x11367 $x12150))))
(let ((@x12209 (monotonicity (monotonicity (quant-intro @x12866 (= $x11370 $x12867)) (= $x11373 $x12116)) (monotonicity @x12525 (= $x13600 $x13308)) (= $x13603 $x12377))))
(let ((@x12907 (monotonicity (monotonicity (quant-intro @x12866 (= $x11370 $x12867)) @x12209 (= $x13606 $x12050)) (= $x13609 $x13503))))
(let ((@x13218 (monotonicity (monotonicity (monotonicity @x12907 (= $x13612 $x12166)) (= $x13615 $x12131)) (= $x13618 $x13510))))
(let ((@x12771 (monotonicity (monotonicity (monotonicity @x13218 (= $x13621 $x13219)) (= $x13624 $x12612)) (= $x13627 $x12071))))
(let ((@x12869 (monotonicity (monotonicity @x12771 (= $x13630 (and $x10095 $x12071))) (= $x13633 $x12731))))
(let ((@x9190 (asserted b_S_position_n_marker$)))
(let ((@x13567 (monotonicity (iff-true @x9190 (= b_S_position_n_marker$ true)) (= $x11751 (and true $x11388 $x11391 $x10175 $x10177 $x10179 $x10181)))))
(let ((@x13572 (trans @x13567 (rewrite (= (and true $x11388 $x11391 $x10175 $x10177 $x10179 $x10181) $x13568)) (= $x11751 $x13568))))
(let ((@x13578 (monotonicity (monotonicity @x13572 (= $x11756 $x13573)) (= $x11812 (or $x13573 $x11809)))))
(let ((@x13581 (monotonicity (iff-true @x9190 (= b_S_position_n_marker$ true)) @x13578 (= $x11815 (and true (or $x13573 $x11809))))))
(let ((@x13585 (trans @x13581 (rewrite (= (and true (or $x13573 $x11809)) (or $x13573 $x11809))) (= $x11815 (or $x13573 $x11809)))))
(let ((@x13593 (trans (monotonicity @x13585 (= $x11818 (or $x11736 (or $x13573 $x11809)))) (rewrite (= (or $x11736 (or $x13573 $x11809)) $x13589)) (= $x11818 $x13589))))
(let (($x13558 (= (and $x10243 $x10163 true $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391) $x13557)))
(let (($x13555 (= $x11435 (and $x10243 $x10163 true $x10250 $x10251 $x10252 $x10253 $x10254 $x10255 $x11388 $x11391))))
(let ((@x13561 (trans (monotonicity (iff-true @x12009 (= $x10056 true)) $x13555) (rewrite $x13558) (= $x11435 $x13557))))
(let ((@x13599 (monotonicity (monotonicity @x13561 (= $x11440 $x13562)) (monotonicity @x13593 (= $x11821 $x13594)) (= $x11930 $x13597))))
(let ((@x13608 (monotonicity (monotonicity (monotonicity @x13599 (= $x11938 $x13600)) (= $x11943 $x13603)) (= $x11946 $x13606))))
(let ((@x13617 (monotonicity (monotonicity (monotonicity @x13608 (= $x11949 $x13609)) (= $x11952 $x13612)) (= $x11955 $x13615))))
(let ((@x13626 (monotonicity (monotonicity (monotonicity @x13617 (= $x11961 $x13618)) (= $x11966 $x13621)) (= $x11972 $x13624))))
(let ((@x13635 (monotonicity (monotonicity (monotonicity @x13626 (= $x11977 $x13627)) (= $x11980 $x13630)) (= (not $x11980) $x13633))))
(let ((@x13636 (mp (not-or-elim (mp (asserted $x10393) @x11990 $x11986) (not $x11980)) @x13635 $x13633)))
(let ((@x20574 (mp (mp (mp (mp~ (mp @x13636 @x12869 $x12731) @x15864 $x15862) @x16135 $x16133) @x19767 $x19765) (monotonicity @x20570 (= $x19765 $x20571)) $x20571)))
(let ((@x23022 (unit-resolution (def-axiom (or $x20565 $x20559)) (unit-resolution @x20574 @x22433 $x20568) $x20559)))
(let ((@x23021 (unit-resolution (unit-resolution (def-axiom (or $x20562 $x15542 $x15545 $x20556)) @x23022 $x20559) @x22955 (unit-resolution (def-axiom (or $x22575 $x10098)) @x22589 $x10098) $x20556)))
(let ((?x22488 (b_S_ref$ ?x10096)))
(let ((?x22508 (b_S_ptr$ b_T_T_u1$ ?x22488)))
(let (($x22672 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x22508)))
(let (($x22671 (= (b_S_owner$ v_b_S_s$ ?x22508) b_S_me$)))
(let (($x22673 (or $x22671 $x22672)))
(let (($x22674 (not $x22673)))
(let ((?x22648 (b_S_typ$ ?x22508)))
(let ((?x22649 (b_S_kind_n_of$ ?x22648)))
(let (($x22650 (= ?x22649 b_S_kind_n_primitive$)))
(let (($x22675 (or $x22650 $x22674)))
(let (($x22676 (not $x22675)))
(let ((?x22652 (b_S_select_o_tm$ ?x10231 ?x22508)))
(let ((?x22655 (b_S_ts_n_emb$ ?x22652)))
(let (($x22665 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x22655)))
(let ((?x22663 (b_S_owner$ v_b_S_s$ ?x22655)))
(let (($x22664 (= ?x22663 b_S_me$)))
(let (($x22666 (or $x22664 $x22665)))
(let (($x22667 (not $x22666)))
(let ((?x22660 (b_S_typ$ ?x22655)))
(let ((?x22661 (b_S_kind_n_of$ ?x22660)))
(let (($x22662 (= ?x22661 b_S_kind_n_primitive$)))
(let (($x22656 (b_S_closed$ v_b_S_s$ ?x22655)))
(let (($x22657 (not $x22656)))
(let (($x22653 (b_S_ts_n_is_n_volatile$ ?x22652)))
(let (($x22654 (not $x22653)))
(let (($x22658 (or $x22654 $x22657)))
(let (($x22659 (not $x22658)))
(let (($x22651 (not $x22650)))
(let (($x22668 (or $x22651 $x22659 $x22662 $x22667)))
(let (($x22669 (not $x22668)))
(let (($x22677 (or $x22669 $x22676)))
(let (($x22678 (not $x22677)))
(let (($x22646 (b_S_typed$ v_b_S_s$ ?x22508)))
(let (($x22647 (not $x22646)))
(let (($x22679 (or $x22647 $x22678)))
(let (($x22680 (not $x22679)))
(let (($x22645 (b_S_thread_n_local$ v_b_S_s$ ?x22508)))
(let (($x22681 (= $x22645 $x22680)))
(let (($x19090 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8998 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x8979 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x8983 (b_S_ts_n_emb$ ?x8979)))
(let (($x8994 (or (= (b_S_owner$ ?v0 ?x8983) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x8983))))
(let (($x8981 (b_S_ts_n_is_n_volatile$ ?x8979)))
(let (($x8982 (not $x8981)))
(let (($x8986 (or $x8982 (not (b_S_closed$ ?v0 ?x8983)))))
(let (($x2294 (not $x2249)))
(let (($x19065 (or $x2294 (not $x8986) (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$) (not $x8994))))
(let (($x19074 (or (not $x19065) (not (or $x2249 (not (or $x2486 $x8998)))))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9490 (not $x2488)))
(let (($x19082 (not (or $x9490 (not $x19074)))))
(let (($x8978 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x8978 $x19082))))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!584))
))
(let (($x9025 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8998 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9000 (and $x2294 (or $x2486 $x8998))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x8979 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x8983 (b_S_ts_n_emb$ ?x8979)))
(let (($x8994 (or (= (b_S_owner$ ?v0 ?x8983) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x8983))))
(let (($x8981 (b_S_ts_n_is_n_volatile$ ?x8979)))
(let (($x8982 (not $x8981)))
(let (($x8986 (or $x8982 (not (b_S_closed$ ?v0 ?x8983)))))
(let (($x9013 (and $x2249 $x8986 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$)) $x8994)))
(let (($x9016 (or $x9013 $x9000)))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9019 (and $x2488 $x9016)))
(let (($x8978 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x8978 $x9019))))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!584))
))
(let ((?x2769 (b_S_typemap$ ?1)))
(let ((?x8979 (b_S_select_o_tm$ ?x2769 ?0)))
(let ((?x8983 (b_S_ts_n_emb$ ?x8979)))
(let (($x8994 (or (= (b_S_owner$ ?1 ?x8983) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?1 ?x8983))))
(let (($x8981 (b_S_ts_n_is_n_volatile$ ?x8979)))
(let (($x8982 (not $x8981)))
(let (($x8986 (or $x8982 (not (b_S_closed$ ?1 ?x8983)))))
(let (($x19065 (or $x2294 (not $x8986) (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$) (not $x8994))))
(let (($x19074 (or (not $x19065) (not (or $x2249 (not (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0))))))))
(let (($x19082 (not (or $x9490 (not $x19074)))))
(let (($x8978 (b_S_thread_n_local$ ?1 ?0)))
(let (($x9000 (and $x2294 (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0)))))
(let (($x9013 (and $x2249 $x8986 (not (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$)) $x8994)))
(let (($x9016 (or $x9013 $x9000)))
(let (($x9019 (and $x2488 $x9016)))
(let (($x9022 (= $x8978 $x9019)))
(let (($x19072 (= $x9000 (not (or $x2249 (not (or $x2486 (b_S_in_n_wrapped_n_domain$ ?1 ?0))))))))
(let ((@x19076 (monotonicity (rewrite (= $x9013 (not $x19065))) (rewrite $x19072) (= $x9016 $x19074))))
(let ((@x19086 (trans (monotonicity @x19076 (= $x9019 (and $x2488 $x19074))) (rewrite (= (and $x2488 $x19074) $x19082)) (= $x9019 $x19082))))
(let ((@x19092 (quant-intro (monotonicity @x19086 (= $x9022 (= $x8978 $x19082))) (= $x9025 $x19090))))
(let (($x9005 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8998 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9000 (and $x2294 (or $x2486 $x8998))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x8979 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x8983 (b_S_ts_n_emb$ ?x8979)))
(let (($x8994 (or (= (b_S_owner$ ?v0 ?x8983) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x8983))))
(let (($x8995 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$)) $x8994)))
(let (($x8981 (b_S_ts_n_is_n_volatile$ ?x8979)))
(let (($x8982 (not $x8981)))
(let (($x8986 (or $x8982 (not (b_S_closed$ ?v0 ?x8983)))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9002 (and $x2488 (or (and $x2249 (and $x8986 $x8995)) $x9000))))
(let (($x8978 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x8978 $x9002)))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!584))
))
(let (($x9010 (forall ((?v0 B_S_state$) (?v1 B_S_ptr$) )(! (let (($x8998 (b_S_in_n_wrapped_n_domain$ ?v0 ?v1)))
(let ((?x2484 (b_S_owner$ ?v0 ?v1)))
(let (($x2486 (= ?x2484 b_S_me$)))
(let (($x2249 (= (b_S_kind_n_of$ (b_S_typ$ ?v1)) b_S_kind_n_primitive$)))
(let (($x2294 (not $x2249)))
(let (($x9000 (and $x2294 (or $x2486 $x8998))))
(let ((?x2769 (b_S_typemap$ ?v0)))
(let ((?x8979 (b_S_select_o_tm$ ?x2769 ?v1)))
(let ((?x8983 (b_S_ts_n_emb$ ?x8979)))
(let (($x8994 (or (= (b_S_owner$ ?v0 ?x8983) b_S_me$) (b_S_in_n_wrapped_n_domain$ ?v0 ?x8983))))
(let (($x8995 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$)) $x8994)))
(let (($x8981 (b_S_ts_n_is_n_volatile$ ?x8979)))
(let (($x8982 (not $x8981)))
(let (($x8986 (or $x8982 (not (b_S_closed$ ?v0 ?x8983)))))
(let (($x2488 (b_S_typed$ ?v0 ?v1)))
(let (($x9002 (and $x2488 (or (and $x2249 (and $x8986 $x8995)) $x9000))))
(let (($x8978 (b_S_thread_n_local$ ?v0 ?v1)))
(= $x8978 $x9002)))))))))))))))))) :pattern ( (b_S_thread_n_local$ ?v0 ?v1) ) :qid k!584))
))
(let (($x8995 (and (not (= (b_S_kind_n_of$ (b_S_typ$ ?x8983)) b_S_kind_n_primitive$)) $x8994)))
(let (($x9002 (and $x2488 (or (and $x2249 (and $x8986 $x8995)) $x9000))))
(let (($x9007 (= $x8978 $x9002)))
(let ((@x9018 (monotonicity (rewrite (= (and $x2249 (and $x8986 $x8995)) $x9013)) (= (or (and $x2249 (and $x8986 $x8995)) $x9000) $x9016))))
(let ((@x9027 (quant-intro (monotonicity (monotonicity @x9018 (= $x9002 $x9019)) (= $x9007 $x9022)) (= $x9010 $x9025))))
(let ((@x9029 (trans (quant-intro (rewrite (= (= $x8978 $x9002) $x9007)) (= $x9005 $x9010)) @x9027 (= $x9005 $x9025))))
(let ((@x15151 (mp~ (mp (asserted $x9005) @x9029 $x9025) (nnf-pos (refl (~ $x9022 $x9022)) (~ $x9025 $x9025)) $x9025)))
(let ((@x19093 (mp @x15151 @x19092 $x19090)))
(let (($x22882 (or (not $x19090) $x22681)))
(let ((@x22883 ((_ quant-inst v_b_S_s$ (b_S_ptr$ b_T_T_u1$ ?x22488)) $x22882)))
(let (($x23011 (not $x22645)))
(let (($x22509 (= ?x10096 ?x22508)))
(let (($x22505 (or $x21997 $x15542 $x22509)))
(let ((@x22494 (mp ((_ quant-inst (b_S_idx$ ?x10037 0 b_T_T_u1$) b_T_T_u1$) (or $x21997 (or $x15542 $x22509))) (rewrite (= (or $x21997 (or $x15542 $x22509)) $x22505)) $x22505)))
(let ((@x22967 (unit-resolution @x22494 @x15376 @x22955 $x22509)))
(let ((@x23018 (symm (monotonicity (symm @x22967 (= ?x22508 ?x10096)) (= $x22645 $x10100)) (= $x10100 $x22645))))
(let ((@x23037 (unit-resolution (def-axiom (or (not $x22681) $x22645 $x22679)) (mp (hypothesis $x15551) (monotonicity @x23018 (= $x15551 $x23011)) $x23011) (unit-resolution @x22883 @x19093 $x22681) $x22679)))
(let ((@x22747 (unit-resolution @x22494 @x15376 (unit-resolution (def-axiom (or $x20553 $x10097)) (hypothesis $x20556) $x10097) $x22509)))
(let ((@x22765 (monotonicity (symm (monotonicity @x22747 (= $x10098 $x22646)) (= $x22646 $x10098)) (= $x22647 $x15545))))
(let ((@x22767 (unit-resolution (unit-resolution (def-axiom (or $x20553 $x10098)) (hypothesis $x20556) $x10098) (mp (hypothesis $x22647) @x22765 $x15545) false)))
(let ((@x23023 (unit-resolution (def-axiom (or $x22680 $x22647 $x22678)) (unit-resolution (lemma @x22767 (or $x20553 $x22646)) @x23021 $x22646) (or $x22680 $x22678))))
(let ((@x23036 (unit-resolution (def-axiom (or (not $x22525) $x15542 $x22518)) @x22955 (or (not $x22525) $x22518))))
(let ((@x23032 (trans (monotonicity (symm @x22967 (= ?x22508 ?x10096)) (= ?x22648 ?x22517)) (unit-resolution @x23036 (unit-resolution @x22583 @x20266 $x22525) $x22518) (= ?x22648 b_T_T_u1$))))
(let ((@x23049 (trans (monotonicity @x23032 (= ?x22649 ?x21475)) (unit-resolution @x23038 (unit-resolution @x21487 @x15496 $x21483) $x21476) $x22650)))
(let ((@x23031 (monotonicity (symm (monotonicity @x22967 (= ?x22481 ?x22652)) (= ?x22652 ?x22481)) (= $x22653 $x22574))))
(let ((@x23680 (mp (unit-resolution (def-axiom (or $x22575 (not $x22574))) @x22589 (not $x22574)) (monotonicity (symm @x23031 (= $x22574 $x22653)) (= (not $x22574) $x22654)) $x22654)))
(let ((?x23421 (b_S_ref$ ?x21986)))
(let ((?x23437 (+ ?x22540 ?x23421)))
(let ((?x23445 (b_S_ptr$ b_T_T_u1$ ?x23437)))
(let ((?x23405 (b_S_idx$ ?x21986 0 b_T_T_u1$)))
(let (($x23447 (= ?x23405 ?x23445)))
(let (($x23475 (not $x23447)))
(let (($x23400 (b_S_extent_n_hint$ ?x23405 ?x21986)))
(let (($x23431 (not $x23400)))
(let (($x23478 (or $x23431 $x23475)))
(let (($x23480 (not $x23478)))
(let (($x23493 (or $x22554 $x23480)))
(let (($x23464 (not (or $x23431 (not (= ?x23405 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x22540))))))))
(let (($x23467 (= (or $x23431 (not (= ?x23405 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x22540))))) $x23478)))
(let ((@x23446 (monotonicity (rewrite (= (+ ?x23421 ?x22540) ?x23437)) (= (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x22540)) ?x23445))))
(let ((@x23472 (monotonicity @x23446 (= (= ?x23405 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x22540))) $x23447))))
(let ((@x23477 (monotonicity @x23472 (= (not (= ?x23405 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x22540)))) $x23475))))
(let ((@x23496 (monotonicity (monotonicity (monotonicity @x23477 $x23467) (= $x23464 $x23480)) (= (or $x22554 $x23464) $x23493))))
(let ((@x23511 (mp ((_ quant-inst (b_S_ptr$ ?x10035 ?x21017) 0 b_T_T_u1$) (or $x22554 $x23464)) (trans @x23496 (rewrite (= $x23493 $x23493)) (= (or $x22554 $x23464) $x23493)) $x23493)))
(let ((@x23521 (def-axiom (or $x23478 $x23447))))
(let ((@x23560 (unit-resolution @x23521 (lemma (unit-resolution @x23511 @x18201 (hypothesis $x23478) false) $x23480) $x23447)))
(let ((?x23234 (b_S_idx$ ?x22567 0 b_T_T_u1$)))
(let ((?x23235 (b_S_select_o_tm$ ?x10231 ?x23234)))
(let ((?x23228 (b_S_ts_n_emb$ ?x23235)))
(let (($x23052 (= ?x23228 ?x22567)))
(let (($x23307 (b_S_typed$ v_b_S_s$ ?x23234)))
(let (($x23308 (not $x23307)))
(let (($x23304 (b_S_ts_n_is_n_volatile$ ?x23235)))
(let (($x23229 (not $x23052)))
(let (($x23309 (or $x23229 $x23304 (not (b_S_ts_n_is_n_array_n_elt$ ?x23235)) $x23308)))
(let (($x23302 (not $x23309)))
(let (($x23015 (b_S_typed$ v_b_S_s$ ?x22567)))
(let ((@x23220 (mp @x12004 (symm (monotonicity @x23788 (= $x23015 $x10044)) (= $x10044 $x23015)) $x23015)))
(let ((@x23423 (lemma (unit-resolution (hypothesis (not $x23015)) @x23220 false) $x23015)))
(let (($x17982 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6864 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6856 (b_S_typemap$ ?v0)))
(let ((?x6858 (b_S_select_o_tm$ ?x6856 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6863 (b_S_ts_n_is_n_array_n_elt$ ?x6858)))
(let (($x17970 (or (not (= (b_S_ts_n_emb$ ?x6858) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1))) (b_S_ts_n_is_n_volatile$ ?x6858) (not $x6863) (not $x6864))))
(let (($x17971 (not $x17970)))
(let (($x4831 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x2815 (>= ?v4 0)))
(let (($x3743 (not $x2815)))
(or (not (b_S_typed$ ?v0 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1))) $x3743 $x4831 $x17971)))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!494))
))
(let (($x6902 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6864 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6856 (b_S_typemap$ ?v0)))
(let ((?x6858 (b_S_select_o_tm$ ?x6856 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6863 (b_S_ts_n_is_n_array_n_elt$ ?x6858)))
(let ((?x6853 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6860 (= (b_S_ts_n_emb$ ?x6858) ?x6853)))
(let (($x6896 (and $x6860 (not (b_S_ts_n_is_n_volatile$ ?x6858)) $x6863 $x6864)))
(let (($x4831 (>= (+ ?v4 (* (- 1) ?v3)) 0)))
(let (($x6562 (not $x4831)))
(let (($x2815 (>= ?v4 0)))
(let (($x6854 (b_S_typed$ ?v0 ?x6853)))
(let (($x6888 (and $x6854 $x2815 $x6562)))
(let (($x6893 (not $x6888)))
(or $x6893 $x6896)))))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!494))
))
(let (($x6864 (b_S_typed$ ?4 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?2 ?1) ?3) ?0 ?2))))
(let ((?x6856 (b_S_typemap$ ?4)))
(let ((?x6858 (b_S_select_o_tm$ ?x6856 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?2 ?1) ?3) ?0 ?2))))
(let (($x6863 (b_S_ts_n_is_n_array_n_elt$ ?x6858)))
(let (($x17970 (or (not (= (b_S_ts_n_emb$ ?x6858) (b_S_ptr$ (b_S_array$ ?2 ?1) ?3))) (b_S_ts_n_is_n_volatile$ ?x6858) (not $x6863) (not $x6864))))
(let (($x17971 (not $x17970)))
(let (($x4831 (>= (+ ?0 (* (- 1) ?1)) 0)))
(let (($x17977 (or (not (b_S_typed$ ?4 (b_S_ptr$ (b_S_array$ ?2 ?1) ?3))) $x3743 $x4831 $x17971)))
(let ((?x6853 (b_S_ptr$ (b_S_array$ ?2 ?1) ?3)))
(let (($x6860 (= (b_S_ts_n_emb$ ?x6858) ?x6853)))
(let (($x6896 (and $x6860 (not (b_S_ts_n_is_n_volatile$ ?x6858)) $x6863 $x6864)))
(let (($x6562 (not $x4831)))
(let (($x6854 (b_S_typed$ ?4 ?x6853)))
(let (($x6888 (and $x6854 $x2815 $x6562)))
(let (($x6893 (not $x6888)))
(let (($x6899 (or $x6893 $x6896)))
(let (($x17956 (or (not $x6854) $x3743 $x4831)))
(let ((@x17962 (monotonicity (rewrite (= $x6888 (not $x17956))) (= $x6893 (not (not $x17956))))))
(let ((@x17976 (monotonicity (trans @x17962 (rewrite (= (not (not $x17956)) $x17956)) (= $x6893 $x17956)) (rewrite (= $x6896 $x17971)) (= $x6899 (or $x17956 $x17971)))))
(let ((@x17984 (quant-intro (trans @x17976 (rewrite (= (or $x17956 $x17971) $x17977)) (= $x6899 $x17977)) (= $x6902 $x17982))))
(let (($x6876 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6864 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6856 (b_S_typemap$ ?v0)))
(let ((?x6858 (b_S_select_o_tm$ ?x6856 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6863 (b_S_ts_n_is_n_array_n_elt$ ?x6858)))
(let ((?x6853 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6860 (= (b_S_ts_n_emb$ ?x6858) ?x6853)))
(let (($x6867 (and $x6860 (and (not (b_S_ts_n_is_n_volatile$ ?x6858)) (and $x6863 $x6864)))))
(let (($x2766 (<= 0 ?v4)))
(let (($x6525 (and $x2766 (< ?v4 ?v3))))
(let (($x6854 (b_S_typed$ ?v0 ?x6853)))
(let (($x6855 (and $x6854 $x6525)))
(=> $x6855 $x6867)))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!494))
))
(let (($x6882 (forall ((?v0 B_S_state$) (?v1 Int) (?v2 B_S_ctype$) (?v3 Int) (?v4 Int) )(! (let (($x6864 (b_S_typed$ ?v0 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let ((?x6856 (b_S_typemap$ ?v0)))
(let ((?x6858 (b_S_select_o_tm$ ?x6856 (b_S_idx$ (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ?v4 ?v2))))
(let (($x6863 (b_S_ts_n_is_n_array_n_elt$ ?x6858)))
(let ((?x6853 (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1)))
(let (($x6860 (= (b_S_ts_n_emb$ ?x6858) ?x6853)))
(let (($x6867 (and $x6860 (and (not (b_S_ts_n_is_n_volatile$ ?x6858)) (and $x6863 $x6864)))))
(let (($x2766 (<= 0 ?v4)))
(let (($x6525 (and $x2766 (< ?v4 ?v3))))
(let (($x6854 (b_S_typed$ ?v0 ?x6853)))
(let (($x6855 (and $x6854 $x6525)))
(or (not $x6855) $x6867)))))))))))) :pattern ( (b_S_select_o_sm$ (b_S_statusmap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :pattern ( (b_S_select_o_tm$ (b_S_typemap$ ?v0) (b_S_idx$ (b_S_ptr$ ?v2 ?v1) ?v4 ?v2)) (b_S_ptr$ (b_S_array$ ?v2 ?v3) ?v1) ) :qid k!494))
))
(let (($x6867 (and $x6860 (and (not (b_S_ts_n_is_n_volatile$ ?x6858)) (and $x6863 $x6864)))))
(let (($x6879 (or (not (and $x6854 (and $x2766 (< ?0 ?1)))) $x6867)))
(let (($x6525 (and $x2766 (< ?0 ?1))))
(let (($x6855 (and $x6854 $x6525)))
(let ((@x6567 (monotonicity @x2814 (rewrite (= (< ?0 ?1) $x6562)) (= $x6525 (and $x2815 $x6562)))))
(let ((@x6892 (trans (monotonicity @x6567 (= $x6855 (and $x6854 (and $x2815 $x6562)))) (rewrite (= (and $x6854 (and $x2815 $x6562)) $x6888)) (= $x6855 $x6888))))
(let ((@x6901 (monotonicity (monotonicity @x6892 (= (not $x6855) $x6893)) (rewrite (= $x6867 $x6896)) (= $x6879 $x6899))))
(let ((@x6906 (trans (quant-intro (rewrite (= (=> $x6855 $x6867) $x6879)) (= $x6876 $x6882)) (quant-intro @x6901 (= $x6882 $x6902)) (= $x6876 $x6902))))
(let ((@x14395 (mp~ (mp (asserted $x6876) @x6906 $x6902) (nnf-pos (refl (~ $x6899 $x6899)) (~ $x6902 $x6902)) $x6902)))
(let ((@x17985 (mp @x14395 @x17984 $x17982)))
(let (($x23544 (not $x23015)))
(let (($x23814 (not $x17982)))
(let (($x23815 (or $x23814 $x23544 $x11218 $x23302)))
(let (($x23303 (or $x23544 $x22571 $x22573 $x23302)))
(let (($x23827 (or $x23814 $x23303)))
(let ((@x23821 (trans (monotonicity @x22612 @x22606 (= $x23303 (or $x23544 false $x11218 $x23302))) (rewrite (= (or $x23544 false $x11218 $x23302) (or $x23544 $x11218 $x23302))) (= $x23303 (or $x23544 $x11218 $x23302)))))
(let ((@x23844 (trans (monotonicity @x23821 (= $x23827 (or $x23814 (or $x23544 $x11218 $x23302)))) (rewrite (= (or $x23814 (or $x23544 $x11218 $x23302)) $x23815)) (= $x23827 $x23815))))
(let ((@x23877 (unit-resolution (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ b_T_T_u1$ v_b_P_H_len$ 0) $x23827) @x23844 $x23815) @x17985 @x12000 @x23423 (hypothesis $x23309) false)))
(let ((@x23450 (monotonicity (symm (hypothesis $x22509) (= ?x22508 ?x10096)) (= (b_S_ref$ ?x22508) ?x22488))))
(let ((?x23516 (* (- 1) ?x23421)))
(let ((?x23517 (+ ?x21017 ?x23516)))
(let (($x23500 (<= ?x23517 0)))
(let ((@x23651 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x21017 ?x23421)) $x23500)) (symm (monotonicity @x22334 (= ?x23421 ?x21017)) (= ?x21017 ?x23421)) $x23500)))
(let (($x23501 (>= ?x23517 0)))
(let ((@x23654 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x21017 ?x23421)) $x23501)) (symm (monotonicity @x22334 (= ?x23421 ?x21017)) (= ?x21017 ?x23421)) $x23501)))
(let ((?x22742 (b_S_ref$ ?x22508)))
(let ((?x22730 (* (- 1) ?x22742)))
(let ((?x22761 (+ ?x22488 ?x22730)))
(let (($x22762 (<= ?x22761 0)))
(let ((@x23935 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x22488 ?x22742)) $x22762)) (symm @x23450 (= ?x22488 ?x22742)) $x22762)))
(let (($x22771 (>= ?x22761 0)))
(let ((@x23938 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x22488 ?x22742)) $x22771)) (symm @x23450 (= ?x22488 ?x22742)) $x22771)))
(let ((?x22620 (b_S_ref$ ?x22542)))
(let ((?x22632 (* (- 1) ?x22620)))
(let ((?x22695 (+ ?x22488 ?x22632)))
(let (($x22698 (<= ?x22695 0)))
(let (($x22694 (= ?x22488 ?x22620)))
(let ((@x23695 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x22694) $x22698)) (symm (monotonicity (symm @x23661 (= ?x22542 ?x10096)) (= ?x22620 ?x22488)) $x22694) $x22698)))
(let (($x22699 (>= ?x22695 0)))
(let ((@x23712 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x22694) $x22699)) (symm (monotonicity (symm @x23661 (= ?x22542 ?x10096)) (= ?x22620 ?x22488)) $x22694) $x22699)))
(let ((?x23417 (* (- 1) ?x21017)))
(let ((?x22615 (+ ?x10038 ?x23417)))
(let (($x22616 (<= ?x22615 0)))
(let (($x23418 (= ?x10038 ?x21017)))
(let (($x21189 (= ?x21017 ?x10038)))
(let (($x21194 (or $x21155 $x21189)))
(let ((@x21195 ((_ quant-inst (b_S_array$ b_T_T_u1$ v_b_P_H_len$) (b_S_ref$ ?x10037)) $x21194)))
(let ((@x23725 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x23418) $x22616)) (symm (unit-resolution @x21195 @x20273 $x21189) $x23418) $x22616)))
(let (($x22617 (>= ?x22615 0)))
(let ((@x23656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x23418) $x22617)) (symm (unit-resolution @x21195 @x20273 $x21189) $x23418) $x22617)))
(let ((?x22633 (+ ?x10038 ?x22540 ?x22632)))
(let (($x22692 (<= ?x22633 0)))
(let (($x22631 (= ?x22633 0)))
(let (($x22634 (or $x21155 $x22631)))
(let ((@x22687 (monotonicity (rewrite (= (= ?x22620 ?x22541) $x22631)) (= (or $x21155 (= ?x22620 ?x22541)) $x22634))))
(let ((@x22690 (trans @x22687 (rewrite (= $x22634 $x22634)) (= (or $x21155 (= ?x22620 ?x22541)) $x22634))))
(let ((@x22691 (mp ((_ quant-inst b_T_T_u1$ (+ ?x10038 ?x22540)) (or $x21155 (= ?x22620 ?x22541))) @x22690 $x22634)))
(let ((@x23777 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x22631) $x22692)) (unit-resolution @x22691 @x20273 $x22631) $x22692)))
(let (($x22693 (>= ?x22633 0)))
(let ((@x23780 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x22631) $x22693)) (unit-resolution @x22691 @x20273 $x22631) $x22693)))
(let ((@x23940 ((_ th-lemma arith eq-propagate -1 -1 1 1 1 1 -1 -1 1 1) @x23780 @x23777 @x23656 @x23725 @x23712 @x23695 @x23938 @x23935 @x23654 @x23651 (= ?x22742 ?x23437))))
(let ((@x23945 (monotonicity (trans (symm @x23940 (= ?x23437 ?x22742)) @x23450 (= ?x23437 ?x22488)) (= ?x23445 ?x22508))))
(let ((@x23946 (trans (monotonicity @x23790 (= ?x23234 ?x23405)) (hypothesis $x23447) (= ?x23234 ?x23445))))
(let ((@x23949 (symm (monotonicity (trans @x23946 @x23945 (= ?x23234 ?x22508)) (= ?x23235 ?x22652)) (= ?x22652 ?x23235))))
(let ((@x23951 (trans (monotonicity @x23949 (= ?x22655 ?x23228)) (unit-resolution (def-axiom (or $x23309 $x23052)) (lemma @x23877 $x23302) $x23052) (= ?x22655 ?x22567))))
(let ((@x23955 (trans (monotonicity (trans @x23951 @x23788 (= ?x22655 ?x10039)) (= ?x22663 ?x10041)) @x12002 $x22664)))
(let ((@x23959 (lemma (unit-resolution (hypothesis (not $x22664)) @x23955 false) (or $x23475 $x22664 (not $x22509)))))
(let ((@x23694 (unit-resolution (def-axiom (or $x22666 (not $x22664))) (unit-resolution @x23959 @x22967 @x23560 $x22664) $x22666)))
(let (($x23385 (not $x22662)))
(let (($x23658 (b_S_is_n_non_n_primitive$ ?x22660)))
(let (($x23659 (not $x23658)))
(let (($x22816 (or $x22662 $x23659)))
(let (($x22826 (not $x22816)))
(let (($x19252 (forall ((?v0 B_S_type_n_state$) )(! (let (($x9502 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))) b_S_kind_n_primitive$)))
(let (($x19248 (or $x9502 (not (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?v0)))))))
(not $x19248))) :pattern ( (b_S_ts_n_emb$ ?v0) ) :qid k!619))
))
(let (($x9507 (forall ((?v0 B_S_type_n_state$) )(! (let (($x9502 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))) b_S_kind_n_primitive$)))
(and (not $x9502) (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?v0))))) :pattern ( (b_S_ts_n_emb$ ?v0) ) :qid k!619))
))
(let (($x9502 (= (b_S_kind_n_of$ (b_S_typ$ (b_S_ts_n_emb$ ?0))) b_S_kind_n_primitive$)))
(let (($x19248 (or $x9502 (not (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?0)))))))
(let (($x9505 (and (not $x9502) (b_S_is_n_non_n_primitive$ (b_S_typ$ (b_S_ts_n_emb$ ?0))))))
(let ((@x15356 (mp~ (asserted $x9507) (nnf-pos (refl (~ $x9505 $x9505)) (~ $x9507 $x9507)) $x9507)))
(let ((@x19255 (mp @x15356 (quant-intro (rewrite (= $x9505 (not $x19248))) (= $x9507 $x19252)) $x19252)))
(let (($x22945 (or (not $x19252) $x22826)))
(let ((@x22937 ((_ quant-inst (b_S_select_o_tm$ ?x10231 ?x22508)) $x22945)))
(let ((@x23547 (unit-resolution (def-axiom (or $x22816 $x23385)) (lemma (unit-resolution @x22937 @x19255 (hypothesis $x22816) false) $x22826) $x23385)))
(let ((@x23566 (unit-resolution (def-axiom (or $x22669 $x22651 $x22659 $x22662 $x22667)) @x23547 @x23694 (or $x22669 $x22651 $x22659))))
(let ((@x23548 (unit-resolution @x23566 (unit-resolution (def-axiom (or $x22658 $x22653)) @x23680 $x22658) @x23049 $x22669)))
(let ((@x23567 (unit-resolution (def-axiom (or $x22677 $x22668)) @x23548 (unit-resolution @x23023 @x23037 $x22678) false)))
(let ((@x22770 (unit-resolution (def-axiom (or $x20550 $x15542 $x15551 $x20544)) (lemma @x23567 $x10100) @x22955 (unit-resolution (def-axiom (or $x20553 $x20547)) @x23021 $x20547) $x20544)))
(let ((@x23964 (trans (unit-resolution (def-axiom (or $x20541 $x10104)) @x22770 $x10104) @x23963 (= v_b_L_H_max_G_0$ ?x15570))))
(let ((@x23969 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= v_b_L_H_max_G_0$ ?x15570)) $x15573)) (unit-resolution (def-axiom (or $x19331 (not $x15573))) @x22637 (not $x15573)) @x23964 false)))
(let ((@x24340 (unit-resolution (def-axiom (or $x20538 $x11344 $x20532)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x11218 $x11341)) @x12000 $x11341) (or $x20538 $x20532))))
(let ((@x24341 (unit-resolution @x24340 (unit-resolution (def-axiom (or $x20541 $x20535)) @x22770 $x20535) $x20532)))
(let ((@x24343 (unit-resolution (def-axiom (or $x20526 $x19336 $x20520)) (unit-resolution (def-axiom (or $x20529 $x20523)) @x24341 $x20523) $x20523)))
(let ((@x24345 (unit-resolution (def-axiom (or $x20517 $x20511)) (unit-resolution @x24343 (lemma @x23969 $x19331) $x20520) $x20511)))
(let ((@x24350 (mp (unit-resolution (def-axiom (or $x20541 $x10104)) @x22770 $x10104) (symm (commutativity (= $x10126 $x10104)) (= $x10104 $x10126)) $x10126)))
(let ((@x24352 (unit-resolution (def-axiom (or $x20514 $x11218 $x15588 $x20508)) @x12000 (or $x20514 $x15588 $x20508))))
(let ((@x24355 (unit-resolution (unit-resolution @x24352 @x24350 (or $x20514 $x20508)) @x24345 $x20508)))
(let ((@x24795 (unit-resolution (def-axiom (or $x20505 $x10151)) @x24355 $x10151)))
(let ((@x24540 (unit-resolution (def-axiom (or $x20505 $x20341)) @x24355 $x20341)))
(let (($x23047 (= v_b_L_H_max_G_1$ v_b_S_result_G_0$)))
(let ((@x23243 (symm (unit-resolution (def-axiom (or $x20493 $x10181)) (hypothesis $x20496) $x10181) $x23047)))
(let (($x23245 (or (not $x23047) (<= (+ v_b_L_H_max_G_1$ (* (- 1) v_b_S_result_G_0$)) 0))))
(let ((@x23247 (unit-resolution ((_ th-lemma arith triangle-eq) $x23245) @x23243 (<= (+ v_b_L_H_max_G_1$ (* (- 1) v_b_S_result_G_0$)) 0))))
(let ((@x23136 (trans (hypothesis $x10151) (symm (hypothesis $x10181) $x23047) (= ?x10150 v_b_S_result_G_0$))))
(let (($x23099 (not (= ?x10150 v_b_S_result_G_0$))))
(let (($x23104 (or $x20478 $x19519 $x19674 $x11826 $x23099)))
(let (($x22996 (>= (+ v_b_SL_H_witness_G_0$ (* (- 1) v_b_P_H_len$)) 0)))
(let (($x23100 (or $x19519 $x19674 $x22996 $x23099)))
(let (($x23105 (or $x20478 $x23100)))
(let (($x23006 (= (>= (+ (* (- 1) v_b_P_H_len$) v_b_SL_H_witness_G_0$) 0) $x11826)))
(let (($x23004 (= $x22996 (>= (+ (* (- 1) v_b_P_H_len$) v_b_SL_H_witness_G_0$) 0))))
(let (($x23001 (= (+ v_b_SL_H_witness_G_0$ (* (- 1) v_b_P_H_len$)) (+ (* (- 1) v_b_P_H_len$) v_b_SL_H_witness_G_0$))))
(let ((@x23009 (trans (monotonicity (rewrite $x23001) $x23004) (rewrite $x23006) (= $x22996 $x11826))))
(let ((@x23109 (monotonicity (monotonicity @x23009 (= $x23100 (or $x19519 $x19674 $x11826 $x23099))) (= $x23105 (or $x20478 (or $x19519 $x19674 $x11826 $x23099))))))
(let ((@x23113 (trans @x23109 (rewrite (= (or $x20478 (or $x19519 $x19674 $x11826 $x23099)) $x23104)) (= $x23105 $x23104))))
(let ((@x23141 (unit-resolution (mp ((_ quant-inst v_b_SL_H_witness_G_0$) $x23105) @x23113 $x23104) (hypothesis $x12382) (hypothesis $x11827) (hypothesis $x11391) (hypothesis $x20473) @x23136 false)))
(let ((@x23249 (unit-resolution (lemma @x23141 (or $x20478 $x19674 $x11826 $x19519 $x19679 $x19658)) (unit-resolution (def-axiom (or $x20493 $x10181)) (hypothesis $x20496) $x10181) (hypothesis $x11827) (hypothesis $x11391) (hypothesis $x10151) (hypothesis $x12382) $x20478)))
(let ((@x23251 (unit-resolution (def-axiom (or $x20490 $x19598 $x20484)) (unit-resolution (def-axiom (or $x20481 $x20473)) @x23249 $x20481) (unit-resolution (def-axiom (or $x20493 $x20487)) (hypothesis $x20496) $x20487) $x19598)))
(let (($x23147 (>= (+ v_b_L_H_max_G_1$ ?x16058) 0)))
(let (($x23239 (or (not (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)) $x16038 $x11446)))
(let ((@x23237 ((_ th-lemma arith farkas -1 1 1) (hypothesis $x16043) (hypothesis (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)) (hypothesis $x11445) false)))
(let ((@x23255 (unit-resolution (lemma @x23237 $x23239) (unit-resolution (def-axiom (or $x19593 $x16043)) @x23251 $x16043) (unit-resolution (def-axiom (or $x20493 $x11445)) (hypothesis $x20496) $x11445) (not (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)))))
(let (($x23127 (<= (+ v_b_L_H_p_G_0$ (* (- 1) ?v0!15)) 0)))
(let (($x23155 (or $x20346 $x19577 $x19578 $x23127 $x23147)))
(let (($x23093 (<= (+ ?x15781 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x23073 (>= (+ ?v0!15 ?x11443) 0)))
(let (($x23094 (or $x19577 $x19578 $x23073 $x23093)))
(let (($x23156 (or $x20346 $x23094)))
(let (($x23132 (= (+ ?x15781 (* (- 1) v_b_L_H_max_G_1$)) (+ (* (- 1) v_b_L_H_max_G_1$) ?x15781))))
(let ((@x23145 (monotonicity (rewrite $x23132) (= $x23093 (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15781) 0)))))
(let ((@x23151 (trans @x23145 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15781) 0) $x23147)) (= $x23093 $x23147))))
(let ((@x23125 (monotonicity (rewrite (= (+ ?v0!15 ?x11443) (+ ?x11443 ?v0!15))) (= $x23073 (>= (+ ?x11443 ?v0!15) 0)))))
(let ((@x23130 (trans @x23125 (rewrite (= (>= (+ ?x11443 ?v0!15) 0) $x23127)) (= $x23073 $x23127))))
(let ((@x23160 (monotonicity (monotonicity @x23130 @x23151 (= $x23094 (or $x19577 $x19578 $x23127 $x23147))) (= $x23156 (or $x20346 (or $x19577 $x19578 $x23127 $x23147))))))
(let ((@x23164 (trans @x23160 (rewrite (= (or $x20346 (or $x19577 $x19578 $x23127 $x23147)) $x23155)) (= $x23156 $x23155))))
(let ((@x23260 (unit-resolution (mp ((_ quant-inst ?v0!15) $x23156) @x23164 $x23155) (hypothesis $x20341) (unit-resolution (def-axiom (or $x19593 $x15773)) @x23251 $x15773) (unit-resolution (def-axiom (or $x19593 $x15774)) @x23251 $x15774) (or $x23127 $x23147))))
(let ((@x23262 ((_ th-lemma arith farkas -1 1 1) (unit-resolution @x23260 @x23255 $x23147) (unit-resolution (def-axiom (or $x19593 (not $x16060))) @x23251 (not $x16060)) @x23247 false)))
(let ((@x24798 (unit-resolution (lemma @x23262 (or $x20493 $x20346 $x11826 $x19519 $x19679 $x19674)) @x24540 (unit-resolution (def-axiom (or $x20505 $x11827)) @x24355 $x11827) (unit-resolution (def-axiom (or $x20505 $x11391)) @x24355 $x11391) @x24795 (unit-resolution (def-axiom (or $x20505 $x12382)) @x24355 $x12382) $x20493)))
(let ((@x24803 (unit-resolution (def-axiom (or $x20502 $x20462 $x20496)) @x24798 (unit-resolution (def-axiom (or $x20505 $x20499)) @x24355 $x20499) $x20462)))
(let ((@x24804 (unit-resolution (def-axiom (or $x20459 $x11446)) @x24803 $x11446)))
(let ((@x24203 (unit-resolution (def-axiom (or $x20505 $x11860)) @x24355 $x11860)))
(let (($x24182 (or $x22580 $x20989 $x21492 $x22569 $x19675 $x11445 $x23433)))
(let (($x23429 (>= (+ v_b_L_H_p_G_0$ (* (- 1) v_b_P_H_len$)) 0)))
(let (($x23434 (or $x20989 $x21492 $x22569 $x19675 $x23429 $x23433)))
(let (($x24183 (or $x22580 $x23434)))
(let ((@x24147 (rewrite (= (>= (+ (* (- 1) v_b_P_H_len$) v_b_L_H_p_G_0$) 0) $x11445))))
(let (($x24139 (= (+ v_b_L_H_p_G_0$ (* (- 1) v_b_P_H_len$)) (+ (* (- 1) v_b_P_H_len$) v_b_L_H_p_G_0$))))
(let ((@x24148 (monotonicity (rewrite $x24139) (= $x23429 (>= (+ (* (- 1) v_b_P_H_len$) v_b_L_H_p_G_0$) 0)))))
(let ((@x24179 (monotonicity (trans @x24148 @x24147 (= $x23429 $x11445)) (= $x23434 (or $x20989 $x21492 $x22569 $x19675 $x11445 $x23433)))))
(let ((@x24189 (monotonicity @x24179 (= $x24183 (or $x22580 (or $x20989 $x21492 $x22569 $x19675 $x11445 $x23433))))))
(let ((@x24193 (trans @x24189 (rewrite (= (or $x22580 (or $x20989 $x21492 $x22569 $x19675 $x11445 $x23433)) $x24182)) (= $x24183 $x24182))))
(let ((@x24194 (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ (b_S_ptr$ ?x10035 ?x21017) v_b_P_H_len$ v_b_L_H_p_G_0$ b_T_T_u1$) $x24183) @x24193 $x24182)))
(let ((@x24207 (unit-resolution @x24194 @x18688 @x9728 @x12009 @x24203 @x24804 @x22724 (hypothesis $x23432) false)))
(let ((@x24208 (lemma @x24207 $x23433)))
(let ((@x24497 (unit-resolution (def-axiom (or $x24247 $x24257)) (mp (unit-resolution (def-axiom (or $x23432 $x23317)) @x24208 $x23317) @x24487 $x24258) $x24247)))
(let (($x24284 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x24595)))
(let ((?x24260 (b_S_owner$ v_b_S_s$ ?x24595)))
(let (($x24283 (= ?x24260 b_S_me$)))
(let (($x24285 (or $x24283 $x24284)))
(let (($x24286 (not $x24285)))
(let ((?x24251 (b_S_typ$ ?x24595)))
(let ((?x24252 (b_S_kind_n_of$ ?x24251)))
(let (($x24259 (= ?x24252 b_S_kind_n_primitive$)))
(let (($x24250 (not $x24247)))
(let (($x24256 (not $x24255)))
(let (($x24287 (or $x24256 $x24250 $x24259 $x24286)))
(let (($x24174 (b_S_in_n_wrapped_n_domain$ v_b_S_s$ ?x23183)))
(let (($x24274 (= (b_S_owner$ v_b_S_s$ ?x23183) b_S_me$)))
(let (($x24175 (or $x24274 $x24174)))
(let (($x24261 (not $x24175)))
(let (($x24262 (or $x24255 $x24261)))
(let (($x24263 (not $x24262)))
(let (($x24288 (not $x24287)))
(let (($x24264 (or $x24288 $x24263)))
(let (($x24265 (not $x24264)))
(let (($x24491 (b_S_typed$ v_b_S_s$ ?x23183)))
(let (($x24479 (not $x24491)))
(let (($x24266 (or $x24479 $x24265)))
(let (($x24267 (not $x24266)))
(let (($x24187 (b_S_thread_n_local$ v_b_S_s$ ?x23183)))
(let (($x24268 (= $x24187 $x24267)))
(let (($x24154 (or (not $x19090) $x24268)))
(let ((@x24103 ((_ quant-inst v_b_S_s$ (b_S_ptr$ b_T_T_u1$ ?x23065)) $x24154)))
(let (($x24408 (not $x24187)))
(let ((@x24446 (monotonicity (symm (monotonicity @x25031 (= $x24187 $x10283)) (= $x10283 $x24187)) (= $x15639 $x24408))))
(let ((@x24434 (unit-resolution (def-axiom (or (not $x24268) $x24187 $x24266)) (mp (hypothesis $x15639) @x24446 $x24408) (unit-resolution @x24103 @x19093 $x24268) $x24266)))
(let ((@x24109 (unit-resolution (def-axiom (or $x23432 $x10281)) @x24208 $x10281)))
(let ((@x24449 (mp @x24109 (symm (monotonicity @x25031 (= $x24491 $x10281)) (= $x10281 $x24491)) $x24491)))
(let ((@x24503 (unit-resolution (def-axiom (or $x24264 $x24287)) (unit-resolution (def-axiom (or $x24267 $x24479 $x24265)) @x24449 @x24434 $x24265) $x24287)))
(let ((?x24763 (+ ?x23293 ?x23421)))
(let ((?x24766 (b_S_ptr$ b_T_T_u1$ ?x24763)))
(let ((?x24748 (b_S_idx$ ?x21986 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let (($x24769 (= ?x24748 ?x24766)))
(let (($x24772 (not $x24769)))
(let (($x24749 (b_S_extent_n_hint$ ?x24748 ?x21986)))
(let (($x24756 (not $x24749)))
(let (($x24775 (or $x24756 $x24772)))
(let (($x24778 (not $x24775)))
(let (($x24781 (or $x22554 $x24778)))
(let (($x24762 (not (or $x24756 (not (= ?x24748 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x23293))))))))
(let (($x24776 (= (or $x24756 (not (= ?x24748 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x23293))))) $x24775)))
(let ((@x24768 (monotonicity (rewrite (= (+ ?x23421 ?x23293) ?x24763)) (= (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x23293)) ?x24766))))
(let ((@x24771 (monotonicity @x24768 (= (= ?x24748 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x23293))) $x24769))))
(let ((@x24774 (monotonicity @x24771 (= (not (= ?x24748 (b_S_ptr$ b_T_T_u1$ (+ ?x23421 ?x23293)))) $x24772))))
(let ((@x24785 (monotonicity (monotonicity (monotonicity @x24774 $x24776) (= $x24762 $x24778)) (= (or $x22554 $x24762) $x24781))))
(let ((@x24789 (mp ((_ quant-inst (b_S_ptr$ ?x10035 ?x21017) v_b_L_H_p_G_0$ b_T_T_u1$) (or $x22554 $x24762)) (trans @x24785 (rewrite (= $x24781 $x24781)) (= (or $x22554 $x24762) $x24781)) $x24781)))
(let ((@x24793 (def-axiom (or $x24775 $x24769))))
(let ((@x24480 (unit-resolution @x24793 (lemma (unit-resolution @x24789 @x18201 (hypothesis $x24775) false) $x24778) $x24769)))
(let ((?x24665 (b_S_idx$ ?x22567 v_b_L_H_p_G_0$ b_T_T_u1$)))
(let ((?x24666 (b_S_select_o_tm$ ?x10231 ?x24665)))
(let ((?x24667 (b_S_ts_n_emb$ ?x24666)))
(let (($x24668 (= ?x24667 ?x22567)))
(let (($x24673 (b_S_typed$ v_b_S_s$ ?x24665)))
(let (($x24674 (not $x24673)))
(let (($x24670 (b_S_ts_n_is_n_volatile$ ?x24666)))
(let (($x24669 (not $x24668)))
(let (($x24675 (or $x24669 $x24670 (not (b_S_ts_n_is_n_array_n_elt$ ?x24666)) $x24674)))
(let (($x24676 (not $x24675)))
(let (($x24580 (or $x23814 $x23544 $x19675 $x11445 $x24676)))
(let (($x24677 (or $x23544 $x19675 $x23429 $x24676)))
(let (($x24581 (or $x23814 $x24677)))
(let ((@x24579 (monotonicity (trans @x24148 @x24147 (= $x23429 $x11445)) (= $x24677 (or $x23544 $x19675 $x11445 $x24676)))))
(let ((@x24590 (trans (monotonicity @x24579 (= $x24581 (or $x23814 (or $x23544 $x19675 $x11445 $x24676)))) (rewrite (= (or $x23814 (or $x23544 $x19675 $x11445 $x24676)) $x24580)) (= $x24581 $x24580))))
(let ((@x24617 (unit-resolution (mp ((_ quant-inst v_b_S_s$ v_b_P_H_arr$ b_T_T_u1$ v_b_P_H_len$ v_b_L_H_p_G_0$) $x24581) @x24590 $x24580) @x17985 @x24203 @x24804 @x23423 (hypothesis $x24675) false)))
(let ((?x23465 (b_S_ref$ ?x23295)))
(let ((?x24292 (* (- 1) ?x23465)))
(let ((?x24322 (+ ?x23065 ?x24292)))
(let (($x24323 (<= ?x24322 0)))
(let (($x24321 (= ?x23065 ?x23465)))
(let ((@x24847 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24321) $x24323)) (symm (monotonicity (symm @x24838 (= ?x23295 ?x10279)) (= ?x23465 ?x23065)) $x24321) $x24323)))
(let (($x24324 (>= ?x24322 0)))
(let ((@x24850 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24321) $x24324)) (symm (monotonicity (symm @x24838 (= ?x23295 ?x10279)) (= ?x23465 ?x23065)) $x24321) $x24324)))
(let ((?x24293 (+ ?x10038 ?x23293 ?x24292)))
(let (($x24303 (<= ?x24293 0)))
(let (($x24291 (= ?x24293 0)))
(let (($x24294 (or $x21155 $x24291)))
(let ((@x24298 (monotonicity (rewrite (= (= ?x23465 ?x23294) $x24291)) (= (or $x21155 (= ?x23465 ?x23294)) $x24294))))
(let ((@x24301 (trans @x24298 (rewrite (= $x24294 $x24294)) (= (or $x21155 (= ?x23465 ?x23294)) $x24294))))
(let ((@x24302 (mp ((_ quant-inst b_T_T_u1$ (+ ?x10038 ?x23293)) (or $x21155 (= ?x23465 ?x23294))) @x24301 $x24294)))
(let ((@x24855 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24291) $x24303)) (unit-resolution @x24302 @x20273 $x24291) $x24303)))
(let (($x24304 (>= ?x24293 0)))
(let ((@x24858 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x24291) $x24304)) (unit-resolution @x24302 @x20273 $x24291) $x24304)))
(let ((@x24862 (symm ((_ th-lemma arith eq-propagate -1 -1 1 1 1 1 1 1) @x24858 @x24855 @x23656 @x23725 @x24850 @x24847 @x23654 @x23651 (= ?x23065 ?x24763)) (= ?x24763 ?x23065))))
(let ((@x25032 (trans (monotonicity @x23790 (= ?x24665 ?x24748)) (hypothesis $x24769) (= ?x24665 ?x24766))))
(let ((@x25034 (trans (trans @x25032 (monotonicity @x24862 (= ?x24766 ?x23183)) (= ?x24665 ?x23183)) @x25031 (= ?x24665 ?x10279))))
(let ((@x25047 (monotonicity (symm (monotonicity @x25034 (= ?x24666 ?x23060)) (= ?x23060 ?x24666)) (= (b_S_ts_n_emb$ ?x23060) ?x24667))))
(let ((@x25043 (monotonicity (monotonicity @x25031 (= ?x24594 ?x23060)) (= ?x24595 (b_S_ts_n_emb$ ?x23060)))))
(let ((@x25079 (trans (trans @x25043 @x25047 (= ?x24595 ?x24667)) (unit-resolution (def-axiom (or $x24675 $x24668)) (lemma @x24617 $x24676) $x24668) (= ?x24595 ?x22567))))
(let ((@x25084 (trans (monotonicity (trans @x25079 @x23788 (= ?x24595 ?x10039)) (= ?x24260 ?x10041)) @x12002 $x24283)))
(let ((@x25087 (lemma (unit-resolution (hypothesis (not $x24283)) @x25084 false) (or $x24772 $x24283))))
(let ((@x24517 (unit-resolution (def-axiom (or $x24285 (not $x24283))) (unit-resolution @x25087 @x24480 $x24283) $x24285)))
(let ((?x23318 (b_S_ts_n_emb$ ?x23060)))
(let ((?x23323 (b_S_typ$ ?x23318)))
(let ((?x23324 (b_S_kind_n_of$ ?x23323)))
(let (($x23325 (= ?x23324 b_S_kind_n_primitive$)))
(let ((@x24433 (monotonicity (monotonicity (symm @x25043 (= ?x23318 ?x24595)) (= ?x23323 ?x24251)) (= ?x23324 ?x24252))))
(let (($x23508 (b_S_is_n_non_n_primitive$ ?x23323)))
(let (($x23509 (not $x23508)))
(let (($x23512 (or $x23325 $x23509)))
(let (($x23513 (not $x23512)))
(let (($x24419 (or (not $x19252) $x23513)))
(let ((@x24186 ((_ quant-inst (b_S_select_o_tm$ ?x10231 ?x10279)) $x24419)))
(let ((@x24163 (unit-resolution (def-axiom (or $x23512 (not $x23325))) (unit-resolution @x24186 @x19255 $x23513) (not $x23325))))
(let ((@x24413 (lemma (unit-resolution @x24163 (trans @x24433 (hypothesis $x24259) $x23325) false) (not $x24259))))
(let ((@x24519 (unit-resolution (def-axiom (or $x24288 $x24256 $x24250 $x24259 $x24286)) @x24413 @x24517 (or $x24288 $x24256 $x24250))))
(let ((@x24523 (lemma (unit-resolution @x24519 @x24503 @x24497 @x24423 false) $x10283)))
(let ((@x24985 (unit-resolution (def-axiom (or $x20402 $x15630 $x15639 $x20396)) @x24216 (or $x20402 $x15639 $x20396))))
(let ((@x24718 (unit-resolution @x24985 (unit-resolution (def-axiom (or $x20393 $x20387)) (hypothesis $x20390) $x20393) @x24523 $x20402)))
(let ((@x20718 (def-axiom (or $x20405 $x20399))))
(let ((@x24125 (unit-resolution (def-axiom (or $x20456 $x15630 $x15633 $x20450)) (unit-resolution (def-axiom (or $x20447 $x20441)) (hypothesis $x20444) $x20447) (unit-resolution (def-axiom (or $x20441 $x10280)) (hypothesis $x20444) $x10280) (unit-resolution (def-axiom (or $x20459 $x20453)) @x24803 $x20453) @x24109 false)))
(let ((@x24725 (unit-resolution (def-axiom (or $x20444 $x15630 $x15639 $x20438)) (lemma @x24125 $x20441) $x20441)))
(let ((@x24571 (unit-resolution (def-axiom (or $x20435 $x20429)) (unit-resolution (unit-resolution @x24725 @x24216 (or $x15639 $x20438)) @x24523 $x20438) $x20429)))
(let ((@x20768 (def-axiom (or $x20432 $x20420 $x20426))))
(let ((@x24717 (unit-resolution @x20768 (unit-resolution (def-axiom (or $x20423 $x20387)) (hypothesis $x20390) $x20423) @x24571 $x20420)))
(let ((@x20736 (def-axiom (or $x20417 $x20411))))
(let ((@x24730 (unit-resolution (def-axiom (or $x20414 $x15630 $x15633 $x20408)) @x24109 (or $x20414 $x15630 $x20408))))
(let ((@x24750 (unit-resolution @x24730 @x24216 (or $x20414 $x20408))))
(let ((@x24719 (unit-resolution @x24750 (unit-resolution @x20736 @x24717 $x20411) (unit-resolution @x20718 @x24718 $x20405) false)))
(let (($x13268 (<= v_b_P_H_len$ 4294967295)))
(let (($x12917 (= (+ b_S_max_o_u4$ (* (- 1) v_b_P_H_len$)) (+ 4294967295 (* (- 1) v_b_P_H_len$)))))
(let ((@x13335 (monotonicity (monotonicity @x6405 $x12917) (= $x11204 (>= (+ 4294967295 (* (- 1) v_b_P_H_len$)) 0)))))
(let ((@x12096 (trans @x13335 (rewrite (= (>= (+ 4294967295 (* (- 1) v_b_P_H_len$)) 0) $x13268)) (= $x11204 $x13268))))
(let ((@x12097 (mp (and-elim @x11992 $x11204) @x12096 $x13268)))
(let ((@x25013 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x12582 (not $x13268) $x11445)) @x12097 (or $x12582 $x11445))))
(let ((@x24222 (unit-resolution (def-axiom (or $x20390 $x15651 $x15654 $x20384)) (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x11529 $x19675)) @x24203 $x11529) (unit-resolution @x25013 @x24804 $x12582) (or $x20390 $x20384))))
(let ((@x20672 (def-axiom (or $x20381 $x20375))))
(let ((@x25097 (unit-resolution @x20672 (unit-resolution @x24222 (lemma @x24719 $x20387) $x20384) $x20375)))
(let (($x20616 (>= ?x11541 (- 1))))
(let ((@x20664 (def-axiom (or $x20381 $x11539))))
(let ((@x25095 (unit-resolution @x20664 (unit-resolution @x24222 (lemma @x24719 $x20387) $x20384) $x11539)))
(let ((@x23528 (lemma ((_ th-lemma arith farkas -1 1 1) (hypothesis $x11571) (hypothesis $x11446) (hypothesis $x20616) false) (or $x11567 $x11445 (not $x20616)))))
(let ((@x25098 (unit-resolution (unit-resolution @x23528 @x24804 (or $x11567 (not $x20616))) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19470 $x20616)) @x25095 $x20616) $x11567)))
(let ((@x20658 (def-axiom (or $x20378 $x11571 $x20372))))
(let ((@x20650 (def-axiom (or $x20369 $x20363))))
(let (($x25052 (= ?x10286 ?x15674)))
(let (($x25058 (not $x25052)))
(let ((?x25053 (+ ?x10286 ?x15920)))
(let (($x25055 (>= ?x25053 0)))
(let (($x25062 (not $x25055)))
(let ((@x24542 (hypothesis (not $x15922))))
(let (($x24964 (not $x24790)))
(let ((?x11590 (* (- 1) v_b_L_H_max_G_3$)))
(let ((?x20740 (+ v_b_L_H_max_G_1$ ?x11590)))
(let (($x20741 (<= ?x20740 0)))
(let ((?x24245 (+ ?x10286 ?x11590)))
(let (($x24246 (<= ?x24245 0)))
(let (($x24315 (= ?x10286 v_b_L_H_max_G_3$)))
(let ((@x24800 (trans (monotonicity (hypothesis $x10297) (= $x24315 (= ?x10286 v_b_L_H_max_G_2$))) (commutativity (= (= ?x10286 v_b_L_H_max_G_2$) $x10292)) (= $x24315 $x10292))))
(let ((@x24829 (unit-resolution (hypothesis (not $x24315)) (mp (hypothesis $x10292) (symm @x24800 (= $x10292 $x24315)) $x24315) false)))
(let ((@x24809 (lemma @x24829 (or $x24315 $x19487 $x19490))))
(let ((@x24983 ((_ th-lemma arith triangle-eq) (or (not $x24315) $x24246))))
(let (($x20739 (= v_b_L_H_max_G_1$ v_b_L_H_max_G_3$)))
(let ((@x24791 (symm (commutativity (= $x20739 $x10350)) (= $x10350 $x20739))))
(let ((@x24394 (hypothesis $x24246)))
(let (($x20742 (>= ?x20740 0)))
(let (($x24550 (not $x20741)))
(let ((@x24327 (hypothesis $x24550)))
(let ((@x24404 (lemma ((_ th-lemma arith farkas 1 1 1) (hypothesis $x20742) (hypothesis $x11474) @x24394 false) (or (not $x24246) (not $x20742) $x11475))))
(let ((@x24808 (unit-resolution @x24404 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x20742 $x20741)) @x24327 $x20742) @x24394 $x11475)))
(let ((@x24744 (unit-resolution @x20768 (unit-resolution (def-axiom (or $x20417 $x11474)) @x24808 $x20417) @x24571 $x20426)))
(let ((@x20752 (def-axiom (or $x20423 $x10350))))
(let ((@x24824 (unit-resolution (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20739) $x20741)) @x24327 (not $x20739)) (mp (unit-resolution @x20752 @x24744 $x10350) @x24791 $x20739) false)))
(let ((@x24451 (lemma @x24824 (or $x20741 (not $x24246)))))
(let ((@x24899 (unit-resolution @x24451 (unit-resolution @x24983 (unit-resolution @x24809 @x25016 @x24980 $x24315) $x24246) $x20741)))
(let ((?x15898 (* (- 1) ?v0!14)))
(let ((?x24460 (+ v_b_L_H_p_G_0$ ?x15898)))
(let (($x24969 (>= ?x24460 0)))
(let (($x24714 (not $x24969)))
(let ((@x24532 (trans (symm @x25016 (= ?x10286 v_b_L_H_max_G_2$)) (symm @x24980 (= v_b_L_H_max_G_2$ v_b_L_H_max_G_3$)) $x24315)))
(let ((@x25064 (lemma ((_ th-lemma arith farkas -1 -1 1) @x24394 @x24542 (hypothesis $x25055) false) (or $x25062 (not $x24246) $x15922))))
(let ((@x25065 ((_ th-lemma arith triangle-eq) (or $x25058 $x25055))))
(let ((@x24993 (unit-resolution @x25065 (unit-resolution @x25064 (unit-resolution @x24983 @x24532 $x24246) @x24542 $x25062) $x25058)))
(let ((@x25051 (symm (hypothesis (= v_b_L_H_p_G_0$ ?v0!14)) (= ?v0!14 v_b_L_H_p_G_0$))))
(let ((@x25071 (symm (monotonicity (monotonicity @x25051 (= ?x15673 ?x10279)) (= ?x15674 ?x10286)) $x25052)))
(let ((@x25075 (lemma (unit-resolution (hypothesis $x25058) @x25071 false) (or (not (= v_b_L_H_p_G_0$ ?v0!14)) $x25052))))
(let (($x24467 (<= ?x24460 0)))
(let (($x24476 (>= (+ v_b_L_H_max_G_1$ ?x15920) 0)))
(let (($x24924 (not $x24476)))
(let ((@x24221 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x24924 $x24550 $x15922)) @x24542 (hypothesis $x20741) $x24924)))
(let ((@x25001 (unit-resolution @x24222 (unit-resolution (def-axiom (or $x20393 $x20387)) @x24227 $x20387) $x20384)))
(let ((@x24936 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19470 $x20616)) (unit-resolution @x20664 @x25001 $x11539) $x20616)))
(let ((@x24927 (unit-resolution (unit-resolution @x23528 @x24804 (or $x11567 (not $x20616))) @x24936 $x11567)))
(let ((@x25006 (unit-resolution @x20650 (unit-resolution @x20658 @x24927 (unit-resolution @x20672 @x25001 $x20375) $x20372) $x20363)))
(let ((@x24224 (trans (monotonicity (monotonicity @x24923 (= ?x10331 ?x10279)) (= ?x10332 ?x10286)) (symm @x25016 (= ?x10286 v_b_L_H_max_G_2$)) (= ?x10332 v_b_L_H_max_G_2$))))
(let ((@x20634 (def-axiom (or $x19431 $x11606 (not $x10333)))))
(let ((@x24228 (unit-resolution @x20634 (trans @x24224 (symm @x24980 (= v_b_L_H_max_G_2$ v_b_L_H_max_G_3$)) $x10333) (hypothesis $x11607) $x19431)))
(let ((@x20638 (def-axiom (or $x20357 $x19430))))
(let ((@x20646 (def-axiom (or $x20366 $x19404 $x20360))))
(let ((@x24217 (unit-resolution @x20646 (unit-resolution @x20638 @x24228 $x20357) @x25006 $x19404)))
(let ((@x20620 (def-axiom (or $x19399 $x15667))))
(let (($x24484 (or $x20346 $x19383 $x19384 $x24467 $x24476)))
(let (($x23542 (<= (+ ?x15674 (* (- 1) v_b_L_H_max_G_1$)) 0)))
(let (($x23534 (>= (+ ?v0!14 ?x11443) 0)))
(let (($x23543 (or $x19383 $x19384 $x23534 $x23542)))
(let (($x24485 (or $x20346 $x23543)))
(let (($x24456 (= (+ ?x15674 (* (- 1) v_b_L_H_max_G_1$)) (+ (* (- 1) v_b_L_H_max_G_1$) ?x15674))))
(let ((@x24473 (monotonicity (rewrite $x24456) (= $x23542 (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15674) 0)))))
(let ((@x24461 (trans @x24473 (rewrite (= (<= (+ (* (- 1) v_b_L_H_max_G_1$) ?x15674) 0) $x24476)) (= $x23542 $x24476))))
(let ((@x24471 (monotonicity (rewrite (= (+ ?v0!14 ?x11443) (+ ?x11443 ?v0!14))) (= $x23534 (>= (+ ?x11443 ?v0!14) 0)))))
(let ((@x24458 (trans @x24471 (rewrite (= (>= (+ ?x11443 ?v0!14) 0) $x24467)) (= $x23534 $x24467))))
(let ((@x24438 (monotonicity (monotonicity @x24458 @x24461 (= $x23543 (or $x19383 $x19384 $x24467 $x24476))) (= $x24485 (or $x20346 (or $x19383 $x19384 $x24467 $x24476))))))
(let ((@x24490 (trans @x24438 (rewrite (= (or $x20346 (or $x19383 $x19384 $x24467 $x24476)) $x24484)) (= $x24485 $x24484))))
(let ((@x24279 (unit-resolution (mp ((_ quant-inst ?v0!14) $x24485) @x24490 $x24484) @x24540 (unit-resolution (def-axiom (or $x19399 $x15666)) @x24217 $x15666) (unit-resolution @x20620 @x24217 $x15667) (or $x24467 $x24476))))
(let ((@x24218 (unit-resolution ((_ th-lemma arith triangle-eq) (or (= v_b_L_H_p_G_0$ ?v0!14) (not $x24467) $x24714)) (unit-resolution @x24279 @x24221 $x24467) (or (= v_b_L_H_p_G_0$ ?v0!14) $x24714))))
(let ((@x24230 (unit-resolution @x24218 (unit-resolution @x25075 @x24993 (not (= v_b_L_H_p_G_0$ ?v0!14))) $x24714)))
(let ((@x24721 ((_ th-lemma arith farkas -1 -1 1) (unit-resolution (def-axiom (or $x19399 $x15905)) @x24217 $x15905) @x24936 @x24230 false)))
(let ((@x24948 (unit-resolution (lemma @x24721 (or $x20393 $x15922 $x24550 $x11606)) @x24899 @x24227 @x24542 $x11606)))
(let ((@x24937 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x24790) (hypothesis $x11606) @x24804 false) (or $x24964 $x11607))))
(let ((@x24931 (unit-resolution (unit-resolution @x24834 (unit-resolution @x24937 @x24948 $x24964) $x24944) (mp @x24923 (symm (commutativity (= $x24901 $x10299)) (= $x10299 $x24901)) $x24901) false)))
(let ((@x25003 (unit-resolution @x24985 (unit-resolution (lemma @x24931 (or $x20393 $x15922)) @x24542 $x20393) @x24523 $x20402)))
(let ((@x25046 (unit-resolution @x20736 (unit-resolution @x24750 (unit-resolution @x20718 @x25003 $x20405) $x20414) $x20417)))
(let ((@x25038 (unit-resolution @x20768 @x25046 @x24571 $x20426)))
(let ((@x25089 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20739) $x20741)) (mp (unit-resolution @x20752 @x25038 $x10350) @x24791 $x20739) $x20741)))
(let ((@x25092 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1) (or $x25062 $x15922 $x11474 $x24550)) @x24542 @x25089 (unit-resolution (def-axiom (or $x20423 $x11475)) @x25038 $x11475) $x25062)))
(let (($x25044 (= v_b_L_H_p_G_0$ ?v0!14)))
(let ((@x25103 (monotonicity (unit-resolution (def-axiom (or $x20423 $x10351)) @x25038 $x10351) (= ?x10331 ?x10149))))
(let ((@x25108 (trans (monotonicity @x25103 (= ?x10332 ?x10150)) @x24795 (= ?x10332 v_b_L_H_max_G_1$))))
(let ((@x25118 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20743) $x20746)) (mp (unit-resolution (def-axiom (or $x20423 $x10351)) @x25038 $x10351) @x25113 $x20743) $x20746)))
(let ((@x24359 ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x20746) (hypothesis $x11606) (unit-resolution (def-axiom (or $x20505 $x11827)) @x24355 $x11827) false)))
(let ((@x24362 (lemma @x24359 (or $x11607 (not $x20746)))))
(let ((@x25120 (unit-resolution @x20634 (unit-resolution @x24362 @x25118 $x11607) (trans @x25108 (symm (unit-resolution @x20752 @x25038 $x10350) $x20739) $x10333) $x19431)))
(let ((@x25122 (unit-resolution @x20646 (unit-resolution @x20638 @x25120 $x20357) (unit-resolution @x20650 (unit-resolution @x20658 @x25098 @x25097 $x20372) $x20363) $x19404)))
(let ((@x20622 (def-axiom (or $x19399 $x15905))))
(let ((@x25126 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1) (or $x24969 $x15900 (not $x20616))) (unit-resolution @x20622 @x25122 $x15905) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x19470 $x20616)) @x25095 $x20616) $x24969)))
(let ((@x25130 (unit-resolution (mp ((_ quant-inst ?v0!14) $x24485) @x24490 $x24484) @x24540 (unit-resolution (def-axiom (or $x19399 $x15666)) @x25122 $x15666) (unit-resolution @x20620 @x25122 $x15667) (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or $x24924 $x24550 $x15922)) @x25089 @x24542 $x24924) $x24467)))
(let ((@x25132 (unit-resolution @x25075 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x25044 (not $x24467) $x24714)) @x25130 @x25126 $x25044) (unit-resolution @x25065 @x25092 $x25058) false)))
(let ((@x25139 (unit-resolution (def-axiom (or $x19399 (not $x15922))) (lemma @x25132 $x15922) $x19399)))
(let ((@x25140 (unit-resolution @x20646 @x25139 (unit-resolution @x20650 (unit-resolution @x20658 @x25098 @x25097 $x20372) $x20363) $x20360)))
(let ((@x25143 (unit-resolution (unit-resolution @x20634 (unit-resolution @x20638 @x25140 $x19430) $x19430) @x25138 $x11606)))
(let ((@x25144 (unit-resolution @x24937 @x25143 (unit-resolution @x24834 (hypothesis $x24901) $x24790) false)))
(let ((@x24975 (unit-resolution (lemma @x25144 (or $x24944 $x19490 $x19487 $x19491)) @x24980 @x25016 @x24923 $x24944)))
(let ((@x24954 (unit-resolution @x24975 (mp @x24923 (symm (commutativity (= $x24901 $x10299)) (= $x10299 $x24901)) $x24901) false)))
(let ((@x25004 (unit-resolution (unit-resolution @x24985 @x24523 (or $x20402 $x20396)) (lemma @x24954 $x20393) $x20402)))
(let ((@x25153 (unit-resolution @x20736 (unit-resolution @x24750 (unit-resolution @x20718 @x25004 $x20405) $x20414) $x20417)))
(let ((@x20754 (def-axiom (or $x20423 $x10351))))
(let ((@x25155 (unit-resolution @x20754 (unit-resolution (unit-resolution @x20768 @x24571 $x20429) @x25153 $x20426) $x10351)))
(let ((@x25157 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x20743) $x20746)) (mp @x25155 @x25113 $x20743) $x20746)))
(let ((@x25158 (unit-resolution @x20752 (unit-resolution (unit-resolution @x20768 @x24571 $x20429) @x25153 $x20426) $x10350)))
(let ((@x25162 (trans (monotonicity (monotonicity @x25155 (= ?x10331 ?x10149)) (= ?x10332 ?x10150)) @x24795 (= ?x10332 v_b_L_H_max_G_1$))))
(let ((@x25164 (unit-resolution (unit-resolution @x20634 (unit-resolution @x20638 @x25140 $x19430) $x19430) (trans @x25162 (symm @x25158 $x20739) $x10333) $x11606)))
(unit-resolution @x24362 @x25164 @x25157 false

b1977796d422a7eeee5cef59239f932764102dd1 2983 0
unsat
((set-logic AUFLIA)
(declare-fun ?v0!20 () B_Vertex$)
(declare-fun ?v0!19 () B_Vertex$)
(declare-fun ?v1!18 () B_Vertex$)
(declare-fun ?v0!17 () B_Vertex$)
(declare-fun ?v1!16 () B_Vertex$)
(declare-fun ?v0!15 () B_Vertex$)
(declare-fun ?v0!14 () B_Vertex$)
(declare-fun ?v0!13 () B_Vertex$)
(declare-fun ?v0!12 () B_Vertex$)
(declare-fun ?v0!11 () B_Vertex$)
(declare-fun ?v1!10 () B_Vertex$)
(declare-fun ?v1!9 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!8 () B_Vertex$)
(declare-fun ?v1!7 (B_Vertex$) B_Vertex$)
(declare-fun ?v1!6 (B_Vertex$) B_Vertex$)
(declare-fun ?v0!5 () B_Vertex$)
(declare-fun ?v0!4 () B_Vertex$)
(declare-fun ?v1!3 () B_Vertex$)
(declare-fun ?v0!2 () B_Vertex$)
(declare-fun ?v1!1 () B_Vertex$)
(declare-fun ?v0!0 () B_Vertex$)
(proof
(let ((?x260 (fun_upd$ v_b_Visited_G_1$ v_b_v_G_1$ true)))
(let (($x5237 (fun_app$ ?x260 ?v0!20)))
(let (($x9037 (not $x5237)))
(let (($x261 (= v_b_Visited_G_2$ ?x260)))
(let (($x3724 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or (>= (+ ?x268 ?x1907) 0) $x295 (not $x2237)))))))) :pattern ( (v_b_SP_G_2$ ?v1) ) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!20) ) :qid k!38))
))
(let (($x3729 (not $x3724)))
(let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x1908 (+ b_Infinity$ ?x1907)))
(let (($x1909 (<= ?x1908 0)))
(let (($x1904 (= ?v0!20 b_Source$)))
(let (($x3715 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or $x295 $x917 $x1277))))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3720 (not $x3715)))
(let (($x3732 (or $x3720 $x1904 $x1909 $x3729)))
(let (($x3735 (not $x3732)))
(let ((?x1888 (v_b_SP_G_2$ ?v0!19)))
(let ((?x1889 (* (- 1) ?x1888)))
(let ((?x1887 (v_b_SP_G_2$ ?v1!18)))
(let ((?x1879 (pair$ ?v1!18 ?v0!19)))
(let ((?x1880 (b_G$ ?x1879)))
(let (($x1891 (>= (+ ?x1880 ?x1887 ?x1889) 0)))
(let (($x1883 (<= (+ b_Infinity$ (* (- 1) ?x1880)) 0)))
(let (($x1878 (fun_app$ v_b_Visited_G_2$ ?v1!18)))
(let (($x2786 (not $x1878)))
(let (($x2801 (or $x2786 $x1883 $x1891)))
(let (($x2806 (not $x2801)))
(let (($x3738 (or $x2806 $x3735)))
(let (($x3741 (not $x3738)))
(let (($x3707 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x2763 (not $x296)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x286 $x2763 $x1257))))) :pattern ( (v_b_SP_G_2$ ?v1) (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3712 (not $x3707)))
(let (($x3744 (or $x3712 $x3741)))
(let (($x3747 (not $x3744)))
(let (($x1864 (>= (+ (v_b_SP_G_2$ ?v1!16) (* (- 1) (v_b_SP_G_2$ ?v0!17))) 0)))
(let (($x1857 (fun_app$ v_b_Visited_G_2$ ?v0!17)))
(let (($x2740 (not $x1857)))
(let (($x1855 (fun_app$ v_b_Visited_G_2$ ?v1!16)))
(let (($x2755 (or $x1855 $x2740 $x1864)))
(let (($x2760 (not $x2755)))
(let (($x3750 (or $x2760 $x3747)))
(let (($x3753 (not $x3750)))
(let (($x3698 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(>= ?x268 0)) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3703 (not $x3698)))
(let (($x3756 (or $x3703 $x3753)))
(let (($x3759 (not $x3756)))
(let ((?x1841 (v_b_SP_G_2$ ?v0!15)))
(let (($x1842 (>= ?x1841 0)))
(let (($x1843 (not $x1842)))
(let (($x3762 (or $x1843 $x3759)))
(let (($x3765 (not $x3762)))
(let ((?x291 (v_b_SP_G_2$ b_Source$)))
(let (($x292 (= ?x291 0)))
(let (($x768 (not $x292)))
(let (($x3768 (or $x768 $x3765)))
(let (($x3771 (not $x3768)))
(let (($x3774 (or $x768 $x3771)))
(let (($x3777 (not $x3774)))
(let (($x3690 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x295 (not $x286)))
(or $x295 $x273)))))) :pattern ( (fun_app$ v_b_Visited_G_2$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3695 (not $x3690)))
(let (($x3780 (or $x3695 $x3777)))
(let (($x3783 (not $x3780)))
(let ((?x1822 (fun_app$a v_b_SP_G_1$ ?v0!14)))
(let ((?x1821 (v_b_SP_G_2$ ?v0!14)))
(let (($x1823 (= ?x1821 ?x1822)))
(let (($x1824 (or (not (fun_app$ v_b_Visited_G_2$ ?v0!14)) $x1823)))
(let (($x1825 (not $x1824)))
(let (($x3786 (or $x1825 $x3783)))
(let (($x3789 (not $x3786)))
(let (($x3681 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3686 (not $x3681)))
(let (($x3792 (or $x3686 $x3789)))
(let (($x3795 (not $x3792)))
(let ((?x1804 (v_b_SP_G_2$ ?v0!13)))
(let ((?x1805 (* (- 1) ?x1804)))
(let ((?x1803 (fun_app$a v_b_SP_G_1$ ?v0!13)))
(let ((?x1806 (+ ?x1803 ?x1805)))
(let (($x1807 (>= ?x1806 0)))
(let (($x1808 (not $x1807)))
(let (($x3798 (or $x1808 $x3795)))
(let (($x3801 (not $x3798)))
(let (($x3673 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2712 (or $x1164 $x1170)))
(let (($x2713 (not $x2712)))
(or $x2713 $x273)))))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3678 (not $x3673)))
(let (($x3665 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)))
(or $x1164 $x1170 $x1180)))))))) :pattern ( (pair$ v_b_v_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :pattern ( (v_b_SP_G_2$ ?v0) ) :qid k!38))
))
(let (($x3670 (not $x3665)))
(let (($x2930 (not $x261)))
(let (($x3655 (forall ((?v0 B_Vertex$) )(! (let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 (>= (+ ?x171 ?x1168) 0)))))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3660 (not $x3655)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x1207 (+ b_Infinity$ ?x1168)))
(let (($x1208 (<= ?x1207 0)))
(let (($x252 (fun_app$ v_b_Visited_G_1$ v_b_v_G_1$)))
(let ((?x1770 (fun_app$a v_b_SP_G_1$ ?v0!12)))
(let ((?x1771 (* (- 1) ?x1770)))
(let ((?x1772 (+ b_Infinity$ ?x1771)))
(let (($x1773 (<= ?x1772 0)))
(let (($x1768 (fun_app$ v_b_Visited_G_1$ ?v0!12)))
(let (($x3804 (or $x1768 $x1773 $x252 $x1208 $x3660 $x2930 $x3670 $x3678 $x3801)))
(let (($x3807 (not $x3804)))
(let ((?x242 (fun_app$a v_b_SP_G_3$ b_Source$)))
(let (($x243 (= ?x242 0)))
(let (($x3617 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(or $x1094 $x917 $x1135)))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3622 (not $x3617)))
(let (($x3625 (or $x3622 $x243)))
(let (($x3628 (not $x3625)))
(let ((?x1729 (fun_app$a v_b_SP_G_3$ ?v0!11)))
(let ((?x1730 (* (- 1) ?x1729)))
(let ((?x1721 (pair$ ?v1!10 ?v0!11)))
(let ((?x1722 (b_G$ ?x1721)))
(let ((?x1716 (fun_app$a v_b_SP_G_3$ ?v1!10)))
(let ((?x2201 (+ ?x1716 ?x1722 ?x1730)))
(let (($x2204 (>= ?x2201 0)))
(let (($x1725 (<= (+ b_Infinity$ (* (- 1) ?x1722)) 0)))
(let (($x1719 (<= (+ b_Infinity$ (* (- 1) ?x1716)) 0)))
(let (($x2640 (or $x1719 $x1725 $x2204)))
(let (($x2645 (not $x2640)))
(let (($x3631 (or $x2645 $x3628)))
(let (($x3634 (not $x3631)))
(let (($x3609 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x1094 $x2612)))))))) :pattern ( (fun_app$a v_b_SP_G_3$ ?v0) ) :qid k!38))
))
(let (($x3614 (not $x3609)))
(let (($x3637 (or $x3614 $x3634)))
(let (($x3640 (not $x3637)))
(let (($x3595 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x227 ?x1657) 0) (not $x2143)))))) :pattern ( (fun_app$a v_b_SP_G_3$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!8) ) :qid k!38))
))
(let (($x3600 (not $x3595)))
(let (($x1659 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0!8))) 0)))
(let (($x1654 (= ?v0!8 b_Source$)))
(let (($x3603 (or $x1654 $x1659 $x3600)))
(let (($x3606 (not $x3603)))
(let (($x3643 (or $x3606 $x3640)))
(let (($x3646 (not $x3643)))
(let (($x217 (= v_b_oldSP_G_1$ v_b_oldSP_G_0$)))
(let (($x2704 (not $x217)))
(let (($x214 (= v_b_SP_G_3$ v_b_SP_G_1$)))
(let (($x2703 (not $x214)))
(let (($x212 (= v_b_v_G_2$ v_b_v_G_0$)))
(let (($x2702 (not $x212)))
(let (($x209 (= v_b_Visited_G_3$ v_b_Visited_G_1$)))
(let (($x2701 (not $x209)))
(let (($x3585 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x997))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v0) ) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3590 (not $x3585)))
(let (($x3649 (or $x3590 $x2701 $x2702 $x2703 $x2704 $x3646)))
(let (($x3652 (not $x3649)))
(let (($x3810 (or $x3652 $x3807)))
(let (($x3813 (not $x3810)))
(let (($x3576 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2124)))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x997 $x2546)))))))) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3581 (not $x3576)))
(let (($x3568 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(or $x176 $x917 $x985))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3573 (not $x3568)))
(let (($x3560 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x175 (not (fun_app$ v_b_Visited_G_1$ ?v0)) $x1010)))) :pattern ( (fun_app$ v_b_Visited_G_1$ ?v1) (fun_app$ v_b_Visited_G_1$ ?v0) ) :qid k!38))
))
(let (($x3565 (not $x3560)))
(let (($x3551 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(>= ?x171 0)) :pattern ( (fun_app$a v_b_SP_G_1$ ?v0) ) :qid k!38))
))
(let (($x3556 (not $x3551)))
(let ((?x169 (fun_app$a v_b_SP_G_1$ b_Source$)))
(let (($x170 (= ?x169 0)))
(let (($x2947 (not $x170)))
(let (($x3542 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x942 $x2473)))))))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3547 (not $x3542)))
(let (($x3816 (or $x3547 $x2947 $x3556 $x3565 $x3573 $x3581 $x3813)))
(let (($x3819 (not $x3816)))
(let (($x3528 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :pattern ( (v_b_SP_G_0$ ?v1) ) :pattern ( (fun_app$ v_b_Visited_G_0$ ?v1) ) :pattern ( (pair$ ?v1 ?v0!5) ) :qid k!38))
))
(let (($x3533 (not $x3528)))
(let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x1537 (+ b_Infinity$ ?x1536)))
(let (($x1538 (<= ?x1537 0)))
(let (($x1533 (= ?v0!5 b_Source$)))
(let (($x3536 (or $x1533 $x1538 $x3533)))
(let (($x1534 (not $x1533)))
(let ((@x5072 (unit-resolution (def-axiom (or $x3536 $x1534)) (hypothesis (not $x3536)) $x1534)))
(let (($x5500 (= b_Infinity$ ?x1535)))
(let (($x6555 (not $x5500)))
(let (($x1539 (not $x1538)))
(let ((@x5027 (unit-resolution (def-axiom (or $x3536 $x1539)) (hypothesis (not $x3536)) $x1539)))
(let ((@x5583 (symm (commutativity (= $x5500 (= ?x1535 b_Infinity$))) (= (= ?x1535 b_Infinity$) $x5500))))
(let (($x5648 (= ?x1535 b_Infinity$)))
(let (($x3488 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(or $x123 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x355 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(or $x123 (= (v_b_SP_G_0$ ?v0) b_Infinity$))) :qid k!38))
))
(let (($x123 (= ?0 b_Source$)))
(let (($x352 (or $x123 (= (v_b_SP_G_0$ ?0) b_Infinity$))))
(let (($x135 (forall ((?v0 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v0)))
(not $x133)) :qid k!38))
))
(let (($x349 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(or $x128 (= (v_b_SP_G_0$ ?v0) 0)))) :qid k!38))
))
(let (($x885 (and $x349 $x355 $x135)))
(let (($x1324 (forall ((?v0 B_Vertex$) )(! (let (($x1318 (exists ((?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(and $x1304 $x286 $x1301))))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1295 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))))
(or (not $x1295) $x1318))))) :qid k!38))
))
(let (($x1284 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1271 (and $x286 $x918)))
(let (($x1274 (not $x1271)))
(or $x1274 $x1277))))))))))) :qid k!38))
))
(let (($x1287 (not $x1284)))
(let (($x1327 (or $x1287 $x1324)))
(let (($x1330 (and $x1284 $x1327)))
(let (($x1265 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(or $x659 $x1257))))))) :qid k!38))
))
(let (($x1268 (not $x1265)))
(let (($x1333 (or $x1268 $x1330)))
(let (($x1336 (and $x1265 $x1333)))
(let (($x1251 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(>= ?x268 0)) :qid k!38))
))
(let (($x1254 (not $x1251)))
(let (($x1339 (or $x1254 $x1336)))
(let (($x1342 (and $x1251 $x1339)))
(let (($x1345 (or $x768 $x1342)))
(let (($x1348 (and $x292 $x1345)))
(let (($x647 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x295 (not $x286)))
(or $x295 $x273)))))) :qid k!38))
))
(let (($x780 (not $x647)))
(let (($x1351 (or $x780 $x1348)))
(let (($x1354 (and $x647 $x1351)))
(let (($x1242 (forall ((?v0 B_Vertex$) )(! (>= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) (v_b_SP_G_2$ ?v0))) 0) :qid k!38))
))
(let (($x1245 (not $x1242)))
(let (($x1357 (or $x1245 $x1354)))
(let (($x1360 (and $x1242 $x1357)))
(let (($x1194 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1174 (and (not $x1164) (not $x1170))))
(or $x1174 $x273))))))))) :qid k!38))
))
(let (($x1188 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1174 (and (not (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)) (not $x1170))))
(let (($x1177 (not $x1174)))
(or $x1177 $x1180))))))))) :qid k!38))
))
(let (($x1204 (forall ((?v0 B_Vertex$) )(! (let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 (>= (+ ?x171 ?x1168) 0)))))) :qid k!38))
))
(let (($x1209 (not $x1208)))
(let (($x253 (not $x252)))
(let (($x1075 (exists ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(and $x176 $x998))))) :qid k!38))
))
(let (($x1230 (and $x1075 $x253 $x1209 $x1204 $x261 $x1188 $x1194)))
(let (($x1235 (not $x1230)))
(let (($x1363 (or $x1235 $x1360)))
(let (($x1141 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x1129 (and $x1095 $x918)))
(let (($x1132 (not $x1129)))
(or $x1132 $x1135)))))))))) :qid k!38))
))
(let (($x1144 (not $x1141)))
(let (($x1147 (or $x1144 $x243)))
(let (($x1150 (and $x1141 $x1147)))
(let (($x1123 (forall ((?v0 B_Vertex$) )(! (let (($x1117 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(and (not (>= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)) (= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))) :qid k!38))
))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x1117)))))))) :qid k!38))
))
(let (($x1126 (not $x1123)))
(let (($x1153 (or $x1126 $x1150)))
(let (($x1156 (and $x1123 $x1153)))
(let (($x1078 (not $x1075)))
(let (($x1084 (and $x1078 $x209 $x212 $x214 $x217)))
(let (($x1089 (not $x1084)))
(let (($x1159 (or $x1089 $x1156)))
(let (($x1366 (and $x1159 $x1363)))
(let (($x1032 (forall ((?v0 B_Vertex$) )(! (let (($x1026 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x1012 (not $x1010)))
(and $x1012 $x175 $x1007))))))) :qid k!38))
))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x1026)))))))) :qid k!38))
))
(let (($x992 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x978 (and $x175 $x918)))
(let (($x981 (not $x978)))
(or $x981 $x985))))))))) :qid k!38))
))
(let (($x1040 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(or $x398 $x1010)))))))) :qid k!38))
))
(let (($x1046 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(>= ?x171 0)) :qid k!38))
))
(let (($x975 (forall ((?v0 B_Vertex$) )(! (let (($x969 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x952 (= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x902 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x955 (not $x902)))
(and $x955 $x133 $x952))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x969)))))) :qid k!38))
))
(let (($x1064 (and $x975 $x170 $x1046 $x1040 $x992 $x1032)))
(let (($x1069 (not $x1064)))
(let (($x1369 (or $x1069 $x1366)))
(let (($x1372 (and $x975 $x1369)))
(let (($x934 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x921 (and $x133 $x918)))
(let (($x924 (not $x921)))
(or $x924 $x928))))))))) :qid k!38))
))
(let (($x937 (not $x934)))
(let (($x1375 (or $x937 $x1372)))
(let (($x1378 (and $x934 $x1375)))
(let (($x909 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(let (($x377 (not $x146)))
(or $x377 $x902)))))) :qid k!38))
))
(let (($x912 (not $x909)))
(let (($x1381 (or $x912 $x1378)))
(let (($x1384 (and $x909 $x1381)))
(let (($x894 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(>= ?x124 0)) :qid k!38))
))
(let (($x897 (not $x894)))
(let (($x1387 (or $x897 $x1384)))
(let (($x1390 (and $x894 $x1387)))
(let ((?x141 (v_b_SP_G_0$ b_Source$)))
(let (($x142 (= ?x141 0)))
(let (($x864 (not $x142)))
(let (($x1393 (or $x864 $x1390)))
(let (($x1396 (and $x142 $x1393)))
(let (($x1402 (not (or (not $x885) $x1396))))
(let (($x315 (forall ((?v0 B_Vertex$) )(! (let (($x313 (exists ((?v1 B_Vertex$) )(! (let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x311 (and $x286 (= (v_b_SP_G_2$ ?v0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x311)))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x308 (and $x128 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(=> $x308 $x313))))) :qid k!38))
))
(let (($x316 (and $x315 false)))
(let (($x317 (=> $x316 true)))
(let (($x318 (and $x315 $x317)))
(let (($x306 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x303 (+ ?x268 ?x152)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x302 (and $x286 $x153)))
(=> $x302 (<= ?x298 ?x303))))))))) :qid k!38))
))
(let (($x319 (=> $x306 $x318)))
(let (($x301 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(=> $x297 $x299)))))))) :qid k!38))
))
(let (($x321 (=> $x301 (and $x306 $x319))))
(let (($x294 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(<= 0 ?x268)) :qid k!38))
))
(let (($x323 (=> $x294 (and $x301 $x321))))
(let (($x325 (=> $x292 (and $x294 $x323))))
(let (($x288 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v0)))
(=> $x286 $x273))))) :qid k!38))
))
(let (($x290 (and $x288 (and true true))))
(let (($x327 (=> $x290 (and $x292 $x325))))
(let (($x285 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(<= ?x268 ?x171))) :qid k!38))
))
(let (($x329 (=> $x285 (and $x288 $x327))))
(let (($x275 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 ?x171))))
(let (($x272 (not $x267)))
(=> $x272 $x273))))))))) :qid k!38))
))
(let (($x271 (forall ((?v0 B_Vertex$) )(! (let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x269 (= ?x268 ?x265)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 (fun_app$a v_b_SP_G_1$ ?v0)))))
(=> $x267 $x269))))))) :qid k!38))
))
(let (($x258 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x256 (<= ?x254 ?x171)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(=> $x176 $x256)))))) :qid k!38))
))
(let (($x255 (< ?x254 b_Infinity$)))
(let (($x206 (exists ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(and $x176 $x188))))) :qid k!38))
))
(let (($x281 (and $x206 (and $x253 (and $x255 (and $x258 (and $x261 (and $x271 $x275))))))))
(let (($x282 (and true $x281)))
(let (($x283 (and true $x282)))
(let (($x331 (=> $x283 (and $x285 $x329))))
(let (($x245 (and $x243 (=> $x243 true))))
(let (($x241 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x238 (and $x228 $x153)))
(=> $x238 (<= ?x230 ?x232))))))))) :qid k!38))
))
(let (($x246 (=> $x241 $x245)))
(let (($x237 (forall ((?v0 B_Vertex$) )(! (let (($x235 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 (= ?x230 ?x232))))))) :qid k!38))
))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x229 (and $x128 $x228)))
(=> $x229 $x235))))))) :qid k!38))
))
(let (($x248 (=> $x237 (and $x241 $x246))))
(let (($x222 (and true (and $x209 (and $x212 (and $x214 (and $x217 true)))))))
(let (($x223 (and true $x222)))
(let (($x207 (not $x206)))
(let (($x225 (and true (and $x207 $x223))))
(let (($x226 (and true $x225)))
(let (($x250 (=> $x226 (and $x237 $x248))))
(let (($x196 (forall ((?v0 B_Vertex$) )(! (let (($x194 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 (and $x175 (= ?x179 ?x184))))))))) :qid k!38))
))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x189 (and $x128 $x188)))
(=> $x189 $x194))))))) :qid k!38))
))
(let (($x197 (and $x196 true)))
(let (($x187 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x183 (and $x175 $x153)))
(=> $x183 (<= ?x179 ?x184))))))))) :qid k!38))
))
(let (($x182 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(=> $x178 $x180)))))))) :qid k!38))
))
(let (($x173 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(<= 0 ?x171)) :qid k!38))
))
(let (($x202 (and true (and $x170 (and $x173 (and $x182 (and $x187 $x197)))))))
(let (($x203 (and true $x202)))
(let (($x167 (forall ((?v0 B_Vertex$) )(! (let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x163))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x160 (and $x128 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(=> $x160 $x165))))) :qid k!38))
))
(let (($x333 (=> (and $x167 $x203) (and $x250 $x331))))
(let (($x158 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x154 (and $x133 $x153)))
(=> $x154 $x156))))))) :qid k!38))
))
(let (($x335 (=> $x158 (and $x167 $x333))))
(let (($x150 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v1)))
(let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(=> $x146 $x148))))))) :qid k!38))
))
(let (($x337 (=> $x150 (and $x158 $x335))))
(let (($x144 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(<= 0 ?x124)) :qid k!38))
))
(let (($x339 (=> $x144 (and $x150 $x337))))
(let (($x341 (=> $x142 (and $x144 $x339))))
(let (($x131 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(=> $x128 (= (v_b_SP_G_0$ ?v0) b_Infinity$)))) :qid k!38))
))
(let (($x127 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(=> $x123 (= (v_b_SP_G_0$ ?v0) 0))) :qid k!38))
))
(let (($x139 (and true (and $x127 (and $x131 (and $x135 true))))))
(let (($x140 (and true $x139)))
(let (($x343 (=> $x140 (and $x142 $x341))))
(let (($x344 (not $x343)))
(let (($x705 (forall ((?v0 B_Vertex$) )(! (let (($x693 (exists ((?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x684 (= ?x298 ?x666)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x687))))))))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x308 (and $x128 (< (v_b_SP_G_2$ ?v0) b_Infinity$))))
(or (not $x308) $x693))))) :qid k!38))
))
(let (($x681 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x669 (<= ?x298 ?x666)))
(or (not (and (fun_app$ v_b_Visited_G_2$ ?v1) (< ?x152 b_Infinity$))) $x669)))))) :qid k!38))
))
(let (($x733 (or (not $x681) $x705)))
(let (($x738 (and $x681 $x733)))
(let (($x663 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x298 (v_b_SP_G_2$ ?v0)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(or $x659 $x299))))))))) :qid k!38))
))
(let (($x745 (or (not $x663) $x738)))
(let (($x750 (and $x663 $x745)))
(let (($x757 (or (not $x294) $x750)))
(let (($x762 (and $x294 $x757)))
(let (($x769 (or $x768 $x762)))
(let (($x774 (and $x292 $x769)))
(let (($x781 (or $x780 $x774)))
(let (($x786 (and $x647 $x781)))
(let (($x793 (or (not $x285) $x786)))
(let (($x798 (and $x285 $x793)))
(let (($x612 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 ?x171))))
(or $x267 $x273)))))))) :qid k!38))
))
(let (($x606 (forall ((?v0 B_Vertex$) )(! (let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x265 (+ ?x254 ?x263)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x269 (= ?x268 ?x265)))
(let (($x267 (and (< ?x263 b_Infinity$) (< ?x265 (fun_app$a v_b_SP_G_1$ ?v0)))))
(let (($x272 (not $x267)))
(or $x272 $x269)))))))) :qid k!38))
))
(let (($x615 (and $x606 $x612)))
(let (($x618 (and $x261 $x615)))
(let (($x600 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x256 (<= ?x254 ?x171)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x256))))) :qid k!38))
))
(let (($x621 (and $x600 $x618)))
(let (($x624 (and $x255 $x621)))
(let (($x627 (and $x253 $x624)))
(let (($x630 (and $x206 $x627)))
(let (($x805 (or (not $x630) $x798)))
(let (($x552 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x540 (<= ?x230 ?x516)))
(or (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x540)))))) :qid k!38))
))
(let (($x568 (or (not $x552) $x243)))
(let (($x573 (and $x552 $x568)))
(let (($x537 (forall ((?v0 B_Vertex$) )(! (let (($x525 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 $x519))))))) :qid k!38))
))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x229 (and $x128 $x228)))
(or (not $x229) $x525))))))) :qid k!38))
))
(let (($x580 (or (not $x537) $x573)))
(let (($x585 (and $x537 $x580)))
(let (($x592 (or (not (and $x207 (and $x209 (and $x212 (and $x214 $x217))))) $x585)))
(let (($x810 (and $x592 $x805)))
(let (($x444 (forall ((?v0 B_Vertex$) )(! (let (($x432 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x423 (= ?x179 ?x405)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 $x426))))))))) :qid k!38))
))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x189 (and $x128 $x188)))
(or (not $x189) $x432))))))) :qid k!38))
))
(let (($x420 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x408 (<= ?x179 ?x405)))
(or (not (and (fun_app$ v_b_Visited_G_1$ ?v1) (< ?x152 b_Infinity$))) $x408)))))) :qid k!38))
))
(let (($x454 (and $x420 $x444)))
(let (($x402 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?v0)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(or $x398 $x180))))))))) :qid k!38))
))
(let (($x457 (and $x402 $x454)))
(let (($x460 (and $x173 $x457)))
(let (($x463 (and $x170 $x460)))
(let (($x395 (forall ((?v0 B_Vertex$) )(! (let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?v0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0)) $x163))) :qid k!38))
))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x160 (and $x128 (< (v_b_SP_G_0$ ?v0) b_Infinity$))))
(or (not $x160) $x165))))) :qid k!38))
))
(let (($x477 (and $x395 $x463)))
(let (($x817 (or (not $x477) $x810)))
(let (($x822 (and $x395 $x817)))
(let (($x388 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?v0))))))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x154 (and $x133 $x153)))
(or (not $x154) $x156))))))) :qid k!38))
))
(let (($x829 (or (not $x388) $x822)))
(let (($x834 (and $x388 $x829)))
(let (($x381 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v1)))
(let ((?x147 (v_b_SP_G_0$ ?v0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?v0))))
(let (($x377 (not $x146)))
(or $x377 $x148)))))))) :qid k!38))
))
(let (($x841 (or (not $x381) $x834)))
(let (($x846 (and $x381 $x841)))
(let (($x853 (or (not $x144) $x846)))
(let (($x858 (and $x144 $x853)))
(let (($x865 (or $x864 $x858)))
(let (($x870 (and $x142 $x865)))
(let (($x877 (or (not (and $x349 (and $x355 $x135))) $x870)))
(let (($x1318 (exists ((?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(and $x1304 $x286 $x1301))))))))) :qid k!38))
))
(let (($x128 (not $x123)))
(let (($x1295 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_2$ ?0))) 0)))))
(let (($x693 (exists ((?v1 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x666 (+ ?x152 ?x268)))
(let ((?x298 (v_b_SP_G_2$ ?0)))
(let (($x684 (= ?x298 ?x666)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x687))))))))) :qid k!38))
))
(let (($x700 (or (not (and $x128 (< (v_b_SP_G_2$ ?0) b_Infinity$))) $x693)))
(let ((?x298 (v_b_SP_G_2$ ?1)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?0)))
(let ((?x152 (b_G$ (pair$ ?0 ?1))))
(let (($x1301 (= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?0)))
(let (($x1257 (>= (+ ?x268 ?x1258) 0)))
(let (($x1304 (not $x1257)))
(let (($x1313 (and $x1304 $x286 $x1301)))
(let ((?x666 (+ ?x152 ?x268)))
(let (($x684 (= ?x298 ?x666)))
(let (($x687 (and $x286 $x684)))
(let (($x309 (< ?x268 ?x298)))
(let (($x690 (and $x309 $x687)))
(let ((@x1312 (monotonicity (rewrite (= $x309 $x1304)) (monotonicity (rewrite (= $x684 $x1301)) (= $x687 (and $x286 $x1301))) (= $x690 (and $x1304 (and $x286 $x1301))))))
(let ((@x1317 (trans @x1312 (rewrite (= (and $x1304 (and $x286 $x1301)) $x1313)) (= $x690 $x1313))))
(let (($x1293 (= (< ?x268 b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) ?x268)) 0)))))
(let ((@x1297 (monotonicity (rewrite $x1293) (= (and $x128 (< ?x268 b_Infinity$)) $x1295))))
(let ((@x1300 (monotonicity @x1297 (= (not (and $x128 (< ?x268 b_Infinity$))) (not $x1295)))))
(let ((@x1323 (monotonicity @x1300 (quant-intro @x1317 (= $x693 $x1318)) (= $x700 (or (not $x1295) $x1318)))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x918 (not $x917)))
(let (($x1271 (and $x286 $x918)))
(let (($x1274 (not $x1271)))
(let (($x1281 (or $x1274 $x1277)))
(let (($x669 (<= ?x298 ?x666)))
(let (($x676 (or (not (and $x286 (< ?x152 b_Infinity$))) $x669)))
(let ((@x920 (rewrite (= (< ?x152 b_Infinity$) $x918))))
(let ((@x1276 (monotonicity (monotonicity @x920 (= (and $x286 (< ?x152 b_Infinity$)) $x1271)) (= (not (and $x286 (< ?x152 b_Infinity$))) $x1274))))
(let ((@x1286 (quant-intro (monotonicity @x1276 (rewrite (= $x669 $x1277)) (= $x676 $x1281)) (= $x681 $x1284))))
(let ((@x1329 (monotonicity (monotonicity @x1286 (= (not $x681) $x1287)) (quant-intro @x1323 (= $x705 $x1324)) (= $x733 $x1327))))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?1)))
(let (($x295 (not $x286)))
(let (($x297 (and $x295 $x296)))
(let (($x659 (not $x297)))
(let (($x1262 (or $x659 $x1257)))
(let (($x299 (<= ?x298 ?x268)))
(let (($x660 (or $x659 $x299)))
(let ((@x1267 (quant-intro (monotonicity (rewrite (= $x299 $x1257)) (= $x660 $x1262)) (= $x663 $x1265))))
(let ((@x1335 (monotonicity (monotonicity @x1267 (= (not $x663) $x1268)) (monotonicity @x1286 @x1329 (= $x738 $x1330)) (= $x745 $x1333))))
(let ((@x1253 (quant-intro (rewrite (= (<= 0 ?x268) (>= ?x268 0))) (= $x294 $x1251))))
(let ((@x1341 (monotonicity (monotonicity @x1253 (= (not $x294) $x1254)) (monotonicity @x1267 @x1335 (= $x750 $x1336)) (= $x757 $x1339))))
(let ((@x1347 (monotonicity (monotonicity @x1253 @x1341 (= $x762 $x1342)) (= $x769 $x1345))))
(let ((@x1356 (monotonicity (monotonicity (monotonicity @x1347 (= $x774 $x1348)) (= $x781 $x1351)) (= $x786 $x1354))))
(let (($x1238 (>= (+ (fun_app$a v_b_SP_G_1$ ?0) (* (- 1) ?x268)) 0)))
(let ((@x1244 (quant-intro (rewrite (= (<= ?x268 (fun_app$a v_b_SP_G_1$ ?0)) $x1238)) (= $x285 $x1242))))
(let ((@x1359 (monotonicity (monotonicity @x1244 (= (not $x285) $x1245)) @x1356 (= $x793 $x1357))))
(let (($x1227 (and $x1075 (and $x253 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let (($x1225 (= $x627 (and $x253 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x273 (= ?x268 ?x171)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?0)))) 0)))
(let (($x1174 (and (not $x1164) (not $x1170))))
(let (($x1191 (or $x1174 $x273)))
(let (($x267 (and (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (< (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x171))))
(let (($x609 (or $x267 $x273)))
(let ((@x1173 (rewrite (= (< (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0))) ?x171) (not $x1170)))))
(let ((@x1167 (rewrite (= (< (b_G$ (pair$ v_b_v_G_1$ ?0)) b_Infinity$) (not $x1164)))))
(let ((@x1193 (monotonicity (monotonicity @x1167 @x1173 (= $x267 $x1174)) (= $x609 $x1191))))
(let (($x1180 (= (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?0)) (* (- 1) ?x268)) 0)))
(let (($x1177 (not $x1174)))
(let (($x1185 (or $x1177 $x1180)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?0))))
(let ((?x265 (+ ?x254 ?x263)))
(let (($x269 (= ?x268 ?x265)))
(let (($x272 (not $x267)))
(let (($x603 (or $x272 $x269)))
(let ((@x1179 (monotonicity (monotonicity @x1167 @x1173 (= $x267 $x1174)) (= $x272 $x1177))))
(let ((@x1190 (quant-intro (monotonicity @x1179 (rewrite (= $x269 $x1180)) (= $x603 $x1185)) (= $x606 $x1188))))
(let ((@x1214 (monotonicity @x1190 (quant-intro @x1193 (= $x612 $x1194)) (= $x615 (and $x1188 $x1194)))))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?0)))
(let (($x1201 (or $x175 (>= (+ ?x171 ?x1168) 0))))
(let (($x256 (<= ?x254 ?x171)))
(let (($x597 (or $x175 $x256)))
(let ((@x1203 (monotonicity (rewrite (= $x256 (>= (+ ?x171 ?x1168) 0))) (= $x597 $x1201))))
(let ((@x1220 (monotonicity (quant-intro @x1203 (= $x600 $x1204)) (monotonicity @x1214 (= $x618 (and $x261 (and $x1188 $x1194)))) (= $x621 (and $x1204 (and $x261 (and $x1188 $x1194)))))))
(let ((@x1223 (monotonicity (rewrite (= $x255 $x1209)) @x1220 (= $x624 (and $x1209 (and $x1204 (and $x261 (and $x1188 $x1194))))))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x998 (not $x997)))
(let (($x176 (not $x175)))
(let (($x1072 (and $x176 $x998)))
(let ((@x1074 (monotonicity (rewrite (= (< ?x171 b_Infinity$) $x998)) (= (and $x176 (< ?x171 b_Infinity$)) $x1072))))
(let ((@x1229 (monotonicity (quant-intro @x1074 (= $x206 $x1075)) (monotonicity @x1223 $x1225) (= $x630 $x1227))))
(let ((@x1237 (monotonicity (trans @x1229 (rewrite (= $x1227 $x1230)) (= $x630 $x1230)) (= (not $x630) $x1235))))
(let ((@x1365 (monotonicity @x1237 (monotonicity @x1244 @x1359 (= $x798 $x1360)) (= $x805 $x1363))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?1))) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x1129 (and $x1095 $x918)))
(let (($x1132 (not $x1129)))
(let (($x1138 (or $x1132 $x1135)))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?1)))
(let (($x540 (<= ?x230 ?x516)))
(let (($x547 (or (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x540)))
(let ((@x1131 (monotonicity (rewrite (= (< ?x227 b_Infinity$) $x1095)) @x920 (= (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$)) $x1129))))
(let ((@x1134 (monotonicity @x1131 (= (not (and (< ?x227 b_Infinity$) (< ?x152 b_Infinity$))) $x1132))))
(let ((@x1143 (quant-intro (monotonicity @x1134 (rewrite (= $x540 $x1135)) (= $x547 $x1138)) (= $x552 $x1141))))
(let ((@x1149 (monotonicity (monotonicity @x1143 (= (not $x552) $x1144)) (= $x568 $x1147))))
(let (($x1117 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(and (not (>= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?0))) 0)) (= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?0))) 0)))) :qid k!38))
))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(let (($x1120 (or $x1101 $x1117)))
(let (($x525 (exists ((?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x516 (+ ?x152 ?x227)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 $x519))))))) :qid k!38))
))
(let (($x532 (or (not (and $x128 (< ?x227 b_Infinity$))) $x525)))
(let (($x1114 (and (not (>= (+ ?x227 (* (- 1) ?x230)) 0)) (= (+ ?x152 ?x227 (* (- 1) ?x230)) 0))))
(let (($x519 (= ?x230 ?x516)))
(let (($x231 (< ?x227 ?x230)))
(let (($x522 (and $x231 $x519)))
(let ((@x1116 (monotonicity (rewrite (= $x231 (not (>= (+ ?x227 (* (- 1) ?x230)) 0)))) (rewrite (= $x519 (= (+ ?x152 ?x227 (* (- 1) ?x230)) 0))) (= $x522 $x1114))))
(let ((@x1100 (monotonicity (rewrite (= (< ?x227 b_Infinity$) $x1095)) (= (and $x128 (< ?x227 b_Infinity$)) $x1098))))
(let ((@x1122 (monotonicity (monotonicity @x1100 (= (not (and $x128 (< ?x227 b_Infinity$))) $x1101)) (quant-intro @x1116 (= $x525 $x1117)) (= $x532 $x1120))))
(let ((@x1128 (monotonicity (quant-intro @x1122 (= $x537 $x1123)) (= (not $x537) $x1126))))
(let ((@x1155 (monotonicity @x1128 (monotonicity @x1143 @x1149 (= $x573 $x1150)) (= $x580 $x1153))))
(let ((@x1086 (rewrite (= (and $x1078 (and $x209 (and $x212 (and $x214 $x217)))) $x1084))))
(let (($x488 (and $x209 (and $x212 (and $x214 $x217)))))
(let (($x502 (and $x207 $x488)))
(let ((@x1083 (monotonicity (monotonicity (quant-intro @x1074 (= $x206 $x1075)) (= $x207 $x1078)) (= $x502 (and $x1078 $x488)))))
(let ((@x1091 (monotonicity (trans @x1083 @x1086 (= $x502 $x1084)) (= (not $x502) $x1089))))
(let ((@x1161 (monotonicity @x1091 (monotonicity (quant-intro @x1122 (= $x537 $x1123)) @x1155 (= $x585 $x1156)) (= $x592 $x1159))))
(let (($x1065 (= (and $x975 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))) $x1064)))
(let (($x1062 (= $x477 (and $x975 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))))))
(let (($x1026 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?0))) 0)))
(let (($x1012 (not $x1010)))
(and $x1012 $x175 $x1007))))))) :qid k!38))
))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(let (($x1029 (or $x1004 $x1026)))
(let (($x432 (exists ((?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x423 (= ?x179 ?x405)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 $x426))))))))) :qid k!38))
))
(let (($x439 (or (not (and $x128 (< ?x171 b_Infinity$))) $x432)))
(let (($x1007 (= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?1))) 0)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?1))) 0)))
(let (($x1012 (not $x1010)))
(let (($x1021 (and $x1012 $x175 $x1007)))
(let ((?x405 (+ ?x152 ?x171)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?1)))
(let (($x423 (= ?x179 ?x405)))
(let (($x426 (and $x175 $x423)))
(let (($x190 (< ?x171 ?x179)))
(let (($x429 (and $x190 $x426)))
(let ((@x1020 (monotonicity (rewrite (= $x190 $x1012)) (monotonicity (rewrite (= $x423 $x1007)) (= $x426 (and $x175 $x1007))) (= $x429 (and $x1012 (and $x175 $x1007))))))
(let ((@x1025 (trans @x1020 (rewrite (= (and $x1012 (and $x175 $x1007)) $x1021)) (= $x429 $x1021))))
(let ((@x1003 (monotonicity (rewrite (= (< ?x171 b_Infinity$) $x998)) (= (and $x128 (< ?x171 b_Infinity$)) $x1001))))
(let ((@x1031 (monotonicity (monotonicity @x1003 (= (not (and $x128 (< ?x171 b_Infinity$))) $x1004)) (quant-intro @x1025 (= $x432 $x1026)) (= $x439 $x1029))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) ?x179)) 0)))
(let (($x978 (and $x175 $x918)))
(let (($x981 (not $x978)))
(let (($x989 (or $x981 $x985)))
(let (($x408 (<= ?x179 ?x405)))
(let (($x415 (or (not (and $x175 (< ?x152 b_Infinity$))) $x408)))
(let ((@x983 (monotonicity (monotonicity @x920 (= (and $x175 (< ?x152 b_Infinity$)) $x978)) (= (not (and $x175 (< ?x152 b_Infinity$))) $x981))))
(let ((@x994 (quant-intro (monotonicity @x983 (rewrite (= $x408 $x985)) (= $x415 $x989)) (= $x420 $x992))))
(let ((@x1051 (monotonicity @x994 (quant-intro @x1031 (= $x444 $x1032)) (= $x454 (and $x992 $x1032)))))
(let (($x177 (fun_app$ v_b_Visited_G_1$ ?1)))
(let (($x178 (and $x176 $x177)))
(let (($x398 (not $x178)))
(let (($x1037 (or $x398 $x1010)))
(let (($x180 (<= ?x179 ?x171)))
(let (($x399 (or $x398 $x180)))
(let ((@x1042 (quant-intro (monotonicity (rewrite (= $x180 $x1010)) (= $x399 $x1037)) (= $x402 $x1040))))
(let ((@x1048 (quant-intro (rewrite (= (<= 0 ?x171) (>= ?x171 0))) (= $x173 $x1046))))
(let ((@x1057 (monotonicity @x1048 (monotonicity @x1042 @x1051 (= $x457 (and $x1040 (and $x992 $x1032)))) (= $x460 (and $x1046 (and $x1040 (and $x992 $x1032)))))))
(let ((@x1060 (monotonicity @x1057 (= $x463 (and $x170 (and $x1046 (and $x1040 (and $x992 $x1032))))))))
(let (($x969 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x952 (= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?0)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x902 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?0))) 0)))
(let (($x955 (not $x902)))
(and $x955 $x133 $x952))))))) :qid k!38))
))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let (($x949 (not $x946)))
(let (($x972 (or $x949 $x969)))
(let (($x165 (exists ((?v1 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x163 (and $x133 (= (v_b_SP_G_0$ ?0) (+ (v_b_SP_G_0$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(and (< (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?0)) $x163))) :qid k!38))
))
(let (($x392 (or (not (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x165)))
(let (($x952 (= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x152) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?0)))
(let (($x902 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1))) 0)))
(let (($x955 (not $x902)))
(let (($x964 (and $x955 $x133 $x952)))
(let (($x164 (and (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) (and $x133 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152))))))
(let (($x959 (= (and $x133 (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152))) (and $x133 $x952))))
(let ((@x954 (rewrite (= (= (v_b_SP_G_0$ ?1) (+ (v_b_SP_G_0$ ?0) ?x152)) $x952))))
(let ((@x963 (monotonicity (rewrite (= (< (v_b_SP_G_0$ ?0) (v_b_SP_G_0$ ?1)) $x955)) (monotonicity @x954 $x959) (= $x164 (and $x955 (and $x133 $x952))))))
(let ((@x968 (trans @x963 (rewrite (= (and $x955 (and $x133 $x952)) $x964)) (= $x164 $x964))))
(let (($x944 (= (< (v_b_SP_G_0$ ?0) b_Infinity$) (not (<= (+ b_Infinity$ (* (- 1) (v_b_SP_G_0$ ?0))) 0)))))
(let ((@x948 (monotonicity (rewrite $x944) (= (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$)) $x946))))
(let ((@x951 (monotonicity @x948 (= (not (and $x128 (< (v_b_SP_G_0$ ?0) b_Infinity$))) $x949))))
(let ((@x977 (quant-intro (monotonicity @x951 (quant-intro @x968 (= $x165 $x969)) (= $x392 $x972)) (= $x395 $x975))))
(let ((@x1071 (monotonicity (trans (monotonicity @x977 @x1060 $x1062) (rewrite $x1065) (= $x477 $x1064)) (= (not $x477) $x1069))))
(let ((@x1371 (monotonicity @x1071 (monotonicity @x1161 @x1365 (= $x810 $x1366)) (= $x817 $x1369))))
(let (($x928 (>= (+ (v_b_SP_G_0$ ?0) (* (- 1) (v_b_SP_G_0$ ?1)) ?x152) 0)))
(let (($x921 (and $x133 $x918)))
(let (($x924 (not $x921)))
(let (($x931 (or $x924 $x928)))
(let ((?x147 (v_b_SP_G_0$ ?1)))
(let (($x156 (<= ?x147 (+ (v_b_SP_G_0$ ?0) ?x152))))
(let (($x385 (or (not (and $x133 (< ?x152 b_Infinity$))) $x156)))
(let ((@x926 (monotonicity (monotonicity @x920 (= (and $x133 (< ?x152 b_Infinity$)) $x921)) (= (not (and $x133 (< ?x152 b_Infinity$))) $x924))))
(let ((@x936 (quant-intro (monotonicity @x926 (rewrite (= $x156 $x928)) (= $x385 $x931)) (= $x388 $x934))))
(let ((@x1377 (monotonicity (monotonicity @x936 (= (not $x388) $x937)) (monotonicity @x977 @x1371 (= $x822 $x1372)) (= $x829 $x1375))))
(let (($x134 (not $x133)))
(let (($x146 (and $x134 (fun_app$ v_b_Visited_G_0$ ?1))))
(let (($x377 (not $x146)))
(let (($x906 (or $x377 $x902)))
(let ((?x124 (v_b_SP_G_0$ ?0)))
(let (($x148 (<= ?x147 ?x124)))
(let (($x378 (or $x377 $x148)))
(let ((@x911 (quant-intro (monotonicity (rewrite (= $x148 $x902)) (= $x378 $x906)) (= $x381 $x909))))
(let ((@x1383 (monotonicity (monotonicity @x911 (= (not $x381) $x912)) (monotonicity @x936 @x1377 (= $x834 $x1378)) (= $x841 $x1381))))
(let ((@x896 (quant-intro (rewrite (= (<= 0 ?x124) (>= ?x124 0))) (= $x144 $x894))))
(let ((@x1389 (monotonicity (monotonicity @x896 (= (not $x144) $x897)) (monotonicity @x911 @x1383 (= $x846 $x1384)) (= $x853 $x1387))))
(let ((@x1395 (monotonicity (monotonicity @x896 @x1389 (= $x858 $x1390)) (= $x865 $x1393))))
(let ((@x890 (monotonicity (rewrite (= (and $x349 (and $x355 $x135)) $x885)) (= (not (and $x349 (and $x355 $x135))) (not $x885)))))
(let ((@x1401 (monotonicity @x890 (monotonicity @x1395 (= $x870 $x1396)) (= $x877 (or (not $x885) $x1396)))))
(let (($x313 (exists ((?v1 B_Vertex$) )(! (let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x311 (and $x286 (= (v_b_SP_G_2$ ?0) (+ (v_b_SP_G_2$ ?v1) (b_G$ (pair$ ?v1 ?0)))))))
(let ((?x298 (v_b_SP_G_2$ ?0)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x309 (< ?x268 ?x298)))
(and $x309 $x311)))))) :qid k!38))
))
(let (($x308 (and $x128 (< ?x268 b_Infinity$))))
(let (($x314 (=> $x308 $x313)))
(let ((@x686 (monotonicity (rewrite (= (+ ?x268 ?x152) ?x666)) (= (= ?x298 (+ ?x268 ?x152)) $x684))))
(let ((@x692 (monotonicity (monotonicity @x686 (= (and $x286 (= ?x298 (+ ?x268 ?x152))) $x687)) (= (and $x309 (and $x286 (= ?x298 (+ ?x268 ?x152)))) $x690))))
(let ((@x698 (monotonicity (quant-intro @x692 (= $x313 $x693)) (= $x314 (=> $x308 $x693)))))
(let ((@x707 (quant-intro (trans @x698 (rewrite (= (=> $x308 $x693) $x700)) (= $x314 $x700)) (= $x315 $x705))))
(let ((@x714 (trans (monotonicity @x707 (= $x316 (and $x705 false))) (rewrite (= (and $x705 false) false)) (= $x316 false))))
(let ((@x721 (trans (monotonicity @x714 (= $x317 (=> false true))) (rewrite (= (=> false true) true)) (= $x317 true))))
(let ((@x728 (trans (monotonicity @x707 @x721 (= $x318 (and $x705 true))) (rewrite (= (and $x705 true) $x705)) (= $x318 $x705))))
(let (($x153 (< ?x152 b_Infinity$)))
(let (($x302 (and $x286 $x153)))
(let (($x305 (=> $x302 (<= ?x298 (+ ?x268 ?x152)))))
(let ((@x671 (monotonicity (rewrite (= (+ ?x268 ?x152) ?x666)) (= (<= ?x298 (+ ?x268 ?x152)) $x669))))
(let ((@x680 (trans (monotonicity @x671 (= $x305 (=> $x302 $x669))) (rewrite (= (=> $x302 $x669) $x676)) (= $x305 $x676))))
(let ((@x731 (monotonicity (quant-intro @x680 (= $x306 $x681)) @x728 (= $x319 (=> $x681 $x705)))))
(let ((@x740 (monotonicity (quant-intro @x680 (= $x306 $x681)) (trans @x731 (rewrite (= (=> $x681 $x705) $x733)) (= $x319 $x733)) (= (and $x306 $x319) $x738))))
(let ((@x743 (monotonicity (quant-intro (rewrite (= (=> $x297 $x299) $x660)) (= $x301 $x663)) @x740 (= $x321 (=> $x663 $x738)))))
(let ((@x752 (monotonicity (quant-intro (rewrite (= (=> $x297 $x299) $x660)) (= $x301 $x663)) (trans @x743 (rewrite (= (=> $x663 $x738) $x745)) (= $x321 $x745)) (= (and $x301 $x321) $x750))))
(let ((@x761 (trans (monotonicity @x752 (= $x323 (=> $x294 $x750))) (rewrite (= (=> $x294 $x750) $x757)) (= $x323 $x757))))
(let ((@x767 (monotonicity (monotonicity @x761 (= (and $x294 $x323) $x762)) (= $x325 (=> $x292 $x762)))))
(let ((@x776 (monotonicity (trans @x767 (rewrite (= (=> $x292 $x762) $x769)) (= $x325 $x769)) (= (and $x292 $x325) $x774))))
(let ((@x649 (quant-intro (rewrite (= (=> $x286 $x273) (or $x295 $x273))) (= $x288 $x647))))
(let ((@x654 (monotonicity @x649 (rewrite (= (and true true) true)) (= $x290 (and $x647 true)))))
(let ((@x779 (monotonicity (trans @x654 (rewrite (= (and $x647 true) $x647)) (= $x290 $x647)) @x776 (= $x327 (=> $x647 $x774)))))
(let ((@x788 (monotonicity @x649 (trans @x779 (rewrite (= (=> $x647 $x774) $x781)) (= $x327 $x781)) (= (and $x288 $x327) $x786))))
(let ((@x797 (trans (monotonicity @x788 (= $x329 (=> $x285 $x786))) (rewrite (= (=> $x285 $x786) $x793)) (= $x329 $x793))))
(let (($x628 (= (and $x253 (and $x255 (and $x258 (and $x261 (and $x271 $x275))))) $x627)))
(let ((@x617 (monotonicity (quant-intro (rewrite (= (=> $x267 $x269) $x603)) (= $x271 $x606)) (quant-intro (rewrite (= (=> $x272 $x273) $x609)) (= $x275 $x612)) (= (and $x271 $x275) $x615))))
(let ((@x623 (monotonicity (quant-intro (rewrite (= (=> $x176 $x256) $x597)) (= $x258 $x600)) (monotonicity @x617 (= (and $x261 (and $x271 $x275)) $x618)) (= (and $x258 (and $x261 (and $x271 $x275))) $x621))))
(let ((@x626 (monotonicity @x623 (= (and $x255 (and $x258 (and $x261 (and $x271 $x275)))) $x624))))
(let ((@x635 (monotonicity (monotonicity (monotonicity @x626 $x628) (= $x281 $x630)) (= $x282 (and true $x630)))))
(let ((@x641 (monotonicity (trans @x635 (rewrite (= (and true $x630) $x630)) (= $x282 $x630)) (= $x283 (and true $x630)))))
(let ((@x803 (monotonicity (trans @x641 (rewrite (= (and true $x630) $x630)) (= $x283 $x630)) (monotonicity @x797 (= (and $x285 $x329) $x798)) (= $x331 (=> $x630 $x798)))))
(let ((@x559 (monotonicity (rewrite (= (=> $x243 true) true)) (= $x245 (and $x243 true)))))
(let (($x228 (< ?x227 b_Infinity$)))
(let (($x238 (and $x228 $x153)))
(let (($x240 (=> $x238 (<= ?x230 (+ ?x227 ?x152)))))
(let ((@x542 (monotonicity (rewrite (= (+ ?x227 ?x152) ?x516)) (= (<= ?x230 (+ ?x227 ?x152)) $x540))))
(let ((@x551 (trans (monotonicity @x542 (= $x240 (=> $x238 $x540))) (rewrite (= (=> $x238 $x540) $x547)) (= $x240 $x547))))
(let ((@x566 (monotonicity (quant-intro @x551 (= $x241 $x552)) (trans @x559 (rewrite (= (and $x243 true) $x243)) (= $x245 $x243)) (= $x246 (=> $x552 $x243)))))
(let ((@x575 (monotonicity (quant-intro @x551 (= $x241 $x552)) (trans @x566 (rewrite (= (=> $x552 $x243) $x568)) (= $x246 $x568)) (= (and $x241 $x246) $x573))))
(let (($x235 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x232 (+ ?x227 ?x152)))
(let ((?x230 (fun_app$a v_b_SP_G_3$ ?0)))
(let (($x231 (< ?x227 ?x230)))
(and $x231 (= ?x230 ?x232))))))) :qid k!38))
))
(let (($x229 (and $x128 $x228)))
(let (($x236 (=> $x229 $x235)))
(let ((@x521 (monotonicity (rewrite (= (+ ?x227 ?x152) ?x516)) (= (= ?x230 (+ ?x227 ?x152)) $x519))))
(let ((@x527 (quant-intro (monotonicity @x521 (= (and $x231 (= ?x230 (+ ?x227 ?x152))) $x522)) (= $x235 $x525))))
(let ((@x536 (trans (monotonicity @x527 (= $x236 (=> $x229 $x525))) (rewrite (= (=> $x229 $x525) $x532)) (= $x236 $x532))))
(let ((@x578 (monotonicity (quant-intro @x536 (= $x237 $x537)) @x575 (= $x248 (=> $x537 $x573)))))
(let ((@x587 (monotonicity (quant-intro @x536 (= $x237 $x537)) (trans @x578 (rewrite (= (=> $x537 $x573) $x580)) (= $x248 $x580)) (= (and $x237 $x248) $x585))))
(let (($x486 (= (and $x212 (and $x214 (and $x217 true))) (and $x212 (and $x214 $x217)))))
(let ((@x484 (monotonicity (rewrite (= (and $x217 true) $x217)) (= (and $x214 (and $x217 true)) (and $x214 $x217)))))
(let ((@x490 (monotonicity (monotonicity @x484 $x486) (= (and $x209 (and $x212 (and $x214 (and $x217 true)))) $x488))))
(let ((@x497 (trans (monotonicity @x490 (= $x222 (and true $x488))) (rewrite (= (and true $x488) $x488)) (= $x222 $x488))))
(let ((@x501 (trans (monotonicity @x497 (= $x223 (and true $x488))) (rewrite (= (and true $x488) $x488)) (= $x223 $x488))))
(let ((@x507 (monotonicity (monotonicity @x501 (= (and $x207 $x223) $x502)) (= $x225 (and true $x502)))))
(let ((@x513 (monotonicity (trans @x507 (rewrite (= (and true $x502) $x502)) (= $x225 $x502)) (= $x226 (and true $x502)))))
(let ((@x590 (monotonicity (trans @x513 (rewrite (= (and true $x502) $x502)) (= $x226 $x502)) @x587 (= $x250 (=> $x502 $x585)))))
(let ((@x812 (monotonicity (trans @x590 (rewrite (= (=> $x502 $x585) $x592)) (= $x250 $x592)) (trans @x803 (rewrite (= (=> $x630 $x798) $x805)) (= $x331 $x805)) (= (and $x250 $x331) $x810))))
(let (($x194 (exists ((?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?0))))
(let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x184 (+ ?x171 ?x152)))
(let ((?x179 (fun_app$a v_b_SP_G_1$ ?0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x190 (< ?x171 ?x179)))
(and $x190 (and $x175 (= ?x179 ?x184))))))))) :qid k!38))
))
(let (($x188 (< ?x171 b_Infinity$)))
(let (($x189 (and $x128 $x188)))
(let (($x195 (=> $x189 $x194)))
(let ((@x425 (monotonicity (rewrite (= (+ ?x171 ?x152) ?x405)) (= (= ?x179 (+ ?x171 ?x152)) $x423))))
(let ((@x431 (monotonicity (monotonicity @x425 (= (and $x175 (= ?x179 (+ ?x171 ?x152))) $x426)) (= (and $x190 (and $x175 (= ?x179 (+ ?x171 ?x152)))) $x429))))
(let ((@x437 (monotonicity (quant-intro @x431 (= $x194 $x432)) (= $x195 (=> $x189 $x432)))))
(let ((@x446 (quant-intro (trans @x437 (rewrite (= (=> $x189 $x432) $x439)) (= $x195 $x439)) (= $x196 $x444))))
(let ((@x453 (trans (monotonicity @x446 (= $x197 (and $x444 true))) (rewrite (= (and $x444 true) $x444)) (= $x197 $x444))))
(let (($x183 (and $x175 $x153)))
(let (($x186 (=> $x183 (<= ?x179 (+ ?x171 ?x152)))))
(let ((@x410 (monotonicity (rewrite (= (+ ?x171 ?x152) ?x405)) (= (<= ?x179 (+ ?x171 ?x152)) $x408))))
(let ((@x419 (trans (monotonicity @x410 (= $x186 (=> $x183 $x408))) (rewrite (= (=> $x183 $x408) $x415)) (= $x186 $x415))))
(let ((@x456 (monotonicity (quant-intro @x419 (= $x187 $x420)) @x453 (= (and $x187 $x197) $x454))))
(let ((@x459 (monotonicity (quant-intro (rewrite (= (=> $x178 $x180) $x399)) (= $x182 $x402)) @x456 (= (and $x182 (and $x187 $x197)) $x457))))
(let ((@x465 (monotonicity (monotonicity @x459 (= (and $x173 (and $x182 (and $x187 $x197))) $x460)) (= (and $x170 (and $x173 (and $x182 (and $x187 $x197)))) $x463))))
(let ((@x472 (trans (monotonicity @x465 (= $x202 (and true $x463))) (rewrite (= (and true $x463) $x463)) (= $x202 $x463))))
(let ((@x476 (trans (monotonicity @x472 (= $x203 (and true $x463))) (rewrite (= (and true $x463) $x463)) (= $x203 $x463))))
(let ((@x397 (quant-intro (rewrite (= (=> (and $x128 (< ?x124 b_Infinity$)) $x165) $x392)) (= $x167 $x395))))
(let ((@x815 (monotonicity (monotonicity @x397 @x476 (= (and $x167 $x203) $x477)) @x812 (= $x333 (=> $x477 $x810)))))
(let ((@x824 (monotonicity @x397 (trans @x815 (rewrite (= (=> $x477 $x810) $x817)) (= $x333 $x817)) (= (and $x167 $x333) $x822))))
(let ((@x390 (quant-intro (rewrite (= (=> (and $x133 $x153) $x156) $x385)) (= $x158 $x388))))
(let ((@x833 (trans (monotonicity @x390 @x824 (= $x335 (=> $x388 $x822))) (rewrite (= (=> $x388 $x822) $x829)) (= $x335 $x829))))
(let ((@x839 (monotonicity (quant-intro (rewrite (= (=> $x146 $x148) $x378)) (= $x150 $x381)) (monotonicity @x390 @x833 (= (and $x158 $x335) $x834)) (= $x337 (=> $x381 $x834)))))
(let ((@x848 (monotonicity (quant-intro (rewrite (= (=> $x146 $x148) $x378)) (= $x150 $x381)) (trans @x839 (rewrite (= (=> $x381 $x834) $x841)) (= $x337 $x841)) (= (and $x150 $x337) $x846))))
(let ((@x857 (trans (monotonicity @x848 (= $x339 (=> $x144 $x846))) (rewrite (= (=> $x144 $x846) $x853)) (= $x339 $x853))))
(let ((@x863 (monotonicity (monotonicity @x857 (= (and $x144 $x339) $x858)) (= $x341 (=> $x142 $x858)))))
(let ((@x872 (monotonicity (trans @x863 (rewrite (= (=> $x142 $x858) $x865)) (= $x341 $x865)) (= (and $x142 $x341) $x870))))
(let (($x363 (and $x349 (and $x355 $x135))))
(let (($x366 (and true $x363)))
(let ((@x357 (quant-intro (rewrite (= (=> $x128 (= ?x124 b_Infinity$)) $x352)) (= $x131 $x355))))
(let ((@x362 (monotonicity @x357 (rewrite (= (and $x135 true) $x135)) (= (and $x131 (and $x135 true)) (and $x355 $x135)))))
(let ((@x351 (quant-intro (rewrite (= (=> $x123 (= ?x124 0)) (or $x128 (= ?x124 0)))) (= $x127 $x349))))
(let ((@x365 (monotonicity @x351 @x362 (= (and $x127 (and $x131 (and $x135 true))) $x363))))
(let ((@x372 (trans (monotonicity @x365 (= $x139 $x366)) (rewrite (= $x366 $x363)) (= $x139 $x363))))
(let ((@x376 (trans (monotonicity @x372 (= $x140 $x366)) (rewrite (= $x366 $x363)) (= $x140 $x363))))
(let ((@x881 (trans (monotonicity @x376 @x872 (= $x343 (=> $x363 $x870))) (rewrite (= (=> $x363 $x870) $x877)) (= $x343 $x877))))
(let ((@x1406 (trans (monotonicity @x881 (= $x344 (not $x877))) (monotonicity @x1401 (= (not $x877) $x1402)) (= $x344 $x1402))))
(let ((@x1408 (not-or-elim (mp (asserted $x344) @x1406 $x1402) $x885)))
(let ((@x1458 (mp~ (and-elim @x1408 $x355) (nnf-pos (refl (~ $x352 $x352)) (~ $x355 $x355)) $x355)))
(let ((@x3493 (mp @x1458 (quant-intro (refl (= $x352 $x352)) (= $x355 $x3488)) $x3488)))
(let ((@x5494 (rewrite (= (or (not $x3488) (or $x1533 $x5648)) (or (not $x3488) $x1533 $x5648)))))
(let ((@x5498 (mp ((_ quant-inst ?v0!5) (or (not $x3488) (or $x1533 $x5648))) @x5494 (or (not $x3488) $x1533 $x5648))))
(let ((@x6448 (unit-resolution (hypothesis $x6555) (mp (unit-resolution @x5498 @x3493 (hypothesis $x1534) $x5648) @x5583 $x5500) false)))
(let ((@x3189 (unit-resolution (lemma @x6448 (or $x5500 $x1533)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x6555 $x1538)) @x5027 $x6555) @x5072 false)))
(let (($x3539 (not $x3536)))
(let (($x3822 (or $x3539 $x3819)))
(let (($x3825 (not $x3822)))
(let (($x3519 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or $x134 $x917 $x928))))))) :pattern ( (pair$ ?v1 ?v0) ) :qid k!38))
))
(let (($x3524 (not $x3519)))
(let (($x3828 (or $x3524 $x3825)))
(let (($x3831 (not $x3828)))
(let ((?x1517 (v_b_SP_G_0$ ?v0!4)))
(let ((?x1518 (* (- 1) ?x1517)))
(let ((?x1516 (v_b_SP_G_0$ ?v1!3)))
(let ((?x1508 (pair$ ?v1!3 ?v0!4)))
(let ((?x1509 (b_G$ ?x1508)))
(let ((?x2040 (+ ?x1509 ?x1516 ?x1518)))
(let (($x2043 (>= ?x2040 0)))
(let (($x1512 (<= (+ b_Infinity$ (* (- 1) ?x1509)) 0)))
(let (($x1507 (fun_app$ v_b_Visited_G_0$ ?v1!3)))
(let (($x2389 (not $x1507)))
(let (($x2404 (or $x2389 $x1512 $x2043)))
(let (($x3495 (forall ((?v0 B_Vertex$) )(! (let (($x133 (fun_app$ v_b_Visited_G_0$ ?v0)))
(not $x133)) :pattern ( (fun_app$ v_b_Visited_G_0$ ?v0) ) :qid k!38))
))
(let ((@x1463 (mp~ (and-elim @x1408 $x135) (nnf-pos (refl (~ $x134 $x134)) (~ $x135 $x135)) $x135)))
(let ((@x3500 (mp @x1463 (quant-intro (refl (= $x134 $x134)) (= $x135 $x3495)) $x3495)))
(let ((@x4007 (unit-resolution ((_ quant-inst ?v1!3) (or (not $x3495) $x2389)) @x3500 (hypothesis $x1507) false)))
(let (($x2409 (not $x2404)))
(let (($x3834 (or $x2409 $x3831)))
(let (($x3837 (not $x3834)))
(let (($x3510 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(or $x133 (not (fun_app$ v_b_Visited_G_0$ ?v0)) $x902))) :pattern ( (v_b_SP_G_0$ ?v1) (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3515 (not $x3510)))
(let (($x3840 (or $x3515 $x3837)))
(let (($x3843 (not $x3840)))
(let (($x1493 (>= (+ (v_b_SP_G_0$ ?v1!1) (* (- 1) (v_b_SP_G_0$ ?v0!2))) 0)))
(let (($x1486 (fun_app$ v_b_Visited_G_0$ ?v0!2)))
(let (($x2343 (not $x1486)))
(let (($x1484 (fun_app$ v_b_Visited_G_0$ ?v1!1)))
(let (($x2358 (or $x1484 $x2343 $x1493)))
(let (($x2363 (not $x2358)))
(let (($x3846 (or $x2363 $x3843)))
(let (($x3849 (not $x3846)))
(let (($x3501 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(>= ?x124 0)) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let (($x3506 (not $x3501)))
(let (($x3852 (or $x3506 $x3849)))
(let (($x3855 (not $x3852)))
(let ((?x1470 (v_b_SP_G_0$ ?v0!0)))
(let (($x1471 (>= ?x1470 0)))
(let (($x1472 (not $x1471)))
(let ((@x5071 (hypothesis $x1472)))
(let (($x5774 (<= ?x1470 0)))
(let (($x82 (<= b_Infinity$ 0)))
(let (($x83 (not $x82)))
(let ((@x86 (mp (asserted (< 0 b_Infinity$)) (rewrite (= (< 0 b_Infinity$) $x83)) $x83)))
(let (($x5117 (= b_Infinity$ ?x1470)))
(let ((@x5579 (symm (commutativity (= $x5117 (= ?x1470 b_Infinity$))) (= (= ?x1470 b_Infinity$) $x5117))))
(let (($x3131 (= ?x1470 b_Infinity$)))
(let (($x5739 (= ?v0!0 b_Source$)))
(let (($x5713 (not $x5739)))
(let ((@x5595 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1470 0)) $x1471)) @x5071 (not (= ?x1470 0)))))
(let (($x3482 (forall ((?v0 B_Vertex$) )(! (let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(or $x128 (= (v_b_SP_G_0$ ?v0) 0)))) :pattern ( (v_b_SP_G_0$ ?v0) ) :qid k!38))
))
(let ((@x3486 (quant-intro (refl (= (or $x128 (= ?x124 0)) (or $x128 (= ?x124 0)))) (= $x349 $x3482))))
(let ((@x1452 (nnf-pos (refl (~ (or $x128 (= ?x124 0)) (or $x128 (= ?x124 0)))) (~ $x349 $x349))))
(let ((@x3487 (mp (mp~ (and-elim @x1408 $x349) @x1452 $x349) @x3486 $x3482)))
(let (($x5769 (= (or (not $x3482) (or $x5713 (= ?x1470 0))) (or (not $x3482) $x5713 (= ?x1470 0)))))
(let ((@x5448 (mp ((_ quant-inst ?v0!0) (or (not $x3482) (or $x5713 (= ?x1470 0)))) (rewrite $x5769) (or (not $x3482) $x5713 (= ?x1470 0)))))
(let ((@x6281 (rewrite (= (or (not $x3488) (or $x5739 $x3131)) (or (not $x3488) $x5739 $x3131)))))
(let ((@x6173 (mp ((_ quant-inst ?v0!0) (or (not $x3488) (or $x5739 $x3131))) @x6281 (or (not $x3488) $x5739 $x3131))))
(let ((@x6446 (mp (unit-resolution @x6173 @x3493 (unit-resolution @x5448 @x3487 @x5595 $x5713) $x3131) @x5579 $x5117)))
(let ((@x6386 ((_ th-lemma arith triangle-eq) (or (not $x5117) (<= (+ b_Infinity$ (* (- 1) ?x1470)) 0)))))
(let ((@x6387 (unit-resolution @x6386 @x6446 (<= (+ b_Infinity$ (* (- 1) ?x1470)) 0))))
(let ((@x3142 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x5774) @x6387 @x86 false) (or (not $x5774) $x1471))))
(let ((@x5085 (unit-resolution @x3142 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x5774 $x1471)) @x5071 $x5774) @x5071 false)))
(let (($x3858 (or $x1472 $x3855)))
(let (($x3861 (not $x3858)))
(let (($x3864 (or $x864 $x3861)))
(let (($x3867 (not $x3864)))
(let (($x5885 (not $x3482)))
(let (($x3145 (or $x5885 $x142)))
(let ((@x4320 (monotonicity (rewrite (= (= b_Source$ b_Source$) true)) (= (not (= b_Source$ b_Source$)) (not true)))))
(let ((@x5484 (trans @x4320 (rewrite (= (not true) false)) (= (not (= b_Source$ b_Source$)) false))))
(let ((@x5457 (monotonicity @x5484 (= (or (not (= b_Source$ b_Source$)) $x142) (or false $x142)))))
(let ((@x5606 (trans @x5457 (rewrite (= (or false $x142) $x142)) (= (or (not (= b_Source$ b_Source$)) $x142) $x142))))
(let ((@x4948 (monotonicity @x5606 (= (or $x5885 (or (not (= b_Source$ b_Source$)) $x142)) $x3145))))
(let ((@x5799 (trans @x4948 (rewrite (= $x3145 $x3145)) (= (or $x5885 (or (not (= b_Source$ b_Source$)) $x142)) $x3145))))
(let ((@x5800 (mp ((_ quant-inst b_Source$) (or $x5885 (or (not (= b_Source$ b_Source$)) $x142))) @x5799 $x3145)))
(let (($x3870 (or $x864 $x3867)))
(let (($x2843 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or (>= (+ ?x268 ?x1907) 0) $x295 (not $x2237)))))))) :qid k!38))
))
(let (($x2828 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x298 (v_b_SP_G_2$ ?v0)))
(let ((?x1258 (* (- 1) ?x298)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1277 (>= (+ ?x152 ?x268 ?x1258) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x295 (not $x286)))
(or $x295 $x917 $x1277))))))))) :qid k!38))
))
(let (($x2852 (not (or (not $x2828) $x1904 $x1909 (not $x2843)))))
(let (($x2857 (or $x2806 $x2852)))
(let (($x2783 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x1257 (>= (+ (v_b_SP_G_2$ ?v1) (* (- 1) (v_b_SP_G_2$ ?v0))) 0)))
(let (($x296 (fun_app$ v_b_Visited_G_2$ ?v0)))
(let (($x2763 (not $x296)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(or $x286 $x2763 $x1257))))) :qid k!38))
))
(let (($x2866 (not (or (not $x2783) (not $x2857)))))
(let (($x2871 (or $x2760 $x2866)))
(let (($x2879 (not (or $x1254 (not $x2871)))))
(let (($x2884 (or $x1843 $x2879)))
(let (($x2892 (not (or $x768 (not $x2884)))))
(let (($x2897 (or $x768 $x2892)))
(let (($x2905 (not (or $x780 (not $x2897)))))
(let (($x2910 (or $x1825 $x2905)))
(let (($x2918 (not (or $x1245 (not $x2910)))))
(let (($x2923 (or $x1808 $x2918)))
(let (($x2737 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x268 (v_b_SP_G_2$ ?v0)))
(let (($x273 (= ?x268 ?x171)))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let ((?x1168 (* (- 1) ?x254)))
(let (($x1170 (<= (+ ?x171 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0)))) 0)))
(let (($x2712 (or $x1164 $x1170)))
(let (($x2713 (not $x2712)))
(or $x2713 $x273)))))))))) :qid k!38))
))
(let (($x2731 (forall ((?v0 B_Vertex$) )(! (let ((?x268 (v_b_SP_G_2$ ?v0)))
(let ((?x1181 (* (- 1) ?x268)))
(let ((?x263 (b_G$ (pair$ v_b_v_G_1$ ?v0))))
(let ((?x254 (fun_app$a v_b_SP_G_1$ v_b_v_G_1$)))
(let (($x1180 (= (+ ?x254 ?x263 ?x1181) 0)))
(let (($x1170 (<= (+ (fun_app$a v_b_SP_G_1$ ?v0) (* (- 1) ?x254) (* (- 1) ?x263)) 0)))
(let (($x1164 (<= (+ b_Infinity$ (* (- 1) ?x263)) 0)))
(or $x1164 $x1170 $x1180)))))))) :qid k!38))
))
(let (($x2934 (or $x1768 $x1773 $x252 $x1208 (not $x1204) $x2930 (not $x2731) (not $x2737) (not $x2923))))
(let (($x2935 (not $x2934)))
(let (($x2667 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x1135 (>= (+ ?x152 ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(or $x1094 $x917 $x1135)))))) :qid k!38))
))
(let (($x2675 (not (or (not $x2667) $x243))))
(let (($x2680 (or $x2645 $x2675)))
(let (($x2623 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x1094 $x2612)))))))) :qid k!38))
))
(let (($x2689 (not (or (not $x2623) (not $x2680)))))
(let (($x2586 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(or (>= (+ ?x227 ?x1657) 0) (not $x2143)))))) :qid k!38))
))
(let (($x2594 (not (or $x1654 $x1659 (not $x2586)))))
(let (($x2694 (or $x2594 $x2689)))
(let (($x2571 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(or $x175 $x997))) :qid k!38))
))
(let (($x2707 (not (or (not $x2571) $x2701 $x2702 $x2703 $x2704 (not $x2694)))))
(let (($x2940 (or $x2707 $x2935)))
(let (($x2557 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?v0))) (not $x2124)))))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x997 $x2546)))))))) :qid k!38))
))
(let (($x2529 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let (($x985 (>= (+ ?x152 ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(let (($x176 (not $x175)))
(or $x176 $x917 $x985))))))) :qid k!38))
))
(let (($x2507 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v1)))
(let (($x1010 (>= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v1)))
(or $x175 (not (fun_app$ v_b_Visited_G_1$ ?v0)) $x1010)))) :qid k!38))
))
(let (($x2484 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?v0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x123 (= ?v0 b_Source$)))
(or $x123 $x942 $x2473)))))))) :qid k!38))
))
(let (($x2953 (or (not $x2484) $x2947 (not $x1046) (not $x2507) (not $x2529) (not $x2557) (not $x2940))))
(let (($x2954 (not $x2953)))
(let (($x2446 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))))) :qid k!38))
))
(let (($x2454 (not (or $x1533 $x1538 (not $x2446)))))
(let (($x2959 (or $x2454 $x2954)))
(let (($x2431 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x152 (b_G$ (pair$ ?v1 ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x928 (>= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?v0)) ?x152) 0)))
(let (($x917 (<= (+ b_Infinity$ (* (- 1) ?x152)) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x134 (not $x133)))
(or $x134 $x917 $x928))))))) :qid k!38))
))
(let (($x2968 (not (or (not $x2431) (not $x2959)))))
(let (($x2973 (or $x2409 $x2968)))
(let (($x2386 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x902 (>= (+ (v_b_SP_G_0$ ?v1) (* (- 1) (v_b_SP_G_0$ ?v0))) 0)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(or $x133 (not (fun_app$ v_b_Visited_G_0$ ?v0)) $x902))) :qid k!38))
))
(let (($x2982 (not (or (not $x2386) (not $x2973)))))
(let (($x2987 (or $x2363 $x2982)))
(let (($x2995 (not (or $x897 (not $x2987)))))
(let (($x3000 (or $x1472 $x2995)))
(let (($x3008 (not (or $x864 (not $x3000)))))
(let (($x3013 (or $x864 $x3008)))
(let (($x2832 (or (>= (+ ?x268 ?x1907) 0) $x295 (not (= (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))) 0)))))
(let ((@x3731 (monotonicity (quant-intro (refl (= $x2832 $x2832)) (= $x2843 $x3724)) (= (not $x2843) $x3729))))
(let ((@x3719 (quant-intro (refl (= (or $x295 $x917 $x1277) (or $x295 $x917 $x1277))) (= $x2828 $x3715))))
(let ((@x3734 (monotonicity (monotonicity @x3719 (= (not $x2828) $x3720)) @x3731 (= (or (not $x2828) $x1904 $x1909 (not $x2843)) $x3732))))
(let ((@x3743 (monotonicity (monotonicity (monotonicity @x3734 (= $x2852 $x3735)) (= $x2857 $x3738)) (= (not $x2857) $x3741))))
(let ((@x3711 (quant-intro (refl (= (or $x286 (not $x296) $x1257) (or $x286 (not $x296) $x1257))) (= $x2783 $x3707))))
(let ((@x3746 (monotonicity (monotonicity @x3711 (= (not $x2783) $x3712)) @x3743 (= (or (not $x2783) (not $x2857)) $x3744))))
(let ((@x3755 (monotonicity (monotonicity (monotonicity @x3746 (= $x2866 $x3747)) (= $x2871 $x3750)) (= (not $x2871) $x3753))))
(let ((@x3702 (quant-intro (refl (= (>= ?x268 0) (>= ?x268 0))) (= $x1251 $x3698))))
(let ((@x3758 (monotonicity (monotonicity @x3702 (= $x1254 $x3703)) @x3755 (= (or $x1254 (not $x2871)) $x3756))))
(let ((@x3767 (monotonicity (monotonicity (monotonicity @x3758 (= $x2879 $x3759)) (= $x2884 $x3762)) (= (not $x2884) $x3765))))
(let ((@x3773 (monotonicity (monotonicity @x3767 (= (or $x768 (not $x2884)) $x3768)) (= $x2892 $x3771))))
(let ((@x3779 (monotonicity (monotonicity @x3773 (= $x2897 $x3774)) (= (not $x2897) $x3777))))
(let ((@x3694 (quant-intro (refl (= (or $x295 $x273) (or $x295 $x273))) (= $x647 $x3690))))
(let ((@x3782 (monotonicity (monotonicity @x3694 (= $x780 $x3695)) @x3779 (= (or $x780 (not $x2897)) $x3780))))
(let ((@x3791 (monotonicity (monotonicity (monotonicity @x3782 (= $x2905 $x3783)) (= $x2910 $x3786)) (= (not $x2910) $x3789))))
(let ((@x3688 (monotonicity (quant-intro (refl (= $x1238 $x1238)) (= $x1242 $x3681)) (= $x1245 $x3686))))
(let ((@x3797 (monotonicity (monotonicity @x3688 @x3791 (= (or $x1245 (not $x2910)) $x3792)) (= $x2918 $x3795))))
(let ((@x3803 (monotonicity (monotonicity @x3797 (= $x2923 $x3798)) (= (not $x2923) $x3801))))
(let ((@x3675 (refl (= (or (not (or $x1164 $x1170)) $x273) (or (not (or $x1164 $x1170)) $x273)))))
(let ((@x3680 (monotonicity (quant-intro @x3675 (= $x2737 $x3673)) (= (not $x2737) $x3678))))
(let ((@x3669 (quant-intro (refl (= (or $x1164 $x1170 $x1180) (or $x1164 $x1170 $x1180))) (= $x2731 $x3665))))
(let ((@x3662 (monotonicity (quant-intro (refl (= $x1201 $x1201)) (= $x1204 $x3655)) (= (not $x1204) $x3660))))
(let ((@x3806 (monotonicity @x3662 (monotonicity @x3669 (= (not $x2731) $x3670)) @x3680 @x3803 (= $x2934 $x3804))))
(let ((@x3621 (quant-intro (refl (= (or $x1094 $x917 $x1135) (or $x1094 $x917 $x1135))) (= $x2667 $x3617))))
(let ((@x3627 (monotonicity (monotonicity @x3621 (= (not $x2667) $x3622)) (= (or (not $x2667) $x243) $x3625))))
(let ((@x3636 (monotonicity (monotonicity (monotonicity @x3627 (= $x2675 $x3628)) (= $x2680 $x3631)) (= (not $x2680) $x3634))))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?0) ?0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?0)))) 0)))
(let (($x2612 (not (or $x2171 (not $x2187)))))
(let (($x2618 (or $x123 $x1094 $x2612)))
(let ((@x3616 (monotonicity (quant-intro (refl (= $x2618 $x2618)) (= $x2623 $x3609)) (= (not $x2623) $x3614))))
(let ((@x3642 (monotonicity (monotonicity @x3616 @x3636 (= (or (not $x2623) (not $x2680)) $x3637)) (= $x2689 $x3640))))
(let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?0 ?v0!8))) 0)))
(let (($x2575 (or (>= (+ ?x227 ?x1657) 0) (not $x2143))))
(let ((@x3602 (monotonicity (quant-intro (refl (= $x2575 $x2575)) (= $x2586 $x3595)) (= (not $x2586) $x3600))))
(let ((@x3608 (monotonicity (monotonicity @x3602 (= (or $x1654 $x1659 (not $x2586)) $x3603)) (= $x2594 $x3606))))
(let ((@x3648 (monotonicity (monotonicity @x3608 @x3642 (= $x2694 $x3643)) (= (not $x2694) $x3646))))
(let ((@x3589 (quant-intro (refl (= (or $x175 $x997) (or $x175 $x997))) (= $x2571 $x3585))))
(let ((@x3651 (monotonicity (monotonicity @x3589 (= (not $x2571) $x3590)) @x3648 (= (or (not $x2571) $x2701 $x2702 $x2703 $x2704 (not $x2694)) $x3649))))
(let ((@x3812 (monotonicity (monotonicity @x3651 (= $x2707 $x3652)) (monotonicity @x3806 (= $x2935 $x3807)) (= $x2940 $x3810))))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?0) ?0))))))
(let (($x2124 (= ?x2123 0)))
(let (($x2108 (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?0)))) 0)))
(let (($x2546 (not (or $x2108 (not (fun_app$ v_b_Visited_G_1$ (?v1!7 ?0))) (not $x2124)))))
(let (($x2552 (or $x123 $x997 $x2546)))
(let ((@x3583 (monotonicity (quant-intro (refl (= $x2552 $x2552)) (= $x2557 $x3576)) (= (not $x2557) $x3581))))
(let ((@x3572 (quant-intro (refl (= (or $x176 $x917 $x985) (or $x176 $x917 $x985))) (= $x2529 $x3568))))
(let ((@x3564 (quant-intro (refl (= (or $x175 (not $x177) $x1010) (or $x175 (not $x177) $x1010))) (= $x2507 $x3560))))
(let ((@x3555 (quant-intro (refl (= (>= ?x171 0) (>= ?x171 0))) (= $x1046 $x3551))))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?0) ?0))))))
(let (($x2086 (= ?x2085 0)))
(let (($x2070 (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?0)))) 0)))
(let (($x2473 (not (or $x2070 (not (fun_app$ v_b_Visited_G_0$ (?v1!6 ?0))) (not $x2086)))))
(let (($x942 (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))
(let (($x2479 (or $x123 $x942 $x2473)))
(let ((@x3549 (monotonicity (quant-intro (refl (= $x2479 $x2479)) (= $x2484 $x3542)) (= (not $x2484) $x3547))))
(let ((@x3818 (monotonicity @x3549 (monotonicity @x3555 (= (not $x1046) $x3556)) (monotonicity @x3564 (= (not $x2507) $x3565)) (monotonicity @x3572 (= (not $x2529) $x3573)) @x3583 (monotonicity @x3812 (= (not $x2940) $x3813)) (= $x2953 $x3816))))
(let (($x2435 (or (>= (+ ?x124 ?x1536) 0) $x134 (not (= (+ ?x124 ?x1536 (b_G$ (pair$ ?0 ?v0!5))) 0)))))
(let ((@x3535 (monotonicity (quant-intro (refl (= $x2435 $x2435)) (= $x2446 $x3528)) (= (not $x2446) $x3533))))
(let ((@x3541 (monotonicity (monotonicity @x3535 (= (or $x1533 $x1538 (not $x2446)) $x3536)) (= $x2454 $x3539))))
(let ((@x3824 (monotonicity @x3541 (monotonicity @x3818 (= $x2954 $x3819)) (= $x2959 $x3822))))
(let ((@x3523 (quant-intro (refl (= (or $x134 $x917 $x928) (or $x134 $x917 $x928))) (= $x2431 $x3519))))
(let ((@x3830 (monotonicity (monotonicity @x3523 (= (not $x2431) $x3524)) (monotonicity @x3824 (= (not $x2959) $x3825)) (= (or (not $x2431) (not $x2959)) $x3828))))
(let ((@x3839 (monotonicity (monotonicity (monotonicity @x3830 (= $x2968 $x3831)) (= $x2973 $x3834)) (= (not $x2973) $x3837))))
(let (($x2381 (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1)) $x902)))
(let ((@x3517 (monotonicity (quant-intro (refl (= $x2381 $x2381)) (= $x2386 $x3510)) (= (not $x2386) $x3515))))
(let ((@x3845 (monotonicity (monotonicity @x3517 @x3839 (= (or (not $x2386) (not $x2973)) $x3840)) (= $x2982 $x3843))))
(let ((@x3851 (monotonicity (monotonicity @x3845 (= $x2987 $x3846)) (= (not $x2987) $x3849))))
(let ((@x3505 (quant-intro (refl (= (>= ?x124 0) (>= ?x124 0))) (= $x894 $x3501))))
(let ((@x3854 (monotonicity (monotonicity @x3505 (= $x897 $x3506)) @x3851 (= (or $x897 (not $x2987)) $x3852))))
(let ((@x3863 (monotonicity (monotonicity (monotonicity @x3854 (= $x2995 $x3855)) (= $x3000 $x3858)) (= (not $x3000) $x3861))))
(let ((@x3869 (monotonicity (monotonicity @x3863 (= (or $x864 (not $x3000)) $x3864)) (= $x3008 $x3867))))
(let (($x2246 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?v1 ?v0!20))) 0)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x2240 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 $x2237)))
(not $x2240))))))) :qid k!38))
))
(let (($x1910 (not $x1909)))
(let (($x1905 (not $x1904)))
(let (($x2255 (and $x1284 $x1905 $x1910 $x2246)))
(let (($x1886 (not (and $x1878 (not $x1883)))))
(let (($x1892 (or $x1886 $x1891)))
(let (($x1893 (not $x1892)))
(let (($x2260 (or $x1893 $x2255)))
(let (($x2263 (and $x1265 $x2260)))
(let (($x1859 (not (and (not $x1855) $x1857))))
(let (($x1865 (or $x1859 $x1864)))
(let (($x1866 (not $x1865)))
(let (($x2266 (or $x1866 $x2263)))
(let (($x2269 (and $x1251 $x2266)))
(let (($x2272 (or $x1843 $x2269)))
(let (($x2275 (and $x292 $x2272)))
(let (($x2278 (or $x768 $x2275)))
(let (($x2281 (and $x647 $x2278)))
(let (($x2284 (or $x1825 $x2281)))
(let (($x2287 (and $x1242 $x2284)))
(let (($x2290 (or $x1808 $x2287)))
(let (($x1774 (not $x1773)))
(let (($x1769 (not $x1768)))
(let (($x2296 (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x1188 $x1194 $x2290)))
(let (($x1744 (not $x243)))
(let (($x1747 (and $x1141 $x1744)))
(let (($x1728 (not (and (not $x1719) (not $x1725)))))
(let (($x2207 (or $x1728 $x2204)))
(let (($x2210 (not $x2207)))
(let (($x2213 (or $x2210 $x1747)))
(let (($x2198 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x2186 (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!9 ?v0) ?v0))))))
(let (($x2187 (= ?x2186 0)))
(let (($x2171 (<= (+ ?x227 (* (- 1) (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0)))) 0)))
(let (($x2192 (and (not $x2171) $x2187)))
(let (($x1094 (<= (+ b_Infinity$ (* (- 1) ?x227)) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x2192)))))))))))) :qid k!38))
))
(let (($x2216 (and $x2198 $x2213)))
(let (($x2152 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x2143 (= (+ ?x227 ?x1657 (b_G$ (pair$ ?v1 ?v0!8))) 0)))
(let (($x2146 (and (not (>= (+ ?x227 ?x1657) 0)) $x2143)))
(not $x2146)))))) :qid k!38))
))
(let (($x1660 (not $x1659)))
(let (($x1655 (not $x1654)))
(let (($x2158 (and $x1655 $x1660 $x2152)))
(let (($x2219 (or $x2158 $x2216)))
(let (($x1636 (forall ((?v0 B_Vertex$) )(! (let (($x997 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0))) 0)))
(let (($x998 (not $x997)))
(let (($x175 (fun_app$ v_b_Visited_G_1$ ?v0)))
(let (($x176 (not $x175)))
(let (($x1072 (and $x176 $x998)))
(not $x1072)))))) :qid k!38))
))
(let (($x2225 (and $x1636 $x209 $x212 $x214 $x217 $x2219)))
(let (($x2301 (or $x2225 $x2296)))
(let (($x2135 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x2123 (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ (?v1!7 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!7 ?v0) ?v0))))))
(let (($x2124 (= ?x2123 0)))
(let ((?x1608 (?v1!7 ?v0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x2129 (and (not (<= (+ ?x171 (* (- 1) (fun_app$a v_b_SP_G_1$ ?x1608))) 0)) $x1613 $x2124)))
(let (($x997 (<= (+ b_Infinity$ (* (- 1) ?x171)) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x2129))))))))))))) :qid k!38))
))
(let (($x2097 (forall ((?v0 B_Vertex$) )(! (let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x2085 (+ ?x124 (* (- 1) (v_b_SP_G_0$ (?v1!6 ?v0))) (* (- 1) (b_G$ (pair$ (?v1!6 ?v0) ?v0))))))
(let (($x2086 (= ?x2085 0)))
(let ((?x1573 (?v1!6 ?v0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x2091 (and (not (<= (+ ?x124 (* (- 1) (v_b_SP_G_0$ ?x1573))) 0)) $x1578 $x2086)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ (* (- 1) ?x124)) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x2091))))))))))) :qid k!38))
))
(let (($x2310 (and $x2097 $x170 $x1046 $x1040 $x992 $x2135 $x2301)))
(let (($x1562 (forall ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(let (($x1549 (and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0))))
(not $x1549)))))) :qid k!38))
))
(let (($x2057 (and $x1534 $x1539 $x1562)))
(let (($x2315 (or $x2057 $x2310)))
(let (($x2318 (and $x934 $x2315)))
(let (($x1515 (not (and $x1507 (not $x1512)))))
(let (($x2046 (or $x1515 $x2043)))
(let (($x2049 (not $x2046)))
(let (($x2321 (or $x2049 $x2318)))
(let (($x2324 (and $x909 $x2321)))
(let (($x1488 (not (and (not $x1484) $x1486))))
(let (($x1494 (or $x1488 $x1493)))
(let (($x1495 (not $x1494)))
(let (($x2327 (or $x1495 $x2324)))
(let (($x2330 (and $x894 $x2327)))
(let (($x2333 (or $x1472 $x2330)))
(let (($x2336 (and $x142 $x2333)))
(let (($x2339 (or $x864 $x2336)))
(let ((@x2937 (rewrite (= (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x2731 $x2737 $x2923) $x2935))))
(let (($x2237 (= (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))) 0)))
(let (($x2240 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 $x2237)))
(let (($x2243 (not $x2240)))
(let ((@x2838 (monotonicity (rewrite (= $x2240 (not $x2832))) (= $x2243 (not (not $x2832))))))
(let ((@x2845 (quant-intro (trans @x2838 (rewrite (= (not (not $x2832)) $x2832)) (= $x2243 $x2832)) (= $x2246 $x2843))))
(let ((@x2815 (monotonicity (rewrite (= $x1271 (not (or $x295 $x917)))) (= $x1274 (not (not (or $x295 $x917)))))))
(let ((@x2819 (trans @x2815 (rewrite (= (not (not (or $x295 $x917))) (or $x295 $x917))) (= $x1274 (or $x295 $x917)))))
(let ((@x2827 (trans (monotonicity @x2819 (= $x1281 (or (or $x295 $x917) $x1277))) (rewrite (= (or (or $x295 $x917) $x1277) (or $x295 $x917 $x1277))) (= $x1281 (or $x295 $x917 $x1277)))))
(let ((@x2848 (monotonicity (quant-intro @x2827 (= $x1284 $x2828)) @x2845 (= $x2255 (and $x2828 $x1905 $x1910 $x2843)))))
(let ((@x2856 (trans @x2848 (rewrite (= (and $x2828 $x1905 $x1910 $x2843) $x2852)) (= $x2255 $x2852))))
(let ((@x2793 (monotonicity (rewrite (= (and $x1878 (not $x1883)) (not (or $x2786 $x1883)))) (= $x1886 (not (not (or $x2786 $x1883)))))))
(let ((@x2797 (trans @x2793 (rewrite (= (not (not (or $x2786 $x1883))) (or $x2786 $x1883))) (= $x1886 (or $x2786 $x1883)))))
(let ((@x2805 (trans (monotonicity @x2797 (= $x1892 (or (or $x2786 $x1883) $x1891))) (rewrite (= (or (or $x2786 $x1883) $x1891) $x2801)) (= $x1892 $x2801))))
(let ((@x2859 (monotonicity (monotonicity @x2805 (= $x1893 $x2806)) @x2856 (= $x2260 $x2857))))
(let ((@x2780 (rewrite (= (or (or $x286 (not $x296)) $x1257) (or $x286 (not $x296) $x1257)))))
(let ((@x2772 (rewrite (= (not (not (or $x286 (not $x296)))) (or $x286 (not $x296))))))
(let ((@x2770 (monotonicity (rewrite (= $x297 (not (or $x286 (not $x296))))) (= $x659 (not (not (or $x286 (not $x296))))))))
(let ((@x2777 (monotonicity (trans @x2770 @x2772 (= $x659 (or $x286 (not $x296)))) (= $x1262 (or (or $x286 (not $x296)) $x1257)))))
(let ((@x2785 (quant-intro (trans @x2777 @x2780 (= $x1262 (or $x286 (not $x296) $x1257))) (= $x1265 $x2783))))
(let ((@x2870 (trans (monotonicity @x2785 @x2859 (= $x2263 (and $x2783 $x2857))) (rewrite (= (and $x2783 $x2857) $x2866)) (= $x2263 $x2866))))
(let ((@x2747 (monotonicity (rewrite (= (and (not $x1855) $x1857) (not (or $x1855 $x2740)))) (= $x1859 (not (not (or $x1855 $x2740)))))))
(let ((@x2751 (trans @x2747 (rewrite (= (not (not (or $x1855 $x2740))) (or $x1855 $x2740))) (= $x1859 (or $x1855 $x2740)))))
(let ((@x2759 (trans (monotonicity @x2751 (= $x1865 (or (or $x1855 $x2740) $x1864))) (rewrite (= (or (or $x1855 $x2740) $x1864) $x2755)) (= $x1865 $x2755))))
(let ((@x2873 (monotonicity (monotonicity @x2759 (= $x1866 $x2760)) @x2870 (= $x2266 $x2871))))
(let ((@x2883 (trans (monotonicity @x2873 (= $x2269 (and $x1251 $x2871))) (rewrite (= (and $x1251 $x2871) $x2879)) (= $x2269 $x2879))))
(let ((@x2889 (monotonicity (monotonicity @x2883 (= $x2272 $x2884)) (= $x2275 (and $x292 $x2884)))))
(let ((@x2899 (monotonicity (trans @x2889 (rewrite (= (and $x292 $x2884) $x2892)) (= $x2275 $x2892)) (= $x2278 $x2897))))
(let ((@x2909 (trans (monotonicity @x2899 (= $x2281 (and $x647 $x2897))) (rewrite (= (and $x647 $x2897) $x2905)) (= $x2281 $x2905))))
(let ((@x2915 (monotonicity (monotonicity @x2909 (= $x2284 $x2910)) (= $x2287 (and $x1242 $x2910)))))
(let ((@x2925 (monotonicity (trans @x2915 (rewrite (= (and $x1242 $x2910) $x2918)) (= $x2287 $x2918)) (= $x2290 $x2923))))
(let ((@x2736 (monotonicity (rewrite (= $x1174 (not (or $x1164 $x1170)))) (= $x1191 (or (not (or $x1164 $x1170)) $x273)))))
(let ((@x2718 (monotonicity (rewrite (= $x1174 (not (or $x1164 $x1170)))) (= $x1177 (not (not (or $x1164 $x1170)))))))
(let ((@x2722 (trans @x2718 (rewrite (= (not (not (or $x1164 $x1170))) (or $x1164 $x1170))) (= $x1177 (or $x1164 $x1170)))))
(let ((@x2730 (trans (monotonicity @x2722 (= $x1185 (or (or $x1164 $x1170) $x1180))) (rewrite (= (or (or $x1164 $x1170) $x1180) (or $x1164 $x1170 $x1180))) (= $x1185 (or $x1164 $x1170 $x1180)))))
(let ((@x2928 (monotonicity (quant-intro @x2730 (= $x1188 $x2731)) (quant-intro @x2736 (= $x1194 $x2737)) @x2925 (= $x2296 (and $x1769 $x1774 $x253 $x1209 $x1204 $x261 $x2731 $x2737 $x2923)))))
(let ((@x2654 (monotonicity (rewrite (= $x1129 (not (or $x1094 $x917)))) (= $x1132 (not (not (or $x1094 $x917)))))))
(let ((@x2658 (trans @x2654 (rewrite (= (not (not (or $x1094 $x917))) (or $x1094 $x917))) (= $x1132 (or $x1094 $x917)))))
(let ((@x2666 (trans (monotonicity @x2658 (= $x1138 (or (or $x1094 $x917) $x1135))) (rewrite (= (or (or $x1094 $x917) $x1135) (or $x1094 $x917 $x1135))) (= $x1138 (or $x1094 $x917 $x1135)))))
(let ((@x2672 (monotonicity (quant-intro @x2666 (= $x1141 $x2667)) (= $x1747 (and $x2667 $x1744)))))
(let ((@x2632 (monotonicity (rewrite (= (and (not $x1719) (not $x1725)) (not (or $x1719 $x1725)))) (= $x1728 (not (not (or $x1719 $x1725)))))))
(let ((@x2636 (trans @x2632 (rewrite (= (not (not (or $x1719 $x1725))) (or $x1719 $x1725))) (= $x1728 (or $x1719 $x1725)))))
(let ((@x2644 (trans (monotonicity @x2636 (= $x2207 (or (or $x1719 $x1725) $x2204))) (rewrite (= (or (or $x1719 $x1725) $x2204) $x2640)) (= $x2207 $x2640))))
(let ((@x2682 (monotonicity (monotonicity @x2644 (= $x2210 $x2645)) (trans @x2672 (rewrite (= (and $x2667 $x1744) $x2675)) (= $x1747 $x2675)) (= $x2213 $x2680))))
(let ((@x2605 (monotonicity (rewrite (= $x1098 (not (or $x123 $x1094)))) (= $x1101 (not (not (or $x123 $x1094)))))))
(let ((@x2609 (trans @x2605 (rewrite (= (not (not (or $x123 $x1094))) (or $x123 $x1094))) (= $x1101 (or $x123 $x1094)))))
(let ((@x2617 (monotonicity @x2609 (rewrite (= (and (not $x2171) $x2187) $x2612)) (= (or $x1101 (and (not $x2171) $x2187)) (or (or $x123 $x1094) $x2612)))))
(let ((@x2622 (trans @x2617 (rewrite (= (or (or $x123 $x1094) $x2612) $x2618)) (= (or $x1101 (and (not $x2171) $x2187)) $x2618))))
(let ((@x2685 (monotonicity (quant-intro @x2622 (= $x2198 $x2623)) @x2682 (= $x2216 (and $x2623 $x2680)))))
(let (($x2146 (and (not (>= (+ ?x227 ?x1657) 0)) $x2143)))
(let (($x2149 (not $x2146)))
(let ((@x2581 (monotonicity (rewrite (= $x2146 (not $x2575))) (= $x2149 (not (not $x2575))))))
(let ((@x2588 (quant-intro (trans @x2581 (rewrite (= (not (not $x2575)) $x2575)) (= $x2149 $x2575)) (= $x2152 $x2586))))
(let ((@x2598 (trans (monotonicity @x2588 (= $x2158 (and $x1655 $x1660 $x2586))) (rewrite (= (and $x1655 $x1660 $x2586) $x2594)) (= $x2158 $x2594))))
(let ((@x2696 (monotonicity @x2598 (trans @x2685 (rewrite (= (and $x2623 $x2680) $x2689)) (= $x2216 $x2689)) (= $x2219 $x2694))))
(let ((@x2566 (monotonicity (rewrite (= $x1072 (not (or $x175 $x997)))) (= (not $x1072) (not (not (or $x175 $x997)))))))
(let ((@x2570 (trans @x2566 (rewrite (= (not (not (or $x175 $x997))) (or $x175 $x997))) (= (not $x1072) (or $x175 $x997)))))
(let ((@x2699 (monotonicity (quant-intro @x2570 (= $x1636 $x2571)) @x2696 (= $x2225 (and $x2571 $x209 $x212 $x214 $x217 $x2694)))))
(let ((@x2711 (trans @x2699 (rewrite (= (and $x2571 $x209 $x212 $x214 $x217 $x2694) $x2707)) (= $x2225 $x2707))))
(let ((?x1608 (?v1!7 ?0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x2129 (and (not $x2108) $x1613 $x2124)))
(let (($x2132 (or $x1004 $x2129)))
(let ((@x2538 (monotonicity (rewrite (= $x1001 (not (or $x123 $x997)))) (= $x1004 (not (not (or $x123 $x997)))))))
(let ((@x2542 (trans @x2538 (rewrite (= (not (not (or $x123 $x997))) (or $x123 $x997))) (= $x1004 (or $x123 $x997)))))
(let ((@x2551 (monotonicity @x2542 (rewrite (= $x2129 $x2546)) (= $x2132 (or (or $x123 $x997) $x2546)))))
(let ((@x2556 (trans @x2551 (rewrite (= (or (or $x123 $x997) $x2546) $x2552)) (= $x2132 $x2552))))
(let ((@x2516 (monotonicity (rewrite (= $x978 (not (or $x176 $x917)))) (= $x981 (not (not (or $x176 $x917)))))))
(let ((@x2520 (trans @x2516 (rewrite (= (not (not (or $x176 $x917))) (or $x176 $x917))) (= $x981 (or $x176 $x917)))))
(let ((@x2528 (trans (monotonicity @x2520 (= $x989 (or (or $x176 $x917) $x985))) (rewrite (= (or (or $x176 $x917) $x985) (or $x176 $x917 $x985))) (= $x989 (or $x176 $x917 $x985)))))
(let ((@x2504 (rewrite (= (or (or $x175 (not $x177)) $x1010) (or $x175 (not $x177) $x1010)))))
(let ((@x2496 (rewrite (= (not (not (or $x175 (not $x177)))) (or $x175 (not $x177))))))
(let ((@x2494 (monotonicity (rewrite (= $x178 (not (or $x175 (not $x177))))) (= $x398 (not (not (or $x175 (not $x177))))))))
(let ((@x2501 (monotonicity (trans @x2494 @x2496 (= $x398 (or $x175 (not $x177)))) (= $x1037 (or (or $x175 (not $x177)) $x1010)))))
(let ((@x2509 (quant-intro (trans @x2501 @x2504 (= $x1037 (or $x175 (not $x177) $x1010))) (= $x1040 $x2507))))
(let ((?x1573 (?v1!6 ?0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x2091 (and (not $x2070) $x1578 $x2086)))
(let (($x2094 (or $x949 $x2091)))
(let ((@x2465 (monotonicity (rewrite (= $x946 (not (or $x123 $x942)))) (= $x949 (not (not (or $x123 $x942)))))))
(let ((@x2469 (trans @x2465 (rewrite (= (not (not (or $x123 $x942))) (or $x123 $x942))) (= $x949 (or $x123 $x942)))))
(let ((@x2478 (monotonicity @x2469 (rewrite (= $x2091 $x2473)) (= $x2094 (or (or $x123 $x942) $x2473)))))
(let ((@x2483 (trans @x2478 (rewrite (= (or (or $x123 $x942) $x2473) $x2479)) (= $x2094 $x2479))))
(let ((@x2945 (monotonicity (quant-intro @x2483 (= $x2097 $x2484)) @x2509 (quant-intro @x2528 (= $x992 $x2529)) (quant-intro @x2556 (= $x2135 $x2557)) (monotonicity @x2711 (trans @x2928 @x2937 (= $x2296 $x2935)) (= $x2301 $x2940)) (= $x2310 (and $x2484 $x170 $x1046 $x2507 $x2529 $x2557 $x2940)))))
(let ((@x2958 (trans @x2945 (rewrite (= (and $x2484 $x170 $x1046 $x2507 $x2529 $x2557 $x2940) $x2954)) (= $x2310 $x2954))))
(let (($x1549 (and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?0 ?v0!5))) 0))))
(let (($x1559 (not $x1549)))
(let ((@x2441 (monotonicity (rewrite (= $x1549 (not $x2435))) (= $x1559 (not (not $x2435))))))
(let ((@x2448 (quant-intro (trans @x2441 (rewrite (= (not (not $x2435)) $x2435)) (= $x1559 $x2435)) (= $x1562 $x2446))))
(let ((@x2458 (trans (monotonicity @x2448 (= $x2057 (and $x1534 $x1539 $x2446))) (rewrite (= (and $x1534 $x1539 $x2446) $x2454)) (= $x2057 $x2454))))
(let ((@x2418 (monotonicity (rewrite (= $x921 (not (or $x134 $x917)))) (= $x924 (not (not (or $x134 $x917)))))))
(let ((@x2422 (trans @x2418 (rewrite (= (not (not (or $x134 $x917))) (or $x134 $x917))) (= $x924 (or $x134 $x917)))))
(let ((@x2430 (trans (monotonicity @x2422 (= $x931 (or (or $x134 $x917) $x928))) (rewrite (= (or (or $x134 $x917) $x928) (or $x134 $x917 $x928))) (= $x931 (or $x134 $x917 $x928)))))
(let ((@x2964 (monotonicity (quant-intro @x2430 (= $x934 $x2431)) (monotonicity @x2458 @x2958 (= $x2315 $x2959)) (= $x2318 (and $x2431 $x2959)))))
(let ((@x2396 (monotonicity (rewrite (= (and $x1507 (not $x1512)) (not (or $x2389 $x1512)))) (= $x1515 (not (not (or $x2389 $x1512)))))))
(let ((@x2400 (trans @x2396 (rewrite (= (not (not (or $x2389 $x1512))) (or $x2389 $x1512))) (= $x1515 (or $x2389 $x1512)))))
(let ((@x2408 (trans (monotonicity @x2400 (= $x2046 (or (or $x2389 $x1512) $x2043))) (rewrite (= (or (or $x2389 $x1512) $x2043) $x2404)) (= $x2046 $x2404))))
(let ((@x2975 (monotonicity (monotonicity @x2408 (= $x2049 $x2409)) (trans @x2964 (rewrite (= (and $x2431 $x2959) $x2968)) (= $x2318 $x2968)) (= $x2321 $x2973))))
(let (($x2382 (= (or (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1))) $x902) $x2381)))
(let (($x2379 (= $x906 (or (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1))) $x902))))
(let (($x2367 (or $x133 (not (fun_app$ v_b_Visited_G_0$ ?1)))))
(let ((@x2373 (monotonicity (rewrite (= $x146 (not $x2367))) (= $x377 (not (not $x2367))))))
(let ((@x2380 (monotonicity (trans @x2373 (rewrite (= (not (not $x2367)) $x2367)) (= $x377 $x2367)) $x2379)))
(let ((@x2388 (quant-intro (trans @x2380 (rewrite $x2382) (= $x906 $x2381)) (= $x909 $x2386))))
(let ((@x2986 (trans (monotonicity @x2388 @x2975 (= $x2324 (and $x2386 $x2973))) (rewrite (= (and $x2386 $x2973) $x2982)) (= $x2324 $x2982))))
(let ((@x2350 (monotonicity (rewrite (= (and (not $x1484) $x1486) (not (or $x1484 $x2343)))) (= $x1488 (not (not (or $x1484 $x2343)))))))
(let ((@x2354 (trans @x2350 (rewrite (= (not (not (or $x1484 $x2343))) (or $x1484 $x2343))) (= $x1488 (or $x1484 $x2343)))))
(let ((@x2362 (trans (monotonicity @x2354 (= $x1494 (or (or $x1484 $x2343) $x1493))) (rewrite (= (or (or $x1484 $x2343) $x1493) $x2358)) (= $x1494 $x2358))))
(let ((@x2989 (monotonicity (monotonicity @x2362 (= $x1495 $x2363)) @x2986 (= $x2327 $x2987))))
(let ((@x2999 (trans (monotonicity @x2989 (= $x2330 (and $x894 $x2987))) (rewrite (= (and $x894 $x2987) $x2995)) (= $x2330 $x2995))))
(let ((@x3005 (monotonicity (monotonicity @x2999 (= $x2333 $x3000)) (= $x2336 (and $x142 $x3000)))))
(let ((@x3015 (monotonicity (trans @x3005 (rewrite (= (and $x142 $x3000) $x3008)) (= $x2336 $x3008)) (= $x2339 $x3013))))
(let (($x1933 (forall ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(let (($x1920 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x268 ?x1907) 0))))
(not $x1920)))))) :qid k!38))
))
(let (($x1927 (not (not (and $x1905 $x1910)))))
(let (($x1937 (and $x1927 $x1933)))
(let (($x1942 (and $x1284 $x1937)))
(let (($x1946 (or $x1893 $x1942)))
(let (($x1950 (and $x1265 $x1946)))
(let (($x1954 (or $x1866 $x1950)))
(let (($x1958 (and $x1251 $x1954)))
(let (($x1962 (or $x1843 $x1958)))
(let (($x1837 (not $x768)))
(let (($x1966 (and $x1837 $x1962)))
(let (($x1970 (or $x768 $x1966)))
(let (($x1974 (and $x647 $x1970)))
(let (($x1978 (or $x1825 $x1974)))
(let (($x1982 (and $x1242 $x1978)))
(let (($x1986 (or $x1808 $x1982)))
(let (($x1796 (and (and $x1769 $x1774) $x253 $x1209 $x1204 $x261 $x1188 $x1194)))
(let (($x1990 (and $x1796 $x1986)))
(let (($x1734 (not (or $x1728 (>= (+ ?x1722 ?x1716 ?x1730) 0)))))
(let (($x1751 (or $x1734 $x1747)))
(let (($x1708 (forall ((?v0 B_Vertex$) )(! (let ((?x227 (fun_app$a v_b_SP_G_3$ ?v0)))
(let ((?x1092 (* (- 1) ?x227)))
(let ((?x1694 (fun_app$a v_b_SP_G_3$ (?v1!9 ?v0))))
(let ((?x1699 (b_G$ (pair$ (?v1!9 ?v0) ?v0))))
(let (($x1701 (= (+ ?x1699 ?x1694 ?x1092) 0)))
(let (($x1702 (and (not (>= (+ ?x1694 ?x1092) 0)) $x1701)))
(let (($x1094 (<= (+ b_Infinity$ ?x1092) 0)))
(let (($x1095 (not $x1094)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1098 (and $x128 $x1095)))
(let (($x1101 (not $x1098)))
(or $x1101 $x1702))))))))))))) :qid k!38))
))
(let (($x1755 (and $x1708 $x1751)))
(let (($x1682 (forall ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(let (($x1670 (and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x227 ?x1657) 0))))
(not $x1670))))) :qid k!38))
))
(let (($x1676 (not (not (and $x1655 $x1660)))))
(let (($x1686 (and $x1676 $x1682)))
(let (($x1759 (or $x1686 $x1755)))
(let (($x1647 (and $x1636 $x209 $x212 $x214 $x217)))
(let (($x1763 (and $x1647 $x1759)))
(let (($x1994 (or $x1763 $x1990)))
(let (($x1624 (forall ((?v0 B_Vertex$) )(! (let ((?x171 (fun_app$a v_b_SP_G_1$ ?v0)))
(let ((?x995 (* (- 1) ?x171)))
(let ((?x1608 (?v1!7 ?v0)))
(let ((?x1609 (fun_app$a v_b_SP_G_1$ ?x1608)))
(let ((?x1615 (b_G$ (pair$ ?x1608 ?v0))))
(let (($x1617 (= (+ ?x1615 ?x1609 ?x995) 0)))
(let (($x1613 (fun_app$ v_b_Visited_G_1$ ?x1608)))
(let (($x1618 (and (not (>= (+ ?x1609 ?x995) 0)) $x1613 $x1617)))
(let (($x997 (<= (+ b_Infinity$ ?x995) 0)))
(let (($x998 (not $x997)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x1001 (and $x128 $x998)))
(let (($x1004 (not $x1001)))
(or $x1004 $x1618))))))))))))))) :qid k!38))
))
(let (($x1589 (forall ((?v0 B_Vertex$) )(! (let ((?x1580 (b_G$ (pair$ (?v1!6 ?v0) ?v0))))
(let ((?x124 (v_b_SP_G_0$ ?v0)))
(let ((?x940 (* (- 1) ?x124)))
(let ((?x1573 (?v1!6 ?v0)))
(let ((?x1574 (v_b_SP_G_0$ ?x1573)))
(let (($x1582 (= (+ ?x1574 ?x940 ?x1580) 0)))
(let (($x1578 (fun_app$ v_b_Visited_G_0$ ?x1573)))
(let (($x1583 (and (not (>= (+ ?x1574 ?x940) 0)) $x1578 $x1582)))
(let (($x123 (= ?v0 b_Source$)))
(let (($x128 (not $x123)))
(let (($x946 (and $x128 (not (<= (+ b_Infinity$ ?x940) 0)))))
(let (($x949 (not $x946)))
(or $x949 $x1583))))))))))))) :qid k!38))
))
(let (($x1627 (and $x1589 $x170 $x1046 $x1040 $x992 $x1624)))
(let (($x1998 (and $x1627 $x1994)))
(let (($x1556 (not (not (and $x1534 $x1539)))))
(let (($x1566 (and $x1556 $x1562)))
(let (($x2002 (or $x1566 $x1998)))
(let (($x2006 (and $x934 $x2002)))
(let (($x1522 (not (or $x1515 (>= (+ ?x1516 ?x1518 ?x1509) 0)))))
(let (($x2010 (or $x1522 $x2006)))
(let (($x2014 (and $x909 $x2010)))
(let (($x2018 (or $x1495 $x2014)))
(let (($x2022 (and $x894 $x2018)))
(let (($x2026 (or $x1472 $x2022)))
(let (($x1466 (not $x864)))
(let (($x2030 (and $x1466 $x2026)))
(let (($x2034 (or $x864 $x2030)))
(let (($x1920 (and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) 0))))
(let (($x1930 (not $x1920)))
(let (($x2235 (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) (+ ?x268 ?x1907 (b_G$ (pair$ ?0 ?v0!20))))))
(let ((@x2239 (monotonicity (rewrite $x2235) (= (= (+ (b_G$ (pair$ ?0 ?v0!20)) ?x268 ?x1907) 0) $x2237))))
(let ((@x2248 (quant-intro (monotonicity (monotonicity @x2239 (= $x1920 $x2240)) (= $x1930 $x2243)) (= $x1933 $x2246))))
(let ((@x2251 (monotonicity (rewrite (= $x1927 (and $x1905 $x1910))) @x2248 (= $x1937 (and (and $x1905 $x1910) $x2246)))))
(let ((@x2259 (trans (monotonicity @x2251 (= $x1942 (and $x1284 (and (and $x1905 $x1910) $x2246)))) (rewrite (= (and $x1284 (and (and $x1905 $x1910) $x2246)) $x2255)) (= $x1942 $x2255))))
(let ((@x2268 (monotonicity (monotonicity (monotonicity @x2259 (= $x1946 $x2260)) (= $x1950 $x2263)) (= $x1954 $x2266))))
(let ((@x2277 (monotonicity (rewrite (= $x1837 $x292)) (monotonicity (monotonicity @x2268 (= $x1958 $x2269)) (= $x1962 $x2272)) (= $x1966 $x2275))))
(let ((@x2286 (monotonicity (monotonicity (monotonicity @x2277 (= $x1970 $x2278)) (= $x1974 $x2281)) (= $x1978 $x2284))))
(let ((@x2295 (monotonicity (monotonicity (monotonicity @x2286 (= $x1982 $x2287)) (= $x1986 $x2290)) (= $x1990 (and $x1796 $x2290)))))
(let ((@x2206 (monotonicity (rewrite (= (+ ?x1722 ?x1716 ?x1730) ?x2201)) (= (>= (+ ?x1722 ?x1716 ?x1730) 0) $x2204))))
(let ((@x2209 (monotonicity @x2206 (= (or $x1728 (>= (+ ?x1722 ?x1716 ?x1730) 0)) $x2207))))
(let (($x2192 (and (not $x2171) $x2187)))
(let (($x2195 (or $x1101 $x2192)))
(let ((?x1092 (* (- 1) ?x227)))
(let ((?x1694 (fun_app$a v_b_SP_G_3$ (?v1!9 ?0))))
(let ((?x1699 (b_G$ (pair$ (?v1!9 ?0) ?0))))
(let (($x1701 (= (+ ?x1699 ?x1694 ?x1092) 0)))
(let (($x1702 (and (not (>= (+ ?x1694 ?x1092) 0)) $x1701)))
(let (($x1705 (or $x1101 $x1702)))
(let ((@x2184 (monotonicity (rewrite (= (+ ?x1699 ?x1694 ?x1092) (+ ?x1092 ?x1694 ?x1699))) (= $x1701 (= (+ ?x1092 ?x1694 ?x1699) 0)))))
(let ((@x2191 (trans @x2184 (rewrite (= (= (+ ?x1092 ?x1694 ?x1699) 0) $x2187)) (= $x1701 $x2187))))
(let ((@x2168 (monotonicity (rewrite (= (+ ?x1694 ?x1092) (+ ?x1092 ?x1694))) (= (>= (+ ?x1694 ?x1092) 0) (>= (+ ?x1092 ?x1694) 0)))))
(let ((@x2175 (trans @x2168 (rewrite (= (>= (+ ?x1092 ?x1694) 0) $x2171)) (= (>= (+ ?x1694 ?x1092) 0) $x2171))))
(let ((@x2194 (monotonicity (monotonicity @x2175 (= (not (>= (+ ?x1694 ?x1092) 0)) (not $x2171))) @x2191 (= $x1702 $x2192))))
(let ((@x2218 (monotonicity (quant-intro (monotonicity @x2194 (= $x1705 $x2195)) (= $x1708 $x2198)) (monotonicity (monotonicity @x2209 (= $x1734 $x2210)) (= $x1751 $x2213)) (= $x1755 $x2216))))
(let (($x1670 (and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) 0))))
(let (($x1679 (not $x1670)))
(let (($x2141 (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) (+ ?x227 ?x1657 (b_G$ (pair$ ?0 ?v0!8))))))
(let ((@x2145 (monotonicity (rewrite $x2141) (= (= (+ (b_G$ (pair$ ?0 ?v0!8)) ?x227 ?x1657) 0) $x2143))))
(let ((@x2154 (quant-intro (monotonicity (monotonicity @x2145 (= $x1670 $x2146)) (= $x1679 $x2149)) (= $x1682 $x2152))))
(let ((@x2157 (monotonicity (rewrite (= $x1676 (and $x1655 $x1660))) @x2154 (= $x1686 (and (and $x1655 $x1660) $x2152)))))
(let ((@x2162 (trans @x2157 (rewrite (= (and (and $x1655 $x1660) $x2152) $x2158)) (= $x1686 $x2158))))
(let ((@x2224 (monotonicity (monotonicity @x2162 @x2218 (= $x1759 $x2219)) (= $x1763 (and $x1647 $x2219)))))
(let ((@x2303 (monotonicity (trans @x2224 (rewrite (= (and $x1647 $x2219) $x2225)) (= $x1763 $x2225)) (trans @x2295 (rewrite (= (and $x1796 $x2290) $x2296)) (= $x1990 $x2296)) (= $x1994 $x2301))))
(let ((?x995 (* (- 1) ?x171)))
(let ((?x1609 (fun_app$a v_b_SP_G_1$ ?x1608)))
(let ((?x1615 (b_G$ (pair$ ?x1608 ?0))))
(let (($x1617 (= (+ ?x1615 ?x1609 ?x995) 0)))
(let (($x1618 (and (not (>= (+ ?x1609 ?x995) 0)) $x1613 $x1617)))
(let (($x1621 (or $x1004 $x1618)))
(let ((@x2121 (monotonicity (rewrite (= (+ ?x1615 ?x1609 ?x995) (+ ?x995 ?x1609 ?x1615))) (= $x1617 (= (+ ?x995 ?x1609 ?x1615) 0)))))
(let ((@x2128 (trans @x2121 (rewrite (= (= (+ ?x995 ?x1609 ?x1615) 0) $x2124)) (= $x1617 $x2124))))
(let ((@x2105 (monotonicity (rewrite (= (+ ?x1609 ?x995) (+ ?x995 ?x1609))) (= (>= (+ ?x1609 ?x995) 0) (>= (+ ?x995 ?x1609) 0)))))
(let ((@x2112 (trans @x2105 (rewrite (= (>= (+ ?x995 ?x1609) 0) $x2108)) (= (>= (+ ?x1609 ?x995) 0) $x2108))))
(let ((@x2131 (monotonicity (monotonicity @x2112 (= (not (>= (+ ?x1609 ?x995) 0)) (not $x2108))) @x2128 (= $x1618 $x2129))))
(let (($x1582 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124) (b_G$ (pair$ ?x1573 ?0))) 0)))
(let (($x1583 (and (not (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)) $x1578 $x1582)))
(let (($x1586 (or $x949 $x1583)))
(let (($x2081 (= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573) (b_G$ (pair$ ?x1573 ?0))) 0)))
(let (($x2079 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124) (b_G$ (pair$ ?x1573 ?0))) (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573) (b_G$ (pair$ ?x1573 ?0))))))
(let ((@x2090 (trans (monotonicity (rewrite $x2079) (= $x1582 $x2081)) (rewrite (= $x2081 $x2086)) (= $x1582 $x2086))))
(let (($x2076 (= (not (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)) (not $x2070))))
(let (($x1576 (>= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) 0)))
(let (($x2063 (= (+ (v_b_SP_G_0$ ?x1573) (* (- 1) ?x124)) (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)))))
(let ((@x2067 (monotonicity (rewrite $x2063) (= $x1576 (>= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)) 0)))))
(let ((@x2074 (trans @x2067 (rewrite (= (>= (+ (* (- 1) ?x124) (v_b_SP_G_0$ ?x1573)) 0) $x2070)) (= $x1576 $x2070))))
(let ((@x2096 (monotonicity (monotonicity (monotonicity @x2074 $x2076) @x2090 (= $x1583 $x2091)) (= $x1586 $x2094))))
(let ((@x2306 (monotonicity (quant-intro @x2096 (= $x1589 $x2097)) (quant-intro (monotonicity @x2131 (= $x1621 $x2132)) (= $x1624 $x2135)) (= $x1627 (and $x2097 $x170 $x1046 $x1040 $x992 $x2135)))))
(let ((@x2309 (monotonicity @x2306 @x2303 (= $x1998 (and (and $x2097 $x170 $x1046 $x1040 $x992 $x2135) $x2301)))))
(let ((@x2314 (trans @x2309 (rewrite (= (and (and $x2097 $x170 $x1046 $x1040 $x992 $x2135) $x2301) $x2310)) (= $x1998 $x2310))))
(let ((@x2056 (monotonicity (rewrite (= $x1556 (and $x1534 $x1539))) (= $x1566 (and (and $x1534 $x1539) $x1562)))))
(let ((@x2061 (trans @x2056 (rewrite (= (and (and $x1534 $x1539) $x1562) $x2057)) (= $x1566 $x2057))))
(let ((@x2320 (monotonicity (monotonicity @x2061 @x2314 (= $x2002 $x2315)) (= $x2006 $x2318))))
(let ((@x2045 (monotonicity (rewrite (= (+ ?x1516 ?x1518 ?x1509) ?x2040)) (= (>= (+ ?x1516 ?x1518 ?x1509) 0) $x2043))))
(let ((@x2048 (monotonicity @x2045 (= (or $x1515 (>= (+ ?x1516 ?x1518 ?x1509) 0)) $x2046))))
(let ((@x2323 (monotonicity (monotonicity @x2048 (= $x1522 $x2049)) @x2320 (= $x2010 $x2321))))
(let ((@x2332 (monotonicity (monotonicity (monotonicity @x2323 (= $x2014 $x2324)) (= $x2018 $x2327)) (= $x2022 $x2330))))
(let ((@x2338 (monotonicity (rewrite (= $x1466 $x142)) (monotonicity @x2332 (= $x2026 $x2333)) (= $x2030 $x2336))))
(let (($x1921 (exists ((?v1 B_Vertex$) )(! (let ((?x1906 (v_b_SP_G_2$ ?v0!20)))
(let ((?x1907 (* (- 1) ?x1906)))
(let ((?x268 (v_b_SP_G_2$ ?v1)))
(let (($x286 (fun_app$ v_b_Visited_G_2$ ?v1)))
(and (not (>= (+ ?x268 ?x1907) 0)) $x286 (= (+ (b_G$ (pair$ ?v1 ?v0!20)) ?x268 ?x1907) 0)))))) :qid k!38))
))
(let ((@x1939 (nnf-neg (refl (~ $x1927 $x1927)) (nnf-neg (refl (~ $x1930 $x1930)) (~ (not $x1921) $x1933)) (~ (not (or (not (and $x1905 $x1910)) $x1921)) $x1937))))
(let ((@x1941 (trans (sk (~ (not $x1324) (not (or (not (and $x1905 $x1910)) $x1921)))) @x1939 (~ (not $x1324) $x1937))))
(let ((@x1902 (nnf-neg (nnf-pos (refl (~ $x1281 $x1281)) (~ $x1284 $x1284)) (~ (not $x1287) $x1284))))
(let ((@x1949 (nnf-neg (sk (~ $x1287 $x1893)) (nnf-neg @x1902 @x1941 (~ (not $x1327) $x1942)) (~ (not $x1330) $x1946))))
(let ((@x1875 (nnf-neg (nnf-pos (refl (~ $x1262 $x1262)) (~ $x1265 $x1265)) (~ (not $x1268) $x1265))))
(let ((@x1957 (nnf-neg (sk (~ $x1268 $x1866)) (nnf-neg @x1875 @x1949 (~ (not $x1333) $x1950)) (~ (not $x1336) $x1954))))
(let ((@x1852 (nnf-neg (nnf-pos (refl (~ (>= ?x268 0) (>= ?x268 0))) (~ $x1251 $x1251)) (~ (not $x1254) $x1251))))
(let ((@x1965 (nnf-neg (sk (~ $x1254 $x1843)) (nnf-neg @x1852 @x1957 (~ (not $x1339) $x1958)) (~ (not $x1342) $x1962))))
(let ((@x1973 (nnf-neg (refl (~ $x768 $x768)) (nnf-neg (refl (~ $x1837 $x1837)) @x1965 (~ (not $x1345) $x1966)) (~ (not $x1348) $x1970))))
(let ((@x1834 (nnf-neg (nnf-pos (refl (~ (or $x295 $x273) (or $x295 $x273))) (~ $x647 $x647)) (~ (not $x780) $x647))))
(let ((@x1981 (nnf-neg (sk (~ $x780 $x1825)) (nnf-neg @x1834 @x1973 (~ (not $x1351) $x1974)) (~ (not $x1354) $x1978))))
(let ((@x1817 (nnf-neg (nnf-pos (refl (~ $x1238 $x1238)) (~ $x1242 $x1242)) (~ (not $x1245) $x1242))))
(let ((@x1989 (nnf-neg (sk (~ $x1245 $x1808)) (nnf-neg @x1817 @x1981 (~ (not $x1357) $x1982)) (~ (not $x1360) $x1986))))
(let ((@x1798 (monotonicity (sk (~ $x1075 (and $x1769 $x1774))) (refl (~ $x253 $x253)) (refl (~ $x1209 $x1209)) (nnf-pos (refl (~ $x1201 $x1201)) (~ $x1204 $x1204)) (refl (~ $x261 $x261)) (nnf-pos (refl (~ $x1185 $x1185)) (~ $x1188 $x1188)) (nnf-pos (refl (~ $x1191 $x1191)) (~ $x1194 $x1194)) (~ $x1230 $x1796))))
(let ((@x1993 (nnf-neg (nnf-neg @x1798 (~ (not $x1235) $x1796)) @x1989 (~ (not $x1363) $x1990))))
(let ((@x1743 (nnf-neg (nnf-pos (refl (~ $x1138 $x1138)) (~ $x1141 $x1141)) (~ (not $x1144) $x1141))))
(let ((@x1754 (nnf-neg (sk (~ $x1144 $x1734)) (nnf-neg @x1743 (refl (~ $x1744 $x1744)) (~ (not $x1147) $x1747)) (~ (not $x1150) $x1751))))
(let ((@x1710 (nnf-pos (monotonicity (refl (~ $x1101 $x1101)) (sk (~ $x1117 $x1702)) (~ $x1120 $x1705)) (~ $x1123 $x1708))))
(let ((@x1758 (nnf-neg (nnf-neg @x1710 (~ (not $x1126) $x1708)) @x1754 (~ (not $x1153) $x1755))))
(let (($x1671 (exists ((?v1 B_Vertex$) )(! (let ((?x1656 (fun_app$a v_b_SP_G_3$ ?v0!8)))
(let ((?x1657 (* (- 1) ?x1656)))
(let ((?x227 (fun_app$a v_b_SP_G_3$ ?v1)))
(and (not (>= (+ ?x227 ?x1657) 0)) (= (+ (b_G$ (pair$ ?v1 ?v0!8)) ?x227 ?x1657) 0))))) :qid k!38))
))
(let ((@x1688 (nnf-neg (refl (~ $x1676 $x1676)) (nnf-neg (refl (~ $x1679 $x1679)) (~ (not $x1671) $x1682)) (~ (not (or (not (and $x1655 $x1660)) $x1671)) $x1686))))
(let ((@x1690 (trans (sk (~ $x1126 (not (or (not (and $x1655 $x1660)) $x1671)))) @x1688 (~ $x1126 $x1686))))
(let ((@x1649 (monotonicity (nnf-neg (refl (~ (not $x1072) (not $x1072))) (~ $x1078 $x1636)) (refl (~ $x209 $x209)) (refl (~ $x212 $x212)) (refl (~ $x214 $x214)) (refl (~ $x217 $x217)) (~ $x1084 $x1647))))
(let ((@x1766 (nnf-neg (nnf-neg @x1649 (~ (not $x1089) $x1647)) (nnf-neg @x1690 @x1758 (~ (not $x1156) $x1759)) (~ (not $x1159) $x1763))))
(let ((@x1626 (nnf-pos (monotonicity (refl (~ $x1004 $x1004)) (sk (~ $x1026 $x1618)) (~ $x1029 $x1621)) (~ $x1032 $x1624))))
(let ((@x1591 (nnf-pos (monotonicity (refl (~ $x949 $x949)) (sk (~ $x969 $x1583)) (~ $x972 $x1586)) (~ $x975 $x1589))))
(let ((@x1629 (monotonicity @x1591 (refl (~ $x170 $x170)) (nnf-pos (refl (~ (>= ?x171 0) (>= ?x171 0))) (~ $x1046 $x1046)) (nnf-pos (refl (~ $x1037 $x1037)) (~ $x1040 $x1040)) (nnf-pos (refl (~ $x989 $x989)) (~ $x992 $x992)) @x1626 (~ $x1064 $x1627))))
(let ((@x2001 (nnf-neg (nnf-neg @x1629 (~ (not $x1069) $x1627)) (nnf-neg @x1766 @x1993 (~ (not $x1366) $x1994)) (~ (not $x1369) $x1998))))
(let (($x1550 (exists ((?v1 B_Vertex$) )(! (let ((?x1535 (v_b_SP_G_0$ ?v0!5)))
(let ((?x1536 (* (- 1) ?x1535)))
(let ((?x124 (v_b_SP_G_0$ ?v1)))
(let (($x133 (fun_app$ v_b_Visited_G_0$ ?v1)))
(and (not (>= (+ ?x124 ?x1536) 0)) $x133 (= (+ ?x124 ?x1536 (b_G$ (pair$ ?v1 ?v0!5))) 0)))))) :qid k!38))
))
(let ((@x1568 (nnf-neg (refl (~ $x1556 $x1556)) (nnf-neg (refl (~ $x1559 $x1559)) (~ (not $x1550) $x1562)) (~ (not (or (not (and $x1534 $x1539)) $x1550)) $x1566))))
(let ((@x1570 (trans (sk (~ (not $x975) (not (or (not (and $x1534 $x1539)) $x1550)))) @x1568 (~ (not $x975) $x1566))))
(let ((@x1531 (nnf-neg (nnf-pos (refl (~ $x931 $x931)) (~ $x934 $x934)) (~ (not $x937) $x934))))
(let ((@x2009 (nnf-neg @x1531 (nnf-neg @x1570 @x2001 (~ (not $x1372) $x2002)) (~ (not $x1375) $x2006))))
(let ((@x1504 (nnf-neg (nnf-pos (refl (~ $x906 $x906)) (~ $x909 $x909)) (~ (not $x912) $x909))))
(let ((@x2017 (nnf-neg @x1504 (nnf-neg (sk (~ $x937 $x1522)) @x2009 (~ (not $x1378) $x2010)) (~ (not $x1381) $x2014))))
(let ((@x1481 (nnf-neg (nnf-pos (refl (~ (>= ?x124 0) (>= ?x124 0))) (~ $x894 $x894)) (~ (not $x897) $x894))))
(let ((@x2025 (nnf-neg @x1481 (nnf-neg (sk (~ $x912 $x1495)) @x2017 (~ (not $x1384) $x2018)) (~ (not $x1387) $x2022))))
(let ((@x2033 (nnf-neg (refl (~ $x1466 $x1466)) (nnf-neg (sk (~ $x897 $x1472)) @x2025 (~ (not $x1390) $x2026)) (~ (not $x1393) $x2030))))
(let ((@x2037 (mp~ (not-or-elim (mp (asserted $x344) @x1406 $x1402) (not $x1396)) (nnf-neg (refl (~ $x864 $x864)) @x2033 (~ (not $x1396) $x2034)) $x2034)))
(let ((@x3873 (mp (mp (mp @x2037 (monotonicity @x2338 (= $x2034 $x2339)) $x2339) @x3015 $x3013) (monotonicity @x3869 (= $x3013 $x3870)) $x3870)))
(let ((@x4276 (unit-resolution @x3873 (lemma (unit-resolution @x5800 @x3487 (hypothesis $x864) false) $x142) $x3867)))
(let ((@x4278 (unit-resolution (def-axiom (or $x3861 $x1472 $x3855)) (unit-resolution (def-axiom (or $x3864 $x3858)) @x4276 $x3858) (lemma @x5085 $x1471) $x3855)))
(let ((@x3051 (unit-resolution ((_ quant-inst ?v0!2) (or (not $x3495) $x2343)) @x3500 (hypothesis $x1486) false)))
(let ((@x4352 (unit-resolution (def-axiom (or $x3849 $x2363 $x3843)) (unit-resolution (def-axiom (or $x2358 $x1486)) (lemma @x3051 $x2343) $x2358) (unit-resolution (def-axiom (or $x3852 $x3846)) @x4278 $x3846) $x3843)))
(let ((@x4355 (unit-resolution (def-axiom (or $x3837 $x2409 $x3831)) (unit-resolution (def-axiom (or $x3840 $x3834)) @x4352 $x3834) (unit-resolution (def-axiom (or $x2404 $x1507)) (lemma @x4007 $x2389) $x2404) $x3831)))
(let ((@x4357 (unit-resolution (def-axiom (or $x3825 $x3539 $x3819)) (unit-resolution (def-axiom (or $x3828 $x3822)) @x4355 $x3822) (lemma @x3189 $x3536) $x3819)))
(let ((@x4135 (unit-resolution (def-axiom (or $x3816 $x170)) @x4357 $x170)))
(let ((@x4159 (hypothesis $x3652)))
(let ((@x4139 (unit-resolution (def-axiom (or $x3649 $x214)) @x4159 $x214)))
(let ((@x4149 (unit-resolution (def-axiom (or $x3625 $x1744)) (trans (monotonicity @x4139 (= ?x242 ?x169)) @x4135 $x243) $x3625)))
(let (($x1720 (not $x1719)))
(let ((@x3125 (hypothesis $x2645)))
(let (($x4264 (>= (+ ?x1716 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!10))) 0)))
(let ((@x4002 (symm (hypothesis $x214) (= v_b_SP_G_1$ v_b_SP_G_3$))))
(let ((@x5768 (symm (monotonicity @x4002 (= (fun_app$a v_b_SP_G_1$ ?v1!10) ?x1716)) (= ?x1716 (fun_app$a v_b_SP_G_1$ ?v1!10)))))
(let ((@x5656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1716 (fun_app$a v_b_SP_G_1$ ?v1!10))) $x4264)) @x5768 $x4264)))
(let (($x5398 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!10))) 0)))
(let (($x5689 (fun_app$ v_b_Visited_G_1$ ?v1!10)))
(let (($x6142 (not $x5689)))
(let ((?x5569 (fun_app$a v_b_SP_G_1$ ?v1!10)))
(let ((?x5512 (fun_app$a v_b_SP_G_1$ ?v0!11)))
(let ((?x5709 (* (- 1) ?x5512)))
(let ((?x4184 (+ ?x1722 ?x5709 ?x5569)))
(let (($x4211 (>= ?x4184 0)))
(let ((?x4266 (+ ?x1729 ?x5709)))
(let (($x4267 (<= ?x4266 0)))
(let ((@x4273 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1729 ?x5512)) $x4267)) (symm (monotonicity @x4002 (= ?x5512 ?x1729)) (= ?x1729 ?x5512)) $x4267)))
(let ((@x4363 ((_ th-lemma arith farkas 1 -1 -1 1) (hypothesis $x4267) (hypothesis $x4264) (hypothesis $x4211) (hypothesis (not $x2204)) false)))
(let ((@x4274 (unit-resolution (lemma @x4363 (or (not $x4211) (not $x4267) (not $x4264) $x2204)) @x4273 @x5656 (unit-resolution (def-axiom (or $x2640 (not $x2204))) @x3125 (not $x2204)) (not $x4211))))
(let (($x4220 (or $x3573 $x6142 $x1725 $x4211)))
(let (($x5674 (or $x6142 $x1725 (>= (+ ?x1722 ?x5569 ?x5709) 0))))
(let (($x4221 (or $x3573 $x5674)))
(let ((@x4210 (monotonicity (rewrite (= (+ ?x1722 ?x5569 ?x5709) ?x4184)) (= (>= (+ ?x1722 ?x5569 ?x5709) 0) $x4211))))
(let ((@x4224 (monotonicity (monotonicity @x4210 (= $x5674 (or $x6142 $x1725 $x4211))) (= $x4221 (or $x3573 (or $x6142 $x1725 $x4211))))))
(let ((@x4227 (trans @x4224 (rewrite (= (or $x3573 (or $x6142 $x1725 $x4211)) $x4220)) (= $x4221 $x4220))))
(let ((@x4360 (unit-resolution (mp ((_ quant-inst ?v0!11 ?v1!10) $x4221) @x4227 $x4220) (unit-resolution (def-axiom (or $x3816 $x3568)) @x4357 $x3568) (unit-resolution (def-axiom (or $x2640 (not $x1725))) @x3125 (not $x1725)) (or $x6142 $x4211))))
(let (($x5857 (or $x5689 $x5398)))
(let ((@x5652 (mp ((_ quant-inst ?v1!10) (or $x3590 $x5857)) (rewrite (= (or $x3590 $x5857) (or $x3590 $x5689 $x5398))) (or $x3590 $x5689 $x5398))))
(let ((@x4367 (unit-resolution (unit-resolution @x5652 (hypothesis $x3585) $x5857) (unit-resolution @x4360 @x4274 $x6142) $x5398)))
(let ((@x4362 ((_ th-lemma arith farkas -1 1 1) @x4367 @x5656 (unit-resolution (def-axiom (or $x2640 $x1720)) @x3125 $x1720) false)))
(let ((@x4151 (unit-resolution (lemma @x4362 (or $x2640 $x3590 $x2703)) (unit-resolution (def-axiom (or $x3649 $x3585)) @x4159 $x3585) @x4139 $x2640)))
(let ((@x4161 (unit-resolution (def-axiom (or $x3637 $x3631)) (unit-resolution (def-axiom (or $x3634 $x2645 $x3628)) @x4151 @x4149 $x3634) $x3637)))
(let ((@x4158 (unit-resolution (def-axiom (or $x3646 $x3606 $x3640)) @x4161 (unit-resolution (def-axiom (or $x3649 $x3643)) @x4159 $x3643) $x3606)))
(let (($x3139 (<= (+ b_Infinity$ (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!8))) 0)))
(let ((?x5112 (fun_app$a v_b_SP_G_1$ ?v0!8)))
(let ((?x5119 (* (- 1) ?x5112)))
(let ((?x3935 (?v1!7 ?v0!8)))
(let ((?x3976 (pair$ ?x3935 ?v0!8)))
(let ((?x3971 (b_G$ ?x3976)))
(let ((?x3928 (fun_app$a v_b_SP_G_1$ ?x3935)))
(let ((?x3958 (+ ?x3928 ?x3971 ?x5119)))
(let (($x3970 (= ?x3958 0)))
(let (($x3980 (not $x3970)))
(let (($x3930 (fun_app$ v_b_Visited_G_1$ ?x3935)))
(let (($x3959 (not $x3930)))
(let (($x3890 (>= (+ ?x3928 ?x5119) 0)))
(let (($x4009 (or $x3890 $x3959 $x3980)))
(let ((?x4378 (fun_app$a v_b_SP_G_3$ ?x3935)))
(let ((?x4397 (* (- 1) ?x4378)))
(let ((?x4601 (+ ?x3928 ?x4397)))
(let (($x4605 (>= ?x4601 0)))
(let ((@x4642 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3928 ?x4378)) $x4605)) (symm (monotonicity (hypothesis $x214) (= ?x4378 ?x3928)) (= ?x3928 ?x4378)) $x4605)))
(let ((?x4137 (+ ?x1656 ?x5119)))
(let (($x4122 (>= ?x4137 0)))
(let ((@x4625 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1656 ?x5112)) $x4122)) (symm (monotonicity @x4002 (= ?x5112 ?x1656)) (= ?x1656 ?x5112)) $x4122)))
(let (($x4065 (<= ?x3958 0)))
(let ((@x5126 (unit-resolution (def-axiom (or $x4009 $x3970)) (hypothesis (not $x4009)) $x3970)))
(let (($x4604 (<= ?x4601 0)))
(let ((@x5858 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x3928 ?x4378)) $x4604)) (symm (monotonicity (hypothesis $x214) (= ?x4378 ?x3928)) (= ?x3928 ?x4378)) $x4604)))
(let (($x4121 (<= ?x4137 0)))
(let ((@x5140 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1656 ?x5112)) $x4121)) (symm (monotonicity @x4002 (= ?x5112 ?x1656)) (= ?x1656 ?x5112)) $x4121)))
(let (($x4058 (>= ?x3958 0)))
(let (($x4399 (<= (+ ?x1656 ?x4397) 0)))
(let (($x4338 (not $x4399)))
(let ((@x4989 (unit-resolution (def-axiom (or $x4009 (not $x3890))) (hypothesis (not $x4009)) (not $x3890))))
(let ((@x5003 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1) (or $x4338 (not $x4122) $x3890 (not $x4605))) @x4989 @x4625 @x4642 $x4338)))
(let (($x4758 (not $x4605)))
(let (($x4757 (not $x4122)))
(let (($x4898 (or $x4399 $x3600 (not $x4058) (not $x4121) (not $x4604) (not $x4065) $x4757 $x4758)))
(let ((?x5665 (* (- 1) ?x3971)))
(let ((?x4417 (+ ?x1656 ?x5665 ?x4397)))
(let (($x4445 (>= ?x4417 0)))
(let ((@x5038 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1 -1) (or $x4445 (not $x4065) $x4757 $x4758)) (hypothesis $x4065) (hypothesis $x4122) (hypothesis $x4605) $x4445)))
(let (($x4444 (<= ?x4417 0)))
(let ((@x4331 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1 -1) (or $x4444 (not $x4058) (not $x4121) (not $x4604))) (hypothesis $x4058) (hypothesis $x4121) (hypothesis $x4604) $x4444)))
(let (($x4418 (= ?x4417 0)))
(let (($x4428 (not $x4418)))
(let (($x4430 (or $x4399 $x4428)))
(let (($x4447 (or $x3600 $x4399 $x4428)))
(let (($x4384 (>= (+ ?x4378 ?x1657) 0)))
(let (($x4388 (or $x4384 (not (= (+ ?x4378 ?x1657 ?x3971) 0)))))
(let (($x4432 (or $x3600 $x4388)))
(let ((@x4414 (monotonicity (rewrite (= (+ ?x4378 ?x1657 ?x3971) (+ ?x1657 ?x3971 ?x4378))) (= (= (+ ?x4378 ?x1657 ?x3971) 0) (= (+ ?x1657 ?x3971 ?x4378) 0)))))
(let ((@x4427 (trans @x4414 (rewrite (= (= (+ ?x1657 ?x3971 ?x4378) 0) $x4418)) (= (= (+ ?x4378 ?x1657 ?x3971) 0) $x4418))))
(let ((@x4396 (monotonicity (rewrite (= (+ ?x4378 ?x1657) (+ ?x1657 ?x4378))) (= $x4384 (>= (+ ?x1657 ?x4378) 0)))))
(let ((@x4406 (trans @x4396 (rewrite (= (>= (+ ?x1657 ?x4378) 0) $x4399)) (= $x4384 $x4399))))
(let ((@x4446 (monotonicity @x4406 (monotonicity @x4427 (= (not (= (+ ?x4378 ?x1657 ?x3971) 0)) $x4428)) (= $x4388 $x4430))))
(let ((@x4442 (trans (monotonicity @x4446 (= $x4432 (or $x3600 $x4430))) (rewrite (= (or $x3600 $x4430) $x4447)) (= $x4432 $x4447))))
(let ((@x5041 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!8)) $x4432) @x4442 $x4447) (hypothesis $x3595) $x4430)))
(let ((@x4897 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4418 (not $x4444) (not $x4445))) (unit-resolution @x5041 (hypothesis $x4338) $x4428) @x4331 @x5038 false)))
(let ((@x3135 (unit-resolution (lemma @x4897 $x4898) @x5003 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3980 $x4058)) @x5126 $x4058) (hypothesis $x3595) @x5140 @x5858 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x3980 $x4065)) @x5126 $x4065) @x4625 @x4642 false)))
(let ((@x4168 (unit-resolution (lemma @x3135 (or $x4009 $x3600 $x2703)) (unit-resolution (def-axiom (or $x3603 $x3595)) @x4158 $x3595) @x4139 $x4009)))
(let ((@x4189 (unit-resolution (def-axiom (or $x3816 $x3576)) @x4357 $x3576)))
(let (($x4014 (not $x4009)))
(let (($x4042 (or $x3581 $x1654 $x3139 $x4014)))
(let (($x3956 (<= (+ ?x5112 (* (- 1) ?x3928)) 0)))
(let (($x3033 (or $x1654 $x3139 (not (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))))))
(let (($x4043 (or $x3581 $x3033)))
(let (($x3964 (= (not (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))) $x4014)))
(let (($x4010 (= (or $x3956 $x3959 (not (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0))) $x4009)))
(let (($x5977 (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) 0)))
(let ((@x3929 (rewrite (= (+ ?x5112 (* (- 1) ?x3928) ?x5665) (+ (* (- 1) ?x3928) ?x5665 ?x5112)))))
(let ((@x3957 (monotonicity @x3929 (= $x5977 (= (+ (* (- 1) ?x3928) ?x5665 ?x5112) 0)))))
(let ((@x3988 (trans @x3957 (rewrite (= (= (+ (* (- 1) ?x3928) ?x5665 ?x5112) 0) $x3970)) (= $x5977 $x3970))))
(let ((@x3898 (monotonicity (rewrite (= (+ ?x5112 (* (- 1) ?x3928)) (+ (* (- 1) ?x3928) ?x5112))) (= $x3956 (<= (+ (* (- 1) ?x3928) ?x5112) 0)))))
(let ((@x3927 (trans @x3898 (rewrite (= (<= (+ (* (- 1) ?x3928) ?x5112) 0) $x3890)) (= $x3956 $x3890))))
(let ((@x4011 (monotonicity (monotonicity @x3927 (monotonicity @x3988 (= (not $x5977) $x3980)) $x4010) $x3964)))
(let ((@x4050 (monotonicity (monotonicity @x4011 (= $x3033 (or $x1654 $x3139 $x4014))) (= $x4043 (or $x3581 (or $x1654 $x3139 $x4014))))))
(let ((@x4053 (trans @x4050 (rewrite (= (or $x3581 (or $x1654 $x3139 $x4014)) $x4042)) (= $x4043 $x4042))))
(let ((@x4248 (unit-resolution (mp ((_ quant-inst ?v0!8) $x4043) @x4053 $x4042) @x4189 (unit-resolution (def-axiom (or $x3603 $x1655)) @x4158 $x1655) (or $x3139 $x4014))))
(let (($x4136 (= ?x1656 ?x5112)))
(let ((@x4235 (monotonicity (symm @x4139 (= v_b_SP_G_1$ v_b_SP_G_3$)) (= ?x5112 ?x1656))))
(let ((@x4237 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4136) $x4122)) (symm @x4235 $x4136) $x4122)))
(let ((@x4238 ((_ th-lemma arith farkas 1 -1 1) @x4237 (unit-resolution @x4248 @x4168 $x3139) (unit-resolution (def-axiom (or $x3603 $x1660)) @x4158 $x1660) false)))
(let ((@x4802 (unit-resolution (def-axiom (or $x3813 $x3652 $x3807)) (lemma @x4238 $x3649) (unit-resolution (def-axiom (or $x3816 $x3810)) @x4357 $x3810) $x3807)))
(let ((@x6739 (symm (unit-resolution (def-axiom (or $x3804 $x261)) @x4802 $x261) (= ?x260 v_b_Visited_G_2$))))
(let ((@x10168 (symm (monotonicity @x6739 (= $x5237 (fun_app$ v_b_Visited_G_2$ ?v0!20))) (= (fun_app$ v_b_Visited_G_2$ ?v0!20) $x5237))))
(let ((@x10119 (monotonicity @x10168 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!20)) $x9037))))
(let (($x4298 (fun_app$ v_b_Visited_G_2$ ?v0!20)))
(let (($x4299 (not $x4298)))
(let ((?x4413 (fun_app$a v_b_SP_G_1$ ?v0!20)))
(let ((?x4438 (* (- 1) ?x4413)))
(let ((?x4439 (+ ?x1906 ?x4438)))
(let (($x6002 (>= ?x4439 0)))
(let (($x9479 (not $x6002)))
(let ((@x9476 (hypothesis $x6002)))
(let (($x9588 (or (not (<= (+ ?x1906 (* (- 1) (v_b_SP_G_2$ (?v1!7 ?v0!20)))) 0)) $x9479)))
(let ((?x4661 (?v1!7 ?v0!20)))
(let ((?x4662 (fun_app$a v_b_SP_G_1$ ?x4661)))
(let ((?x4663 (* (- 1) ?x4662)))
(let ((?x4664 (+ ?x4413 ?x4663)))
(let (($x4665 (<= ?x4664 0)))
(let ((?x4668 (pair$ ?x4661 ?v0!20)))
(let ((?x4669 (b_G$ ?x4668)))
(let ((?x4670 (* (- 1) ?x4669)))
(let ((?x4671 (+ ?x4413 ?x4663 ?x4670)))
(let (($x4672 (= ?x4671 0)))
(let (($x4673 (not $x4672)))
(let (($x4666 (fun_app$ v_b_Visited_G_1$ ?x4661)))
(let (($x4667 (not $x4666)))
(let (($x4674 (or $x4665 $x4667 $x4673)))
(let (($x4675 (not $x4674)))
(let (($x1884 (not $x1883)))
(let ((@x8699 (hypothesis $x2806)))
(let (($x7517 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!19)))) 0)))
(let ((?x7554 (pair$ v_b_v_G_1$ ?v0!19)))
(let ((?x7555 (b_G$ ?x7554)))
(let ((?x7388 (fun_app$a v_b_SP_G_1$ ?v0!19)))
(let ((?x7461 (* (- 1) ?x7388)))
(let (($x4944 (>= (+ ?x254 ?x7461 ?x7555) 0)))
(let (($x8378 (or $x7517 $x4944)))
(let ((?x7471 (+ ?x254 ?x1889 ?x7555)))
(let (($x6876 (= ?x7471 0)))
(let (($x8868 (not $x6876)))
(let (($x6123 (>= ?x7471 0)))
(let (($x8149 (not $x6123)))
(let ((?x7512 (* (- 1) ?x7555)))
(let ((?x9069 (+ ?x1880 ?x7512)))
(let (($x8504 (>= ?x9069 0)))
(let (($x6383 (= ?v1!18 v_b_v_G_1$)))
(let (($x5168 (fun_app$ v_b_Visited_G_1$ ?v1!18)))
(let (($x6179 (not $x5168)))
(let (($x7401 (<= (+ ?x1888 ?x7461) 0)))
(let ((?x5283 (b_G$ (pair$ v_b_v_G_1$ ?v0!13))))
(let ((?x5139 (+ ?x254 ?x1805 ?x5283)))
(let (($x4859 (= ?x5139 0)))
(let (($x4202 (>= (+ ?x254 (* (- 1) ?x1803) ?x5283) 0)))
(let (($x3165 (<= (+ b_Infinity$ (* (- 1) ?x5283)) 0)))
(let (($x4930 (or $x3165 $x4202)))
(let (($x4933 (not $x4930)))
(let ((@x4771 (monotonicity (commutativity (= (= ?x1803 ?x1804) (= ?x1804 ?x1803))) (= (not (= ?x1803 ?x1804)) (not (= ?x1804 ?x1803))))))
(let (($x4765 (not (= ?x1803 ?x1804))))
(let ((@x4772 (mp (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4765 $x1807)) (hypothesis $x1808) $x4765) @x4771 (not (= ?x1804 ?x1803)))))
(let (($x4288 (= ?x1804 ?x1803)))
(let (($x4284 (or $x4933 $x4288)))
(let ((@x4803 (unit-resolution (def-axiom (or $x3804 $x3673)) @x4802 $x3673)))
(let (($x4290 (or $x3678 $x4933 $x4288)))
(let (($x4289 (or (not (or $x3165 (<= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) 0))) $x4288)))
(let (($x4291 (or $x3678 $x4289)))
(let (($x3167 (<= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) 0)))
(let ((@x4198 (rewrite (= (+ ?x1803 ?x1168 (* (- 1) ?x5283)) (+ ?x1168 ?x1803 (* (- 1) ?x5283))))))
(let ((@x4195 (monotonicity @x4198 (= $x3167 (<= (+ ?x1168 ?x1803 (* (- 1) ?x5283)) 0)))))
(let ((@x5138 (trans @x4195 (rewrite (= (<= (+ ?x1168 ?x1803 (* (- 1) ?x5283)) 0) $x4202)) (= $x3167 $x4202))))
(let ((@x4283 (monotonicity (monotonicity @x5138 (= (or $x3165 $x3167) $x4930)) (= (not (or $x3165 $x3167)) $x4933))))
(let ((@x4294 (monotonicity (monotonicity @x4283 (= $x4289 $x4284)) (= $x4291 (or $x3678 $x4284)))))
(let ((@x5050 (mp ((_ quant-inst ?v0!13) $x4291) (trans @x4294 (rewrite (= (or $x3678 $x4284) $x4290)) (= $x4291 $x4290)) $x4290)))
(let ((@x4805 (unit-resolution (def-axiom (or $x4930 (not $x3165))) (unit-resolution (unit-resolution @x5050 @x4803 $x4284) @x4772 $x4933) (not $x3165))))
(let ((@x4788 (unit-resolution (def-axiom (or $x4930 (not $x4202))) (unit-resolution (unit-resolution @x5050 @x4803 $x4284) @x4772 $x4933) (not $x4202))))
(let (($x5127 (or $x3165 $x4202 $x4859)))
(let ((@x4789 (unit-resolution (def-axiom (or $x3804 $x3665)) @x4802 $x3665)))
(let (($x5129 (or $x3670 $x3165 $x4202 $x4859)))
(let (($x4192 (or $x3165 $x3167 (= (+ ?x254 ?x5283 ?x1805) 0))))
(let (($x5130 (or $x3670 $x4192)))
(let ((@x4861 (monotonicity (rewrite (= (+ ?x254 ?x5283 ?x1805) ?x5139)) (= (= (+ ?x254 ?x5283 ?x1805) 0) $x4859))))
(let ((@x5135 (monotonicity (monotonicity @x5138 @x4861 (= $x4192 $x5127)) (= $x5130 (or $x3670 $x5127)))))
(let ((@x5160 (mp ((_ quant-inst ?v0!13) $x5130) (trans @x5135 (rewrite (= (or $x3670 $x5127) $x5129)) (= $x5130 $x5129)) $x5129)))
(let ((@x4787 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4859) (>= ?x5139 0))) (unit-resolution (unit-resolution @x5160 @x4789 $x5127) @x4788 @x4805 $x4859) (>= ?x5139 0))))
(let ((@x4795 (unit-resolution ((_ th-lemma arith farkas 1 1) (or (<= ?x1806 0) $x1807)) (hypothesis $x1808) (<= ?x1806 0))))
(let ((@x5162 (unit-resolution (def-axiom (or $x3801 $x1808 $x3795)) (unit-resolution (def-axiom (or $x3804 $x3798)) @x4802 $x3798) $x3798)))
(let ((@x4711 (unit-resolution @x5162 (lemma ((_ th-lemma arith farkas 1 -1 1) @x4795 @x4788 @x4787 false) $x1807) $x3795)))
(let ((@x4714 (unit-resolution (def-axiom (or $x3792 $x3681)) @x4711 $x3681)))
(let (($x6395 (or $x3686 $x7401)))
(let ((@x8489 (monotonicity (rewrite (= (+ ?x7388 ?x1889) (+ ?x1889 ?x7388))) (= (>= (+ ?x7388 ?x1889) 0) (>= (+ ?x1889 ?x7388) 0)))))
(let ((@x7634 (trans @x8489 (rewrite (= (>= (+ ?x1889 ?x7388) 0) $x7401)) (= (>= (+ ?x7388 ?x1889) 0) $x7401))))
(let ((@x8284 (trans (monotonicity @x7634 (= (or $x3686 (>= (+ ?x7388 ?x1889) 0)) $x6395)) (rewrite (= $x6395 $x6395)) (= (or $x3686 (>= (+ ?x7388 ?x1889) 0)) $x6395))))
(let ((@x8710 (unit-resolution (mp ((_ quant-inst ?v0!19) (or $x3686 (>= (+ ?x7388 ?x1889) 0))) @x8284 $x6395) @x4714 $x7401)))
(let (($x8129 (>= (+ ?x1887 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!18))) 0)))
(let ((?x6950 (fun_app$a v_b_SP_G_1$ ?v1!18)))
(let (($x6951 (= ?x1887 ?x6950)))
(let (($x1819 (fun_app$ v_b_Visited_G_2$ ?v0!14)))
(let (($x3393 (not $x1823)))
(let (($x5543 (fun_app$ v_b_Visited_G_1$ ?v0!14)))
(let (($x5064 (= ?v0!14 v_b_v_G_1$)))
(let (($x6244 (or $x5064 $x5543)))
(let (($x5974 (fun_app$ ?x260 ?v0!14)))
(let (($x6373 (= $x5974 $x6244)))
(let (($x3463 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :pattern ( (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3) ) :qid k!34))
))
(let (($x73 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!34))
))
(let (($x63 (fun_app$ (fun_upd$ ?3 ?2 ?1) ?0)))
(let (($x70 (= $x63 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0)))))
(let (($x68 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) (?v3 B_Vertex$) )(! (let (($x63 (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v3)))
(= $x63 (ite (= ?v3 ?v1) ?v2 (fun_app$ ?v0 ?v3)))) :qid k!34))
))
(let ((@x72 (rewrite (= (= $x63 (ite (= ?0 ?2) ?1 (fun_app$ ?3 ?0))) $x70))))
(let ((@x1438 (mp~ (mp (asserted $x68) (quant-intro @x72 (= $x68 $x73)) $x73) (nnf-pos (refl (~ $x70 $x70)) (~ $x73 $x73)) $x73)))
(let ((@x3468 (mp @x1438 (quant-intro (refl (= $x70 $x70)) (= $x73 $x3463)) $x3463)))
(let (($x4134 (not $x3463)))
(let (($x5805 (or $x4134 $x6373)))
(let ((@x5853 (monotonicity (rewrite (= (ite $x5064 true $x5543) $x6244)) (= (= $x5974 (ite $x5064 true $x5543)) $x6373))))
(let ((@x3152 (monotonicity @x5853 (= (or $x4134 (= $x5974 (ite $x5064 true $x5543))) $x5805))))
(let ((@x4912 (trans @x3152 (rewrite (= $x5805 $x5805)) (= (or $x4134 (= $x5974 (ite $x5064 true $x5543))) $x5805))))
(let ((@x4913 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!14) (or $x4134 (= $x5974 (ite $x5064 true $x5543)))) @x4912 $x5805)))
(let ((@x5240 (mp (hypothesis $x1819) (symm (monotonicity @x6739 (= $x5974 $x1819)) (= $x1819 $x5974)) $x5974)))
(let ((@x5728 (unit-resolution (def-axiom (or (not $x6373) (not $x5974) $x6244)) @x5240 (unit-resolution @x4913 @x3468 $x6373) $x6244)))
(let ((@x7078 (hypothesis $x3393)))
(let ((?x3063 (v_b_SP_G_2$ v_b_v_G_1$)))
(let (($x3024 (= ?x3063 ?x254)))
(let ((?x3076 (pair$ v_b_v_G_1$ v_b_v_G_1$)))
(let ((?x3077 (b_G$ ?x3076)))
(let (($x3038 (>= ?x3077 0)))
(let (($x3080 (<= (+ b_Infinity$ (* (- 1) ?x3077)) 0)))
(let (($x4540 (or $x3080 $x3038)))
(let (($x6342 (= ?x3077 0)))
(let (($x3469 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :pattern ( (pair$ ?v0 ?v1) ) :qid k!36))
))
(let (($x95 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (or (not (= ?v0 ?v1)) (= (b_G$ (pair$ ?v0 ?v1)) 0)) :qid k!36))
))
(let (($x92 (or (not (= ?1 ?0)) (= (b_G$ (pair$ ?1 ?0)) 0))))
(let (($x89 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(=> $x80 (= (b_G$ (pair$ ?v0 ?v1)) 0))) :qid k!36))
))
(let ((@x94 (rewrite (= (=> (= ?1 ?0) (= (b_G$ (pair$ ?1 ?0)) 0)) $x92))))
(let ((@x1443 (mp~ (mp (asserted $x89) (quant-intro @x94 (= $x89 $x95)) $x95) (nnf-pos (refl (~ $x92 $x92)) (~ $x95 $x95)) $x95)))
(let ((@x3474 (mp @x1443 (quant-intro (refl (= $x92 $x92)) (= $x95 $x3469)) $x3469)))
(let (($x3045 (not $x3469)))
(let (($x6595 (or $x3045 $x6342)))
(let ((@x6585 (monotonicity (rewrite (= (= v_b_v_G_1$ v_b_v_G_1$) true)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) (not true)))))
(let ((@x6587 (trans @x6585 (rewrite (= (not true) false)) (= (not (= v_b_v_G_1$ v_b_v_G_1$)) false))))
(let ((@x6590 (monotonicity @x6587 (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342) (or false $x6342)))))
(let ((@x6594 (trans @x6590 (rewrite (= (or false $x6342) $x6342)) (= (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342) $x6342))))
(let ((@x6599 (monotonicity @x6594 (= (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342)) $x6595))))
(let ((@x6602 (trans @x6599 (rewrite (= $x6595 $x6595)) (= (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342)) $x6595))))
(let ((@x6603 (mp ((_ quant-inst v_b_v_G_1$ v_b_v_G_1$) (or $x3045 (or (not (= v_b_v_G_1$ v_b_v_G_1$)) $x6342))) @x6602 $x6595)))
(let ((@x6616 (lemma (unit-resolution @x6603 @x3474 (hypothesis (not $x6342)) false) $x6342)))
(let ((@x7085 (unit-resolution (def-axiom (or $x4540 (not $x3038))) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6342) $x3038)) @x6616 $x3038) $x4540)))
(let (($x4579 (not $x4540)))
(let (($x4550 (or $x4579 $x3024)))
(let (($x4556 (or $x3678 $x4579 $x3024)))
(let (($x3874 (or (not (or $x3080 (<= (+ ?x254 ?x1168 (* (- 1) ?x3077)) 0))) $x3024)))
(let (($x4557 (or $x3678 $x3874)))
(let (($x3062 (<= (+ ?x254 ?x1168 (* (- 1) ?x3077)) 0)))
(let ((@x4468 (monotonicity (rewrite (= (+ ?x254 ?x1168 (* (- 1) ?x3077)) (* (- 1) ?x3077))) (= $x3062 (<= (* (- 1) ?x3077) 0)))))
(let ((@x4485 (trans @x4468 (rewrite (= (<= (* (- 1) ?x3077) 0) $x3038)) (= $x3062 $x3038))))
(let ((@x4549 (monotonicity (monotonicity @x4485 (= (or $x3080 $x3062) $x4540)) (= (not (or $x3080 $x3062)) $x4579))))
(let ((@x4561 (monotonicity (monotonicity @x4549 (= $x3874 $x4550)) (= $x4557 (or $x3678 $x4550)))))
(let ((@x4574 (mp ((_ quant-inst v_b_v_G_1$) $x4557) (trans @x4561 (rewrite (= (or $x3678 $x4550) $x4556)) (= $x4557 $x4556)) $x4556)))
(let ((@x7095 (trans (monotonicity (hypothesis $x5064) (= ?x1821 ?x3063)) (unit-resolution (unit-resolution @x4574 @x4803 $x4550) @x7085 $x3024) (= ?x1821 ?x254))))
(let ((@x7096 (trans @x7095 (symm (monotonicity (hypothesis $x5064) (= ?x1822 ?x254)) (= ?x254 ?x1822)) $x1823)))
(let ((@x6504 (unit-resolution (lemma (unit-resolution @x7078 @x7096 false) (or (not $x5064) $x1823)) @x7078 (not $x5064))))
(let ((@x6501 (unit-resolution (def-axiom (or (not $x6244) $x5064 $x5543)) @x6504 (or (not $x6244) $x5543))))
(let (($x6879 (>= (+ ?x254 (* (- 1) ?x1822)) 0)))
(let (($x7105 (not $x6879)))
(let (($x6372 (>= (+ ?x254 (* (- 1) ?x1822) (b_G$ (pair$ v_b_v_G_1$ ?v0!14))) 0)))
(let (($x6043 (not $x6372)))
(let (($x5623 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x6328 (or $x5623 $x6372)))
(let (($x5555 (not $x6328)))
(let (($x5565 (or $x3678 $x5555 $x1823)))
(let (($x5711 (<= (+ ?x1822 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5760 (or (not (or $x5623 $x5711)) $x1823)))
(let (($x5490 (or $x3678 $x5760)))
(let (($x5031 (<= (+ ?x1168 ?x1822 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) 0)))
(let (($x5019 (= (+ ?x1822 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))) (+ ?x1168 ?x1822 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v0!14)))))))
(let ((@x6180 (trans (monotonicity (rewrite $x5019) (= $x5711 $x5031)) (rewrite (= $x5031 $x6372)) (= $x5711 $x6372))))
(let ((@x5556 (monotonicity (monotonicity @x6180 (= (or $x5623 $x5711) $x6328)) (= (not (or $x5623 $x5711)) $x5555))))
(let ((@x4918 (monotonicity (monotonicity @x5556 (= $x5760 (or $x5555 $x1823))) (= $x5490 (or $x3678 (or $x5555 $x1823))))))
(let ((@x6362 (trans @x4918 (rewrite (= (or $x3678 (or $x5555 $x1823)) $x5565)) (= $x5490 $x5565))))
(let ((@x6339 (unit-resolution (def-axiom (or $x6328 $x6043)) (unit-resolution (mp ((_ quant-inst ?v0!14) $x5490) @x6362 $x5565) @x4803 @x7078 $x5555) $x6043)))
(let ((?x5617 (pair$ v_b_v_G_1$ ?v0!14)))
(let ((?x5621 (b_G$ ?x5617)))
(let (($x6266 (>= ?x5621 0)))
(let ((@x6636 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x5621 0)) $x6266)) (hypothesis (not $x6266)) (not (= ?x5621 0)))))
(let (($x6078 (= v_b_v_G_1$ ?v0!14)))
(let (($x6076 (<= ?x5621 0)))
(let ((@x6410 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x6266 $x6076)) (hypothesis (not $x6266)) $x6076)))
(let (($x6080 (or $x6078 (not $x6076))))
(let (($x3475 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(or $x80 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :pattern ( (pair$ ?v0 ?v1) ) :qid k!37))
))
(let (($x116 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let (($x80 (= ?v0 ?v1)))
(or $x80 (not (<= (b_G$ (pair$ ?v0 ?v1)) 0)))) :qid k!37))
))
(let (($x80 (= ?1 ?0)))
(let (($x113 (or $x80 (not (<= (b_G$ (pair$ ?1 ?0)) 0)))))
(let (($x101 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(=> (not (= ?v0 ?v1)) $x98)))) :qid k!37))
))
(let (($x106 (forall ((?v0 B_Vertex$) (?v1 B_Vertex$) )(! (let ((?x29 (pair$ ?v0 ?v1)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(let (($x80 (= ?v0 ?v1)))
(or $x80 $x98))))) :qid k!37))
))
(let ((?x29 (pair$ ?1 ?0)))
(let ((?x81 (b_G$ ?x29)))
(let (($x98 (< 0 ?x81)))
(let ((@x115 (monotonicity (rewrite (= $x98 (not (<= ?x81 0)))) (= (or $x80 $x98) $x113))))
(let ((@x108 (quant-intro (rewrite (= (=> (not $x80) $x98) (or $x80 $x98))) (= $x101 $x106))))
(let ((@x121 (mp (asserted $x101) (trans @x108 (quant-intro @x115 (= $x106 $x116)) (= $x101 $x116)) $x116)))
(let ((@x3480 (mp (mp~ @x121 (nnf-pos (refl (~ $x113 $x113)) (~ $x116 $x116)) $x116) (quant-intro (refl (= $x113 $x113)) (= $x116 $x3475)) $x3475)))
(let ((@x6389 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or (not $x3475) $x6080)) (rewrite (= (or (not $x3475) $x6080) (or (not $x3475) $x6078 (not $x6076)))) (or (not $x3475) $x6078 (not $x6076)))))
(let (($x6086 (= ?x5621 0)))
(let (($x6096 (or (not $x6078) $x6086)))
(let ((@x6264 (mp ((_ quant-inst v_b_v_G_1$ ?v0!14) (or $x3045 $x6096)) (rewrite (= (or $x3045 $x6096) (or $x3045 (not $x6078) $x6086))) (or $x3045 (not $x6078) $x6086))))
(let ((@x6993 (unit-resolution (unit-resolution @x6264 @x3474 $x6096) (unit-resolution (unit-resolution @x6389 @x3480 $x6080) @x6410 $x6078) @x6636 false)))
(let ((@x7107 (lemma ((_ th-lemma arith farkas 1 -1 1) (hypothesis $x6266) (hypothesis $x6043) (hypothesis $x6879) false) (or (not $x6266) $x6372 $x7105))))
(let ((@x6134 (unit-resolution (unit-resolution @x7107 (lemma @x6993 $x6266) (or $x6372 $x7105)) @x6339 $x7105)))
(let ((@x6066 (unit-resolution (def-axiom (or $x3804 $x253)) @x4802 $x253)))
(let ((@x6683 (unit-resolution (def-axiom (or $x3816 $x3560)) @x4357 $x3560)))
(let (($x6034 (= (or $x3565 (or $x252 (not $x5543) $x6879)) (or $x3565 $x252 (not $x5543) $x6879))))
(let ((@x6556 (mp ((_ quant-inst ?v0!14 v_b_v_G_1$) (or $x3565 (or $x252 (not $x5543) $x6879))) (rewrite $x6034) (or $x3565 $x252 (not $x5543) $x6879))))
(let ((@x6850 (unit-resolution @x6556 @x6683 @x6066 @x6134 (unit-resolution @x6501 @x5728 $x5543) false)))
(let ((@x5791 (unit-resolution (lemma @x6850 $x1824) (unit-resolution (def-axiom (or $x1824 $x3393)) (hypothesis $x1825) $x3393) (unit-resolution (def-axiom (or $x1824 $x1819)) (hypothesis $x1825) $x1819) false)))
(let ((@x9261 (unit-resolution (def-axiom (or $x3789 $x1825 $x3783)) (unit-resolution (def-axiom (or $x3792 $x3786)) @x4711 $x3786) $x3786)))
(let ((@x9263 (unit-resolution (def-axiom (or $x3780 $x3690)) (unit-resolution @x9261 (lemma @x5791 $x1824) $x3783) $x3690)))
(let ((@x6271 (mp ((_ quant-inst ?v1!18) (or $x3695 (or $x2786 $x6951))) (rewrite (= (or $x3695 (or $x2786 $x6951)) (or $x3695 $x2786 $x6951))) (or $x3695 $x2786 $x6951))))
(let ((@x5205 (unit-resolution @x6271 @x9263 (unit-resolution (def-axiom (or $x2801 $x1878)) @x8699 $x1878) $x6951)))
(let ((@x8621 ((_ th-lemma arith assign-bounds -1 -1 1) (or (not (>= (+ ?x1880 ?x6950 ?x7461) 0)) (not $x7401) $x1891 (not $x8129)))))
(let ((@x8189 (unit-resolution @x8621 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6951) $x8129)) @x5205 $x8129) (unit-resolution (def-axiom (or $x2801 (not $x1891))) @x8699 (not $x1891)) @x8710 (not (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let (($x5620 (= (or $x3573 (or $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0))) (or $x3573 $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let ((@x7205 (mp ((_ quant-inst ?v0!19 ?v1!18) (or $x3573 (or $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))) (rewrite $x5620) (or $x3573 $x6179 $x1883 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let ((@x8192 (unit-resolution @x7205 (unit-resolution (def-axiom (or $x3816 $x3568)) @x4357 $x3568) (unit-resolution (def-axiom (or $x2801 $x1884)) @x8699 $x1884) (or $x6179 (>= (+ ?x1880 ?x6950 ?x7461) 0)))))
(let (($x8059 (or $x6383 $x5168)))
(let (($x4914 (fun_app$ ?x260 ?v1!18)))
(let (($x8555 (= $x4914 $x8059)))
(let (($x7052 (or $x4134 $x8555)))
(let ((@x8554 (monotonicity (rewrite (= (ite $x6383 true $x5168) $x8059)) (= (= $x4914 (ite $x6383 true $x5168)) $x8555))))
(let ((@x8280 (monotonicity @x8554 (= (or $x4134 (= $x4914 (ite $x6383 true $x5168))) $x7052))))
(let ((@x7080 (trans @x8280 (rewrite (= $x7052 $x7052)) (= (or $x4134 (= $x4914 (ite $x6383 true $x5168))) $x7052))))
(let ((@x7791 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!18) (or $x4134 (= $x4914 (ite $x6383 true $x5168)))) @x7080 $x7052)))
(let ((@x8161 (mp (unit-resolution (def-axiom (or $x2801 $x1878)) @x8699 $x1878) (symm (monotonicity @x6739 (= $x4914 $x1878)) (= $x1878 $x4914)) $x4914)))
(let ((@x8162 (unit-resolution (def-axiom (or (not $x8555) (not $x4914) $x8059)) @x8161 (unit-resolution @x7791 @x3468 $x8555) $x8059)))
(let ((@x8163 (unit-resolution (def-axiom (or (not $x8059) $x6383 $x5168)) @x8162 (unit-resolution @x8192 @x8189 $x6179) $x6383)))
(let ((@x5864 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1880 ?x7555)) $x8504)) (monotonicity (monotonicity @x8163 (= ?x1879 ?x7554)) (= ?x1880 ?x7555)) $x8504)))
(let (($x7609 (>= (+ ?x1887 (* (- 1) ?x3063)) 0)))
(let ((@x5835 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1887 ?x3063)) $x7609)) (monotonicity @x8163 (= ?x1887 ?x3063)) $x7609)))
(let ((?x3064 (* (- 1) ?x3063)))
(let ((?x3904 (+ ?x254 ?x3064)))
(let (($x3905 (<= ?x3904 0)))
(let (($x4587 (= ?x254 ?x3063)))
(let ((@x8351 (mp (unit-resolution (unit-resolution @x4574 @x4803 $x4550) @x7085 $x3024) (symm (commutativity (= $x4587 $x3024)) (= $x3024 $x4587)) $x4587)))
(let ((@x8148 ((_ th-lemma arith farkas 1 -1 1 -1 1) (hypothesis $x6123) (hypothesis (not $x1891)) (hypothesis $x7609) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4587) $x3905)) @x8351 $x3905) (hypothesis $x8504) false)))
(let ((@x6098 (unit-resolution (lemma @x8148 (or $x8149 $x1891 (not $x7609) (not $x8504))) (unit-resolution (def-axiom (or $x2801 (not $x1891))) @x8699 (not $x1891)) @x5835 @x5864 $x8149)))
(let ((@x8175 (unit-resolution (def-axiom (or $x8378 (not $x7517))) (hypothesis (not $x8378)) (not $x7517))))
(let (($x7000 (not $x4944)))
(let ((@x8640 (unit-resolution (def-axiom (or $x8378 $x7000)) (hypothesis (not $x8378)) $x7000)))
(let (($x6310 (or $x7517 $x4944 $x6876)))
(let (($x7071 (or $x3670 $x7517 $x4944 $x6876)))
(let (($x7524 (<= (+ ?x7388 ?x1168 ?x7512) 0)))
(let (($x7589 (or $x7517 $x7524 (= (+ ?x254 ?x7555 ?x1889) 0))))
(let (($x6768 (or $x3670 $x7589)))
(let ((@x6946 (monotonicity (rewrite (= (+ ?x254 ?x7555 ?x1889) ?x7471)) (= (= (+ ?x254 ?x7555 ?x1889) 0) $x6876))))
(let ((@x7308 (monotonicity (rewrite (= (+ ?x7388 ?x1168 ?x7512) (+ ?x1168 ?x7388 ?x7512))) (= $x7524 (<= (+ ?x1168 ?x7388 ?x7512) 0)))))
(let ((@x8377 (trans @x7308 (rewrite (= (<= (+ ?x1168 ?x7388 ?x7512) 0) $x4944)) (= $x7524 $x4944))))
(let ((@x6639 (monotonicity (monotonicity @x8377 @x6946 (= $x7589 $x6310)) (= $x6768 (or $x3670 $x6310)))))
(let ((@x6030 (mp ((_ quant-inst ?v0!19) $x6768) (trans @x6639 (rewrite (= (or $x3670 $x6310) $x7071)) (= $x6768 $x7071)) $x7071)))
(let ((@x8762 (unit-resolution (unit-resolution @x6030 @x4789 $x6310) @x8640 @x8175 (hypothesis $x8868) false)))
(let ((@x8475 (unit-resolution (lemma @x8762 (or $x8378 $x6876)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x8868 $x6123)) @x6098 $x8868) $x8378)))
(let ((@x8713 (lemma ((_ th-lemma arith farkas -1 -1 1) @x8710 (hypothesis $x8149) (hypothesis $x4944) false) (or $x7000 $x6123))))
(let ((@x7808 (unit-resolution (def-axiom (or (not $x8378) $x7517 $x4944)) (unit-resolution @x8713 @x6098 $x7000) @x8475 $x7517)))
(let ((@x7807 ((_ th-lemma arith farkas 1 -1 1) @x5864 @x7808 (unit-resolution (def-axiom (or $x2801 $x1884)) @x8699 $x1884) false)))
(let (($x3381 (not $x1864)))
(let ((@x6859 (hypothesis $x2760)))
(let ((@x6910 (unit-resolution (def-axiom (or $x2755 $x3381)) @x6859 $x3381)))
(let (($x6437 (<= (+ ?x254 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!16))) 0)))
(let (($x4947 (fun_app$ v_b_Visited_G_1$ ?v1!16)))
(let (($x6336 (= ?v1!16 v_b_v_G_1$)))
(let (($x8534 (or $x6336 $x4947)))
(let (($x6263 (fun_app$ ?x260 ?v1!16)))
(let (($x6346 (= $x6263 $x8534)))
(let (($x8582 (or $x4134 $x6346)))
(let ((@x8309 (monotonicity (rewrite (= (ite $x6336 true $x4947) $x8534)) (= (= $x6263 (ite $x6336 true $x4947)) $x6346))))
(let ((@x8586 (monotonicity @x8309 (= (or $x4134 (= $x6263 (ite $x6336 true $x4947))) $x8582))))
(let ((@x8591 (trans @x8586 (rewrite (= $x8582 $x8582)) (= (or $x4134 (= $x6263 (ite $x6336 true $x4947))) $x8582))))
(let ((@x8592 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v1!16) (or $x4134 (= $x6263 (ite $x6336 true $x4947)))) @x8591 $x8582)))
(let ((@x7062 (monotonicity (symm (monotonicity @x6739 (= $x6263 $x1855)) (= $x1855 $x6263)) (= (not $x1855) (not $x6263)))))
(let ((@x7109 (mp (unit-resolution (def-axiom (or $x2755 (not $x1855))) @x6859 (not $x1855)) @x7062 (not $x6263))))
(let ((@x7053 (unit-resolution (def-axiom (or (not $x6346) $x6263 (not $x8534))) @x7109 (unit-resolution @x8592 @x3468 $x6346) (not $x8534))))
(let (($x7664 (or $x4947 $x6437)))
(let ((@x7108 (unit-resolution (def-axiom (or $x3804 $x3655)) @x4802 $x3655)))
(let (($x6930 (or $x3660 $x4947 $x6437)))
(let (($x7189 (>= (+ (fun_app$a v_b_SP_G_1$ ?v1!16) ?x1168) 0)))
(let (($x7192 (or $x4947 $x7189)))
(let (($x7392 (or $x3660 $x7192)))
(let ((@x6696 (rewrite (= (>= (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)) 0) $x6437))))
(let (($x7657 (= (+ (fun_app$a v_b_SP_G_1$ ?v1!16) ?x1168) (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)))))
(let ((@x6394 (monotonicity (rewrite $x7657) (= $x7189 (>= (+ ?x1168 (fun_app$a v_b_SP_G_1$ ?v1!16)) 0)))))
(let ((@x7789 (monotonicity (monotonicity (trans @x6394 @x6696 (= $x7189 $x6437)) (= $x7192 $x7664)) (= $x7392 (or $x3660 $x7664)))))
(let ((@x7788 (mp ((_ quant-inst ?v1!16) $x7392) (trans @x7789 (rewrite (= (or $x3660 $x7664) $x6930)) (= $x7392 $x6930)) $x6930)))
(let ((@x7110 (unit-resolution (unit-resolution @x7788 @x7108 $x7664) (unit-resolution (def-axiom (or $x8534 (not $x4947))) @x7053 (not $x4947)) $x6437)))
(let (($x6906 (<= (+ (v_b_SP_G_2$ ?v0!17) (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!17))) 0)))
(let (($x7394 (or $x3686 $x6906)))
(let (($x6869 (>= (+ (fun_app$a v_b_SP_G_1$ ?v0!17) (* (- 1) (v_b_SP_G_2$ ?v0!17))) 0)))
(let (($x7794 (>= (+ (* (- 1) (v_b_SP_G_2$ ?v0!17)) (fun_app$a v_b_SP_G_1$ ?v0!17)) 0)))
(let (($x7505 (= (+ (fun_app$a v_b_SP_G_1$ ?v0!17) (* (- 1) (v_b_SP_G_2$ ?v0!17))) (+ (* (- 1) (v_b_SP_G_2$ ?v0!17)) (fun_app$a v_b_SP_G_1$ ?v0!17)))))
(let ((@x6937 (trans (monotonicity (rewrite $x7505) (= $x6869 $x7794)) (rewrite (= $x7794 $x6906)) (= $x6869 $x6906))))
(let ((@x7419 (trans (monotonicity @x6937 (= (or $x3686 $x6869) $x7394)) (rewrite (= $x7394 $x7394)) (= (or $x3686 $x6869) $x7394))))
(let (($x6920 (>= (+ (v_b_SP_G_2$ ?v1!16) (* (- 1) (fun_app$a v_b_SP_G_1$ ?v1!16))) 0)))
(let ((?x6958 (fun_app$a v_b_SP_G_1$ ?v1!16)))
(let ((?x1860 (v_b_SP_G_2$ ?v1!16)))
(let (($x6841 (= ?x1860 ?x6958)))
(let (($x7027 (>= (+ ?x254 (b_G$ (pair$ v_b_v_G_1$ ?v1!16)) (* (- 1) ?x6958)) 0)))
(let (($x6231 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ ?v1!16)))) 0)))
(let (($x7455 (or $x6231 $x7027)))
(let ((?x6824 (pair$ v_b_v_G_1$ ?v1!16)))
(let ((?x6825 (b_G$ ?x6824)))
(let ((?x6938 (* (- 1) ?x1860)))
(let ((?x6929 (+ ?x254 ?x6938 ?x6825)))
(let (($x7553 (= ?x6929 0)))
(let (($x7206 (not $x7553)))
(let (($x6067 (<= ?x6929 0)))
(let (($x6919 (not $x6067)))
(let (($x6631 (fun_app$ v_b_Visited_G_1$ ?v0!17)))
(let (($x6844 (= ?v0!17 v_b_v_G_1$)))
(let (($x6265 (or $x6844 $x6631)))
(let (($x6895 (fun_app$ ?x260 ?v0!17)))
(let (($x6665 (= $x6895 $x6265)))
(let (($x5717 (or $x4134 $x6665)))
(let ((@x6990 (monotonicity (rewrite (= (ite $x6844 true $x6631) $x6265)) (= (= $x6895 (ite $x6844 true $x6631)) $x6665))))
(let ((@x7528 (monotonicity @x6990 (= (or $x4134 (= $x6895 (ite $x6844 true $x6631))) $x5717))))
(let ((@x7133 (trans @x7528 (rewrite (= $x5717 $x5717)) (= (or $x4134 (= $x6895 (ite $x6844 true $x6631))) $x5717))))
(let ((@x7043 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!17) (or $x4134 (= $x6895 (ite $x6844 true $x6631)))) @x7133 $x5717)))
(let ((@x7214 (mp (unit-resolution (def-axiom (or $x2755 $x1857)) @x6859 $x1857) (symm (monotonicity @x6739 (= $x6895 $x1857)) (= $x1857 $x6895)) $x6895)))
(let ((@x7215 (unit-resolution (def-axiom (or (not $x6665) (not $x6895) $x6265)) @x7214 (unit-resolution @x7043 @x3468 $x6665) $x6265)))
(let (($x7558 (<= ?x6825 0)))
(let (($x7559 (not $x7558)))
(let ((@x6953 (symm (commutativity (= (= v_b_v_G_1$ ?v1!16) $x6336)) (= $x6336 (= v_b_v_G_1$ ?v1!16)))))
(let ((@x6769 (mp (hypothesis (not $x6336)) (monotonicity @x6953 (= (not $x6336) (not (= v_b_v_G_1$ ?v1!16)))) (not (= v_b_v_G_1$ ?v1!16)))))
(let (($x7557 (= v_b_v_G_1$ ?v1!16)))
(let (($x7560 (or $x7557 $x7559)))
(let ((@x5992 (mp ((_ quant-inst v_b_v_G_1$ ?v1!16) (or (not $x3475) $x7560)) (rewrite (= (or (not $x3475) $x7560) (or (not $x3475) $x7557 $x7559))) (or (not $x3475) $x7557 $x7559))))
(let ((@x6161 (hypothesis $x3381)))
(let ((?x6285 (fun_app$a v_b_SP_G_1$ ?v0!17)))
(let ((?x6904 (* (- 1) ?x6285)))
(let ((?x7131 (+ ?x254 ?x6904)))
(let (($x6000 (>= ?x7131 0)))
(let (($x6858 (not $x6844)))
(let ((?x1861 (v_b_SP_G_2$ ?v0!17)))
(let (($x6188 (= ?x1861 ?x3063)))
(let (($x5847 (not $x6188)))
(let ((?x5089 (+ ?x1861 ?x3064)))
(let (($x5848 (<= ?x5089 0)))
(let (($x6925 (not $x5848)))
(let ((@x6267 (hypothesis $x6067)))
(let (($x3906 (>= ?x3904 0)))
(let (($x4341 (or $x3686 $x3906)))
(let ((@x4906 ((_ quant-inst v_b_v_G_1$) $x4341)))
(let ((@x6160 (unit-resolution @x4906 @x4714 $x3906)))
(let ((@x6971 (lemma ((_ th-lemma arith farkas 1 1 1 1 1) @x6267 (hypothesis $x5848) @x6161 @x6160 (hypothesis $x7559) false) (or $x6925 $x6919 $x1864 $x7558))))
(let ((@x6928 (unit-resolution @x6971 @x6267 @x6161 (unit-resolution (unit-resolution @x5992 @x3480 $x7560) @x6769 $x7559) $x6925)))
(let ((@x6532 ((_ th-lemma arith triangle-eq) (or $x5847 $x5848))))
(let ((@x5114 (unit-resolution (hypothesis $x5847) (monotonicity (hypothesis $x6844) $x6188) false)))
(let ((@x5115 (lemma @x5114 (or $x6858 $x6188))))
(let ((@x8623 (def-axiom (or (not $x6265) $x6844 $x6631))))
(let ((@x4834 (unit-resolution @x8623 (unit-resolution @x5115 (unit-resolution @x6532 @x6928 $x5847) $x6858) (hypothesis $x6265) $x6631)))
(let (($x5475 (= (or $x3565 (or $x252 (not $x6631) $x6000)) (or $x3565 $x252 (not $x6631) $x6000))))
(let ((@x5735 (mp ((_ quant-inst ?v0!17 v_b_v_G_1$) (or $x3565 (or $x252 (not $x6631) $x6000))) (rewrite $x5475) (or $x3565 $x252 (not $x6631) $x6000))))
(let ((@x6914 ((_ th-lemma arith farkas 1 1 1 1 1) @x6267 (unit-resolution @x5735 @x6683 @x6066 @x4834 $x6000) (unit-resolution (mp ((_ quant-inst ?v0!17) (or $x3686 $x6869)) @x7419 $x7394) @x4714 $x6906) @x6161 (unit-resolution (unit-resolution @x5992 @x3480 $x7560) @x6769 $x7559) false)))
(let ((@x7217 (unit-resolution (lemma @x6914 (or $x6919 $x1864 (not $x6265) $x6336)) @x6910 @x7215 (unit-resolution (def-axiom (or $x8534 (not $x6336))) @x7053 (not $x6336)) $x6919)))
(let ((@x6357 (unit-resolution (def-axiom (or $x7455 (not $x6231))) (hypothesis (not $x7455)) (not $x6231))))
(let ((@x6426 (unit-resolution (def-axiom (or $x7455 (not $x7027))) (hypothesis (not $x7455)) (not $x7027))))
(let (($x7603 (or $x6231 $x7027 $x7553)))
(let (($x5113 (or $x3670 $x6231 $x7027 $x7553)))
(let (($x6826 (<= (+ ?x6958 ?x1168 (* (- 1) ?x6825)) 0)))
(let (($x6927 (or $x6231 $x6826 (= (+ ?x254 ?x6825 ?x6938) 0))))
(let (($x7688 (or $x3670 $x6927)))
(let ((@x7602 (monotonicity (rewrite (= (+ ?x254 ?x6825 ?x6938) ?x6929)) (= (= (+ ?x254 ?x6825 ?x6938) 0) $x7553))))
(let ((@x7947 (rewrite (= (+ ?x6958 ?x1168 (* (- 1) ?x6825)) (+ ?x1168 (* (- 1) ?x6825) ?x6958)))))
(let ((@x7737 (monotonicity @x7947 (= $x6826 (<= (+ ?x1168 (* (- 1) ?x6825) ?x6958) 0)))))
(let ((@x8385 (trans @x7737 (rewrite (= (<= (+ ?x1168 (* (- 1) ?x6825) ?x6958) 0) $x7027)) (= $x6826 $x7027))))
(let ((@x6604 (monotonicity (monotonicity @x8385 @x7602 (= $x6927 $x7603)) (= $x7688 (or $x3670 $x7603)))))
(let ((@x7391 (mp ((_ quant-inst ?v1!16) $x7688) (trans @x6604 (rewrite (= (or $x3670 $x7603) $x5113)) (= $x7688 $x5113)) $x5113)))
(let ((@x4197 (unit-resolution (unit-resolution @x7391 @x4789 $x7603) @x6426 @x6357 (hypothesis $x7206) false)))
(let ((@x7250 (unit-resolution (lemma @x4197 (or $x7455 $x7553)) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7206 $x6067)) @x7217 $x7206) $x7455)))
(let (($x7639 (not $x7455)))
(let (($x7673 (or $x7639 $x6841)))
(let (($x7669 (or $x3678 $x7639 $x6841)))
(let ((@x7671 (monotonicity (monotonicity @x8385 (= (or $x6231 $x6826) $x7455)) (= (not (or $x6231 $x6826)) $x7639))))
(let ((@x7677 (monotonicity (monotonicity @x7671 (= (or (not (or $x6231 $x6826)) $x6841) $x7673)) (= (or $x3678 (or (not (or $x6231 $x6826)) $x6841)) (or $x3678 $x7673)))))
(let ((@x7387 (trans @x7677 (rewrite (= (or $x3678 $x7673) $x7669)) (= (or $x3678 (or (not (or $x6231 $x6826)) $x6841)) $x7669))))
(let ((@x7252 (unit-resolution (mp ((_ quant-inst ?v1!16) (or $x3678 (or (not (or $x6231 $x6826)) $x6841))) @x7387 $x7669) @x4803 $x7673)))
(let ((@x7315 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6841) $x6920)) (unit-resolution @x7252 @x7250 $x6841) $x6920)))
(let ((@x7323 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1 -1) (or (not $x6000) (not $x6437) (not $x6920) (not $x6906) $x1864)) @x7315 (unit-resolution (mp ((_ quant-inst ?v0!17) (or $x3686 $x6869)) @x7419 $x7394) @x4714 $x6906) @x7110 @x6910 (not $x6000))))
(let ((@x7351 (unit-resolution ((_ th-lemma arith assign-bounds -1 1 -1 1) (or $x6925 (not $x3906) (not $x6437) (not $x6920) $x1864)) @x7315 @x6160 @x7110 @x6910 $x6925)))
(let ((@x7364 (unit-resolution @x8623 (unit-resolution @x5115 (unit-resolution @x6532 @x7351 $x5847) $x6858) @x7215 $x6631)))
(let (($x6106 (not (<= (b_G$ (pair$ v_b_v_G_1$ ?v0!15)) 0))))
(let (($x5808 (= v_b_v_G_1$ ?v0!15)))
(let (($x5324 (not $x5808)))
(let ((@x6624 (symm (commutativity (= $x5808 (= ?v0!15 v_b_v_G_1$))) (= (= ?v0!15 v_b_v_G_1$) $x5808))))
(let (($x6044 (= ?v0!15 v_b_v_G_1$)))
(let (($x6867 (not $x6044)))
(let (($x5521 (fun_app$ v_b_Visited_G_1$ ?v0!15)))
(let (($x6849 (or $x6044 $x5521)))
(let (($x6408 (fun_app$ ?x260 ?v0!15)))
(let (($x6494 (= $x6408 $x6849)))
(let (($x5683 (or $x4134 $x6494)))
(let ((@x6072 (monotonicity (rewrite (= (ite $x6044 true $x5521) $x6849)) (= (= $x6408 (ite $x6044 true $x5521)) $x6494))))
(let ((@x6772 (monotonicity @x6072 (= (or $x4134 (= $x6408 (ite $x6044 true $x5521))) $x5683))))
(let ((@x5812 (trans @x6772 (rewrite (= $x5683 $x5683)) (= (or $x4134 (= $x6408 (ite $x6044 true $x5521))) $x5683))))
(let ((@x5804 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!15) (or $x4134 (= $x6408 (ite $x6044 true $x5521)))) @x5812 $x5683)))
(let ((@x6715 (symm (monotonicity @x6739 (= $x6408 (fun_app$ v_b_Visited_G_2$ ?v0!15))) (= (fun_app$ v_b_Visited_G_2$ ?v0!15) $x6408))))
(let ((@x6719 (monotonicity @x6715 (= (not (fun_app$ v_b_Visited_G_2$ ?v0!15)) (not $x6408)))))
(let (($x6151 (fun_app$ v_b_Visited_G_2$ ?v0!15)))
(let (($x6527 (not $x6151)))
(let ((@x6833 (hypothesis $x1843)))
(let (($x6836 (or (not (>= (+ ?x1841 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!15))) 0)) $x1842)))
(let (($x6830 (>= (+ ?x1841 (* (- 1) (fun_app$a v_b_SP_G_1$ ?v0!15))) 0)))
(let ((?x6459 (fun_app$a v_b_SP_G_1$ ?v0!15)))
(let (($x6119 (>= ?x6459 0)))
(let ((@x4713 (unit-resolution (def-axiom (or $x3816 $x3551)) @x4357 $x3551)))
(let ((@x6834 ((_ th-lemma arith farkas -1 1 1) @x6833 (unit-resolution ((_ quant-inst ?v0!15) (or $x3556 $x6119)) @x4713 $x6119) (hypothesis $x6830) false)))
(let ((@x6656 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1841 ?x6459)) $x6830)) (unit-resolution (lemma @x6834 $x6836) @x6833 (not $x6830)) (not (= ?x1841 ?x6459)))))
(let (($x6618 (= (or $x3695 (or $x6527 (= ?x1841 ?x6459))) (or $x3695 $x6527 (= ?x1841 ?x6459)))))
(let ((@x6610 (mp ((_ quant-inst ?v0!15) (or $x3695 (or $x6527 (= ?x1841 ?x6459)))) (rewrite $x6618) (or $x3695 $x6527 (= ?x1841 ?x6459)))))
(let ((@x6720 (mp (unit-resolution @x6610 (hypothesis $x3690) @x6656 $x6527) @x6719 (not $x6408))))
(let ((@x6725 (unit-resolution (def-axiom (or (not $x6494) $x6408 (not $x6849))) @x6720 (unit-resolution @x5804 @x3468 $x6494) (not $x6849))))
(let ((@x6488 (mp (unit-resolution (def-axiom (or $x6849 $x6867)) @x6725 $x6867) (monotonicity @x6624 (= $x6867 $x5324)) $x5324)))
(let (($x6164 (or $x5808 $x6106)))
(let ((@x5318 (mp ((_ quant-inst v_b_v_G_1$ ?v0!15) (or (not $x3475) $x6164)) (rewrite (= (or (not $x3475) $x6164) (or (not $x3475) $x5808 $x6106))) (or (not $x3475) $x5808 $x6106))))
(let (($x3157 (>= ?x169 0)))
(let ((?x4056 (+ ?x169 ?x1168)))
(let (($x6181 (<= ?x4056 0)))
(let (($x3907 (= v_b_v_G_1$ b_Source$)))
(let ((?x3908 (?v1!7 v_b_v_G_1$)))
(let ((?x3915 (pair$ ?x3908 v_b_v_G_1$)))
(let ((?x3916 (b_G$ ?x3915)))
(let ((?x3917 (* (- 1) ?x3916)))
(let ((?x3909 (fun_app$a v_b_SP_G_1$ ?x3908)))
(let ((?x3910 (* (- 1) ?x3909)))
(let ((?x3918 (+ ?x254 ?x3910 ?x3917)))
(let (($x3919 (= ?x3918 0)))
(let (($x3913 (fun_app$ v_b_Visited_G_1$ ?x3908)))
(let (($x3914 (not $x3913)))
(let ((?x3911 (+ ?x254 ?x3910)))
(let (($x3912 (<= ?x3911 0)))
(let (($x3921 (or $x3912 $x3914 (not $x3919))))
(let (($x4342 (>= ?x3911 0)))
(let (($x6807 (not $x4342)))
(let ((@x6790 (hypothesis $x4342)))
(let (($x5838 (>= ?x3909 0)))
(let ((?x6528 (pair$ v_b_v_G_1$ ?v0!15)))
(let ((?x6529 (b_G$ ?x6528)))
(let ((?x6364 (* (- 1) ?x1841)))
(let ((?x5981 (+ ?x254 ?x6364 ?x6529)))
(let (($x6866 (<= ?x5981 0)))
(let (($x6554 (= ?x5981 0)))
(let (($x5936 (>= (+ ?x254 (* (- 1) ?x6459) ?x6529) 0)))
(let (($x6303 (<= (+ b_Infinity$ (* (- 1) ?x6529)) 0)))
(let (($x3933 (or $x6303 $x5936)))
(let (($x6288 (not $x3933)))
(let (($x6486 (= ?x1841 ?x6459)))
(let (($x6685 (or $x3678 $x6288 $x6486)))
(let (($x6462 (or (not (or $x6303 (<= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) 0))) $x6486)))
(let (($x6686 (or $x3678 $x6462)))
(let (($x5681 (<= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) 0)))
(let ((@x3990 (rewrite (= (+ ?x6459 ?x1168 (* (- 1) ?x6529)) (+ ?x1168 ?x6459 (* (- 1) ?x6529))))))
(let ((@x4138 (monotonicity @x3990 (= $x5681 (<= (+ ?x1168 ?x6459 (* (- 1) ?x6529)) 0)))))
(let ((@x3932 (trans @x4138 (rewrite (= (<= (+ ?x1168 ?x6459 (* (- 1) ?x6529)) 0) $x5936)) (= $x5681 $x5936))))
(let ((@x6693 (monotonicity (monotonicity @x3932 (= (or $x6303 $x5681) $x3933)) (= (not (or $x6303 $x5681)) $x6288))))
(let ((@x6509 (monotonicity (monotonicity @x6693 (= $x6462 (or $x6288 $x6486))) (= $x6686 (or $x3678 (or $x6288 $x6486))))))
(let ((@x5868 (trans @x6509 (rewrite (= (or $x3678 (or $x6288 $x6486)) $x6685)) (= $x6686 $x6685))))
(let ((@x6885 (unit-resolution (def-axiom (or $x3933 (not $x6303))) (hypothesis $x6288) (not $x6303))))
(let ((@x6886 (unit-resolution (def-axiom (or $x3933 (not $x5936))) (hypothesis $x6288) (not $x5936))))
(let (($x4983 (or $x6303 $x5936 $x6554)))
(let (($x3903 (or $x3670 $x6303 $x5936 $x6554)))
(let (($x5258 (or $x6303 $x5681 (= (+ ?x254 ?x6529 ?x6364) 0))))
(let (($x4854 (or $x3670 $x5258)))
(let ((@x4987 (monotonicity (rewrite (= (+ ?x254 ?x6529 ?x6364) ?x5981)) (= (= (+ ?x254 ?x6529 ?x6364) 0) $x6554))))
(let ((@x5496 (monotonicity (monotonicity @x3932 @x4987 (= $x5258 $x4983)) (= $x4854 (or $x3670 $x4983)))))
(let ((@x5069 (mp ((_ quant-inst ?v0!15) $x4854) (trans @x5496 (rewrite (= (or $x3670 $x4983) $x3903)) (= $x4854 $x3903)) $x3903)))
(let ((@x6888 (unit-resolution (unit-resolution @x5069 @x4789 $x4983) @x6886 @x6885 (hypothesis (not $x6554)) false)))
(let ((@x6099 (unit-resolution (lemma @x6888 (or $x3933 $x6554)) (unit-resolution (mp ((_ quant-inst ?v0!15) $x6686) @x5868 $x6685) @x4803 @x6656 $x6288) $x6554)))
(let ((@x6871 ((_ th-lemma arith farkas 1 1 1 1 1) @x6833 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6554) $x6866)) @x6099 $x6866) (unit-resolution ((_ quant-inst (?v1!7 v_b_v_G_1$)) (or $x3556 $x5838)) @x4713 $x5838) @x6790 (unit-resolution (unit-resolution @x5318 @x3480 $x6164) @x6488 $x6106) false)))
(let ((@x6225 (unit-resolution (lemma @x6871 (or $x3695 $x1842 $x6807)) (hypothesis $x3690) @x6833 $x6807)))
(let ((@x3174 (def-axiom (or $x3921 (not $x3912)))))
(let ((@x6645 (unit-resolution @x3174 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x4342 $x3912)) @x6225 $x3912) $x3921)))
(let (($x3922 (not $x3921)))
(let (($x4599 (or $x3581 $x3907 $x1208 $x3922)))
(let ((@x4617 (mp ((_ quant-inst v_b_v_G_1$) (or $x3581 (or $x3907 $x1208 $x3922))) (rewrite (= (or $x3581 (or $x3907 $x1208 $x3922)) $x4599)) $x4599)))
(let ((@x6649 (unit-resolution @x4617 @x4189 (unit-resolution (def-axiom (or $x3804 $x1209)) @x4802 $x1209) (or $x3907 $x3922))))
(let ((@x5588 (symm (monotonicity (unit-resolution @x6649 @x6645 $x3907) (= ?x254 ?x169)) (= ?x169 ?x254))))
(let ((@x5241 ((_ th-lemma arith farkas 1 1 1 1 1) @x6833 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x6554) $x6866)) @x6099 $x6866) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x169 ?x254)) $x6181)) @x5588 $x6181) (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2947 $x3157)) @x4135 $x3157) (unit-resolution (unit-resolution @x5318 @x3480 $x6164) @x6488 $x6106) false)))
(let ((@x8742 (unit-resolution (def-axiom (or $x3780 $x3774)) (unit-resolution @x9261 (lemma @x5791 $x1824) $x3783) $x3774)))
(let (($x4076 (= ?x291 ?x169)))
(let (($x4073 (<= (+ ?x169 ?x1168 (* (- 1) (b_G$ (pair$ v_b_v_G_1$ b_Source$)))) 0)))
(let (($x4071 (<= (+ b_Infinity$ (* (- 1) (b_G$ (pair$ v_b_v_G_1$ b_Source$)))) 0)))
(let (($x4074 (or $x4071 $x4073)))
(let (($x3924 (>= ?x254 0)))
(let (($x4636 (or $x3556 $x3924)))
(let ((@x4637 ((_ quant-inst v_b_v_G_1$) $x4636)))
(let (($x4075 (not $x4074)))
(let ((@x5775 (hypothesis $x4075)))
(let ((?x4061 (pair$ v_b_v_G_1$ b_Source$)))
(let ((?x4062 (b_G$ ?x4061)))
(let (($x5863 (>= ?x4062 0)))
(let (($x5333 (= ?x4062 0)))
(let (($x5329 (<= ?x4062 0)))
(let (($x4173 (<= ?x291 0)))
(let ((?x4078 (* (- 1) ?x291)))
(let ((?x4144 (+ ?x169 ?x4078)))
(let (($x4145 (>= ?x4144 0)))
(let (($x4905 (or $x3686 $x4145)))
(let ((@x5229 ((_ quant-inst b_Source$) $x4905)))
(let (($x3158 (<= ?x169 0)))
(let ((@x4838 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x2947 $x3158)) @x4135 $x3158)))
(let ((@x4827 (unit-resolution ((_ th-lemma arith assign-bounds -1 1) (or $x4173 (not $x3158) (not $x4145))) @x4838 (unit-resolution @x5229 @x4714 $x4145) $x4173)))
(let ((?x4096 (+ ?x254 ?x4078 ?x4062)))
(let (($x4116 (<= ?x4096 0)))
(let (($x4099 (= ?x4096 0)))
(let (($x4102 (or $x4071 $x4073 $x4099)))
(let (($x4105 (or $x3670 $x4071 $x4073 $x4099)))
(let (($x4095 (or $x4071 $x4073 (= (+ ?x254 ?x4062 ?x4078) 0))))
(let (($x4106 (or $x3670 $x4095)))
(let ((@x4101 (monotonicity (rewrite (= (+ ?x254 ?x4062 ?x4078) ?x4096)) (= (= (+ ?x254 ?x4062 ?x4078) 0) $x4099))))
(let ((@x4110 (monotonicity (monotonicity @x4101 (= $x4095 $x4102)) (= $x4106 (or $x3670 $x4102)))))
(let ((@x4115 (mp ((_ quant-inst b_Source$) $x4106) (trans @x4110 (rewrite (= (or $x3670 $x4102) $x4105)) (= $x4106 $x4105)) $x4105)))
(let ((@x5780 (unit-resolution (unit-resolution @x4115 (hypothesis $x3665) $x4102) (unit-resolution (def-axiom (or $x4074 (not $x4073))) @x5775 (not $x4073)) (unit-resolution (def-axiom (or $x4074 (not $x4071))) @x5775 (not $x4071)) (hypothesis (not $x4099)) false)))
(let ((@x4831 (unit-resolution (lemma @x5780 (or $x4074 $x4099 $x3670)) @x4789 (or $x4074 $x4099))))
(let ((@x4846 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x4099) $x4116)) (unit-resolution @x4831 @x5775 $x4099) $x4116)))
(let ((@x5939 ((_ th-lemma arith farkas -1 1 -1 1) (hypothesis $x3924) (hypothesis $x4173) (hypothesis (not $x5329)) (hypothesis $x4116) false)))
(let ((@x4867 (unit-resolution (lemma @x5939 (or $x5329 (not $x3924) (not $x4173) (not $x4116))) (unit-resolution @x4637 @x4713 $x3924) (or $x5329 (not $x4173) (not $x4116)))))
(let (($x5274 (= (or (not $x3475) (or $x3907 (not $x5329))) (or (not $x3475) $x3907 (not $x5329)))))
(let ((@x5275 (mp ((_ quant-inst v_b_v_G_1$ b_Source$) (or (not $x3475) (or $x3907 (not $x5329)))) (rewrite $x5274) (or (not $x3475) $x3907 (not $x5329)))))
(let ((@x5099 (rewrite (= (or $x3045 (or (not $x3907) $x5333)) (or $x3045 (not $x3907) $x5333)))))
(let ((@x5081 (mp ((_ quant-inst v_b_v_G_1$ b_Source$) (or $x3045 (or (not $x3907) $x5333))) @x5099 (or $x3045 (not $x3907) $x5333))))
(let ((@x4868 (unit-resolution @x5081 @x3474 (unit-resolution @x5275 @x3480 (unit-resolution @x4867 @x4846 @x4827 $x5329) $x3907) $x5333)))
(let ((@x4872 ((_ th-lemma arith farkas -1 1 1 1) @x4838 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x5333) $x5863)) @x4868 $x5863) (unit-resolution (def-axiom (or $x4074 (not $x4073))) @x5775 (not $x4073)) (unit-resolution @x4637 @x4713 $x3924) false)))
(let (($x4077 (or $x4075 $x4076)))
(let (($x5055 (or $x3678 $x4075 $x4076)))
(let ((@x5303 (mp ((_ quant-inst b_Source$) (or $x3678 $x4077)) (rewrite (= (or $x3678 $x4077) $x5055)) $x5055)))
(let ((@x8878 (unit-resolution (unit-resolution @x5303 @x4803 $x4077) (lemma @x4872 $x4074) $x4076)))
(let ((@x9287 (unit-resolution (def-axiom (or $x3777 $x768 $x3771)) (mp @x8878 (monotonicity @x4135 (= $x4076 $x292)) $x292) (or $x3777 $x3771))))
(let ((@x8755 (unit-resolution (def-axiom (or $x3768 $x3762)) (unit-resolution @x9287 @x8742 $x3771) $x3762)))
(let ((@x8979 (unit-resolution (def-axiom (or $x3765 $x1843 $x3759)) @x8755 (unit-resolution (lemma @x5241 (or $x3695 $x1842)) @x9263 $x1842) $x3759)))
(let ((@x9416 (unit-resolution (def-axiom (or $x3753 $x2760 $x3747)) (unit-resolution (def-axiom (or $x3756 $x3750)) @x8979 $x3750) $x3750)))
(let ((@x9452 (unit-resolution @x9416 (lemma (unit-resolution @x5735 @x6683 @x6066 @x7364 @x7323 false) $x2755) $x3747)))
(let ((@x9454 (unit-resolution (def-axiom (or $x3741 $x2806 $x3735)) (unit-resolution (def-axiom (or $x3744 $x3738)) @x9452 $x3738) $x3738)))
(let ((@x9455 (unit-resolution @x9454 (lemma @x7807 $x2801) $x3735)))
(let ((@x9475 (unit-resolution (def-axiom (or $x3732 $x1910)) @x9455 $x1910)))
(let ((@x9478 ((_ th-lemma arith farkas -1 1 1) (hypothesis (<= (+ b_Infinity$ ?x4438) 0)) @x9476 @x9475 false)))
(let ((@x9241 (unit-resolution (lemma @x9478 (or $x9479 (not (<= (+ b_Infinity$ ?x4438) 0)))) @x9476 (not (<= (+ b_Infinity$ ?x4438) 0)))))
(let (($x4660 (<= (+ b_Infinity$ ?x4438) 0)))
(let (($x8499 (or $x3581 $x1904 $x4660 $x4675)))
(let ((@x7305 (mp ((_ quant-inst ?v0!20) (or $x3581 (or $x1904 $x4660 $x4675))) (rewrite (= (or $x3581 (or $x1904 $x4660 $x4675)) $x8499)) $x8499)))
(let ((@x9599 (unit-resolution @x7305 @x4189 (unit-resolution (def-axiom (or $x3732 $x1905)) @x9455 $x1905) (or $x4660 $x4675))))
(let ((@x9582 (unit-resolution @x9599 @x9241 $x4675)))
(let ((?x4717 (v_b_SP_G_2$ ?x4661)))
(let ((?x4720 (* (- 1) ?x4717)))
(let ((?x4721 (+ ?x4662 ?x4720)))
(let (($x4728 (>= ?x4721 0)))
(let ((@x9586 ((_ th-lemma arith farkas 1 1 -1 1) @x9476 (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3686 $x4728)) @x4714 $x4728) (hypothesis (<= (+ ?x1906 ?x4720) 0)) (unit-resolution (def-axiom (or $x4674 (not $x4665))) @x9582 (not $x4665)) false)))
(let ((@x8898 (unit-resolution (lemma @x9586 $x9588) @x9476 (not (<= (+ ?x1906 ?x4720) 0)))))
(let ((?x7341 (+ ?x1906 ?x4670 ?x4720)))
(let (($x7121 (= ?x7341 0)))
(let (($x5719 (<= ?x7341 0)))
(let (($x4844 (<= (+ b_Infinity$ ?x4670) 0)))
(let (($x8387 (not $x4844)))
(let (($x7025 (>= ?x4671 0)))
(let ((@x8158 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x4673 $x7025)) (unit-resolution (def-axiom (or $x4674 $x4672)) @x9582 $x4672) $x7025)))
(let (($x4825 (>= ?x4662 0)))
(let ((@x8897 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1 -1) (or $x8387 (not $x4825) (not $x7025) $x1909 $x9479)) @x9475 (or $x8387 (not $x4825) (not $x7025) $x9479))))
(let ((@x8874 (unit-resolution @x8897 (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3556 $x4825)) @x4713 $x4825) @x9476 @x8158 $x8387)))
(let (($x4709 (fun_app$ v_b_Visited_G_2$ ?x4661)))
(let ((@x6057 (monotonicity (symm (hypothesis $x261) (= ?x260 v_b_Visited_G_2$)) (= (fun_app$ ?x260 ?x4661) $x4709))))
(let ((@x6061 (monotonicity (symm @x6057 (= $x4709 (fun_app$ ?x260 ?x4661))) (= (not $x4709) (not (fun_app$ ?x260 ?x4661))))))
(let (($x6003 (fun_app$ ?x260 ?x4661)))
(let (($x6010 (= ?x4661 v_b_v_G_1$)))
(let (($x6013 (or $x6010 $x4666)))
(let (($x6016 (= $x6003 $x6013)))
(let (($x6019 (or $x4134 $x6016)))
(let ((@x6018 (monotonicity (rewrite (= (ite $x6010 true $x4666) $x6013)) (= (= $x6003 (ite $x6010 true $x4666)) $x6016))))
(let ((@x6023 (monotonicity @x6018 (= (or $x4134 (= $x6003 (ite $x6010 true $x4666))) $x6019))))
(let ((@x6026 (trans @x6023 (rewrite (= $x6019 $x6019)) (= (or $x4134 (= $x6003 (ite $x6010 true $x4666))) $x6019))))
(let ((@x6027 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true (?v1!7 ?v0!20)) (or $x4134 (= $x6003 (ite $x6010 true $x4666)))) @x6026 $x6019)))
(let ((@x6050 (unit-resolution (def-axiom (or (not $x6016) $x6003 (not $x6013))) (unit-resolution (def-axiom (or $x6013 $x4667)) (hypothesis $x4666) $x6013) (or (not $x6016) $x6003))))
(let ((@x6063 (unit-resolution (unit-resolution @x6050 (unit-resolution @x6027 @x3468 $x6016) $x6003) (mp (hypothesis (not $x4709)) @x6061 (not $x6003)) false)))
(let ((@x8957 (unit-resolution (lemma @x6063 (or $x4709 $x2930 $x4667)) (unit-resolution (def-axiom (or $x3804 $x261)) @x4802 $x261) (or $x4709 $x4667))))
(let ((@x8892 (unit-resolution @x8957 (unit-resolution (def-axiom (or $x4674 $x4666)) @x9582 $x4666) $x4709)))
(let (($x4710 (not $x4709)))
(let (($x6183 (or $x3720 $x4710 $x4844 $x5719)))
(let (($x4848 (>= (+ ?x4669 ?x4717 ?x1907) 0)))
(let (($x4849 (or $x4710 $x4844 $x4848)))
(let (($x7891 (or $x3720 $x4849)))
(let ((@x7340 (monotonicity (rewrite (= (+ ?x4669 ?x4717 ?x1907) (+ ?x1907 ?x4669 ?x4717))) (= $x4848 (>= (+ ?x1907 ?x4669 ?x4717) 0)))))
(let ((@x7415 (trans @x7340 (rewrite (= (>= (+ ?x1907 ?x4669 ?x4717) 0) $x5719)) (= $x4848 $x5719))))
(let ((@x7922 (monotonicity (monotonicity @x7415 (= $x4849 (or $x4710 $x4844 $x5719))) (= $x7891 (or $x3720 (or $x4710 $x4844 $x5719))))))
(let ((@x7119 (trans @x7922 (rewrite (= (or $x3720 (or $x4710 $x4844 $x5719)) $x6183)) (= $x7891 $x6183))))
(let ((@x8954 (unit-resolution (mp ((_ quant-inst ?v0!20 (?v1!7 ?v0!20)) $x7891) @x7119 $x6183) (unit-resolution (def-axiom (or $x3732 $x3715)) @x9455 $x3715) @x8892 (or $x4844 $x5719))))
(let (($x8133 (>= ?x7341 0)))
(let ((@x9055 (unit-resolution ((_ th-lemma arith assign-bounds -1 -1 -1) (or $x8133 (not $x7025) $x9479 (not $x4728))) (unit-resolution ((_ quant-inst (?v1!7 ?v0!20)) (or $x3686 $x4728)) @x4714 $x4728) @x8158 @x9476 $x8133)))
(let ((@x9049 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x7121 (not $x5719) (not $x8133))) @x9055 (unit-resolution @x8954 @x8874 $x5719) $x7121)))
(let (($x7918 (not $x7121)))
(let ((?x4888 (+ ?x1906 ?x4720)))
(let (($x7874 (<= ?x4888 0)))
(let (($x8072 (or $x3729 $x7874 $x4710 $x7918)))
(let (($x4877 (>= (+ ?x4717 ?x1907) 0)))
(let (($x4881 (or $x4877 $x4710 (not (= (+ ?x4717 ?x1907 ?x4669) 0)))))
(let (($x8040 (or $x3729 $x4881)))
(let ((@x6258 (monotonicity (rewrite (= (+ ?x4717 ?x1907 ?x4669) (+ ?x1907 ?x4669 ?x4717))) (= (= (+ ?x4717 ?x1907 ?x4669) 0) (= (+ ?x1907 ?x4669 ?x4717) 0)))))
(let ((@x7178 (trans @x6258 (rewrite (= (= (+ ?x1907 ?x4669 ?x4717) 0) $x7121)) (= (= (+ ?x4717 ?x1907 ?x4669) 0) $x7121))))
(let ((@x7871 (monotonicity (rewrite (= (+ ?x4717 ?x1907) (+ ?x1907 ?x4717))) (= $x4877 (>= (+ ?x1907 ?x4717) 0)))))
(let ((@x7892 (trans @x7871 (rewrite (= (>= (+ ?x1907 ?x4717) 0) $x7874)) (= $x4877 $x7874))))
(let ((@x8041 (monotonicity @x7892 (monotonicity @x7178 (= (not (= (+ ?x4717 ?x1907 ?x4669) 0)) $x7918)) (= $x4881 (or $x7874 $x4710 $x7918)))))
(let ((@x8107 (trans (monotonicity @x8041 (= $x8040 (or $x3729 (or $x7874 $x4710 $x7918)))) (rewrite (= (or $x3729 (or $x7874 $x4710 $x7918)) $x8072)) (= $x8040 $x8072))))
(let ((@x9051 (unit-resolution (mp ((_ quant-inst (?v1!7 ?v0!20)) $x8040) @x8107 $x8072) (unit-resolution (def-axiom (or $x3732 $x3724)) @x9455 $x3724) @x8892 (or $x7874 $x7918))))
(let ((@x10024 (unit-resolution ((_ th-lemma arith triangle-eq) (or (not (= ?x1906 ?x4413)) $x6002)) (lemma (unit-resolution @x9051 @x9049 @x8898 false) $x9479) (not (= ?x1906 ?x4413)))))
(let (($x4420 (= ?x1906 ?x4413)))
(let (($x4423 (or $x4299 $x4420)))
(let (($x8830 (or $x3695 $x4299 $x4420)))
(let ((@x8691 (mp ((_ quant-inst ?v0!20) (or $x3695 $x4423)) (rewrite (= (or $x3695 $x4423) $x8830)) $x8830)))
(let ((@x10120 (mp (unit-resolution (unit-resolution @x8691 @x9263 $x4423) @x10024 $x4299) @x10119 $x9037)))
(let (($x4629 (fun_app$ v_b_Visited_G_1$ ?v0!20)))
(let (($x5238 (= ?v0!20 v_b_v_G_1$)))
(let (($x10274 (or $x5238 $x4629)))
(let (($x10073 (= $x5237 $x10274)))
(let (($x10506 (or $x4134 $x10073)))
(let ((@x10500 (monotonicity (rewrite (= (ite $x5238 true $x4629) $x10274)) (= (= $x5237 (ite $x5238 true $x4629)) $x10073))))
(let ((@x10183 (monotonicity @x10500 (= (or $x4134 (= $x5237 (ite $x5238 true $x4629))) $x10506))))
(let ((@x10372 (trans @x10183 (rewrite (= $x10506 $x10506)) (= (or $x4134 (= $x5237 (ite $x5238 true $x4629))) $x10506))))
(let ((@x10020 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true ?v0!20) (or $x4134 (= $x5237 (ite $x5238 true $x4629)))) @x10372 $x10506)))
(let ((?x4454 (pair$ v_b_v_G_1$ ?v0!20)))
(let ((?x4455 (b_G$ ?x4454)))
(let ((?x4507 (+ ?x254 ?x1907 ?x4455)))
(let (($x4527 (<= ?x4507 0)))
(let (($x8001 (= ?x4507 0)))
(let ((?x9161 (+ ?x254 ?x4438 ?x4455)))
(let (($x9165 (>= ?x9161 0)))
(let ((?x4456 (* (- 1) ?x4455)))
(let ((?x4457 (+ b_Infinity$ ?x4456)))
(let (($x4458 (<= ?x4457 0)))
(let (($x8810 (or $x4458 $x9165)))
(let (($x8814 (not $x8810)))
(let (($x8919 (or $x8814 $x4420)))
(let (($x8679 (or $x3678 $x8814 $x4420)))
(let (($x4463 (or (not (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0))) $x4420)))
(let (($x9386 (or $x3678 $x4463)))
(let ((@x9164 (monotonicity (rewrite (= (+ ?x4413 ?x1168 ?x4456) (+ ?x1168 ?x4413 ?x4456))) (= (<= (+ ?x4413 ?x1168 ?x4456) 0) (<= (+ ?x1168 ?x4413 ?x4456) 0)))))
(let ((@x8891 (trans @x9164 (rewrite (= (<= (+ ?x1168 ?x4413 ?x4456) 0) $x9165)) (= (<= (+ ?x4413 ?x1168 ?x4456) 0) $x9165))))
(let ((@x8813 (monotonicity @x8891 (= (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0)) $x8810))))
(let ((@x8815 (monotonicity @x8813 (= (not (or $x4458 (<= (+ ?x4413 ?x1168 ?x4456) 0))) $x8814))))
(let ((@x9295 (monotonicity (monotonicity @x8815 (= $x4463 $x8919)) (= $x9386 (or $x3678 $x8919)))))
(let ((@x9441 (mp ((_ quant-inst ?v0!20) $x9386) (trans @x9295 (rewrite (= (or $x3678 $x8919) $x8679)) (= $x9386 $x8679)) $x8679)))
(let ((@x9984 (unit-resolution (def-axiom (or $x8810 (not $x4458))) (hypothesis $x8814) (not $x4458))))
(let ((@x9985 (unit-resolution (def-axiom (or $x8810 (not $x9165))) (hypothesis $x8814) (not $x9165))))
(let (($x8926 (or $x4458 $x9165 $x8001)))
(let (($x8928 (or $x3670 $x4458 $x9165 $x8001)))
(let (($x4460 (<= (+ ?x4413 ?x1168 ?x4456) 0)))
(let (($x4506 (or $x4458 $x4460 (= (+ ?x254 ?x4455 ?x1907) 0))))
(let (($x8929 (or $x3670 $x4506)))
(let ((@x8925 (monotonicity (rewrite (= (+ ?x254 ?x4455 ?x1907) ?x4507)) (= (= (+ ?x254 ?x4455 ?x1907) 0) $x8001))))
(let ((@x8953 (monotonicity (monotonicity @x8891 @x8925 (= $x4506 $x8926)) (= $x8929 (or $x3670 $x8926)))))
(let ((@x8682 (mp ((_ quant-inst ?v0!20) $x8929) (trans @x8953 (rewrite (= (or $x3670 $x8926) $x8928)) (= $x8929 $x8928)) $x8928)))
(let ((@x9987 (unit-resolution (unit-resolution @x8682 @x4789 $x8926) @x9985 @x9984 (hypothesis (not $x8001)) false)))
(let ((@x10276 (unit-resolution (lemma @x9987 (or $x8810 $x8001)) (unit-resolution (unit-resolution @x9441 @x4803 $x8919) @x10024 $x8814) $x8001)))
(let ((?x4401 (+ ?x1906 ?x3064)))
(let (($x6992 (<= ?x4401 0)))
(let ((?x4566 (+ ?x1906 ?x3064 ?x4456)))
(let (($x6987 (= ?x4566 0)))
(let (($x4590 (>= ?x4566 0)))
(let ((@x9966 (unit-resolution ((_ th-lemma arith assign-bounds 1 -1) (or (not $x4527) $x4590 (not $x3906))) @x6160 (or (not $x4527) $x4590))))
(let (($x4589 (<= ?x4566 0)))
(let (($x4181 (>= ?x3063 0)))
(let (($x6279 (or $x3703 $x4181)))
(let ((@x6374 ((_ quant-inst v_b_v_G_1$) $x6279)))
(let ((@x9257 (unit-resolution @x6374 (unit-resolution (def-axiom (or $x3756 $x3698)) @x8979 $x3698) $x4181)))
(let (($x4146 (fun_app$ v_b_Visited_G_2$ v_b_v_G_1$)))
(let (($x3097 (fun_app$ ?x260 v_b_v_G_1$)))
(let (($x3456 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :pattern ( (fun_upd$ ?v0 ?v1 ?v2) ) :qid k!33))
))
(let (($x55 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :qid k!33))
))
(let (($x52 (= (fun_app$ (fun_upd$ ?2 ?1 ?0) ?1) ?0)))
(let (($x50 (forall ((?v0 B_Vertex_bool_fun$) (?v1 B_Vertex$) (?v2 Bool) )(! (= (fun_app$ (fun_upd$ ?v0 ?v1 ?v2) ?v1) ?v2) :qid k!33))
))
(let ((@x54 (rewrite (= (= (fun_app$ (fun_upd$ ?2 ?1 ?0) ?1) ?0) $x52))))
(let ((@x1427 (mp~ (mp (asserted $x50) (quant-intro @x54 (= $x50 $x55)) $x55) (nnf-pos (refl (~ $x52 $x52)) (~ $x55 $x55)) $x55)))
(let ((@x3461 (mp @x1427 (quant-intro (refl (= $x52 $x52)) (= $x55 $x3456)) $x3456)))
(let (($x4383 (or (not $x3456) $x3097)))
(let ((@x4480 (monotonicity (rewrite (= (= $x3097 true) $x3097)) (= (or (not $x3456) (= $x3097 true)) $x4383))))
(let ((@x4483 (trans @x4480 (rewrite (= $x4383 $x4383)) (= (or (not $x3456) (= $x3097 true)) $x4383))))
(let ((@x4484 (mp ((_ quant-inst v_b_Visited_G_1$ v_b_v_G_1$ true) (or (not $x3456) (= $x3097 true))) @x4483 $x4383)))
(let ((@x9972 (mp (unit-resolution @x4484 @x3461 $x3097) (monotonicity @x6739 (= $x3097 $x4146)) $x4146)))
(let ((@x5439 (unit-resolution ((_ th-lemma arith farkas 1 1) (or $x4590 $x4589)) (hypothesis (not $x4589)) $x4590)))
(let (($x4147 (not $x4146)))
(let (($x5371 (or $x3720 $x4147 $x4458 $x4589)))
(let ((?x5354 (+ ?x4455 ?x3063 ?x1907)))
(let (($x5355 (>= ?x5354 0)))
(let (($x5358 (or $x4147 $x4458 $x5355)))
(let (($x5372 (or $x3720 $x5358)))
(let ((@x5363 (monotonicity (rewrite (= ?x5354 (+ ?x1907 ?x3063 ?x4455))) (= $x5355 (>= (+ ?x1907 ?x3063 ?x4455) 0)))))
(let ((@x5367 (trans @x5363 (rewrite (= (>= (+ ?x1907 ?x3063 ?x4455) 0) $x4589)) (= $x5355 $x4589))))
(let ((@x5376 (monotonicity (monotonicity @x5367 (= $x5358 (or $x4147 $x4458 $x4589))) (= $x5372 (or $x3720 (or $x4147 $x4458 $x4589))))))
(let ((@x5380 (trans @x5376 (rewrite (= (or $x3720 (or $x4147 $x4458 $x4589)) $x5371)) (= $x5372 $x5371))))
(let ((@x5381 (mp ((_ quant-inst ?v0!20 v_b_v_G_1$) $x5372) @x5380 $x5371)))
(let ((@x5443 (unit-resolution @x5381 (hypothesis $x3715) (hypothesis $x4146) (hypothesis (not $x4589)) $x4458)))
(let ((@x5447 (lemma ((_ th-lemma arith farkas 1 1 1 1) @x5443 (hypothesis $x4181) @x5439 (hypothesis $x1910) false) (or $x4589 (not $x4181) $x1909 $x3720 $x4147))))
(let ((@x9976 (unit-resolution (unit-resolution @x5447 @x9972 (or $x4589 (not $x4181) $x1909 $x3720)) @x9257 (or $x4589 $x1909 $x3720))))
(let ((@x9977 (unit-resolution @x9976 (unit-resolution (def-axiom (or $x3732 $x3715)) @x9455 $x3715) @x9475 $x4589)))
(let ((@x9991 (unit-resolution ((_ th-lemma arith triangle-eq) (or $x6987 (not $x4589) (not $x4590))) @x9977 (or $x6987 (not $x4590)))))
(let ((@x9992 (unit-resolution @x9991 (unit-resolution @x9966 (hypothesis $x4527) $x4590) $x6987)))
(let (($x7023 (not $x6987)))
(let (($x6921 (or $x3729 $x6992 $x4147 $x7023)))
(let (($x4536 (>= (+ ?x3063 ?x1907) 0)))
(let (($x4548 (or $x4536 $x4147 (not (= (+ ?x3063 ?x1907 ?x4455) 0)))))
(let (($x8524 (or $x3729 $x4548)))
(let ((@x7245 (monotonicity (rewrite (= (+ ?x3063 ?x1907 ?x4455) (+ ?x1907 ?x3063 ?x4455))) (= (= (+ ?x3063 ?x1907 ?x4455) 0) (= (+ ?x1907 ?x3063 ?x4455) 0)))))
(let ((@x7022 (trans @x7245 (rewrite (= (= (+ ?x1907 ?x3063 ?x4455) 0) $x6987)) (= (= (+ ?x3063 ?x1907 ?x4455) 0) $x6987))))
(let ((@x7049 (monotonicity (rewrite (= (+ ?x3063 ?x1907) (+ ?x1907 ?x3063))) (= $x4536 (>= (+ ?x1907 ?x3063) 0)))))
(let ((@x8373 (trans @x7049 (rewrite (= (>= (+ ?x1907 ?x3063) 0) $x6992)) (= $x4536 $x6992))))
(let ((@x7936 (monotonicity @x8373 (monotonicity @x7022 (= (not (= (+ ?x3063 ?x1907 ?x4455) 0)) $x7023)) (= $x4548 (or $x6992 $x4147 $x7023)))))
(let ((@x8581 (trans (monotonicity @x7936 (= $x8524 (or $x3729 (or $x6992 $x4147 $x7023)))) (rewrite (= (or $x3729 (or $x6992 $x4147 $x7023)) $x6921)) (= $x8524 $x6921))))
(let ((@x8053 (mp ((_ quant-inst v_b_v_G_1$) $x8524) @x8581 $x6921)))
(let ((@x9995 (unit-resolution @x8053 (unit-resolution (def-axiom (or $x3732 $x3724)) @x9455 $x3724) @x9972 (or $x6992 $x7023))))
(let (($x5406 (<= ?x4455 0)))
(let (($x5407 (not $x5406)))
(let (($x5405 (= v_b_v_G_1$ ?v0!20)))
(let (($x5409 (not $x5405)))
(let ((@x10003 (monotonicity (symm (commutativity (= $x5405 $x5238)) (= $x5238 $x5405)) (= (not $x5238) $x5409))))
(let (($x5408 (or $x5405 $x5407)))
(let (($x3099 (not $x3475)))
(let (($x9955 (or $x3099 $x5405 $x5407)))
(let ((@x9962 (mp ((_ quant-inst v_b_v_G_1$ ?v0!20) (or $x3099 $x5408)) (rewrite (= (or $x3099 $x5408) $x9955)) $x9955)))
(let ((@x10006 (unit-resolution (unit-resolution @x9962 @x3480 $x5408) (mp (hypothesis (not $x5238)) @x10003 $x5409) $x5407)))
(let ((@x10007 ((_ th-lemma arith farkas -1 -1 1 1) @x6160 @x10006 (hypothesis $x4527) (unit-resolution @x9995 @x9992 $x6992) false)))
(let ((@x10279 (unit-resolution (lemma @x10007 (or (not $x4527) $x5238)) (unit-resolution ((_ th-lemma arith triangle-eq) (or (not $x8001) $x4527)) @x10276 $x4527) $x5238)))
(let ((@x10164 (unit-resolution (def-axiom (or (not $x10073) $x5237 (not $x10274))) (unit-resolution (def-axiom (or $x10274 (not $x5238))) @x10279 $x10274) (or (not $x10073) $x5237))))
(unit-resolution (unit-resolution @x10164 (unit-resolution @x10020 @x3468 $x10073) $x5237) @x10120 false

